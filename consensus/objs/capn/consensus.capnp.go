// Code generated by capnpc-go. DO NOT EDIT.

package capn

import (
	capnp "github.com/MadBase/go-capnproto2/v2"
	text "github.com/MadBase/go-capnproto2/v2/encoding/text"
	schemas "github.com/MadBase/go-capnproto2/v2/schemas"
)

// Constants defined in consensus.capnp.
const (
	DefaultRound              = uint32(0)
	DefaultHeight             = uint32(0)
	DefaultChainID            = uint32(0)
	DefaultNumberTransactions = uint32(0)
)

// Constants defined in consensus.capnp.
var (
	DefaultRClaims      = RClaims{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[0:48]).Struct()}
	DefaultBClaims      = BClaims{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[48:144]).Struct()}
	DefaultRCert        = RCert{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[144:216]).Struct()}
	DefaultPClaims      = PClaims{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[216:384]).Struct()}
	DefaultNRClaims     = NRClaims{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[384:520]).Struct()}
	DefaultProposal     = Proposal{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[520:720]).Struct()}
	DefaultNHClaims     = NHClaims{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[720:944]).Struct()}
	DefaultPreVote      = PreVote{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[944:1168]).Struct()}
	DefaultPreCommit    = PreCommit{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[1168:1408]).Struct()}
	DefaultPreVoteNil   = PreVoteNil{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[1408:1504]).Struct()}
	DefaultPreCommitNil = PreCommitNil{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[1504:1600]).Struct()}
	DefaultNextRound    = NextRound{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[1600:1760]).Struct()}
	DefaultNextHeight   = NextHeight{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[1760:2024]).Struct()}
	DefaultBlockHeader  = BlockHeader{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[2024:2160]).Struct()}
)

func init() {
	// Set traversal limit for constants as Uint64Max since they're safe from amplification attacks.
	DefaultRClaims.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultBClaims.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultRCert.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultPClaims.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultNRClaims.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultProposal.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultNHClaims.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultPreVote.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultPreCommit.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultPreVoteNil.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultPreCommitNil.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultNextRound.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultNextHeight.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultBlockHeader.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
}

type RClaims struct{ capnp.Struct }

// RClaims_TypeID is the unique identifier for the type RClaims.
const RClaims_TypeID = 0xb23998c63938dd88

func NewRClaims(s *capnp.Segment) (RClaims, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RClaims{st}, err
}

func NewRootRClaims(s *capnp.Segment) (RClaims, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RClaims{st}, err
}

func ReadRootRClaims(msg *capnp.Message) (RClaims, error) {
	root, err := msg.RootPtr()
	return RClaims{root.Struct()}, err
}

func (s RClaims) String() string {
	str, _ := text.Marshal(0xb23998c63938dd88, s.Struct)
	return str
}

func (s RClaims) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s RClaims) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s RClaims) Height() uint32 {
	return s.Struct.Uint32(4)
}

func (s RClaims) SetHeight(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s RClaims) Round() uint32 {
	return s.Struct.Uint32(8)
}

func (s RClaims) SetRound(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s RClaims) PrevBlock() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s RClaims) HasPrevBlock() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RClaims) SetPrevBlock(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}

// RClaims_List is a list of RClaims.
type RClaims_List struct{ capnp.List }

// NewRClaims creates a new list of RClaims.
func NewRClaims_List(s *capnp.Segment, sz int32) (RClaims_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return RClaims_List{l}, err
}

func (s RClaims_List) At(i int) RClaims { return RClaims{s.List.Struct(i)} }

func (s RClaims_List) Set(i int, v RClaims) error { return s.List.SetStruct(i, v.Struct) }

func (s RClaims_List) String() string {
	str, _ := text.MarshalList(0xb23998c63938dd88, s.List)
	return str
}

// RClaims_Promise is a wrapper for a RClaims promised by a client call.
type RClaims_Promise struct{ *capnp.Pipeline }

func (p RClaims_Promise) Struct() (RClaims, error) {
	s, err := p.Pipeline.Struct()
	return RClaims{s}, err
}

type RCert struct{ capnp.Struct }

// RCert_TypeID is the unique identifier for the type RCert.
const RCert_TypeID = 0xd7182e49f1abd5dc

func NewRCert(s *capnp.Segment) (RCert, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RCert{st}, err
}

func NewRootRCert(s *capnp.Segment) (RCert, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RCert{st}, err
}

func ReadRootRCert(msg *capnp.Message) (RCert, error) {
	root, err := msg.RootPtr()
	return RCert{root.Struct()}, err
}

func (s RCert) String() string {
	str, _ := text.Marshal(0xd7182e49f1abd5dc, s.Struct)
	return str
}

func (s RCert) RClaims() RClaims {
	if !s.HasRClaims() {
		s.NewRClaims()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[2160:2208])
	return RClaims{Struct: ss}
}

func (s RCert) HasRClaims() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RCert) SetRClaims(v RClaims) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRClaims sets the rClaims field to a newly
// allocated RClaims struct, preferring placement in s's segment.
func (s RCert) NewRClaims() (RClaims, error) {
	ss, err := NewRClaims(s.Struct.Segment())
	if err != nil {
		return RClaims{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s RCert) SigGroup() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s RCert) HasSigGroup() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RCert) SetSigGroup(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// RCert_List is a list of RCert.
type RCert_List struct{ capnp.List }

// NewRCert creates a new list of RCert.
func NewRCert_List(s *capnp.Segment, sz int32) (RCert_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return RCert_List{l}, err
}

func (s RCert_List) At(i int) RCert { return RCert{s.List.Struct(i)} }

func (s RCert_List) Set(i int, v RCert) error { return s.List.SetStruct(i, v.Struct) }

func (s RCert_List) String() string {
	str, _ := text.MarshalList(0xd7182e49f1abd5dc, s.List)
	return str
}

// RCert_Promise is a wrapper for a RCert promised by a client call.
type RCert_Promise struct{ *capnp.Pipeline }

func (p RCert_Promise) Struct() (RCert, error) {
	s, err := p.Pipeline.Struct()
	return RCert{s}, err
}

func (p RCert_Promise) RClaims() RClaims_Promise {
	return RClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[2208:2256])}
}

type BClaims struct{ capnp.Struct }

// BClaims_TypeID is the unique identifier for the type BClaims.
const BClaims_TypeID = 0x9113e3f94e338143

func NewBClaims(s *capnp.Segment) (BClaims, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return BClaims{st}, err
}

func NewRootBClaims(s *capnp.Segment) (BClaims, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return BClaims{st}, err
}

func ReadRootBClaims(msg *capnp.Message) (BClaims, error) {
	root, err := msg.RootPtr()
	return BClaims{root.Struct()}, err
}

func (s BClaims) String() string {
	str, _ := text.Marshal(0x9113e3f94e338143, s.Struct)
	return str
}

func (s BClaims) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s BClaims) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s BClaims) Height() uint32 {
	return s.Struct.Uint32(4)
}

func (s BClaims) SetHeight(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s BClaims) PrevBlock() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s BClaims) HasPrevBlock() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BClaims) SetPrevBlock(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s BClaims) TxCount() uint32 {
	return s.Struct.Uint32(8)
}

func (s BClaims) SetTxCount(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s BClaims) TxRoot() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s BClaims) HasTxRoot() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BClaims) SetTxRoot(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s BClaims) StateRoot() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s BClaims) HasStateRoot() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BClaims) SetStateRoot(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}
func (s BClaims) HeaderRoot() []byte {
	p, _ := s.Struct.Ptr(3)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s BClaims) HasHeaderRoot() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s BClaims) SetHeaderRoot(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(3, v)
}

// BClaims_List is a list of BClaims.
type BClaims_List struct{ capnp.List }

// NewBClaims creates a new list of BClaims.
func NewBClaims_List(s *capnp.Segment, sz int32) (BClaims_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return BClaims_List{l}, err
}

func (s BClaims_List) At(i int) BClaims { return BClaims{s.List.Struct(i)} }

func (s BClaims_List) Set(i int, v BClaims) error { return s.List.SetStruct(i, v.Struct) }

func (s BClaims_List) String() string {
	str, _ := text.MarshalList(0x9113e3f94e338143, s.List)
	return str
}

// BClaims_Promise is a wrapper for a BClaims promised by a client call.
type BClaims_Promise struct{ *capnp.Pipeline }

func (p BClaims_Promise) Struct() (BClaims, error) {
	s, err := p.Pipeline.Struct()
	return BClaims{s}, err
}

type PClaims struct{ capnp.Struct }

// PClaims_TypeID is the unique identifier for the type PClaims.
const PClaims_TypeID = 0x9a7cf3b8ccdd561f

func NewPClaims(s *capnp.Segment) (PClaims, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PClaims{st}, err
}

func NewRootPClaims(s *capnp.Segment) (PClaims, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PClaims{st}, err
}

func ReadRootPClaims(msg *capnp.Message) (PClaims, error) {
	root, err := msg.RootPtr()
	return PClaims{root.Struct()}, err
}

func (s PClaims) String() string {
	str, _ := text.Marshal(0x9a7cf3b8ccdd561f, s.Struct)
	return str
}

func (s PClaims) BClaims() BClaims {
	if !s.HasBClaims() {
		s.NewBClaims()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[2256:2352])
	return BClaims{Struct: ss}
}

func (s PClaims) HasBClaims() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PClaims) SetBClaims(v BClaims) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBClaims sets the bClaims field to a newly
// allocated BClaims struct, preferring placement in s's segment.
func (s PClaims) NewBClaims() (BClaims, error) {
	ss, err := NewBClaims(s.Struct.Segment())
	if err != nil {
		return BClaims{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s PClaims) RCert() RCert {
	if !s.HasRCert() {
		s.NewRCert()
	}
	p, _ := s.Struct.Ptr(1)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[2352:2424])
	return RCert{Struct: ss}
}

func (s PClaims) HasRCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PClaims) SetRCert(v RCert) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRCert sets the rCert field to a newly
// allocated RCert struct, preferring placement in s's segment.
func (s PClaims) NewRCert() (RCert, error) {
	ss, err := NewRCert(s.Struct.Segment())
	if err != nil {
		return RCert{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// PClaims_List is a list of PClaims.
type PClaims_List struct{ capnp.List }

// NewPClaims creates a new list of PClaims.
func NewPClaims_List(s *capnp.Segment, sz int32) (PClaims_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PClaims_List{l}, err
}

func (s PClaims_List) At(i int) PClaims { return PClaims{s.List.Struct(i)} }

func (s PClaims_List) Set(i int, v PClaims) error { return s.List.SetStruct(i, v.Struct) }

func (s PClaims_List) String() string {
	str, _ := text.MarshalList(0x9a7cf3b8ccdd561f, s.List)
	return str
}

// PClaims_Promise is a wrapper for a PClaims promised by a client call.
type PClaims_Promise struct{ *capnp.Pipeline }

func (p PClaims_Promise) Struct() (PClaims, error) {
	s, err := p.Pipeline.Struct()
	return PClaims{s}, err
}

func (p PClaims_Promise) BClaims() BClaims_Promise {
	return BClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[2424:2520])}
}

func (p PClaims_Promise) RCert() RCert_Promise {
	return RCert_Promise{Pipeline: p.Pipeline.GetPipelineDefault(1, x_85d3acc39d94e0f8[2520:2592])}
}

type Proposal struct{ capnp.Struct }

// Proposal_TypeID is the unique identifier for the type Proposal.
const Proposal_TypeID = 0x9af13d67202e38f8

func NewProposal(s *capnp.Segment) (Proposal, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Proposal{st}, err
}

func NewRootProposal(s *capnp.Segment) (Proposal, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Proposal{st}, err
}

func ReadRootProposal(msg *capnp.Message) (Proposal, error) {
	root, err := msg.RootPtr()
	return Proposal{root.Struct()}, err
}

func (s Proposal) String() string {
	str, _ := text.Marshal(0x9af13d67202e38f8, s.Struct)
	return str
}

func (s Proposal) PClaims() PClaims {
	if !s.HasPClaims() {
		s.NewPClaims()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[2592:2760])
	return PClaims{Struct: ss}
}

func (s Proposal) HasPClaims() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Proposal) SetPClaims(v PClaims) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPClaims sets the pClaims field to a newly
// allocated PClaims struct, preferring placement in s's segment.
func (s Proposal) NewPClaims() (PClaims, error) {
	ss, err := NewPClaims(s.Struct.Segment())
	if err != nil {
		return PClaims{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s Proposal) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s Proposal) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Proposal) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s Proposal) TxHshLst() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s Proposal) HasTxHshLst() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Proposal) SetTxHshLst(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}

// Proposal_List is a list of Proposal.
type Proposal_List struct{ capnp.List }

// NewProposal creates a new list of Proposal.
func NewProposal_List(s *capnp.Segment, sz int32) (Proposal_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Proposal_List{l}, err
}

func (s Proposal_List) At(i int) Proposal { return Proposal{s.List.Struct(i)} }

func (s Proposal_List) Set(i int, v Proposal) error { return s.List.SetStruct(i, v.Struct) }

func (s Proposal_List) String() string {
	str, _ := text.MarshalList(0x9af13d67202e38f8, s.List)
	return str
}

// Proposal_Promise is a wrapper for a Proposal promised by a client call.
type Proposal_Promise struct{ *capnp.Pipeline }

func (p Proposal_Promise) Struct() (Proposal, error) {
	s, err := p.Pipeline.Struct()
	return Proposal{s}, err
}

func (p Proposal_Promise) PClaims() PClaims_Promise {
	return PClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[2760:2928])}
}

type PreVote struct{ capnp.Struct }

// PreVote_TypeID is the unique identifier for the type PreVote.
const PreVote_TypeID = 0xd6c749583b4cc63a

func NewPreVote(s *capnp.Segment) (PreVote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PreVote{st}, err
}

func NewRootPreVote(s *capnp.Segment) (PreVote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PreVote{st}, err
}

func ReadRootPreVote(msg *capnp.Message) (PreVote, error) {
	root, err := msg.RootPtr()
	return PreVote{root.Struct()}, err
}

func (s PreVote) String() string {
	str, _ := text.Marshal(0xd6c749583b4cc63a, s.Struct)
	return str
}

func (s PreVote) Proposal() Proposal {
	if !s.HasProposal() {
		s.NewProposal()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[2928:3128])
	return Proposal{Struct: ss}
}

func (s PreVote) HasProposal() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PreVote) SetProposal(v Proposal) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewProposal sets the proposal field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s PreVote) NewProposal() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s PreVote) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s PreVote) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PreVote) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// PreVote_List is a list of PreVote.
type PreVote_List struct{ capnp.List }

// NewPreVote creates a new list of PreVote.
func NewPreVote_List(s *capnp.Segment, sz int32) (PreVote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PreVote_List{l}, err
}

func (s PreVote_List) At(i int) PreVote { return PreVote{s.List.Struct(i)} }

func (s PreVote_List) Set(i int, v PreVote) error { return s.List.SetStruct(i, v.Struct) }

func (s PreVote_List) String() string {
	str, _ := text.MarshalList(0xd6c749583b4cc63a, s.List)
	return str
}

// PreVote_Promise is a wrapper for a PreVote promised by a client call.
type PreVote_Promise struct{ *capnp.Pipeline }

func (p PreVote_Promise) Struct() (PreVote, error) {
	s, err := p.Pipeline.Struct()
	return PreVote{s}, err
}

func (p PreVote_Promise) Proposal() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[3128:3328])}
}

type PreVoteNil struct{ capnp.Struct }

// PreVoteNil_TypeID is the unique identifier for the type PreVoteNil.
const PreVoteNil_TypeID = 0xdcd451184d295c70

func NewPreVoteNil(s *capnp.Segment) (PreVoteNil, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PreVoteNil{st}, err
}

func NewRootPreVoteNil(s *capnp.Segment) (PreVoteNil, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PreVoteNil{st}, err
}

func ReadRootPreVoteNil(msg *capnp.Message) (PreVoteNil, error) {
	root, err := msg.RootPtr()
	return PreVoteNil{root.Struct()}, err
}

func (s PreVoteNil) String() string {
	str, _ := text.Marshal(0xdcd451184d295c70, s.Struct)
	return str
}

func (s PreVoteNil) RCert() RCert {
	if !s.HasRCert() {
		s.NewRCert()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[3328:3400])
	return RCert{Struct: ss}
}

func (s PreVoteNil) HasRCert() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PreVoteNil) SetRCert(v RCert) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRCert sets the rCert field to a newly
// allocated RCert struct, preferring placement in s's segment.
func (s PreVoteNil) NewRCert() (RCert, error) {
	ss, err := NewRCert(s.Struct.Segment())
	if err != nil {
		return RCert{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s PreVoteNil) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s PreVoteNil) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PreVoteNil) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// PreVoteNil_List is a list of PreVoteNil.
type PreVoteNil_List struct{ capnp.List }

// NewPreVoteNil creates a new list of PreVoteNil.
func NewPreVoteNil_List(s *capnp.Segment, sz int32) (PreVoteNil_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PreVoteNil_List{l}, err
}

func (s PreVoteNil_List) At(i int) PreVoteNil { return PreVoteNil{s.List.Struct(i)} }

func (s PreVoteNil_List) Set(i int, v PreVoteNil) error { return s.List.SetStruct(i, v.Struct) }

func (s PreVoteNil_List) String() string {
	str, _ := text.MarshalList(0xdcd451184d295c70, s.List)
	return str
}

// PreVoteNil_Promise is a wrapper for a PreVoteNil promised by a client call.
type PreVoteNil_Promise struct{ *capnp.Pipeline }

func (p PreVoteNil_Promise) Struct() (PreVoteNil, error) {
	s, err := p.Pipeline.Struct()
	return PreVoteNil{s}, err
}

func (p PreVoteNil_Promise) RCert() RCert_Promise {
	return RCert_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[3400:3472])}
}

type PreCommit struct{ capnp.Struct }

// PreCommit_TypeID is the unique identifier for the type PreCommit.
const PreCommit_TypeID = 0x962a57a2c30ab3cc

func NewPreCommit(s *capnp.Segment) (PreCommit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PreCommit{st}, err
}

func NewRootPreCommit(s *capnp.Segment) (PreCommit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PreCommit{st}, err
}

func ReadRootPreCommit(msg *capnp.Message) (PreCommit, error) {
	root, err := msg.RootPtr()
	return PreCommit{root.Struct()}, err
}

func (s PreCommit) String() string {
	str, _ := text.Marshal(0x962a57a2c30ab3cc, s.Struct)
	return str
}

func (s PreCommit) Proposal() Proposal {
	if !s.HasProposal() {
		s.NewProposal()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[3472:3672])
	return Proposal{Struct: ss}
}

func (s PreCommit) HasProposal() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PreCommit) SetProposal(v Proposal) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewProposal sets the proposal field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s PreCommit) NewProposal() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s PreCommit) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s PreCommit) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PreCommit) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s PreCommit) PreVotes() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s PreCommit) HasPreVotes() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PreCommit) SetPreVotes(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}

// PreCommit_List is a list of PreCommit.
type PreCommit_List struct{ capnp.List }

// NewPreCommit creates a new list of PreCommit.
func NewPreCommit_List(s *capnp.Segment, sz int32) (PreCommit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return PreCommit_List{l}, err
}

func (s PreCommit_List) At(i int) PreCommit { return PreCommit{s.List.Struct(i)} }

func (s PreCommit_List) Set(i int, v PreCommit) error { return s.List.SetStruct(i, v.Struct) }

func (s PreCommit_List) String() string {
	str, _ := text.MarshalList(0x962a57a2c30ab3cc, s.List)
	return str
}

// PreCommit_Promise is a wrapper for a PreCommit promised by a client call.
type PreCommit_Promise struct{ *capnp.Pipeline }

func (p PreCommit_Promise) Struct() (PreCommit, error) {
	s, err := p.Pipeline.Struct()
	return PreCommit{s}, err
}

func (p PreCommit_Promise) Proposal() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[3672:3872])}
}

type PreCommitNil struct{ capnp.Struct }

// PreCommitNil_TypeID is the unique identifier for the type PreCommitNil.
const PreCommitNil_TypeID = 0x99e482280ba39765

func NewPreCommitNil(s *capnp.Segment) (PreCommitNil, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PreCommitNil{st}, err
}

func NewRootPreCommitNil(s *capnp.Segment) (PreCommitNil, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PreCommitNil{st}, err
}

func ReadRootPreCommitNil(msg *capnp.Message) (PreCommitNil, error) {
	root, err := msg.RootPtr()
	return PreCommitNil{root.Struct()}, err
}

func (s PreCommitNil) String() string {
	str, _ := text.Marshal(0x99e482280ba39765, s.Struct)
	return str
}

func (s PreCommitNil) RCert() RCert {
	if !s.HasRCert() {
		s.NewRCert()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[3872:3944])
	return RCert{Struct: ss}
}

func (s PreCommitNil) HasRCert() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PreCommitNil) SetRCert(v RCert) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRCert sets the rCert field to a newly
// allocated RCert struct, preferring placement in s's segment.
func (s PreCommitNil) NewRCert() (RCert, error) {
	ss, err := NewRCert(s.Struct.Segment())
	if err != nil {
		return RCert{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s PreCommitNil) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s PreCommitNil) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PreCommitNil) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// PreCommitNil_List is a list of PreCommitNil.
type PreCommitNil_List struct{ capnp.List }

// NewPreCommitNil creates a new list of PreCommitNil.
func NewPreCommitNil_List(s *capnp.Segment, sz int32) (PreCommitNil_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PreCommitNil_List{l}, err
}

func (s PreCommitNil_List) At(i int) PreCommitNil { return PreCommitNil{s.List.Struct(i)} }

func (s PreCommitNil_List) Set(i int, v PreCommitNil) error { return s.List.SetStruct(i, v.Struct) }

func (s PreCommitNil_List) String() string {
	str, _ := text.MarshalList(0x99e482280ba39765, s.List)
	return str
}

// PreCommitNil_Promise is a wrapper for a PreCommitNil promised by a client call.
type PreCommitNil_Promise struct{ *capnp.Pipeline }

func (p PreCommitNil_Promise) Struct() (PreCommitNil, error) {
	s, err := p.Pipeline.Struct()
	return PreCommitNil{s}, err
}

func (p PreCommitNil_Promise) RCert() RCert_Promise {
	return RCert_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[3944:4016])}
}

type NRClaims struct{ capnp.Struct }

// NRClaims_TypeID is the unique identifier for the type NRClaims.
const NRClaims_TypeID = 0xa5bcb08c7a601f19

func NewNRClaims(s *capnp.Segment) (NRClaims, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return NRClaims{st}, err
}

func NewRootNRClaims(s *capnp.Segment) (NRClaims, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return NRClaims{st}, err
}

func ReadRootNRClaims(msg *capnp.Message) (NRClaims, error) {
	root, err := msg.RootPtr()
	return NRClaims{root.Struct()}, err
}

func (s NRClaims) String() string {
	str, _ := text.Marshal(0xa5bcb08c7a601f19, s.Struct)
	return str
}

func (s NRClaims) RCert() RCert {
	if !s.HasRCert() {
		s.NewRCert()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[4016:4088])
	return RCert{Struct: ss}
}

func (s NRClaims) HasRCert() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NRClaims) SetRCert(v RCert) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRCert sets the rCert field to a newly
// allocated RCert struct, preferring placement in s's segment.
func (s NRClaims) NewRCert() (RCert, error) {
	ss, err := NewRCert(s.Struct.Segment())
	if err != nil {
		return RCert{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s NRClaims) RClaims() RClaims {
	if !s.HasRClaims() {
		s.NewRClaims()
	}
	p, _ := s.Struct.Ptr(1)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[4088:4136])
	return RClaims{Struct: ss}
}

func (s NRClaims) HasRClaims() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NRClaims) SetRClaims(v RClaims) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRClaims sets the rClaims field to a newly
// allocated RClaims struct, preferring placement in s's segment.
func (s NRClaims) NewRClaims() (RClaims, error) {
	ss, err := NewRClaims(s.Struct.Segment())
	if err != nil {
		return RClaims{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}
func (s NRClaims) SigShare() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s NRClaims) HasSigShare() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s NRClaims) SetSigShare(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}

// NRClaims_List is a list of NRClaims.
type NRClaims_List struct{ capnp.List }

// NewNRClaims creates a new list of NRClaims.
func NewNRClaims_List(s *capnp.Segment, sz int32) (NRClaims_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return NRClaims_List{l}, err
}

func (s NRClaims_List) At(i int) NRClaims { return NRClaims{s.List.Struct(i)} }

func (s NRClaims_List) Set(i int, v NRClaims) error { return s.List.SetStruct(i, v.Struct) }

func (s NRClaims_List) String() string {
	str, _ := text.MarshalList(0xa5bcb08c7a601f19, s.List)
	return str
}

// NRClaims_Promise is a wrapper for a NRClaims promised by a client call.
type NRClaims_Promise struct{ *capnp.Pipeline }

func (p NRClaims_Promise) Struct() (NRClaims, error) {
	s, err := p.Pipeline.Struct()
	return NRClaims{s}, err
}

func (p NRClaims_Promise) RCert() RCert_Promise {
	return RCert_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[4136:4208])}
}

func (p NRClaims_Promise) RClaims() RClaims_Promise {
	return RClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(1, x_85d3acc39d94e0f8[4208:4256])}
}

type NextRound struct{ capnp.Struct }

// NextRound_TypeID is the unique identifier for the type NextRound.
const NextRound_TypeID = 0xdf3021ba1919105b

func NewNextRound(s *capnp.Segment) (NextRound, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NextRound{st}, err
}

func NewRootNextRound(s *capnp.Segment) (NextRound, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NextRound{st}, err
}

func ReadRootNextRound(msg *capnp.Message) (NextRound, error) {
	root, err := msg.RootPtr()
	return NextRound{root.Struct()}, err
}

func (s NextRound) String() string {
	str, _ := text.Marshal(0xdf3021ba1919105b, s.Struct)
	return str
}

func (s NextRound) NRClaims() NRClaims {
	if !s.HasNRClaims() {
		s.NewNRClaims()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[4256:4392])
	return NRClaims{Struct: ss}
}

func (s NextRound) HasNRClaims() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NextRound) SetNRClaims(v NRClaims) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNRClaims sets the nRClaims field to a newly
// allocated NRClaims struct, preferring placement in s's segment.
func (s NextRound) NewNRClaims() (NRClaims, error) {
	ss, err := NewNRClaims(s.Struct.Segment())
	if err != nil {
		return NRClaims{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s NextRound) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s NextRound) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NextRound) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// NextRound_List is a list of NextRound.
type NextRound_List struct{ capnp.List }

// NewNextRound creates a new list of NextRound.
func NewNextRound_List(s *capnp.Segment, sz int32) (NextRound_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return NextRound_List{l}, err
}

func (s NextRound_List) At(i int) NextRound { return NextRound{s.List.Struct(i)} }

func (s NextRound_List) Set(i int, v NextRound) error { return s.List.SetStruct(i, v.Struct) }

func (s NextRound_List) String() string {
	str, _ := text.MarshalList(0xdf3021ba1919105b, s.List)
	return str
}

// NextRound_Promise is a wrapper for a NextRound promised by a client call.
type NextRound_Promise struct{ *capnp.Pipeline }

func (p NextRound_Promise) Struct() (NextRound, error) {
	s, err := p.Pipeline.Struct()
	return NextRound{s}, err
}

func (p NextRound_Promise) NRClaims() NRClaims_Promise {
	return NRClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[4392:4528])}
}

type NHClaims struct{ capnp.Struct }

// NHClaims_TypeID is the unique identifier for the type NHClaims.
const NHClaims_TypeID = 0xcc032017c6d81c9e

func NewNHClaims(s *capnp.Segment) (NHClaims, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NHClaims{st}, err
}

func NewRootNHClaims(s *capnp.Segment) (NHClaims, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NHClaims{st}, err
}

func ReadRootNHClaims(msg *capnp.Message) (NHClaims, error) {
	root, err := msg.RootPtr()
	return NHClaims{root.Struct()}, err
}

func (s NHClaims) String() string {
	str, _ := text.Marshal(0xcc032017c6d81c9e, s.Struct)
	return str
}

func (s NHClaims) Proposal() Proposal {
	if !s.HasProposal() {
		s.NewProposal()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[4528:4728])
	return Proposal{Struct: ss}
}

func (s NHClaims) HasProposal() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NHClaims) SetProposal(v Proposal) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewProposal sets the proposal field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s NHClaims) NewProposal() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s NHClaims) SigShare() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s NHClaims) HasSigShare() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NHClaims) SetSigShare(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// NHClaims_List is a list of NHClaims.
type NHClaims_List struct{ capnp.List }

// NewNHClaims creates a new list of NHClaims.
func NewNHClaims_List(s *capnp.Segment, sz int32) (NHClaims_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return NHClaims_List{l}, err
}

func (s NHClaims_List) At(i int) NHClaims { return NHClaims{s.List.Struct(i)} }

func (s NHClaims_List) Set(i int, v NHClaims) error { return s.List.SetStruct(i, v.Struct) }

func (s NHClaims_List) String() string {
	str, _ := text.MarshalList(0xcc032017c6d81c9e, s.List)
	return str
}

// NHClaims_Promise is a wrapper for a NHClaims promised by a client call.
type NHClaims_Promise struct{ *capnp.Pipeline }

func (p NHClaims_Promise) Struct() (NHClaims, error) {
	s, err := p.Pipeline.Struct()
	return NHClaims{s}, err
}

func (p NHClaims_Promise) Proposal() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[4728:4928])}
}

type NextHeight struct{ capnp.Struct }

// NextHeight_TypeID is the unique identifier for the type NextHeight.
const NextHeight_TypeID = 0xf15d280e55952413

func NewNextHeight(s *capnp.Segment) (NextHeight, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return NextHeight{st}, err
}

func NewRootNextHeight(s *capnp.Segment) (NextHeight, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return NextHeight{st}, err
}

func ReadRootNextHeight(msg *capnp.Message) (NextHeight, error) {
	root, err := msg.RootPtr()
	return NextHeight{root.Struct()}, err
}

func (s NextHeight) String() string {
	str, _ := text.Marshal(0xf15d280e55952413, s.Struct)
	return str
}

func (s NextHeight) NHClaims() NHClaims {
	if !s.HasNHClaims() {
		s.NewNHClaims()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[4928:5152])
	return NHClaims{Struct: ss}
}

func (s NextHeight) HasNHClaims() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NextHeight) SetNHClaims(v NHClaims) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNHClaims sets the nHClaims field to a newly
// allocated NHClaims struct, preferring placement in s's segment.
func (s NextHeight) NewNHClaims() (NHClaims, error) {
	ss, err := NewNHClaims(s.Struct.Segment())
	if err != nil {
		return NHClaims{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s NextHeight) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s NextHeight) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NextHeight) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s NextHeight) PreCommits() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s NextHeight) HasPreCommits() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s NextHeight) SetPreCommits(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}

// NextHeight_List is a list of NextHeight.
type NextHeight_List struct{ capnp.List }

// NewNextHeight creates a new list of NextHeight.
func NewNextHeight_List(s *capnp.Segment, sz int32) (NextHeight_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return NextHeight_List{l}, err
}

func (s NextHeight_List) At(i int) NextHeight { return NextHeight{s.List.Struct(i)} }

func (s NextHeight_List) Set(i int, v NextHeight) error { return s.List.SetStruct(i, v.Struct) }

func (s NextHeight_List) String() string {
	str, _ := text.MarshalList(0xf15d280e55952413, s.List)
	return str
}

// NextHeight_Promise is a wrapper for a NextHeight promised by a client call.
type NextHeight_Promise struct{ *capnp.Pipeline }

func (p NextHeight_Promise) Struct() (NextHeight, error) {
	s, err := p.Pipeline.Struct()
	return NextHeight{s}, err
}

func (p NextHeight_Promise) NHClaims() NHClaims_Promise {
	return NHClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[5152:5376])}
}

type BlockHeader struct{ capnp.Struct }

// BlockHeader_TypeID is the unique identifier for the type BlockHeader.
const BlockHeader_TypeID = 0xcbaccef171f6e853

func NewBlockHeader(s *capnp.Segment) (BlockHeader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BlockHeader{st}, err
}

func NewRootBlockHeader(s *capnp.Segment) (BlockHeader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BlockHeader{st}, err
}

func ReadRootBlockHeader(msg *capnp.Message) (BlockHeader, error) {
	root, err := msg.RootPtr()
	return BlockHeader{root.Struct()}, err
}

func (s BlockHeader) String() string {
	str, _ := text.Marshal(0xcbaccef171f6e853, s.Struct)
	return str
}

func (s BlockHeader) BClaims() BClaims {
	if !s.HasBClaims() {
		s.NewBClaims()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[5376:5472])
	return BClaims{Struct: ss}
}

func (s BlockHeader) HasBClaims() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockHeader) SetBClaims(v BClaims) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBClaims sets the bClaims field to a newly
// allocated BClaims struct, preferring placement in s's segment.
func (s BlockHeader) NewBClaims() (BClaims, error) {
	ss, err := NewBClaims(s.Struct.Segment())
	if err != nil {
		return BClaims{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s BlockHeader) SigGroup() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s BlockHeader) HasSigGroup() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockHeader) SetSigGroup(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s BlockHeader) TxHshLst() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s BlockHeader) HasTxHshLst() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BlockHeader) SetTxHshLst(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}

// BlockHeader_List is a list of BlockHeader.
type BlockHeader_List struct{ capnp.List }

// NewBlockHeader creates a new list of BlockHeader.
func NewBlockHeader_List(s *capnp.Segment, sz int32) (BlockHeader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return BlockHeader_List{l}, err
}

func (s BlockHeader_List) At(i int) BlockHeader { return BlockHeader{s.List.Struct(i)} }

func (s BlockHeader_List) Set(i int, v BlockHeader) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockHeader_List) String() string {
	str, _ := text.MarshalList(0xcbaccef171f6e853, s.List)
	return str
}

// BlockHeader_Promise is a wrapper for a BlockHeader promised by a client call.
type BlockHeader_Promise struct{ *capnp.Pipeline }

func (p BlockHeader_Promise) Struct() (BlockHeader, error) {
	s, err := p.Pipeline.Struct()
	return BlockHeader{s}, err
}

func (p BlockHeader_Promise) BClaims() BClaims_Promise {
	return BClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[5472:5568])}
}

type Validator struct{ capnp.Struct }

// Validator_TypeID is the unique identifier for the type Validator.
const Validator_TypeID = 0xfb76cd14c2ae27f8

func NewValidator(s *capnp.Segment) (Validator, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Validator{st}, err
}

func NewRootValidator(s *capnp.Segment) (Validator, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Validator{st}, err
}

func ReadRootValidator(msg *capnp.Message) (Validator, error) {
	root, err := msg.RootPtr()
	return Validator{root.Struct()}, err
}

func (s Validator) String() string {
	str, _ := text.Marshal(0xfb76cd14c2ae27f8, s.Struct)
	return str
}

func (s Validator) VAddr() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s Validator) HasVAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Validator) SetVAddr(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s Validator) GroupShare() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s Validator) HasGroupShare() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Validator) SetGroupShare(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// Validator_List is a list of Validator.
type Validator_List struct{ capnp.List }

// NewValidator creates a new list of Validator.
func NewValidator_List(s *capnp.Segment, sz int32) (Validator_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Validator_List{l}, err
}

func (s Validator_List) At(i int) Validator { return Validator{s.List.Struct(i)} }

func (s Validator_List) Set(i int, v Validator) error { return s.List.SetStruct(i, v.Struct) }

func (s Validator_List) String() string {
	str, _ := text.MarshalList(0xfb76cd14c2ae27f8, s.List)
	return str
}

// Validator_Promise is a wrapper for a Validator promised by a client call.
type Validator_Promise struct{ *capnp.Pipeline }

func (p Validator_Promise) Struct() (Validator, error) {
	s, err := p.Pipeline.Struct()
	return Validator{s}, err
}

type ValidatorSet struct{ capnp.Struct }

// ValidatorSet_TypeID is the unique identifier for the type ValidatorSet.
const ValidatorSet_TypeID = 0xd9941258ffc9401a

func NewValidatorSet(s *capnp.Segment) (ValidatorSet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ValidatorSet{st}, err
}

func NewRootValidatorSet(s *capnp.Segment) (ValidatorSet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ValidatorSet{st}, err
}

func ReadRootValidatorSet(msg *capnp.Message) (ValidatorSet, error) {
	root, err := msg.RootPtr()
	return ValidatorSet{root.Struct()}, err
}

func (s ValidatorSet) String() string {
	str, _ := text.Marshal(0xd9941258ffc9401a, s.Struct)
	return str
}

func (s ValidatorSet) Validators() (Validator_List, error) {
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return Validator_List{}, err
	}
	l, err := p.ListDefault(x_85d3acc39d94e0f8[5568:5592])
	return Validator_List{List: l}, err
}

func (s ValidatorSet) HasValidators() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ValidatorSet) SetValidators(v Validator_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValidators sets the validators field to a newly
// allocated Validator_List, preferring placement in s's segment.
func (s ValidatorSet) NewValidators(n int32) (Validator_List, error) {
	l, err := NewValidator_List(s.Struct.Segment(), n)
	if err != nil {
		return Validator_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ValidatorSet) GroupKey() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s ValidatorSet) HasGroupKey() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ValidatorSet) SetGroupKey(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s ValidatorSet) NotBefore() uint32 {
	return s.Struct.Uint32(0)
}

func (s ValidatorSet) SetNotBefore(v uint32) {
	s.Struct.SetUint32(0, v)
}

// ValidatorSet_List is a list of ValidatorSet.
type ValidatorSet_List struct{ capnp.List }

// NewValidatorSet creates a new list of ValidatorSet.
func NewValidatorSet_List(s *capnp.Segment, sz int32) (ValidatorSet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return ValidatorSet_List{l}, err
}

func (s ValidatorSet_List) At(i int) ValidatorSet { return ValidatorSet{s.List.Struct(i)} }

func (s ValidatorSet_List) Set(i int, v ValidatorSet) error { return s.List.SetStruct(i, v.Struct) }

func (s ValidatorSet_List) String() string {
	str, _ := text.MarshalList(0xd9941258ffc9401a, s.List)
	return str
}

// ValidatorSet_Promise is a wrapper for a ValidatorSet promised by a client call.
type ValidatorSet_Promise struct{ *capnp.Pipeline }

func (p ValidatorSet_Promise) Struct() (ValidatorSet, error) {
	s, err := p.Pipeline.Struct()
	return ValidatorSet{s}, err
}

type RoundState struct{ capnp.Struct }

// RoundState_TypeID is the unique identifier for the type RoundState.
const RoundState_TypeID = 0xcfa13406e7c64206

func NewRoundState(s *capnp.Segment) (RoundState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 16})
	return RoundState{st}, err
}

func NewRootRoundState(s *capnp.Segment) (RoundState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 16})
	return RoundState{st}, err
}

func ReadRootRoundState(msg *capnp.Message) (RoundState, error) {
	root, err := msg.RootPtr()
	return RoundState{root.Struct()}, err
}

func (s RoundState) String() string {
	str, _ := text.Marshal(0xcfa13406e7c64206, s.Struct)
	return str
}

func (s RoundState) VAddr() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s RoundState) HasVAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RoundState) SetVAddr(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s RoundState) GroupShare() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s RoundState) HasGroupShare() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RoundState) SetGroupShare(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s RoundState) GroupIdx() uint8 {
	return s.Struct.Uint8(0)
}

func (s RoundState) SetGroupIdx(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s RoundState) GroupKey() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s RoundState) HasGroupKey() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RoundState) SetGroupKey(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}
func (s RoundState) RCert() RCert {
	if !s.HasRCert() {
		s.NewRCert()
	}
	p, _ := s.Struct.Ptr(3)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[5592:5664])
	return RCert{Struct: ss}
}

func (s RoundState) HasRCert() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s RoundState) SetRCert(v RCert) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewRCert sets the rCert field to a newly
// allocated RCert struct, preferring placement in s's segment.
func (s RoundState) NewRCert() (RCert, error) {
	ss, err := NewRCert(s.Struct.Segment())
	if err != nil {
		return RCert{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ConflictingRCert() RCert {
	if !s.HasConflictingRCert() {
		s.NewConflictingRCert()
	}
	p, _ := s.Struct.Ptr(4)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[5664:5736])
	return RCert{Struct: ss}
}

func (s RoundState) HasConflictingRCert() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s RoundState) SetConflictingRCert(v RCert) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewConflictingRCert sets the conflictingRCert field to a newly
// allocated RCert struct, preferring placement in s's segment.
func (s RoundState) NewConflictingRCert() (RCert, error) {
	ss, err := NewRCert(s.Struct.Segment())
	if err != nil {
		return RCert{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) Proposal() Proposal {
	if !s.HasProposal() {
		s.NewProposal()
	}
	p, _ := s.Struct.Ptr(5)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[5736:5936])
	return Proposal{Struct: ss}
}

func (s RoundState) HasProposal() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s RoundState) SetProposal(v Proposal) error {
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewProposal sets the proposal field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s RoundState) NewProposal() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ConflictingProposal() Proposal {
	if !s.HasConflictingProposal() {
		s.NewConflictingProposal()
	}
	p, _ := s.Struct.Ptr(6)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[5936:6136])
	return Proposal{Struct: ss}
}

func (s RoundState) HasConflictingProposal() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s RoundState) SetConflictingProposal(v Proposal) error {
	return s.Struct.SetPtr(6, v.Struct.ToPtr())
}

// NewConflictingProposal sets the conflictingProposal field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s RoundState) NewConflictingProposal() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(6, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) PreVote() PreVote {
	if !s.HasPreVote() {
		s.NewPreVote()
	}
	p, _ := s.Struct.Ptr(7)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[6136:6360])
	return PreVote{Struct: ss}
}

func (s RoundState) HasPreVote() bool {
	p, err := s.Struct.Ptr(7)
	return p.IsValid() || err != nil
}

func (s RoundState) SetPreVote(v PreVote) error {
	return s.Struct.SetPtr(7, v.Struct.ToPtr())
}

// NewPreVote sets the preVote field to a newly
// allocated PreVote struct, preferring placement in s's segment.
func (s RoundState) NewPreVote() (PreVote, error) {
	ss, err := NewPreVote(s.Struct.Segment())
	if err != nil {
		return PreVote{}, err
	}
	err = s.Struct.SetPtr(7, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ConflictingPreVote() PreVote {
	if !s.HasConflictingPreVote() {
		s.NewConflictingPreVote()
	}
	p, _ := s.Struct.Ptr(8)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[6360:6584])
	return PreVote{Struct: ss}
}

func (s RoundState) HasConflictingPreVote() bool {
	p, err := s.Struct.Ptr(8)
	return p.IsValid() || err != nil
}

func (s RoundState) SetConflictingPreVote(v PreVote) error {
	return s.Struct.SetPtr(8, v.Struct.ToPtr())
}

// NewConflictingPreVote sets the conflictingPreVote field to a newly
// allocated PreVote struct, preferring placement in s's segment.
func (s RoundState) NewConflictingPreVote() (PreVote, error) {
	ss, err := NewPreVote(s.Struct.Segment())
	if err != nil {
		return PreVote{}, err
	}
	err = s.Struct.SetPtr(8, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) PreVoteNil() PreVoteNil {
	if !s.HasPreVoteNil() {
		s.NewPreVoteNil()
	}
	p, _ := s.Struct.Ptr(9)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[6584:6680])
	return PreVoteNil{Struct: ss}
}

func (s RoundState) HasPreVoteNil() bool {
	p, err := s.Struct.Ptr(9)
	return p.IsValid() || err != nil
}

func (s RoundState) SetPreVoteNil(v PreVoteNil) error {
	return s.Struct.SetPtr(9, v.Struct.ToPtr())
}

// NewPreVoteNil sets the preVoteNil field to a newly
// allocated PreVoteNil struct, preferring placement in s's segment.
func (s RoundState) NewPreVoteNil() (PreVoteNil, error) {
	ss, err := NewPreVoteNil(s.Struct.Segment())
	if err != nil {
		return PreVoteNil{}, err
	}
	err = s.Struct.SetPtr(9, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ImplicitPVN() bool {
	return s.Struct.Bit(8)
}

func (s RoundState) SetImplicitPVN(v bool) {
	s.Struct.SetBit(8, v)
}

func (s RoundState) PreCommit() PreCommit {
	if !s.HasPreCommit() {
		s.NewPreCommit()
	}
	p, _ := s.Struct.Ptr(10)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[6680:6920])
	return PreCommit{Struct: ss}
}

func (s RoundState) HasPreCommit() bool {
	p, err := s.Struct.Ptr(10)
	return p.IsValid() || err != nil
}

func (s RoundState) SetPreCommit(v PreCommit) error {
	return s.Struct.SetPtr(10, v.Struct.ToPtr())
}

// NewPreCommit sets the preCommit field to a newly
// allocated PreCommit struct, preferring placement in s's segment.
func (s RoundState) NewPreCommit() (PreCommit, error) {
	ss, err := NewPreCommit(s.Struct.Segment())
	if err != nil {
		return PreCommit{}, err
	}
	err = s.Struct.SetPtr(10, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ConflictingPreCommit() PreCommit {
	if !s.HasConflictingPreCommit() {
		s.NewConflictingPreCommit()
	}
	p, _ := s.Struct.Ptr(11)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[6920:7160])
	return PreCommit{Struct: ss}
}

func (s RoundState) HasConflictingPreCommit() bool {
	p, err := s.Struct.Ptr(11)
	return p.IsValid() || err != nil
}

func (s RoundState) SetConflictingPreCommit(v PreCommit) error {
	return s.Struct.SetPtr(11, v.Struct.ToPtr())
}

// NewConflictingPreCommit sets the conflictingPreCommit field to a newly
// allocated PreCommit struct, preferring placement in s's segment.
func (s RoundState) NewConflictingPreCommit() (PreCommit, error) {
	ss, err := NewPreCommit(s.Struct.Segment())
	if err != nil {
		return PreCommit{}, err
	}
	err = s.Struct.SetPtr(11, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) PreCommitNil() PreCommitNil {
	if !s.HasPreCommitNil() {
		s.NewPreCommitNil()
	}
	p, _ := s.Struct.Ptr(12)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[7160:7256])
	return PreCommitNil{Struct: ss}
}

func (s RoundState) HasPreCommitNil() bool {
	p, err := s.Struct.Ptr(12)
	return p.IsValid() || err != nil
}

func (s RoundState) SetPreCommitNil(v PreCommitNil) error {
	return s.Struct.SetPtr(12, v.Struct.ToPtr())
}

// NewPreCommitNil sets the preCommitNil field to a newly
// allocated PreCommitNil struct, preferring placement in s's segment.
func (s RoundState) NewPreCommitNil() (PreCommitNil, error) {
	ss, err := NewPreCommitNil(s.Struct.Segment())
	if err != nil {
		return PreCommitNil{}, err
	}
	err = s.Struct.SetPtr(12, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ImplicitPCN() bool {
	return s.Struct.Bit(9)
}

func (s RoundState) SetImplicitPCN(v bool) {
	s.Struct.SetBit(9, v)
}

func (s RoundState) NextRound() NextRound {
	if !s.HasNextRound() {
		s.NewNextRound()
	}
	p, _ := s.Struct.Ptr(13)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[7256:7416])
	return NextRound{Struct: ss}
}

func (s RoundState) HasNextRound() bool {
	p, err := s.Struct.Ptr(13)
	return p.IsValid() || err != nil
}

func (s RoundState) SetNextRound(v NextRound) error {
	return s.Struct.SetPtr(13, v.Struct.ToPtr())
}

// NewNextRound sets the nextRound field to a newly
// allocated NextRound struct, preferring placement in s's segment.
func (s RoundState) NewNextRound() (NextRound, error) {
	ss, err := NewNextRound(s.Struct.Segment())
	if err != nil {
		return NextRound{}, err
	}
	err = s.Struct.SetPtr(13, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) NextHeight() NextHeight {
	if !s.HasNextHeight() {
		s.NewNextHeight()
	}
	p, _ := s.Struct.Ptr(14)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[7416:7680])
	return NextHeight{Struct: ss}
}

func (s RoundState) HasNextHeight() bool {
	p, err := s.Struct.Ptr(14)
	return p.IsValid() || err != nil
}

func (s RoundState) SetNextHeight(v NextHeight) error {
	return s.Struct.SetPtr(14, v.Struct.ToPtr())
}

// NewNextHeight sets the nextHeight field to a newly
// allocated NextHeight struct, preferring placement in s's segment.
func (s RoundState) NewNextHeight() (NextHeight, error) {
	ss, err := NewNextHeight(s.Struct.Segment())
	if err != nil {
		return NextHeight{}, err
	}
	err = s.Struct.SetPtr(14, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ConflictingNextHeight() NextHeight {
	if !s.HasConflictingNextHeight() {
		s.NewConflictingNextHeight()
	}
	p, _ := s.Struct.Ptr(15)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[7680:7944])
	return NextHeight{Struct: ss}
}

func (s RoundState) HasConflictingNextHeight() bool {
	p, err := s.Struct.Ptr(15)
	return p.IsValid() || err != nil
}

func (s RoundState) SetConflictingNextHeight(v NextHeight) error {
	return s.Struct.SetPtr(15, v.Struct.ToPtr())
}

// NewConflictingNextHeight sets the conflictingNextHeight field to a newly
// allocated NextHeight struct, preferring placement in s's segment.
func (s RoundState) NewConflictingNextHeight() (NextHeight, error) {
	ss, err := NewNextHeight(s.Struct.Segment())
	if err != nil {
		return NextHeight{}, err
	}
	err = s.Struct.SetPtr(15, ss.Struct.ToPtr())
	return ss, err
}

// RoundState_List is a list of RoundState.
type RoundState_List struct{ capnp.List }

// NewRoundState creates a new list of RoundState.
func NewRoundState_List(s *capnp.Segment, sz int32) (RoundState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 16}, sz)
	return RoundState_List{l}, err
}

func (s RoundState_List) At(i int) RoundState { return RoundState{s.List.Struct(i)} }

func (s RoundState_List) Set(i int, v RoundState) error { return s.List.SetStruct(i, v.Struct) }

func (s RoundState_List) String() string {
	str, _ := text.MarshalList(0xcfa13406e7c64206, s.List)
	return str
}

// RoundState_Promise is a wrapper for a RoundState promised by a client call.
type RoundState_Promise struct{ *capnp.Pipeline }

func (p RoundState_Promise) Struct() (RoundState, error) {
	s, err := p.Pipeline.Struct()
	return RoundState{s}, err
}

func (p RoundState_Promise) RCert() RCert_Promise {
	return RCert_Promise{Pipeline: p.Pipeline.GetPipelineDefault(3, x_85d3acc39d94e0f8[7944:8016])}
}

func (p RoundState_Promise) ConflictingRCert() RCert_Promise {
	return RCert_Promise{Pipeline: p.Pipeline.GetPipelineDefault(4, x_85d3acc39d94e0f8[8016:8088])}
}

func (p RoundState_Promise) Proposal() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(5, x_85d3acc39d94e0f8[8088:8288])}
}

func (p RoundState_Promise) ConflictingProposal() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(6, x_85d3acc39d94e0f8[8288:8488])}
}

func (p RoundState_Promise) PreVote() PreVote_Promise {
	return PreVote_Promise{Pipeline: p.Pipeline.GetPipelineDefault(7, x_85d3acc39d94e0f8[8488:8712])}
}

func (p RoundState_Promise) ConflictingPreVote() PreVote_Promise {
	return PreVote_Promise{Pipeline: p.Pipeline.GetPipelineDefault(8, x_85d3acc39d94e0f8[8712:8936])}
}

func (p RoundState_Promise) PreVoteNil() PreVoteNil_Promise {
	return PreVoteNil_Promise{Pipeline: p.Pipeline.GetPipelineDefault(9, x_85d3acc39d94e0f8[8936:9032])}
}

func (p RoundState_Promise) PreCommit() PreCommit_Promise {
	return PreCommit_Promise{Pipeline: p.Pipeline.GetPipelineDefault(10, x_85d3acc39d94e0f8[9032:9272])}
}

func (p RoundState_Promise) ConflictingPreCommit() PreCommit_Promise {
	return PreCommit_Promise{Pipeline: p.Pipeline.GetPipelineDefault(11, x_85d3acc39d94e0f8[9272:9512])}
}

func (p RoundState_Promise) PreCommitNil() PreCommitNil_Promise {
	return PreCommitNil_Promise{Pipeline: p.Pipeline.GetPipelineDefault(12, x_85d3acc39d94e0f8[9512:9608])}
}

func (p RoundState_Promise) NextRound() NextRound_Promise {
	return NextRound_Promise{Pipeline: p.Pipeline.GetPipelineDefault(13, x_85d3acc39d94e0f8[9608:9768])}
}

func (p RoundState_Promise) NextHeight() NextHeight_Promise {
	return NextHeight_Promise{Pipeline: p.Pipeline.GetPipelineDefault(14, x_85d3acc39d94e0f8[9768:10032])}
}

func (p RoundState_Promise) ConflictingNextHeight() NextHeight_Promise {
	return NextHeight_Promise{Pipeline: p.Pipeline.GetPipelineDefault(15, x_85d3acc39d94e0f8[10032:10296])}
}

type OwnState struct{ capnp.Struct }

// OwnState_TypeID is the unique identifier for the type OwnState.
const OwnState_TypeID = 0xce8da0c591f7b39f

func NewOwnState(s *capnp.Segment) (OwnState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return OwnState{st}, err
}

func NewRootOwnState(s *capnp.Segment) (OwnState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return OwnState{st}, err
}

func ReadRootOwnState(msg *capnp.Message) (OwnState, error) {
	root, err := msg.RootPtr()
	return OwnState{root.Struct()}, err
}

func (s OwnState) String() string {
	str, _ := text.Marshal(0xce8da0c591f7b39f, s.Struct)
	return str
}

func (s OwnState) VAddr() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s OwnState) HasVAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s OwnState) SetVAddr(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s OwnState) GroupKey() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s OwnState) HasGroupKey() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s OwnState) SetGroupKey(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s OwnState) SyncToBH() BlockHeader {
	if !s.HasSyncToBH() {
		s.NewSyncToBH()
	}
	p, _ := s.Struct.Ptr(2)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[10296:10432])
	return BlockHeader{Struct: ss}
}

func (s OwnState) HasSyncToBH() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s OwnState) SetSyncToBH(v BlockHeader) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSyncToBH sets the syncToBH field to a newly
// allocated BlockHeader struct, preferring placement in s's segment.
func (s OwnState) NewSyncToBH() (BlockHeader, error) {
	ss, err := NewBlockHeader(s.Struct.Segment())
	if err != nil {
		return BlockHeader{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}
func (s OwnState) MaxBHSeen() BlockHeader {
	if !s.HasMaxBHSeen() {
		s.NewMaxBHSeen()
	}
	p, _ := s.Struct.Ptr(3)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[10432:10568])
	return BlockHeader{Struct: ss}
}

func (s OwnState) HasMaxBHSeen() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s OwnState) SetMaxBHSeen(v BlockHeader) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewMaxBHSeen sets the maxBHSeen field to a newly
// allocated BlockHeader struct, preferring placement in s's segment.
func (s OwnState) NewMaxBHSeen() (BlockHeader, error) {
	ss, err := NewBlockHeader(s.Struct.Segment())
	if err != nil {
		return BlockHeader{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}
func (s OwnState) CanonicalSnapShot() BlockHeader {
	if !s.HasCanonicalSnapShot() {
		s.NewCanonicalSnapShot()
	}
	p, _ := s.Struct.Ptr(4)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[10568:10704])
	return BlockHeader{Struct: ss}
}

func (s OwnState) HasCanonicalSnapShot() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s OwnState) SetCanonicalSnapShot(v BlockHeader) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewCanonicalSnapShot sets the canonicalSnapShot field to a newly
// allocated BlockHeader struct, preferring placement in s's segment.
func (s OwnState) NewCanonicalSnapShot() (BlockHeader, error) {
	ss, err := NewBlockHeader(s.Struct.Segment())
	if err != nil {
		return BlockHeader{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}
func (s OwnState) PendingSnapShot() BlockHeader {
	if !s.HasPendingSnapShot() {
		s.NewPendingSnapShot()
	}
	p, _ := s.Struct.Ptr(5)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[10704:10840])
	return BlockHeader{Struct: ss}
}

func (s OwnState) HasPendingSnapShot() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s OwnState) SetPendingSnapShot(v BlockHeader) error {
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewPendingSnapShot sets the pendingSnapShot field to a newly
// allocated BlockHeader struct, preferring placement in s's segment.
func (s OwnState) NewPendingSnapShot() (BlockHeader, error) {
	ss, err := NewBlockHeader(s.Struct.Segment())
	if err != nil {
		return BlockHeader{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}

// OwnState_List is a list of OwnState.
type OwnState_List struct{ capnp.List }

// NewOwnState creates a new list of OwnState.
func NewOwnState_List(s *capnp.Segment, sz int32) (OwnState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return OwnState_List{l}, err
}

func (s OwnState_List) At(i int) OwnState { return OwnState{s.List.Struct(i)} }

func (s OwnState_List) Set(i int, v OwnState) error { return s.List.SetStruct(i, v.Struct) }

func (s OwnState_List) String() string {
	str, _ := text.MarshalList(0xce8da0c591f7b39f, s.List)
	return str
}

// OwnState_Promise is a wrapper for a OwnState promised by a client call.
type OwnState_Promise struct{ *capnp.Pipeline }

func (p OwnState_Promise) Struct() (OwnState, error) {
	s, err := p.Pipeline.Struct()
	return OwnState{s}, err
}

func (p OwnState_Promise) SyncToBH() BlockHeader_Promise {
	return BlockHeader_Promise{Pipeline: p.Pipeline.GetPipelineDefault(2, x_85d3acc39d94e0f8[10840:10976])}
}

func (p OwnState_Promise) MaxBHSeen() BlockHeader_Promise {
	return BlockHeader_Promise{Pipeline: p.Pipeline.GetPipelineDefault(3, x_85d3acc39d94e0f8[10976:11112])}
}

func (p OwnState_Promise) CanonicalSnapShot() BlockHeader_Promise {
	return BlockHeader_Promise{Pipeline: p.Pipeline.GetPipelineDefault(4, x_85d3acc39d94e0f8[11112:11248])}
}

func (p OwnState_Promise) PendingSnapShot() BlockHeader_Promise {
	return BlockHeader_Promise{Pipeline: p.Pipeline.GetPipelineDefault(5, x_85d3acc39d94e0f8[11248:11384])}
}

type OwnValidatingState struct{ capnp.Struct }

// OwnValidatingState_TypeID is the unique identifier for the type OwnValidatingState.
const OwnValidatingState_TypeID = 0xd7dde404fa3b5b03

func NewOwnValidatingState(s *capnp.Segment) (OwnValidatingState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return OwnValidatingState{st}, err
}

func NewRootOwnValidatingState(s *capnp.Segment) (OwnValidatingState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return OwnValidatingState{st}, err
}

func ReadRootOwnValidatingState(msg *capnp.Message) (OwnValidatingState, error) {
	root, err := msg.RootPtr()
	return OwnValidatingState{root.Struct()}, err
}

func (s OwnValidatingState) String() string {
	str, _ := text.Marshal(0xd7dde404fa3b5b03, s.Struct)
	return str
}

func (s OwnValidatingState) VAddr() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s OwnValidatingState) HasVAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s OwnValidatingState) SetVAddr(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s OwnValidatingState) GroupKey() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s OwnValidatingState) HasGroupKey() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s OwnValidatingState) SetGroupKey(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s OwnValidatingState) RoundStarted() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s OwnValidatingState) SetRoundStarted(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s OwnValidatingState) PreVoteStepStarted() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s OwnValidatingState) SetPreVoteStepStarted(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s OwnValidatingState) PreCommitStepStarted() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s OwnValidatingState) SetPreCommitStepStarted(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s OwnValidatingState) ValidValue() Proposal {
	if !s.HasValidValue() {
		s.NewValidValue()
	}
	p, _ := s.Struct.Ptr(2)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[11384:11584])
	return Proposal{Struct: ss}
}

func (s OwnValidatingState) HasValidValue() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s OwnValidatingState) SetValidValue(v Proposal) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewValidValue sets the validValue field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s OwnValidatingState) NewValidValue() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}
func (s OwnValidatingState) LockedValue() Proposal {
	if !s.HasLockedValue() {
		s.NewLockedValue()
	}
	p, _ := s.Struct.Ptr(3)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[11584:11784])
	return Proposal{Struct: ss}
}

func (s OwnValidatingState) HasLockedValue() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s OwnValidatingState) SetLockedValue(v Proposal) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewLockedValue sets the lockedValue field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s OwnValidatingState) NewLockedValue() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

// OwnValidatingState_List is a list of OwnValidatingState.
type OwnValidatingState_List struct{ capnp.List }

// NewOwnValidatingState creates a new list of OwnValidatingState.
func NewOwnValidatingState_List(s *capnp.Segment, sz int32) (OwnValidatingState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4}, sz)
	return OwnValidatingState_List{l}, err
}

func (s OwnValidatingState_List) At(i int) OwnValidatingState {
	return OwnValidatingState{s.List.Struct(i)}
}

func (s OwnValidatingState_List) Set(i int, v OwnValidatingState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s OwnValidatingState_List) String() string {
	str, _ := text.MarshalList(0xd7dde404fa3b5b03, s.List)
	return str
}

// OwnValidatingState_Promise is a wrapper for a OwnValidatingState promised by a client call.
type OwnValidatingState_Promise struct{ *capnp.Pipeline }

func (p OwnValidatingState_Promise) Struct() (OwnValidatingState, error) {
	s, err := p.Pipeline.Struct()
	return OwnValidatingState{s}, err
}

func (p OwnValidatingState_Promise) ValidValue() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(2, x_85d3acc39d94e0f8[11784:11984])}
}

func (p OwnValidatingState_Promise) LockedValue() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(3, x_85d3acc39d94e0f8[11984:12184])}
}

type EncryptedStore struct{ capnp.Struct }

// EncryptedStore_TypeID is the unique identifier for the type EncryptedStore.
const EncryptedStore_TypeID = 0xdfd8af3691b0caaa

func NewEncryptedStore(s *capnp.Segment) (EncryptedStore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return EncryptedStore{st}, err
}

func NewRootEncryptedStore(s *capnp.Segment) (EncryptedStore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return EncryptedStore{st}, err
}

func ReadRootEncryptedStore(msg *capnp.Message) (EncryptedStore, error) {
	root, err := msg.RootPtr()
	return EncryptedStore{root.Struct()}, err
}

func (s EncryptedStore) String() string {
	str, _ := text.Marshal(0xdfd8af3691b0caaa, s.Struct)
	return str
}

func (s EncryptedStore) CypherText() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s EncryptedStore) HasCypherText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s EncryptedStore) SetCypherText(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s EncryptedStore) Nonce() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s EncryptedStore) HasNonce() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s EncryptedStore) SetNonce(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s EncryptedStore) Kid() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s EncryptedStore) HasKid() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s EncryptedStore) SetKid(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}
func (s EncryptedStore) Name() []byte {
	p, _ := s.Struct.Ptr(3)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s EncryptedStore) HasName() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s EncryptedStore) SetName(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(3, v)
}

// EncryptedStore_List is a list of EncryptedStore.
type EncryptedStore_List struct{ capnp.List }

// NewEncryptedStore creates a new list of EncryptedStore.
func NewEncryptedStore_List(s *capnp.Segment, sz int32) (EncryptedStore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return EncryptedStore_List{l}, err
}

func (s EncryptedStore_List) At(i int) EncryptedStore { return EncryptedStore{s.List.Struct(i)} }

func (s EncryptedStore_List) Set(i int, v EncryptedStore) error { return s.List.SetStruct(i, v.Struct) }

func (s EncryptedStore_List) String() string {
	str, _ := text.MarshalList(0xdfd8af3691b0caaa, s.List)
	return str
}

// EncryptedStore_Promise is a wrapper for a EncryptedStore promised by a client call.
type EncryptedStore_Promise struct{ *capnp.Pipeline }

func (p EncryptedStore_Promise) Struct() (EncryptedStore, error) {
	s, err := p.Pipeline.Struct()
	return EncryptedStore{s}, err
}

const schema_85d3acc39d94e0f8 = "x\xda\xccY}pT\xe5\xd5\x7f\xce\xf3\xecW6\x9b" +
	"do\x9e}_A\xe2$\x81d^P\xc3\x0bDZ" +
	"D\x1cH\xa2cB!\xe6\xee\x85\x88\x08\x0e\x97\xec%" +
	"\xbb\xba\xb9\xbb\xec\xde`\xd2\x86R\x1d\xed`G\xab\xb6" +
	"~2\x15A\xebT(\x08\xa8\xcc`\x07\xa7\x8a\x15%" +
	"\x82\x15\x04EK*\xb48\x02\xf5\x83Tm!\xd8n" +
	"\xe7\xdc\xbb\x1fw?\x92l4\xcet\x86?.g\x7f" +
	"\xf7\xdc\xdf\xf3;\xe7<\xcfyN\xa6\xd4\x15\xce\xa1S" +
	"\xad\x17\x15\x11\">j\xb5\xc5f\xfcjva\xfd\xfa" +
	"]w\x13\xc1m\x89\x9d;\xfe\xe0\xe3\xafny\xe7." +
	"B\xa0v\xa5\xad\x14\xf8\xed6;!R\x8f\x8d\x81\xb4" +
	"\xd6F\x81\x90\xd8\xbb\xb3n\xde\xe1X\xff\xe6\xbdY\xf8" +
	"\x8d\xb6\xf1\xc0w\xe8\xf8-\x88\xdfe\xe0\xfb|\xeb\xab" +
	".\xd9 \xde\x97\x89\xe7\x07m\x03\xbcO\x87\x1fE\xf8" +
	"I\x03^[\xff\xfbg\x9b\xa7wg\xc1k+\xedN" +
	"\xe0S\xed\x88\xbf\xdc\xce@\x9aa\xd7\xf1M5s_" +
	"x\xe4\xe3\xd7\xb3\xf1\x8f\xd9/\x06\xbeI\xc7\xff\x1a\xf1" +
	"\xdb\x0d\xfc\xe6\xdd\xbd\xcbwV\xed\xb8?\x8bN\x9f}" +
	"\x80\x9f\xd6\xe1'\x11~\xd6\x807\xdc^\xdb|\xfe\xaf" +
	"\xfc\x01\"\xba\x81\xa6\xf0V\x8b\x9d\x10^\xe0\xd8\xc3\x05" +
	"\x87\x9d\x90\xda\"\xc7}@ \xb6\xffy\xe7\xabO\xde" +
	"p\xe9\xc3Dp\x83\x09\xcc\x10\xbc\xa3\xe0\x10\x7f\xa9\x00" +
	"\x9f^,\xd8F \xa6<\xf2T\xe1\xc4;N>\x96" +
	"\x81\xa5\x88x\xc5y\x86\x1fp\xe2\xd3>\xe7m\x04b" +
	"\xe5\xad}\xfbw}\xd1\xb3.\x17\xb6\xa9p\x0f\x17\x0b" +
	"\xf1i~!b\xcf\xcd\x98\\\xd1~u\xff\xba\\\x1c" +
	">-\xec\xe5\xe7u\xecW\x85\xc8a\xe1\xde\xf7\x97Y" +
	">o~\"K\x8c\xd3\xae\xbf\xf3\xaf\\(\xc6Y\x17" +
	"\x03\xe9k\x97.\xc6gW]vn\xdc\xb6\xde\xa7\xb2" +
	"\xe0\x9f\xba\xce\xf0\xf3:\xfcK\x17\x03o\x91\x8e\x1e[" +
	"\xbe\xec\x87\xf7l\xdf\xfdt.\"\xfd\xae^\xfe/|" +
	"\x81\x9fw!\x91\xb5}3\xae\xdc\xfb\xe8\x95\xcfe\xca" +
	"\x0c\x08y\xadh\x0f?P\xa4\xabQ\xf41\x81\x98t" +
	"\xea\x1f+\xfb\xdf\xda\xf2f.\xc7O\x17\xff\x85\xef(" +
	"\xc6\xa7\xad\xc5\xe8x}\xd9\xd1\xbd\x17U\xb0\xfd\xb9\x94" +
	"[]\xd2\xcb\xef.\xc1\xa7\xbbJP\xb9'\x9e\xff\xe7" +
	"\x03\xafm\xb8\xf7\xad\x0c\xacMW\xd9\xdd\xcb\x17\xba1" +
	"\xd4\xa2\xfb\x06\x0c\xb5\xad~\xef\xc7\xb6+6\xfe\x11\x19" +
	"\x9b\xd1n\xfd\xdb\xa5\x1f\xf0\x17K\x11\xbd\xb3\xf4\xff-" +
	"\x04b\x7f\x9b\xf2}\xf6\xf3\x09\xae\xb7\xb3\xb2\xf4\xf1q" +
	"^\xe0;\xc6\xe9E3\x0e\x8bf\x9c\xae\xdd\xcc\xbd\xf3" +
	"\xaeZ\xd4\xf4\xfa\xbb\xb9ho\x1a\xb7\xc7x\x83o\x1d" +
	"\x87\xb4\x8f\x1d\xf9m\x7f\xd3\xe41\xef\xe5\xc2\xae,{" +
	"\x8ew\x97\xe1Sg\x19b\xd9MW\x0dXN\xf6\xbd" +
	"\x87\xacYF:\xd7\x9e.\xbb\x18\xf8yD\xd7~U" +
	"\xa6\xe7\xf3\xc5s\xf6\xc5\x16\x95>\xf8~\xe6\"u\xdf" +
	"K\xcb\xcf\xf0@9>)\xe5(ux\xc9\xa4\xf9c" +
	"\xc4\xc3\xc7r\xf1\xa8\xac\xf8\x80\xd7T\xe0\xd3\xa4\x0a\xe4" +
	"\xf1\xe3g.+]zi\xdb\x9f\xb32iS\xc5\x00" +
	"\xdf\x89@i{\x05\x03iw\x85.\xc7\xc6Z\xf7/" +
	"\xeb\xfe\xf7\x92\x0f\xb3\xe0\xffS9\xc0++\x11^V" +
	"\xc9@\x9aX\xa9\xc3or\x8f\x1d\xfb\xbb\xca)\x1f\xe6" +
	"b2\xa9\xf2\x10\x9f\x8eo\xf0\xa9\x95\xc8ds\xef\xf6" +
	"\x07\xbe\xb7\xedh&V\xaf\xef#\x95\x03\xfc\x84\x8e\xed" +
	"\xab\xc4\xc4\xbbps\xcd+O,\xb8\xe3D\x16\x8d\xd7" +
	"\xc6\x0f\xf0\x83\xe3\x91\xc6\xfe\xf1\x0c\xa4\xa3\xe3\x91\xc6\x85" +
	"\x15=\x8e\xeb\x97\x1d;\x9d\x19\xf2}\xe3)\xf0#:" +
	"\xfamD\x1f\xd3\xd1\xb1\xeb\xde\xf9\xd3o~:Y=" +
	"\x93\x95\"\xd3'P\xe0u\x13\x10?k\x02\x03\xa9q" +
	"\x02\xe2?\xdcv\xdf\xcb\xa1\xb7\x9e\xfa,\x13\xfd\xd0\x04" +
	"'\xf0\xa7u\xf4\x06Do\xd1\xd1\xb1}\xcb\xceNl" +
	")\xff\xe8\xf3,\xef\x1f\xa1\xf7~\x1d\xff\x09\xe2\xcf\x19" +
	"x^\xf5\xd0\xc2\xe2\x89K\xfbs\xd5Xu\xd5\x07|" +
	"j\x15>\xd5Ta\xe0\x1f\xfe\xf7\xa1\x1b\x7f43\xfc" +
	"e\x96,u\xd5g\xf8\xfcjt\xddX\xcd@ZP" +
	"\xad\xbb>\xf7\x7f\xcf\xee\xf1\x1cXu!Wt\xe4\xea" +
	"C\xbc\x03\xdf\xe0\x81j\x8c\xce\x17\xea\xd7\x0d\xee\xc6\xfd" +
	"\x17\xb2h\x1f\xac.\x05~B\xf7}\x0c}\x9f2|" +
	"\xb7\x85\xd4\xa8\xa2F;Ytr\x9b\x1cV\xc33}" +
	"\xca\x0a\xb93\xa8\xb5D\x94\xd6\x90\xa64\x07 \xd8\x02" +
	"\x00\xeeT\xb2\x12\x007!sh\x9d\x85\x0a\x978E" +
	"\x0b\x05Ap\x12\x10\xc0I\xe8P\xee\x1aB\x1d\x1d\x01" +
	"\xcd\xde\x1c\x88;Ln\xe7y9\xa4\x99\x0eg7\x04" +
	"\xe5@G\xd4\xf0\x95\xdc\xee\x13\xbeD\x0b\xb5\xd4M\xa4" +
	"\x04\x84\"g\xf2\x1fai\xceax\xb6\x84\x18\xfe\x93" +
	"\xc7T\xdc?\xabs0Av\x0a\xb2\xb3\xceA\x05\xd1" +
	"IH>\x1f\xb4\x0c\xfa\xc1\xfa`\xa8\xed\xd6FE\xf6" +
	"1%b|1\xb9e'\xbe(:\xa8E\xa8q\x0a" +
	"5\xce\x8coX\x07\xd5\xa8>M\xa3\xe4\xc1lxl" +
	"\xa1\x96L\xb2\xd9\x8e\xea\x0d\x07\xa8\x82X\xc6,\x84X" +
	"\x00@\xd8YO\x88\xb8\x9d\x81\xb8\x9b\x82\x00\xe0\x014" +
	"\xbe8\x93\x10\xf1\x05\x06\xe2\xcb\x14\x80z\x80\x02\x08/" +
	"y\x09\x11w3\x10\xdf\xa0 0\xea\x01\x06 \xec\xc3" +
	"\xb7\xff\xc0@|\x9b\x82`\x01\x0fX\x00\x84\x03\xf8\xf6" +
	"\x1b\x0c\xc4\xc3\x14\x04+\xf5\x80\x15@8\x82\xaf\x1ff" +
	" \x1e\xa7 \xd8\x98\x07l\x00\xc2\x89\xc5\x84\x88\xc7\x19" +
	"\x88\x9fPX\xd3\xe6\x97\x03j\xd35\xe0 \x14\x1c\x04" +
	"f\xfb\x95@\xbb_K\xfc7\x16\x8e(\xabPZ\x02" +
	"\xb7B\x11\xa1PD\x08\xc6\x81\xac\xd1\xba\x1aB\x9dj" +
	"\x128[\xeb\xf2\x86BZ\x1a&\x16\xd5dM\xf1\x86" +
	"B\x042~\xf0+\xb2O\x89xC\x84e\xbe\x92\xa5" +
	"_\"\x91@C\x05]I\x05\xaf\x9dK\x88x\x0d\x03" +
	"\xb1\xc5\xa4\xe0&\\\xee3\x0c\xc4\x17(\x084.\xe1" +
	"\xce\xb9)Yc\xe1H(\x1c\x8a\xcaAB\x08\xb8S" +
	"}K*)\xf3\xcfE\x1a\x8b\x06\xdaUY\xeb\x8c\x10" +
	"P\xd2W\x116J?\x8a_\xc9oy%\x9aQ\xd5" +
	"\xa2#\xb9\xc2I\xd3\x08\x11\xab\x18\x88SL+l\xc2" +
	"\x1562\x10\x17P(\x8f4(\x11\x0d\xdc\xa9\xd3\xd8" +
	"T\xbb\xe6\"\x1d\x94g6\x1dS\xb6\x9a\x98\xd4\xe7`" +
	"\xb2\x10\xe9\xb50\x10\x97PX\xb3\xdcx/\xaf\x1a\xc9" +
	"\x9bv\x0e\xb1\x12\xc1\xcb\xc8\x05\xe47\x87\x818\xcf\xc4" +
	"\xef!T\xeaA\x06\xe2\x06S.l\xc4\\\xd8\xc0@" +
	"\xdcBaM8I\xfa\x1bn~\x83\xea\xaau5F" +
	"\xfd\xf3\xa2\xda\xf0\xf1\x8f\xef3\x8d\xe5z\xd9\xe16\x93" +
	"\xa8\xbc\xc1\xa0\xde\x92P\xa7\xea\x1b\x12\xd9\xec\x8d\x871" +
	"S\xa7i9tRP\xbce\x0c\xc4\xa0I\xa7n\xd4" +
	"\xa9\x8b\x81xg\xfei\xb6&\x92\xd43\xd9Z'\x92" +
	"\x00\x0c\x0cA\xc9$\xbf\x1cQ\x86W\xc6kJEw" +
	"r\x092\xb2]\xc2@\xf4\x9b\x9703\xc7\x12\x02\xb8" +
	"X\x1f\x031L\x01\x98\xb1qv`N\x04\x19\x88]" +
	"\xc3\xee|\xe5\x11\x94y\xd8}0\xc7\x86\x1f?\x88\xec" +
	">\xfd \x1a.MW\xa2\xd2a\x06b\x8f\x89\xfbj" +
	"4\xf60\x10\xd7\x8e\xb0\xb6P\xdf\xeb\"\xa1\xcep\x96" +
	"\xbe\xf9\xa7ds\xa39{L\xbb\x00\x92\x9a\xc8@\xbc" +
	"\xc2D\xff^4\xde\xc3@|\xf4;\xd8\\\xf3\xcc\x94" +
	"\xeboS%<i\x0c\xc2c\x92\x84\x1f\x9bf\xda\x01" +
	"\x12\x84\xcd;@R\xef\xadh\xdc\xc2@\xdc\x85\xa7l" +
	"<Y\xfa1Y\xce2\x10\xbf\xc6S\xd6\xa2\x9f\xb2|" +
	":\xfc\x82\x10i\x060\x90\xae\x01<h\xad\xfaA\xcb" +
	"W\xc3\x1d\x84H=h_\x0b\x14\xcaW\xd5\xf9|\x91" +
	"t\xde\xed\x18\x97\x1f(\xddY\x0b\x8av\xabm\x0bB" +
	"\xf5\x8d\x86l#i[:\xe4\xae\xfaFIQ\x08\xa8" +
	"#mxd5\xa4\x06\xdad\x08J\xaa\x1c\x96\xfc!" +
	"\xd0F\xe8!\xac\xa8\xbe\x80\xda.\x81\xf1\xbeF\xbem" +
	"\xcb\xe5\xc5\x82\x934\x99i\x0a\xc6q^\"\x8e\xdcJ" +
	"\xa7\x11\xe2\xa5\x0c$\x17ME\x92\x17\xd1\xc5\x84H." +
	"\xb4\x8f\xa1\xc9\x8e\x89\x8f\xa5s\x09\x91\xc6\xa0\xb9\x8a\xa6" +
	"\x9a&^\xa9\xdb+\xd0~9\xda-\xcc\x88h\x0dz" +
	"\x97&\xa2\xfd\x0a\xb4[-FD\xe7\xd3\x9f\x11\"\xb5" +
	"\xa0}\x09\xdamV\xbd{\xe2\x9d\xba\x1f\x0d\xed?A" +
	"\xbb\xdd\xe6\x01;\x00\x7f\x9f>\x89\x17\x03\xb4\x9fB\xbb" +
	"\xc3\xee\x01\x07\x00\xafc\xf5x\x8bbx\x8bb\x14\x84" +
	"\x02\x87\x07\x0a\x00\xf8V\xb6\x0eo\x9ch\xdf\x8dvg" +
	"\x81\x07\x9c\xc8\xd3\x82\xcb\xaa\xb0 O\xac\x88B\x87\x07" +
	"\x0a\x01\xb8hY\x8e|\xd0\xbe\x04\xed.\xa7\x07\\\x00" +
	"\xfcF\x8b\x97\x10i\x11\xda}h/*\xf4@\x11\x00" +
	"?h\xd9L\x88t\x18\xed\xc7\xd1^\xec\xf2@1\xae" +
	"\xcbz\x0b!\xd2<+\x03i\x91\x95\x82PR\xe0\x81" +
	"\x12\xcc`+\xfa\xefA\xfbZ\xb4\xbb\x8b<\xe0\x06\xe0" +
	"wY\xd1\xff\x9dh\xbf\x1f\xedB\xb1\x07c\xc0\x8fX" +
	"\x91\xe7a\xb4\x1fG{i\x89\x07J\x91\x8f\xed9B" +
	"\xa4%6\x06\x92\xdf6D%H~\x99\xb0\x88\x92\xe3" +
	"\x97&_\x17\x96\x82\x8dP\xb0\x11\x18\xb4nF\xd2G" +
	"\xac\x08\x06\xda4\x08\xa8\xed^|G\xaf\xb3\xe1\xde\x1a" +
	"\xd5\xcd\xccLA\xefb\xecQ9\xf8\xad\xdd\xae\x89\xf7" +
	"\x99\xe0N\x0doRWA&,\x1d\xd1\xdd\x8ae\xb0" +
	"TZCl\xf4|\xc7\xa96\x13\x16\x08\xe6}\x17\x0e" +
	"t\x84\x83\x81\xb6\x80F\xec-\xad\xcd\x00\x84\x02\x18g" +
	"\xb1\xde3\x13}\xcf\x1a\xc5\x8b\xa5y\xf1\x0d\xa1\x12\xbc" +
	"\xbe\x8e\xe2\x07\x92\xb4\xf5^?\xef\xeb\xbbI\x83\x86\x94" +
	"\x06\xaa\xd2\xa5\xe1\x86I\xc0\x07\xee\xd4\xf0\xc9\x1c\xa1\xab" +
	"\x91\x9fXAA\xa8I\xf7\xc9\x0c\xc7\xe8\xa2Q\x09\xb4" +
	"\x13\xe6\xc7e&\xa7/\xe6T\xecp\x0a\x1d\xce\x91\x87" +
	"\xdb\x9a\xa6f3~\xc8hp\xbf\x8b\xef\xe8\xa7\x88%" +
	"\xa3Kn\xee\xecX\xaeD\x16Dd5*\xb7i\x81" +
	"\x90\x0a\xd1![\xe6\xf8\xb0&\xaf\x96\xc7\xfb\x1d\xb6<" +
	"C\xdf\xd3 A\xb7\\\xdf\xc7\xf2\xb8\xa5]\x8d+\x98" +
	"\xc5@l\xa4y7\xe8\xb9\x1b\xc8\xac\xc1\xcb\xf5\xb7\xa9" +
	"\xadr0\xe0\x935l\x03\x92\xe7\xb6i\xc81-\xc7" +
	"\x90\xe3\xa5\xb9\xa9\x81Fb\xc8\xb1\xef\x16\xd3\xe8\x82\x81" +
	"\xd1~\x1d\\g\x1a]X\xa81\xe4\xe8\xdb\x9c\x1a]" +
	"$\x87\x1c\xa7\x17\x13\"\x9eb ~\x99\x1ar\xf0\xf9" +
	"\x80\xc7\xd9<l\xc8\x16\x8d\xb4!\x8b\xc4;\x11R\x12" +
	"\xd1\x14\x1fX\x09\x05\xab\xb1\xef`\x8eH\xa0)aI" +
	"\x93#\x1aK\xff1>\xa7\x90\x8c\x9f\xd3\xdf]\x85J" +
	"\xb5\xcaA\xc2:\x95o\x9f(x\xc5P|\xad2\xb1" +
	"\x07G\xc3]V5\xc4\xe3\x1a*\x89HJ\xe6\xdce" +
	"q|\xee\xb2\xcc\x14Tyn\xea\x02\x96\x08\xaa\xf9\xae" +
	"e,_\xd6B\x84E\xa2PL\xa0\x85\x01\xd2NL" +
	"e\x09@1\x8ao\x9fC\x07\x8f\x8a\x1a\xd2\xea\x95\x15" +
	"!\xbd:\x86\xab\xe3f\xf6\xdf0MI\x0eZ\x0dR" +
	"\xc6\x10q\xb4N\xea\xdc\xc3\x81\xb4y\xe5\xe0U\x9e}" +
	"\xe9\x8b\x9f'\xe0\xcbc\x07L\x0b\xad\x9a\x1c6\xe0\x0e" +
	"\x98\xfc\x03\x9c)\x13\x07=\x83F\xa2\xe5\xb5j[\xa4" +
	";\xac)\xb3}\x92\x16\x8a(\x19S\x81\xc5\xa6\x01@" +
	"\x92%F\xdc\xcf@\xd4L7\xbd\xce\xf1\xa6\xebv\xe2" +
	"\xa6\xb7\xfa\xd2\xd4\xb4#\xd6\xd6\x1d\xf6+\x91\x05\x0aa" +
	"]\xe9\xb3\xc9r5\xa4\xb6\xa5\xd3\xb4\xdf\x1a\xf0\xa5\x19" +
	"JT\xb9#\xcf\xach\x98m\xcc\x1fr\x1dK\x99\xc3" +
	"\xed\xe4\x95\xdc\x88k\xf2\x0f\x8c\xa3\x91B\xd9\x93\xfb\xf8" +
	"\x89f|k\x94\xb6\x96\xac\x15\xc5\xf3\xcd\x97\xf8\xfb\xc0" +
	"7ja\x06\xf5\xeeM\xd3k\x84I\x99\xb38\xb0S" +
	"b\xfe|\x86\xd0;\xbd\xa9ys2\xef^\xc1\x0c}" +
	"\x99\x81\xb8\x1fK\xa6\xd1\\2\xa3\x12\xcd\xa1F\xd1F" +
	"\xd7\xc9\xb4h~\x89\xe9-\x89\xf7\x16\xdfdD\x9b8" +
	"9 \x92\xc7\xf6;\x15E\x99\xc2@\x9c5\xd2{\xe2" +
	"Pi\x85\x91\xf2C|\x01\xa3\xdam\xfe'\x00\x00\xff" +
	"\xffM\x11\xf8\xe7"

func init() {
	schemas.Register(schema_85d3acc39d94e0f8,
		0x89b89e420b3f9c38,
		0x8dcb9e08b15e3cd6,
		0x8f51a01d249e64dd,
		0x8f79354eaebf4233,
		0x8fc7e797b44a2d49,
		0x90b124b562cabcaa,
		0x9113e3f94e338143,
		0x962a57a2c30ab3cc,
		0x99e482280ba39765,
		0x9a7cf3b8ccdd561f,
		0x9af13d67202e38f8,
		0x9f4eef0460d9c655,
		0xa3caaf1bf82b3bee,
		0xa5bcb08c7a601f19,
		0xb23998c63938dd88,
		0xcbaccef171f6e853,
		0xcc032017c6d81c9e,
		0xce8da0c591f7b39f,
		0xcfa13406e7c64206,
		0xd00c238e033730eb,
		0xd6c749583b4cc63a,
		0xd7182e49f1abd5dc,
		0xd7dde404fa3b5b03,
		0xd9941258ffc9401a,
		0xdcd451184d295c70,
		0xde632a5d122ba87e,
		0xdf1d1641931033a1,
		0xdf3021ba1919105b,
		0xdfd8af3691b0caaa,
		0xe182549fc12d5efb,
		0xe9dc604f08007c66,
		0xea6e2e86a7dbd347,
		0xeea300ce6fc08faf,
		0xefe51f5028f060c9,
		0xf15d280e55952413,
		0xf4703a7b59d2fe96,
		0xfb76cd14c2ae27f8,
		0xfbcc481043fc6ef3)
}

var x_85d3acc39d94e0f8 = []byte{
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	32, 0, 0, 0, 2, 0, 1, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 3, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 2, 0,
	29, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 2, 0,
	29, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	61, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	32, 0, 0, 0, 2, 0, 1, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	32, 0, 0, 0, 2, 0, 1, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	32, 0, 0, 0, 2, 0, 1, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 0, 0,
	1, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 2, 0,
	29, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 3, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 3, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 2, 0,
	29, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	61, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	32, 0, 0, 0, 2, 0, 1, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 2, 0,
	29, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 3, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 3, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 2, 0,
	29, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	61, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	32, 0, 0, 0, 2, 0, 1, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
}
