// Code generated by go-mockgen 1.3.3; DO NOT EDIT.

package mocks

import (
	"math/big"
	"sync"

	objs1 "github.com/alicenet/alicenet/application/objs"
	objs "github.com/alicenet/alicenet/consensus/objs"
	constants "github.com/alicenet/alicenet/constants"
	interfaces "github.com/alicenet/alicenet/layer1/monitor/interfaces"
	v2 "github.com/dgraph-io/badger/v2"
)

// MockAdminClient is a mock implementation of the AdminClient interface
// (from the package github.com/alicenet/alicenet/layer1/monitor/interfaces)
// used for unit testing.
type MockAdminClient struct {
	// SetAdminHandlerFunc is an instance of a mock function object
	// controlling the behavior of the method SetAdminHandler.
	SetAdminHandlerFunc *AdminClientSetAdminHandlerFunc
}

// NewMockAdminClient creates a new mock of the AdminClient interface. All
// methods return zero values for all results, unless overwritten.
func NewMockAdminClient() *MockAdminClient {
	return &MockAdminClient{
		SetAdminHandlerFunc: &AdminClientSetAdminHandlerFunc{
			defaultHook: func(interfaces.AdminHandler) {
				return
			},
		},
	}
}

// NewStrictMockAdminClient creates a new mock of the AdminClient interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockAdminClient() *MockAdminClient {
	return &MockAdminClient{
		SetAdminHandlerFunc: &AdminClientSetAdminHandlerFunc{
			defaultHook: func(interfaces.AdminHandler) {
				panic("unexpected invocation of MockAdminClient.SetAdminHandler")
			},
		},
	}
}

// NewMockAdminClientFrom creates a new mock of the MockAdminClient
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockAdminClientFrom(i interfaces.AdminClient) *MockAdminClient {
	return &MockAdminClient{
		SetAdminHandlerFunc: &AdminClientSetAdminHandlerFunc{
			defaultHook: i.SetAdminHandler,
		},
	}
}

// AdminClientSetAdminHandlerFunc describes the behavior when the
// SetAdminHandler method of the parent MockAdminClient instance is invoked.
type AdminClientSetAdminHandlerFunc struct {
	defaultHook func(interfaces.AdminHandler)
	hooks       []func(interfaces.AdminHandler)
	history     []AdminClientSetAdminHandlerFuncCall
	mutex       sync.Mutex
}

// SetAdminHandler delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAdminClient) SetAdminHandler(v0 interfaces.AdminHandler) {
	m.SetAdminHandlerFunc.nextHook()(v0)
	m.SetAdminHandlerFunc.appendCall(AdminClientSetAdminHandlerFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetAdminHandler
// method of the parent MockAdminClient instance is invoked and the hook
// queue is empty.
func (f *AdminClientSetAdminHandlerFunc) SetDefaultHook(hook func(interfaces.AdminHandler)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetAdminHandler method of the parent MockAdminClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AdminClientSetAdminHandlerFunc) PushHook(hook func(interfaces.AdminHandler)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AdminClientSetAdminHandlerFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(interfaces.AdminHandler) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AdminClientSetAdminHandlerFunc) PushReturn() {
	f.PushHook(func(interfaces.AdminHandler) {
		return
	})
}

func (f *AdminClientSetAdminHandlerFunc) nextHook() func(interfaces.AdminHandler) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdminClientSetAdminHandlerFunc) appendCall(r0 AdminClientSetAdminHandlerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdminClientSetAdminHandlerFuncCall objects
// describing the invocations of this function.
func (f *AdminClientSetAdminHandlerFunc) History() []AdminClientSetAdminHandlerFuncCall {
	f.mutex.Lock()
	history := make([]AdminClientSetAdminHandlerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdminClientSetAdminHandlerFuncCall is an object that describes an
// invocation of method SetAdminHandler on an instance of MockAdminClient.
type AdminClientSetAdminHandlerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interfaces.AdminHandler
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdminClientSetAdminHandlerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdminClientSetAdminHandlerFuncCall) Results() []interface{} {
	return []interface{}{}
}

// MockAdminHandler is a mock implementation of the AdminHandler interface
// (from the package github.com/alicenet/alicenet/layer1/monitor/interfaces)
// used for unit testing.
type MockAdminHandler struct {
	// AddPrivateKeyFunc is an instance of a mock function object
	// controlling the behavior of the method AddPrivateKey.
	AddPrivateKeyFunc *AdminHandlerAddPrivateKeyFunc
	// AddSnapshotFunc is an instance of a mock function object controlling
	// the behavior of the method AddSnapshot.
	AddSnapshotFunc *AdminHandlerAddSnapshotFunc
	// AddValidatorSetFunc is an instance of a mock function object
	// controlling the behavior of the method AddValidatorSet.
	AddValidatorSetFunc *AdminHandlerAddValidatorSetFunc
	// IsSynchronizedFunc is an instance of a mock function object
	// controlling the behavior of the method IsSynchronized.
	IsSynchronizedFunc *AdminHandlerIsSynchronizedFunc
	// RegisterSnapshotCallbackFunc is an instance of a mock function object
	// controlling the behavior of the method RegisterSnapshotCallback.
	RegisterSnapshotCallbackFunc *AdminHandlerRegisterSnapshotCallbackFunc
	// SetSynchronizedFunc is an instance of a mock function object
	// controlling the behavior of the method SetSynchronized.
	SetSynchronizedFunc *AdminHandlerSetSynchronizedFunc
}

// NewMockAdminHandler creates a new mock of the AdminHandler interface. All
// methods return zero values for all results, unless overwritten.
func NewMockAdminHandler() *MockAdminHandler {
	return &MockAdminHandler{
		AddPrivateKeyFunc: &AdminHandlerAddPrivateKeyFunc{
			defaultHook: func([]byte, constants.CurveSpec) (r0 error) {
				return
			},
		},
		AddSnapshotFunc: &AdminHandlerAddSnapshotFunc{
			defaultHook: func(*objs.BlockHeader, bool) (r0 error) {
				return
			},
		},
		AddValidatorSetFunc: &AdminHandlerAddValidatorSetFunc{
			defaultHook: func(*objs.ValidatorSet) (r0 error) {
				return
			},
		},
		IsSynchronizedFunc: &AdminHandlerIsSynchronizedFunc{
			defaultHook: func() (r0 bool) {
				return
			},
		},
		RegisterSnapshotCallbackFunc: &AdminHandlerRegisterSnapshotCallbackFunc{
			defaultHook: func(func(*objs.BlockHeader, int, int) error) {
				return
			},
		},
		SetSynchronizedFunc: &AdminHandlerSetSynchronizedFunc{
			defaultHook: func(bool) {
				return
			},
		},
	}
}

// NewStrictMockAdminHandler creates a new mock of the AdminHandler
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockAdminHandler() *MockAdminHandler {
	return &MockAdminHandler{
		AddPrivateKeyFunc: &AdminHandlerAddPrivateKeyFunc{
			defaultHook: func([]byte, constants.CurveSpec) error {
				panic("unexpected invocation of MockAdminHandler.AddPrivateKey")
			},
		},
		AddSnapshotFunc: &AdminHandlerAddSnapshotFunc{
			defaultHook: func(*objs.BlockHeader, bool) error {
				panic("unexpected invocation of MockAdminHandler.AddSnapshot")
			},
		},
		AddValidatorSetFunc: &AdminHandlerAddValidatorSetFunc{
			defaultHook: func(*objs.ValidatorSet) error {
				panic("unexpected invocation of MockAdminHandler.AddValidatorSet")
			},
		},
		IsSynchronizedFunc: &AdminHandlerIsSynchronizedFunc{
			defaultHook: func() bool {
				panic("unexpected invocation of MockAdminHandler.IsSynchronized")
			},
		},
		RegisterSnapshotCallbackFunc: &AdminHandlerRegisterSnapshotCallbackFunc{
			defaultHook: func(func(*objs.BlockHeader, int, int) error) {
				panic("unexpected invocation of MockAdminHandler.RegisterSnapshotCallback")
			},
		},
		SetSynchronizedFunc: &AdminHandlerSetSynchronizedFunc{
			defaultHook: func(bool) {
				panic("unexpected invocation of MockAdminHandler.SetSynchronized")
			},
		},
	}
}

// NewMockAdminHandlerFrom creates a new mock of the MockAdminHandler
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockAdminHandlerFrom(i interfaces.AdminHandler) *MockAdminHandler {
	return &MockAdminHandler{
		AddPrivateKeyFunc: &AdminHandlerAddPrivateKeyFunc{
			defaultHook: i.AddPrivateKey,
		},
		AddSnapshotFunc: &AdminHandlerAddSnapshotFunc{
			defaultHook: i.AddSnapshot,
		},
		AddValidatorSetFunc: &AdminHandlerAddValidatorSetFunc{
			defaultHook: i.AddValidatorSet,
		},
		IsSynchronizedFunc: &AdminHandlerIsSynchronizedFunc{
			defaultHook: i.IsSynchronized,
		},
		RegisterSnapshotCallbackFunc: &AdminHandlerRegisterSnapshotCallbackFunc{
			defaultHook: i.RegisterSnapshotCallback,
		},
		SetSynchronizedFunc: &AdminHandlerSetSynchronizedFunc{
			defaultHook: i.SetSynchronized,
		},
	}
}

// AdminHandlerAddPrivateKeyFunc describes the behavior when the
// AddPrivateKey method of the parent MockAdminHandler instance is invoked.
type AdminHandlerAddPrivateKeyFunc struct {
	defaultHook func([]byte, constants.CurveSpec) error
	hooks       []func([]byte, constants.CurveSpec) error
	history     []AdminHandlerAddPrivateKeyFuncCall
	mutex       sync.Mutex
}

// AddPrivateKey delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAdminHandler) AddPrivateKey(v0 []byte, v1 constants.CurveSpec) error {
	r0 := m.AddPrivateKeyFunc.nextHook()(v0, v1)
	m.AddPrivateKeyFunc.appendCall(AdminHandlerAddPrivateKeyFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddPrivateKey method
// of the parent MockAdminHandler instance is invoked and the hook queue is
// empty.
func (f *AdminHandlerAddPrivateKeyFunc) SetDefaultHook(hook func([]byte, constants.CurveSpec) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddPrivateKey method of the parent MockAdminHandler instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AdminHandlerAddPrivateKeyFunc) PushHook(hook func([]byte, constants.CurveSpec) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AdminHandlerAddPrivateKeyFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func([]byte, constants.CurveSpec) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AdminHandlerAddPrivateKeyFunc) PushReturn(r0 error) {
	f.PushHook(func([]byte, constants.CurveSpec) error {
		return r0
	})
}

func (f *AdminHandlerAddPrivateKeyFunc) nextHook() func([]byte, constants.CurveSpec) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdminHandlerAddPrivateKeyFunc) appendCall(r0 AdminHandlerAddPrivateKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdminHandlerAddPrivateKeyFuncCall objects
// describing the invocations of this function.
func (f *AdminHandlerAddPrivateKeyFunc) History() []AdminHandlerAddPrivateKeyFuncCall {
	f.mutex.Lock()
	history := make([]AdminHandlerAddPrivateKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdminHandlerAddPrivateKeyFuncCall is an object that describes an
// invocation of method AddPrivateKey on an instance of MockAdminHandler.
type AdminHandlerAddPrivateKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 []byte
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 constants.CurveSpec
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdminHandlerAddPrivateKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdminHandlerAddPrivateKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AdminHandlerAddSnapshotFunc describes the behavior when the AddSnapshot
// method of the parent MockAdminHandler instance is invoked.
type AdminHandlerAddSnapshotFunc struct {
	defaultHook func(*objs.BlockHeader, bool) error
	hooks       []func(*objs.BlockHeader, bool) error
	history     []AdminHandlerAddSnapshotFuncCall
	mutex       sync.Mutex
}

// AddSnapshot delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAdminHandler) AddSnapshot(v0 *objs.BlockHeader, v1 bool) error {
	r0 := m.AddSnapshotFunc.nextHook()(v0, v1)
	m.AddSnapshotFunc.appendCall(AdminHandlerAddSnapshotFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddSnapshot method
// of the parent MockAdminHandler instance is invoked and the hook queue is
// empty.
func (f *AdminHandlerAddSnapshotFunc) SetDefaultHook(hook func(*objs.BlockHeader, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddSnapshot method of the parent MockAdminHandler instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AdminHandlerAddSnapshotFunc) PushHook(hook func(*objs.BlockHeader, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AdminHandlerAddSnapshotFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*objs.BlockHeader, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AdminHandlerAddSnapshotFunc) PushReturn(r0 error) {
	f.PushHook(func(*objs.BlockHeader, bool) error {
		return r0
	})
}

func (f *AdminHandlerAddSnapshotFunc) nextHook() func(*objs.BlockHeader, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdminHandlerAddSnapshotFunc) appendCall(r0 AdminHandlerAddSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdminHandlerAddSnapshotFuncCall objects
// describing the invocations of this function.
func (f *AdminHandlerAddSnapshotFunc) History() []AdminHandlerAddSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]AdminHandlerAddSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdminHandlerAddSnapshotFuncCall is an object that describes an invocation
// of method AddSnapshot on an instance of MockAdminHandler.
type AdminHandlerAddSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *objs.BlockHeader
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdminHandlerAddSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdminHandlerAddSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AdminHandlerAddValidatorSetFunc describes the behavior when the
// AddValidatorSet method of the parent MockAdminHandler instance is
// invoked.
type AdminHandlerAddValidatorSetFunc struct {
	defaultHook func(*objs.ValidatorSet) error
	hooks       []func(*objs.ValidatorSet) error
	history     []AdminHandlerAddValidatorSetFuncCall
	mutex       sync.Mutex
}

// AddValidatorSet delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAdminHandler) AddValidatorSet(v0 *objs.ValidatorSet) error {
	r0 := m.AddValidatorSetFunc.nextHook()(v0)
	m.AddValidatorSetFunc.appendCall(AdminHandlerAddValidatorSetFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddValidatorSet
// method of the parent MockAdminHandler instance is invoked and the hook
// queue is empty.
func (f *AdminHandlerAddValidatorSetFunc) SetDefaultHook(hook func(*objs.ValidatorSet) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddValidatorSet method of the parent MockAdminHandler instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AdminHandlerAddValidatorSetFunc) PushHook(hook func(*objs.ValidatorSet) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AdminHandlerAddValidatorSetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*objs.ValidatorSet) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AdminHandlerAddValidatorSetFunc) PushReturn(r0 error) {
	f.PushHook(func(*objs.ValidatorSet) error {
		return r0
	})
}

func (f *AdminHandlerAddValidatorSetFunc) nextHook() func(*objs.ValidatorSet) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdminHandlerAddValidatorSetFunc) appendCall(r0 AdminHandlerAddValidatorSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdminHandlerAddValidatorSetFuncCall objects
// describing the invocations of this function.
func (f *AdminHandlerAddValidatorSetFunc) History() []AdminHandlerAddValidatorSetFuncCall {
	f.mutex.Lock()
	history := make([]AdminHandlerAddValidatorSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdminHandlerAddValidatorSetFuncCall is an object that describes an
// invocation of method AddValidatorSet on an instance of MockAdminHandler.
type AdminHandlerAddValidatorSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *objs.ValidatorSet
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdminHandlerAddValidatorSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdminHandlerAddValidatorSetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AdminHandlerIsSynchronizedFunc describes the behavior when the
// IsSynchronized method of the parent MockAdminHandler instance is invoked.
type AdminHandlerIsSynchronizedFunc struct {
	defaultHook func() bool
	hooks       []func() bool
	history     []AdminHandlerIsSynchronizedFuncCall
	mutex       sync.Mutex
}

// IsSynchronized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAdminHandler) IsSynchronized() bool {
	r0 := m.IsSynchronizedFunc.nextHook()()
	m.IsSynchronizedFunc.appendCall(AdminHandlerIsSynchronizedFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the IsSynchronized
// method of the parent MockAdminHandler instance is invoked and the hook
// queue is empty.
func (f *AdminHandlerIsSynchronizedFunc) SetDefaultHook(hook func() bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsSynchronized method of the parent MockAdminHandler instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AdminHandlerIsSynchronizedFunc) PushHook(hook func() bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AdminHandlerIsSynchronizedFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func() bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AdminHandlerIsSynchronizedFunc) PushReturn(r0 bool) {
	f.PushHook(func() bool {
		return r0
	})
}

func (f *AdminHandlerIsSynchronizedFunc) nextHook() func() bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdminHandlerIsSynchronizedFunc) appendCall(r0 AdminHandlerIsSynchronizedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdminHandlerIsSynchronizedFuncCall objects
// describing the invocations of this function.
func (f *AdminHandlerIsSynchronizedFunc) History() []AdminHandlerIsSynchronizedFuncCall {
	f.mutex.Lock()
	history := make([]AdminHandlerIsSynchronizedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdminHandlerIsSynchronizedFuncCall is an object that describes an
// invocation of method IsSynchronized on an instance of MockAdminHandler.
type AdminHandlerIsSynchronizedFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdminHandlerIsSynchronizedFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdminHandlerIsSynchronizedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AdminHandlerRegisterSnapshotCallbackFunc describes the behavior when the
// RegisterSnapshotCallback method of the parent MockAdminHandler instance
// is invoked.
type AdminHandlerRegisterSnapshotCallbackFunc struct {
	defaultHook func(func(*objs.BlockHeader, int, int) error)
	hooks       []func(func(*objs.BlockHeader, int, int) error)
	history     []AdminHandlerRegisterSnapshotCallbackFuncCall
	mutex       sync.Mutex
}

// RegisterSnapshotCallback delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockAdminHandler) RegisterSnapshotCallback(v0 func(*objs.BlockHeader, int, int) error) {
	m.RegisterSnapshotCallbackFunc.nextHook()(v0)
	m.RegisterSnapshotCallbackFunc.appendCall(AdminHandlerRegisterSnapshotCallbackFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the
// RegisterSnapshotCallback method of the parent MockAdminHandler instance
// is invoked and the hook queue is empty.
func (f *AdminHandlerRegisterSnapshotCallbackFunc) SetDefaultHook(hook func(func(*objs.BlockHeader, int, int) error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RegisterSnapshotCallback method of the parent MockAdminHandler instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AdminHandlerRegisterSnapshotCallbackFunc) PushHook(hook func(func(*objs.BlockHeader, int, int) error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AdminHandlerRegisterSnapshotCallbackFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(func(*objs.BlockHeader, int, int) error) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AdminHandlerRegisterSnapshotCallbackFunc) PushReturn() {
	f.PushHook(func(func(*objs.BlockHeader, int, int) error) {
		return
	})
}

func (f *AdminHandlerRegisterSnapshotCallbackFunc) nextHook() func(func(*objs.BlockHeader, int, int) error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdminHandlerRegisterSnapshotCallbackFunc) appendCall(r0 AdminHandlerRegisterSnapshotCallbackFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AdminHandlerRegisterSnapshotCallbackFuncCall objects describing the
// invocations of this function.
func (f *AdminHandlerRegisterSnapshotCallbackFunc) History() []AdminHandlerRegisterSnapshotCallbackFuncCall {
	f.mutex.Lock()
	history := make([]AdminHandlerRegisterSnapshotCallbackFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdminHandlerRegisterSnapshotCallbackFuncCall is an object that describes
// an invocation of method RegisterSnapshotCallback on an instance of
// MockAdminHandler.
type AdminHandlerRegisterSnapshotCallbackFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 func(*objs.BlockHeader, int, int) error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdminHandlerRegisterSnapshotCallbackFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdminHandlerRegisterSnapshotCallbackFuncCall) Results() []interface{} {
	return []interface{}{}
}

// AdminHandlerSetSynchronizedFunc describes the behavior when the
// SetSynchronized method of the parent MockAdminHandler instance is
// invoked.
type AdminHandlerSetSynchronizedFunc struct {
	defaultHook func(bool)
	hooks       []func(bool)
	history     []AdminHandlerSetSynchronizedFuncCall
	mutex       sync.Mutex
}

// SetSynchronized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAdminHandler) SetSynchronized(v0 bool) {
	m.SetSynchronizedFunc.nextHook()(v0)
	m.SetSynchronizedFunc.appendCall(AdminHandlerSetSynchronizedFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetSynchronized
// method of the parent MockAdminHandler instance is invoked and the hook
// queue is empty.
func (f *AdminHandlerSetSynchronizedFunc) SetDefaultHook(hook func(bool)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetSynchronized method of the parent MockAdminHandler instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AdminHandlerSetSynchronizedFunc) PushHook(hook func(bool)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AdminHandlerSetSynchronizedFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(bool) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AdminHandlerSetSynchronizedFunc) PushReturn() {
	f.PushHook(func(bool) {
		return
	})
}

func (f *AdminHandlerSetSynchronizedFunc) nextHook() func(bool) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdminHandlerSetSynchronizedFunc) appendCall(r0 AdminHandlerSetSynchronizedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdminHandlerSetSynchronizedFuncCall objects
// describing the invocations of this function.
func (f *AdminHandlerSetSynchronizedFunc) History() []AdminHandlerSetSynchronizedFuncCall {
	f.mutex.Lock()
	history := make([]AdminHandlerSetSynchronizedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdminHandlerSetSynchronizedFuncCall is an object that describes an
// invocation of method SetSynchronized on an instance of MockAdminHandler.
type AdminHandlerSetSynchronizedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdminHandlerSetSynchronizedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdminHandlerSetSynchronizedFuncCall) Results() []interface{} {
	return []interface{}{}
}

// MockDepositHandler is a mock implementation of the DepositHandler
// interface (from the package
// github.com/alicenet/alicenet/layer1/monitor/interfaces) used for unit
// testing.
type MockDepositHandler struct {
	// AddFunc is an instance of a mock function object controlling the
	// behavior of the method Add.
	AddFunc *DepositHandlerAddFunc
}

// NewMockDepositHandler creates a new mock of the DepositHandler interface.
// All methods return zero values for all results, unless overwritten.
func NewMockDepositHandler() *MockDepositHandler {
	return &MockDepositHandler{
		AddFunc: &DepositHandlerAddFunc{
			defaultHook: func(*v2.Txn, uint32, []byte, *big.Int, *objs1.Owner) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockDepositHandler creates a new mock of the DepositHandler
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockDepositHandler() *MockDepositHandler {
	return &MockDepositHandler{
		AddFunc: &DepositHandlerAddFunc{
			defaultHook: func(*v2.Txn, uint32, []byte, *big.Int, *objs1.Owner) error {
				panic("unexpected invocation of MockDepositHandler.Add")
			},
		},
	}
}

// NewMockDepositHandlerFrom creates a new mock of the MockDepositHandler
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockDepositHandlerFrom(i interfaces.DepositHandler) *MockDepositHandler {
	return &MockDepositHandler{
		AddFunc: &DepositHandlerAddFunc{
			defaultHook: i.Add,
		},
	}
}

// DepositHandlerAddFunc describes the behavior when the Add method of the
// parent MockDepositHandler instance is invoked.
type DepositHandlerAddFunc struct {
	defaultHook func(*v2.Txn, uint32, []byte, *big.Int, *objs1.Owner) error
	hooks       []func(*v2.Txn, uint32, []byte, *big.Int, *objs1.Owner) error
	history     []DepositHandlerAddFuncCall
	mutex       sync.Mutex
}

// Add delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDepositHandler) Add(v0 *v2.Txn, v1 uint32, v2 []byte, v3 *big.Int, v4 *objs1.Owner) error {
	r0 := m.AddFunc.nextHook()(v0, v1, v2, v3, v4)
	m.AddFunc.appendCall(DepositHandlerAddFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Add method of the
// parent MockDepositHandler instance is invoked and the hook queue is
// empty.
func (f *DepositHandlerAddFunc) SetDefaultHook(hook func(*v2.Txn, uint32, []byte, *big.Int, *objs1.Owner) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Add method of the parent MockDepositHandler instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DepositHandlerAddFunc) PushHook(hook func(*v2.Txn, uint32, []byte, *big.Int, *objs1.Owner) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DepositHandlerAddFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*v2.Txn, uint32, []byte, *big.Int, *objs1.Owner) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DepositHandlerAddFunc) PushReturn(r0 error) {
	f.PushHook(func(*v2.Txn, uint32, []byte, *big.Int, *objs1.Owner) error {
		return r0
	})
}

func (f *DepositHandlerAddFunc) nextHook() func(*v2.Txn, uint32, []byte, *big.Int, *objs1.Owner) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DepositHandlerAddFunc) appendCall(r0 DepositHandlerAddFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DepositHandlerAddFuncCall objects
// describing the invocations of this function.
func (f *DepositHandlerAddFunc) History() []DepositHandlerAddFuncCall {
	f.mutex.Lock()
	history := make([]DepositHandlerAddFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DepositHandlerAddFuncCall is an object that describes an invocation of
// method Add on an instance of MockDepositHandler.
type DepositHandlerAddFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *v2.Txn
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []byte
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 *objs1.Owner
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DepositHandlerAddFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DepositHandlerAddFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
