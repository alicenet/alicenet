// Code generated by go-mockgen 1.1.4; DO NOT EDIT.

package mocks

import (
	"context"
	"math/big"
	"sync"

	interfaces "github.com/alicenet/alicenet/blockchain/interfaces"
	bindings "github.com/alicenet/alicenet/bridge/bindings"
	objs "github.com/alicenet/alicenet/consensus/objs"
	constants "github.com/alicenet/alicenet/constants"
	goethereum "github.com/ethereum/go-ethereum"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	logrus "github.com/sirupsen/logrus"
)

// MockAdminHandler is a mock implementation of the AdminHandler interface
// (from the package github.com/alicenet/alicenet/blockchain/interfaces) used
// for unit testing.
type MockAdminHandler struct {
	// AddPrivateKeyFunc is an instance of a mock function object
	// controlling the behavior of the method AddPrivateKey.
	AddPrivateKeyFunc *AdminHandlerAddPrivateKeyFunc
	// AddSnapshotFunc is an instance of a mock function object controlling
	// the behavior of the method AddSnapshot.
	AddSnapshotFunc *AdminHandlerAddSnapshotFunc
	// AddValidatorSetFunc is an instance of a mock function object
	// controlling the behavior of the method AddValidatorSet.
	AddValidatorSetFunc *AdminHandlerAddValidatorSetFunc
	// RegisterSnapshotCallbackFunc is an instance of a mock function object
	// controlling the behavior of the method RegisterSnapshotCallback.
	RegisterSnapshotCallbackFunc *AdminHandlerRegisterSnapshotCallbackFunc
	// SetSynchronizedFunc is an instance of a mock function object
	// controlling the behavior of the method SetSynchronized.
	SetSynchronizedFunc *AdminHandlerSetSynchronizedFunc
}

// NewMockAdminHandler creates a new mock of the AdminHandler interface. All
// methods return zero values for all results, unless overwritten.
func NewMockAdminHandler() *MockAdminHandler {
	return &MockAdminHandler{
		AddPrivateKeyFunc: &AdminHandlerAddPrivateKeyFunc{
			defaultHook: func([]byte, constants.CurveSpec) error {
				return nil
			},
		},
		AddSnapshotFunc: &AdminHandlerAddSnapshotFunc{
			defaultHook: func(*objs.BlockHeader, bool) error {
				return nil
			},
		},
		AddValidatorSetFunc: &AdminHandlerAddValidatorSetFunc{
			defaultHook: func(*objs.ValidatorSet) error {
				return nil
			},
		},
		RegisterSnapshotCallbackFunc: &AdminHandlerRegisterSnapshotCallbackFunc{
			defaultHook: func(func(*objs.BlockHeader) error) {
				return
			},
		},
		SetSynchronizedFunc: &AdminHandlerSetSynchronizedFunc{
			defaultHook: func(bool) {
				return
			},
		},
	}
}

// NewStrictMockAdminHandler creates a new mock of the AdminHandler
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockAdminHandler() *MockAdminHandler {
	return &MockAdminHandler{
		AddPrivateKeyFunc: &AdminHandlerAddPrivateKeyFunc{
			defaultHook: func([]byte, constants.CurveSpec) error {
				panic("unexpected invocation of MockAdminHandler.AddPrivateKey")
			},
		},
		AddSnapshotFunc: &AdminHandlerAddSnapshotFunc{
			defaultHook: func(*objs.BlockHeader, bool) error {
				panic("unexpected invocation of MockAdminHandler.AddSnapshot")
			},
		},
		AddValidatorSetFunc: &AdminHandlerAddValidatorSetFunc{
			defaultHook: func(*objs.ValidatorSet) error {
				panic("unexpected invocation of MockAdminHandler.AddValidatorSet")
			},
		},
		RegisterSnapshotCallbackFunc: &AdminHandlerRegisterSnapshotCallbackFunc{
			defaultHook: func(func(*objs.BlockHeader) error) {
				panic("unexpected invocation of MockAdminHandler.RegisterSnapshotCallback")
			},
		},
		SetSynchronizedFunc: &AdminHandlerSetSynchronizedFunc{
			defaultHook: func(bool) {
				panic("unexpected invocation of MockAdminHandler.SetSynchronized")
			},
		},
	}
}

// NewMockAdminHandlerFrom creates a new mock of the MockAdminHandler
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockAdminHandlerFrom(i interfaces.AdminHandler) *MockAdminHandler {
	return &MockAdminHandler{
		AddPrivateKeyFunc: &AdminHandlerAddPrivateKeyFunc{
			defaultHook: i.AddPrivateKey,
		},
		AddSnapshotFunc: &AdminHandlerAddSnapshotFunc{
			defaultHook: i.AddSnapshot,
		},
		AddValidatorSetFunc: &AdminHandlerAddValidatorSetFunc{
			defaultHook: i.AddValidatorSet,
		},
		RegisterSnapshotCallbackFunc: &AdminHandlerRegisterSnapshotCallbackFunc{
			defaultHook: i.RegisterSnapshotCallback,
		},
		SetSynchronizedFunc: &AdminHandlerSetSynchronizedFunc{
			defaultHook: i.SetSynchronized,
		},
	}
}

// AdminHandlerAddPrivateKeyFunc describes the behavior when the
// AddPrivateKey method of the parent MockAdminHandler instance is invoked.
type AdminHandlerAddPrivateKeyFunc struct {
	defaultHook func([]byte, constants.CurveSpec) error
	hooks       []func([]byte, constants.CurveSpec) error
	history     []AdminHandlerAddPrivateKeyFuncCall
	mutex       sync.Mutex
}

// AddPrivateKey delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAdminHandler) AddPrivateKey(v0 []byte, v1 constants.CurveSpec) error {
	r0 := m.AddPrivateKeyFunc.nextHook()(v0, v1)
	m.AddPrivateKeyFunc.appendCall(AdminHandlerAddPrivateKeyFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddPrivateKey method
// of the parent MockAdminHandler instance is invoked and the hook queue is
// empty.
func (f *AdminHandlerAddPrivateKeyFunc) SetDefaultHook(hook func([]byte, constants.CurveSpec) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddPrivateKey method of the parent MockAdminHandler instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AdminHandlerAddPrivateKeyFunc) PushHook(hook func([]byte, constants.CurveSpec) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AdminHandlerAddPrivateKeyFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func([]byte, constants.CurveSpec) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AdminHandlerAddPrivateKeyFunc) PushReturn(r0 error) {
	f.PushHook(func([]byte, constants.CurveSpec) error {
		return r0
	})
}

func (f *AdminHandlerAddPrivateKeyFunc) nextHook() func([]byte, constants.CurveSpec) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdminHandlerAddPrivateKeyFunc) appendCall(r0 AdminHandlerAddPrivateKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdminHandlerAddPrivateKeyFuncCall objects
// describing the invocations of this function.
func (f *AdminHandlerAddPrivateKeyFunc) History() []AdminHandlerAddPrivateKeyFuncCall {
	f.mutex.Lock()
	history := make([]AdminHandlerAddPrivateKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdminHandlerAddPrivateKeyFuncCall is an object that describes an
// invocation of method AddPrivateKey on an instance of MockAdminHandler.
type AdminHandlerAddPrivateKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 []byte
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 constants.CurveSpec
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdminHandlerAddPrivateKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdminHandlerAddPrivateKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AdminHandlerAddSnapshotFunc describes the behavior when the AddSnapshot
// method of the parent MockAdminHandler instance is invoked.
type AdminHandlerAddSnapshotFunc struct {
	defaultHook func(*objs.BlockHeader, bool) error
	hooks       []func(*objs.BlockHeader, bool) error
	history     []AdminHandlerAddSnapshotFuncCall
	mutex       sync.Mutex
}

// AddSnapshot delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAdminHandler) AddSnapshot(v0 *objs.BlockHeader, v1 bool) error {
	r0 := m.AddSnapshotFunc.nextHook()(v0, v1)
	m.AddSnapshotFunc.appendCall(AdminHandlerAddSnapshotFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddSnapshot method
// of the parent MockAdminHandler instance is invoked and the hook queue is
// empty.
func (f *AdminHandlerAddSnapshotFunc) SetDefaultHook(hook func(*objs.BlockHeader, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddSnapshot method of the parent MockAdminHandler instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AdminHandlerAddSnapshotFunc) PushHook(hook func(*objs.BlockHeader, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AdminHandlerAddSnapshotFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*objs.BlockHeader, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AdminHandlerAddSnapshotFunc) PushReturn(r0 error) {
	f.PushHook(func(*objs.BlockHeader, bool) error {
		return r0
	})
}

func (f *AdminHandlerAddSnapshotFunc) nextHook() func(*objs.BlockHeader, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdminHandlerAddSnapshotFunc) appendCall(r0 AdminHandlerAddSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdminHandlerAddSnapshotFuncCall objects
// describing the invocations of this function.
func (f *AdminHandlerAddSnapshotFunc) History() []AdminHandlerAddSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]AdminHandlerAddSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdminHandlerAddSnapshotFuncCall is an object that describes an invocation
// of method AddSnapshot on an instance of MockAdminHandler.
type AdminHandlerAddSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *objs.BlockHeader
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdminHandlerAddSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdminHandlerAddSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AdminHandlerAddValidatorSetFunc describes the behavior when the
// AddValidatorSet method of the parent MockAdminHandler instance is
// invoked.
type AdminHandlerAddValidatorSetFunc struct {
	defaultHook func(*objs.ValidatorSet) error
	hooks       []func(*objs.ValidatorSet) error
	history     []AdminHandlerAddValidatorSetFuncCall
	mutex       sync.Mutex
}

// AddValidatorSet delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAdminHandler) AddValidatorSet(v0 *objs.ValidatorSet) error {
	r0 := m.AddValidatorSetFunc.nextHook()(v0)
	m.AddValidatorSetFunc.appendCall(AdminHandlerAddValidatorSetFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddValidatorSet
// method of the parent MockAdminHandler instance is invoked and the hook
// queue is empty.
func (f *AdminHandlerAddValidatorSetFunc) SetDefaultHook(hook func(*objs.ValidatorSet) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddValidatorSet method of the parent MockAdminHandler instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AdminHandlerAddValidatorSetFunc) PushHook(hook func(*objs.ValidatorSet) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AdminHandlerAddValidatorSetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*objs.ValidatorSet) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AdminHandlerAddValidatorSetFunc) PushReturn(r0 error) {
	f.PushHook(func(*objs.ValidatorSet) error {
		return r0
	})
}

func (f *AdminHandlerAddValidatorSetFunc) nextHook() func(*objs.ValidatorSet) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdminHandlerAddValidatorSetFunc) appendCall(r0 AdminHandlerAddValidatorSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdminHandlerAddValidatorSetFuncCall objects
// describing the invocations of this function.
func (f *AdminHandlerAddValidatorSetFunc) History() []AdminHandlerAddValidatorSetFuncCall {
	f.mutex.Lock()
	history := make([]AdminHandlerAddValidatorSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdminHandlerAddValidatorSetFuncCall is an object that describes an
// invocation of method AddValidatorSet on an instance of MockAdminHandler.
type AdminHandlerAddValidatorSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *objs.ValidatorSet
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdminHandlerAddValidatorSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdminHandlerAddValidatorSetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AdminHandlerRegisterSnapshotCallbackFunc describes the behavior when the
// RegisterSnapshotCallback method of the parent MockAdminHandler instance
// is invoked.
type AdminHandlerRegisterSnapshotCallbackFunc struct {
	defaultHook func(func(*objs.BlockHeader) error)
	hooks       []func(func(*objs.BlockHeader) error)
	history     []AdminHandlerRegisterSnapshotCallbackFuncCall
	mutex       sync.Mutex
}

// RegisterSnapshotCallback delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockAdminHandler) RegisterSnapshotCallback(v0 func(*objs.BlockHeader) error) {
	m.RegisterSnapshotCallbackFunc.nextHook()(v0)
	m.RegisterSnapshotCallbackFunc.appendCall(AdminHandlerRegisterSnapshotCallbackFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the
// RegisterSnapshotCallback method of the parent MockAdminHandler instance
// is invoked and the hook queue is empty.
func (f *AdminHandlerRegisterSnapshotCallbackFunc) SetDefaultHook(hook func(func(*objs.BlockHeader) error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RegisterSnapshotCallback method of the parent MockAdminHandler instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AdminHandlerRegisterSnapshotCallbackFunc) PushHook(hook func(func(*objs.BlockHeader) error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AdminHandlerRegisterSnapshotCallbackFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(func(*objs.BlockHeader) error) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AdminHandlerRegisterSnapshotCallbackFunc) PushReturn() {
	f.PushHook(func(func(*objs.BlockHeader) error) {
		return
	})
}

func (f *AdminHandlerRegisterSnapshotCallbackFunc) nextHook() func(func(*objs.BlockHeader) error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdminHandlerRegisterSnapshotCallbackFunc) appendCall(r0 AdminHandlerRegisterSnapshotCallbackFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AdminHandlerRegisterSnapshotCallbackFuncCall objects describing the
// invocations of this function.
func (f *AdminHandlerRegisterSnapshotCallbackFunc) History() []AdminHandlerRegisterSnapshotCallbackFuncCall {
	f.mutex.Lock()
	history := make([]AdminHandlerRegisterSnapshotCallbackFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdminHandlerRegisterSnapshotCallbackFuncCall is an object that describes
// an invocation of method RegisterSnapshotCallback on an instance of
// MockAdminHandler.
type AdminHandlerRegisterSnapshotCallbackFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 func(*objs.BlockHeader) error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdminHandlerRegisterSnapshotCallbackFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdminHandlerRegisterSnapshotCallbackFuncCall) Results() []interface{} {
	return []interface{}{}
}

// AdminHandlerSetSynchronizedFunc describes the behavior when the
// SetSynchronized method of the parent MockAdminHandler instance is
// invoked.
type AdminHandlerSetSynchronizedFunc struct {
	defaultHook func(bool)
	hooks       []func(bool)
	history     []AdminHandlerSetSynchronizedFuncCall
	mutex       sync.Mutex
}

// SetSynchronized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAdminHandler) SetSynchronized(v0 bool) {
	m.SetSynchronizedFunc.nextHook()(v0)
	m.SetSynchronizedFunc.appendCall(AdminHandlerSetSynchronizedFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetSynchronized
// method of the parent MockAdminHandler instance is invoked and the hook
// queue is empty.
func (f *AdminHandlerSetSynchronizedFunc) SetDefaultHook(hook func(bool)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetSynchronized method of the parent MockAdminHandler instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AdminHandlerSetSynchronizedFunc) PushHook(hook func(bool)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AdminHandlerSetSynchronizedFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(bool) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AdminHandlerSetSynchronizedFunc) PushReturn() {
	f.PushHook(func(bool) {
		return
	})
}

func (f *AdminHandlerSetSynchronizedFunc) nextHook() func(bool) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdminHandlerSetSynchronizedFunc) appendCall(r0 AdminHandlerSetSynchronizedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdminHandlerSetSynchronizedFuncCall objects
// describing the invocations of this function.
func (f *AdminHandlerSetSynchronizedFunc) History() []AdminHandlerSetSynchronizedFuncCall {
	f.mutex.Lock()
	history := make([]AdminHandlerSetSynchronizedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdminHandlerSetSynchronizedFuncCall is an object that describes an
// invocation of method SetSynchronized on an instance of MockAdminHandler.
type AdminHandlerSetSynchronizedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdminHandlerSetSynchronizedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdminHandlerSetSynchronizedFuncCall) Results() []interface{} {
	return []interface{}{}
}

// MockContracts is a mock implementation of the Contracts interface (from
// the package github.com/alicenet/alicenet/blockchain/interfaces) used for
// unit testing.
type MockContracts struct {
	// ATokenFunc is an instance of a mock function object controlling the
	// behavior of the method AToken.
	ATokenFunc *ContractsATokenFunc
	// ATokenAddressFunc is an instance of a mock function object
	// controlling the behavior of the method ATokenAddress.
	ATokenAddressFunc *ContractsATokenAddressFunc
	// BTokenFunc is an instance of a mock function object controlling the
	// behavior of the method BToken.
	BTokenFunc *ContractsBTokenFunc
	// BTokenAddressFunc is an instance of a mock function object
	// controlling the behavior of the method BTokenAddress.
	BTokenAddressFunc *ContractsBTokenAddressFunc
	// ContractFactoryFunc is an instance of a mock function object
	// controlling the behavior of the method ContractFactory.
	ContractFactoryFunc *ContractsContractFactoryFunc
	// ContractFactoryAddressFunc is an instance of a mock function object
	// controlling the behavior of the method ContractFactoryAddress.
	ContractFactoryAddressFunc *ContractsContractFactoryAddressFunc
	// EthdkgFunc is an instance of a mock function object controlling the
	// behavior of the method Ethdkg.
	EthdkgFunc *ContractsEthdkgFunc
	// EthdkgAddressFunc is an instance of a mock function object
	// controlling the behavior of the method EthdkgAddress.
	EthdkgAddressFunc *ContractsEthdkgAddressFunc
	// GovernanceFunc is an instance of a mock function object controlling
	// the behavior of the method Governance.
	GovernanceFunc *ContractsGovernanceFunc
	// GovernanceAddressFunc is an instance of a mock function object
	// controlling the behavior of the method GovernanceAddress.
	GovernanceAddressFunc *ContractsGovernanceAddressFunc
	// LookupContractsFunc is an instance of a mock function object
	// controlling the behavior of the method LookupContracts.
	LookupContractsFunc *ContractsLookupContractsFunc
	// PublicStakingFunc is an instance of a mock function object
	// controlling the behavior of the method PublicStaking.
	PublicStakingFunc *ContractsPublicStakingFunc
	// PublicStakingAddressFunc is an instance of a mock function object
	// controlling the behavior of the method PublicStakingAddress.
	PublicStakingAddressFunc *ContractsPublicStakingAddressFunc
	// SnapshotsFunc is an instance of a mock function object controlling
	// the behavior of the method Snapshots.
	SnapshotsFunc *ContractsSnapshotsFunc
	// SnapshotsAddressFunc is an instance of a mock function object
	// controlling the behavior of the method SnapshotsAddress.
	SnapshotsAddressFunc *ContractsSnapshotsAddressFunc
	// ValidatorPoolFunc is an instance of a mock function object
	// controlling the behavior of the method ValidatorPool.
	ValidatorPoolFunc *ContractsValidatorPoolFunc
	// ValidatorPoolAddressFunc is an instance of a mock function object
	// controlling the behavior of the method ValidatorPoolAddress.
	ValidatorPoolAddressFunc *ContractsValidatorPoolAddressFunc
	// ValidatorStakingFunc is an instance of a mock function object
	// controlling the behavior of the method ValidatorStaking.
	ValidatorStakingFunc *ContractsValidatorStakingFunc
	// ValidatorStakingAddressFunc is an instance of a mock function object
	// controlling the behavior of the method ValidatorStakingAddress.
	ValidatorStakingAddressFunc *ContractsValidatorStakingAddressFunc
}

// NewMockContracts creates a new mock of the Contracts interface. All
// methods return zero values for all results, unless overwritten.
func NewMockContracts() *MockContracts {
	return &MockContracts{
		ATokenFunc: &ContractsATokenFunc{
			defaultHook: func() bindings.IAToken {
				return nil
			},
		},
		ATokenAddressFunc: &ContractsATokenAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		BTokenFunc: &ContractsBTokenFunc{
			defaultHook: func() bindings.IBToken {
				return nil
			},
		},
		BTokenAddressFunc: &ContractsBTokenAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		ContractFactoryFunc: &ContractsContractFactoryFunc{
			defaultHook: func() bindings.IAliceNetFactory {
				return nil
			},
		},
		ContractFactoryAddressFunc: &ContractsContractFactoryAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		EthdkgFunc: &ContractsEthdkgFunc{
			defaultHook: func() bindings.IETHDKG {
				return nil
			},
		},
		EthdkgAddressFunc: &ContractsEthdkgAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		GovernanceFunc: &ContractsGovernanceFunc{
			defaultHook: func() bindings.IGovernance {
				return nil
			},
		},
		GovernanceAddressFunc: &ContractsGovernanceAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		LookupContractsFunc: &ContractsLookupContractsFunc{
			defaultHook: func(context.Context, common.Address) error {
				return nil
			},
		},
		PublicStakingFunc: &ContractsPublicStakingFunc{
			defaultHook: func() bindings.IPublicStaking {
				return nil
			},
		},
		PublicStakingAddressFunc: &ContractsPublicStakingAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		SnapshotsFunc: &ContractsSnapshotsFunc{
			defaultHook: func() bindings.ISnapshots {
				return nil
			},
		},
		SnapshotsAddressFunc: &ContractsSnapshotsAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		ValidatorPoolFunc: &ContractsValidatorPoolFunc{
			defaultHook: func() bindings.IValidatorPool {
				return nil
			},
		},
		ValidatorPoolAddressFunc: &ContractsValidatorPoolAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		ValidatorStakingFunc: &ContractsValidatorStakingFunc{
			defaultHook: func() bindings.IValidatorStaking {
				return nil
			},
		},
		ValidatorStakingAddressFunc: &ContractsValidatorStakingAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
	}
}

// NewStrictMockContracts creates a new mock of the Contracts interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockContracts() *MockContracts {
	return &MockContracts{
		ATokenFunc: &ContractsATokenFunc{
			defaultHook: func() bindings.IAToken {
				panic("unexpected invocation of MockContracts.AToken")
			},
		},
		ATokenAddressFunc: &ContractsATokenAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.ATokenAddress")
			},
		},
		BTokenFunc: &ContractsBTokenFunc{
			defaultHook: func() bindings.IBToken {
				panic("unexpected invocation of MockContracts.BToken")
			},
		},
		BTokenAddressFunc: &ContractsBTokenAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.BTokenAddress")
			},
		},
		ContractFactoryFunc: &ContractsContractFactoryFunc{
			defaultHook: func() bindings.IAliceNetFactory {
				panic("unexpected invocation of MockContracts.ContractFactory")
			},
		},
		ContractFactoryAddressFunc: &ContractsContractFactoryAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.ContractFactoryAddress")
			},
		},
		EthdkgFunc: &ContractsEthdkgFunc{
			defaultHook: func() bindings.IETHDKG {
				panic("unexpected invocation of MockContracts.Ethdkg")
			},
		},
		EthdkgAddressFunc: &ContractsEthdkgAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.EthdkgAddress")
			},
		},
		GovernanceFunc: &ContractsGovernanceFunc{
			defaultHook: func() bindings.IGovernance {
				panic("unexpected invocation of MockContracts.Governance")
			},
		},
		GovernanceAddressFunc: &ContractsGovernanceAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.GovernanceAddress")
			},
		},
		LookupContractsFunc: &ContractsLookupContractsFunc{
			defaultHook: func(context.Context, common.Address) error {
				panic("unexpected invocation of MockContracts.LookupContracts")
			},
		},
		PublicStakingFunc: &ContractsPublicStakingFunc{
			defaultHook: func() bindings.IPublicStaking {
				panic("unexpected invocation of MockContracts.PublicStaking")
			},
		},
		PublicStakingAddressFunc: &ContractsPublicStakingAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.PublicStakingAddress")
			},
		},
		SnapshotsFunc: &ContractsSnapshotsFunc{
			defaultHook: func() bindings.ISnapshots {
				panic("unexpected invocation of MockContracts.Snapshots")
			},
		},
		SnapshotsAddressFunc: &ContractsSnapshotsAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.SnapshotsAddress")
			},
		},
		ValidatorPoolFunc: &ContractsValidatorPoolFunc{
			defaultHook: func() bindings.IValidatorPool {
				panic("unexpected invocation of MockContracts.ValidatorPool")
			},
		},
		ValidatorPoolAddressFunc: &ContractsValidatorPoolAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.ValidatorPoolAddress")
			},
		},
		ValidatorStakingFunc: &ContractsValidatorStakingFunc{
			defaultHook: func() bindings.IValidatorStaking {
				panic("unexpected invocation of MockContracts.ValidatorStaking")
			},
		},
		ValidatorStakingAddressFunc: &ContractsValidatorStakingAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.ValidatorStakingAddress")
			},
		},
	}
}

// NewMockContractsFrom creates a new mock of the MockContracts interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockContractsFrom(i interfaces.Contracts) *MockContracts {
	return &MockContracts{
		ATokenFunc: &ContractsATokenFunc{
			defaultHook: i.AToken,
		},
		ATokenAddressFunc: &ContractsATokenAddressFunc{
			defaultHook: i.ATokenAddress,
		},
		BTokenFunc: &ContractsBTokenFunc{
			defaultHook: i.BToken,
		},
		BTokenAddressFunc: &ContractsBTokenAddressFunc{
			defaultHook: i.BTokenAddress,
		},
		ContractFactoryFunc: &ContractsContractFactoryFunc{
			defaultHook: i.ContractFactory,
		},
		ContractFactoryAddressFunc: &ContractsContractFactoryAddressFunc{
			defaultHook: i.ContractFactoryAddress,
		},
		EthdkgFunc: &ContractsEthdkgFunc{
			defaultHook: i.Ethdkg,
		},
		EthdkgAddressFunc: &ContractsEthdkgAddressFunc{
			defaultHook: i.EthdkgAddress,
		},
		GovernanceFunc: &ContractsGovernanceFunc{
			defaultHook: i.Governance,
		},
		GovernanceAddressFunc: &ContractsGovernanceAddressFunc{
			defaultHook: i.GovernanceAddress,
		},
		LookupContractsFunc: &ContractsLookupContractsFunc{
			defaultHook: i.LookupContracts,
		},
		PublicStakingFunc: &ContractsPublicStakingFunc{
			defaultHook: i.PublicStaking,
		},
		PublicStakingAddressFunc: &ContractsPublicStakingAddressFunc{
			defaultHook: i.PublicStakingAddress,
		},
		SnapshotsFunc: &ContractsSnapshotsFunc{
			defaultHook: i.Snapshots,
		},
		SnapshotsAddressFunc: &ContractsSnapshotsAddressFunc{
			defaultHook: i.SnapshotsAddress,
		},
		ValidatorPoolFunc: &ContractsValidatorPoolFunc{
			defaultHook: i.ValidatorPool,
		},
		ValidatorPoolAddressFunc: &ContractsValidatorPoolAddressFunc{
			defaultHook: i.ValidatorPoolAddress,
		},
		ValidatorStakingFunc: &ContractsValidatorStakingFunc{
			defaultHook: i.ValidatorStaking,
		},
		ValidatorStakingAddressFunc: &ContractsValidatorStakingAddressFunc{
			defaultHook: i.ValidatorStakingAddress,
		},
	}
}

// ContractsATokenFunc describes the behavior when the AToken method of the
// parent MockContracts instance is invoked.
type ContractsATokenFunc struct {
	defaultHook func() bindings.IAToken
	hooks       []func() bindings.IAToken
	history     []ContractsATokenFuncCall
	mutex       sync.Mutex
}

// AToken delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContracts) AToken() bindings.IAToken {
	r0 := m.ATokenFunc.nextHook()()
	m.ATokenFunc.appendCall(ContractsATokenFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AToken method of the
// parent MockContracts instance is invoked and the hook queue is empty.
func (f *ContractsATokenFunc) SetDefaultHook(hook func() bindings.IAToken) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AToken method of the parent MockContracts instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContractsATokenFunc) PushHook(hook func() bindings.IAToken) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsATokenFunc) SetDefaultReturn(r0 bindings.IAToken) {
	f.SetDefaultHook(func() bindings.IAToken {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsATokenFunc) PushReturn(r0 bindings.IAToken) {
	f.PushHook(func() bindings.IAToken {
		return r0
	})
}

func (f *ContractsATokenFunc) nextHook() func() bindings.IAToken {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsATokenFunc) appendCall(r0 ContractsATokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsATokenFuncCall objects describing
// the invocations of this function.
func (f *ContractsATokenFunc) History() []ContractsATokenFuncCall {
	f.mutex.Lock()
	history := make([]ContractsATokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsATokenFuncCall is an object that describes an invocation of
// method AToken on an instance of MockContracts.
type ContractsATokenFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IAToken
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsATokenFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsATokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsATokenAddressFunc describes the behavior when the ATokenAddress
// method of the parent MockContracts instance is invoked.
type ContractsATokenAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsATokenAddressFuncCall
	mutex       sync.Mutex
}

// ATokenAddress delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContracts) ATokenAddress() common.Address {
	r0 := m.ATokenAddressFunc.nextHook()()
	m.ATokenAddressFunc.appendCall(ContractsATokenAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ATokenAddress method
// of the parent MockContracts instance is invoked and the hook queue is
// empty.
func (f *ContractsATokenAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ATokenAddress method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsATokenAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsATokenAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsATokenAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsATokenAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsATokenAddressFunc) appendCall(r0 ContractsATokenAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsATokenAddressFuncCall objects
// describing the invocations of this function.
func (f *ContractsATokenAddressFunc) History() []ContractsATokenAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsATokenAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsATokenAddressFuncCall is an object that describes an invocation
// of method ATokenAddress on an instance of MockContracts.
type ContractsATokenAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsATokenAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsATokenAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsBTokenFunc describes the behavior when the BToken method of the
// parent MockContracts instance is invoked.
type ContractsBTokenFunc struct {
	defaultHook func() bindings.IBToken
	hooks       []func() bindings.IBToken
	history     []ContractsBTokenFuncCall
	mutex       sync.Mutex
}

// BToken delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContracts) BToken() bindings.IBToken {
	r0 := m.BTokenFunc.nextHook()()
	m.BTokenFunc.appendCall(ContractsBTokenFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the BToken method of the
// parent MockContracts instance is invoked and the hook queue is empty.
func (f *ContractsBTokenFunc) SetDefaultHook(hook func() bindings.IBToken) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BToken method of the parent MockContracts instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContractsBTokenFunc) PushHook(hook func() bindings.IBToken) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsBTokenFunc) SetDefaultReturn(r0 bindings.IBToken) {
	f.SetDefaultHook(func() bindings.IBToken {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsBTokenFunc) PushReturn(r0 bindings.IBToken) {
	f.PushHook(func() bindings.IBToken {
		return r0
	})
}

func (f *ContractsBTokenFunc) nextHook() func() bindings.IBToken {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsBTokenFunc) appendCall(r0 ContractsBTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsBTokenFuncCall objects describing
// the invocations of this function.
func (f *ContractsBTokenFunc) History() []ContractsBTokenFuncCall {
	f.mutex.Lock()
	history := make([]ContractsBTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsBTokenFuncCall is an object that describes an invocation of
// method BToken on an instance of MockContracts.
type ContractsBTokenFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IBToken
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsBTokenFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsBTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsBTokenAddressFunc describes the behavior when the BTokenAddress
// method of the parent MockContracts instance is invoked.
type ContractsBTokenAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsBTokenAddressFuncCall
	mutex       sync.Mutex
}

// BTokenAddress delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContracts) BTokenAddress() common.Address {
	r0 := m.BTokenAddressFunc.nextHook()()
	m.BTokenAddressFunc.appendCall(ContractsBTokenAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the BTokenAddress method
// of the parent MockContracts instance is invoked and the hook queue is
// empty.
func (f *ContractsBTokenAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BTokenAddress method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsBTokenAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsBTokenAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsBTokenAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsBTokenAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsBTokenAddressFunc) appendCall(r0 ContractsBTokenAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsBTokenAddressFuncCall objects
// describing the invocations of this function.
func (f *ContractsBTokenAddressFunc) History() []ContractsBTokenAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsBTokenAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsBTokenAddressFuncCall is an object that describes an invocation
// of method BTokenAddress on an instance of MockContracts.
type ContractsBTokenAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsBTokenAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsBTokenAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsContractFactoryFunc describes the behavior when the
// ContractFactory method of the parent MockContracts instance is invoked.
type ContractsContractFactoryFunc struct {
	defaultHook func() bindings.IAliceNetFactory
	hooks       []func() bindings.IAliceNetFactory
	history     []ContractsContractFactoryFuncCall
	mutex       sync.Mutex
}

// ContractFactory delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) ContractFactory() bindings.IAliceNetFactory {
	r0 := m.ContractFactoryFunc.nextHook()()
	m.ContractFactoryFunc.appendCall(ContractsContractFactoryFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ContractFactory
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsContractFactoryFunc) SetDefaultHook(hook func() bindings.IAliceNetFactory) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ContractFactory method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsContractFactoryFunc) PushHook(hook func() bindings.IAliceNetFactory) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsContractFactoryFunc) SetDefaultReturn(r0 bindings.IAliceNetFactory) {
	f.SetDefaultHook(func() bindings.IAliceNetFactory {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsContractFactoryFunc) PushReturn(r0 bindings.IAliceNetFactory) {
	f.PushHook(func() bindings.IAliceNetFactory {
		return r0
	})
}

func (f *ContractsContractFactoryFunc) nextHook() func() bindings.IAliceNetFactory {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsContractFactoryFunc) appendCall(r0 ContractsContractFactoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsContractFactoryFuncCall objects
// describing the invocations of this function.
func (f *ContractsContractFactoryFunc) History() []ContractsContractFactoryFuncCall {
	f.mutex.Lock()
	history := make([]ContractsContractFactoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsContractFactoryFuncCall is an object that describes an
// invocation of method ContractFactory on an instance of MockContracts.
type ContractsContractFactoryFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IAliceNetFactory
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsContractFactoryFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsContractFactoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsContractFactoryAddressFunc describes the behavior when the
// ContractFactoryAddress method of the parent MockContracts instance is
// invoked.
type ContractsContractFactoryAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsContractFactoryAddressFuncCall
	mutex       sync.Mutex
}

// ContractFactoryAddress delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockContracts) ContractFactoryAddress() common.Address {
	r0 := m.ContractFactoryAddressFunc.nextHook()()
	m.ContractFactoryAddressFunc.appendCall(ContractsContractFactoryAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ContractFactoryAddress method of the parent MockContracts instance is
// invoked and the hook queue is empty.
func (f *ContractsContractFactoryAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ContractFactoryAddress method of the parent MockContracts instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ContractsContractFactoryAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsContractFactoryAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsContractFactoryAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsContractFactoryAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsContractFactoryAddressFunc) appendCall(r0 ContractsContractFactoryAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsContractFactoryAddressFuncCall
// objects describing the invocations of this function.
func (f *ContractsContractFactoryAddressFunc) History() []ContractsContractFactoryAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsContractFactoryAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsContractFactoryAddressFuncCall is an object that describes an
// invocation of method ContractFactoryAddress on an instance of
// MockContracts.
type ContractsContractFactoryAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsContractFactoryAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsContractFactoryAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsEthdkgFunc describes the behavior when the Ethdkg method of the
// parent MockContracts instance is invoked.
type ContractsEthdkgFunc struct {
	defaultHook func() bindings.IETHDKG
	hooks       []func() bindings.IETHDKG
	history     []ContractsEthdkgFuncCall
	mutex       sync.Mutex
}

// Ethdkg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContracts) Ethdkg() bindings.IETHDKG {
	r0 := m.EthdkgFunc.nextHook()()
	m.EthdkgFunc.appendCall(ContractsEthdkgFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Ethdkg method of the
// parent MockContracts instance is invoked and the hook queue is empty.
func (f *ContractsEthdkgFunc) SetDefaultHook(hook func() bindings.IETHDKG) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Ethdkg method of the parent MockContracts instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContractsEthdkgFunc) PushHook(hook func() bindings.IETHDKG) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsEthdkgFunc) SetDefaultReturn(r0 bindings.IETHDKG) {
	f.SetDefaultHook(func() bindings.IETHDKG {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsEthdkgFunc) PushReturn(r0 bindings.IETHDKG) {
	f.PushHook(func() bindings.IETHDKG {
		return r0
	})
}

func (f *ContractsEthdkgFunc) nextHook() func() bindings.IETHDKG {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsEthdkgFunc) appendCall(r0 ContractsEthdkgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsEthdkgFuncCall objects describing
// the invocations of this function.
func (f *ContractsEthdkgFunc) History() []ContractsEthdkgFuncCall {
	f.mutex.Lock()
	history := make([]ContractsEthdkgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsEthdkgFuncCall is an object that describes an invocation of
// method Ethdkg on an instance of MockContracts.
type ContractsEthdkgFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IETHDKG
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsEthdkgFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsEthdkgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsEthdkgAddressFunc describes the behavior when the EthdkgAddress
// method of the parent MockContracts instance is invoked.
type ContractsEthdkgAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsEthdkgAddressFuncCall
	mutex       sync.Mutex
}

// EthdkgAddress delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContracts) EthdkgAddress() common.Address {
	r0 := m.EthdkgAddressFunc.nextHook()()
	m.EthdkgAddressFunc.appendCall(ContractsEthdkgAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the EthdkgAddress method
// of the parent MockContracts instance is invoked and the hook queue is
// empty.
func (f *ContractsEthdkgAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EthdkgAddress method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsEthdkgAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsEthdkgAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsEthdkgAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsEthdkgAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsEthdkgAddressFunc) appendCall(r0 ContractsEthdkgAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsEthdkgAddressFuncCall objects
// describing the invocations of this function.
func (f *ContractsEthdkgAddressFunc) History() []ContractsEthdkgAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsEthdkgAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsEthdkgAddressFuncCall is an object that describes an invocation
// of method EthdkgAddress on an instance of MockContracts.
type ContractsEthdkgAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsEthdkgAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsEthdkgAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsGovernanceFunc describes the behavior when the Governance method
// of the parent MockContracts instance is invoked.
type ContractsGovernanceFunc struct {
	defaultHook func() bindings.IGovernance
	hooks       []func() bindings.IGovernance
	history     []ContractsGovernanceFuncCall
	mutex       sync.Mutex
}

// Governance delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContracts) Governance() bindings.IGovernance {
	r0 := m.GovernanceFunc.nextHook()()
	m.GovernanceFunc.appendCall(ContractsGovernanceFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Governance method of
// the parent MockContracts instance is invoked and the hook queue is empty.
func (f *ContractsGovernanceFunc) SetDefaultHook(hook func() bindings.IGovernance) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Governance method of the parent MockContracts instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContractsGovernanceFunc) PushHook(hook func() bindings.IGovernance) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsGovernanceFunc) SetDefaultReturn(r0 bindings.IGovernance) {
	f.SetDefaultHook(func() bindings.IGovernance {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsGovernanceFunc) PushReturn(r0 bindings.IGovernance) {
	f.PushHook(func() bindings.IGovernance {
		return r0
	})
}

func (f *ContractsGovernanceFunc) nextHook() func() bindings.IGovernance {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsGovernanceFunc) appendCall(r0 ContractsGovernanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsGovernanceFuncCall objects
// describing the invocations of this function.
func (f *ContractsGovernanceFunc) History() []ContractsGovernanceFuncCall {
	f.mutex.Lock()
	history := make([]ContractsGovernanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsGovernanceFuncCall is an object that describes an invocation of
// method Governance on an instance of MockContracts.
type ContractsGovernanceFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IGovernance
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsGovernanceFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsGovernanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsGovernanceAddressFunc describes the behavior when the
// GovernanceAddress method of the parent MockContracts instance is invoked.
type ContractsGovernanceAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsGovernanceAddressFuncCall
	mutex       sync.Mutex
}

// GovernanceAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) GovernanceAddress() common.Address {
	r0 := m.GovernanceAddressFunc.nextHook()()
	m.GovernanceAddressFunc.appendCall(ContractsGovernanceAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GovernanceAddress
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsGovernanceAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GovernanceAddress method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsGovernanceAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsGovernanceAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsGovernanceAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsGovernanceAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsGovernanceAddressFunc) appendCall(r0 ContractsGovernanceAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsGovernanceAddressFuncCall objects
// describing the invocations of this function.
func (f *ContractsGovernanceAddressFunc) History() []ContractsGovernanceAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsGovernanceAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsGovernanceAddressFuncCall is an object that describes an
// invocation of method GovernanceAddress on an instance of MockContracts.
type ContractsGovernanceAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsGovernanceAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsGovernanceAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsLookupContractsFunc describes the behavior when the
// LookupContracts method of the parent MockContracts instance is invoked.
type ContractsLookupContractsFunc struct {
	defaultHook func(context.Context, common.Address) error
	hooks       []func(context.Context, common.Address) error
	history     []ContractsLookupContractsFuncCall
	mutex       sync.Mutex
}

// LookupContracts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) LookupContracts(v0 context.Context, v1 common.Address) error {
	r0 := m.LookupContractsFunc.nextHook()(v0, v1)
	m.LookupContractsFunc.appendCall(ContractsLookupContractsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LookupContracts
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsLookupContractsFunc) SetDefaultHook(hook func(context.Context, common.Address) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LookupContracts method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsLookupContractsFunc) PushHook(hook func(context.Context, common.Address) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsLookupContractsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, common.Address) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsLookupContractsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, common.Address) error {
		return r0
	})
}

func (f *ContractsLookupContractsFunc) nextHook() func(context.Context, common.Address) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsLookupContractsFunc) appendCall(r0 ContractsLookupContractsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsLookupContractsFuncCall objects
// describing the invocations of this function.
func (f *ContractsLookupContractsFunc) History() []ContractsLookupContractsFuncCall {
	f.mutex.Lock()
	history := make([]ContractsLookupContractsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsLookupContractsFuncCall is an object that describes an
// invocation of method LookupContracts on an instance of MockContracts.
type ContractsLookupContractsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsLookupContractsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsLookupContractsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsPublicStakingFunc describes the behavior when the PublicStaking
// method of the parent MockContracts instance is invoked.
type ContractsPublicStakingFunc struct {
	defaultHook func() bindings.IPublicStaking
	hooks       []func() bindings.IPublicStaking
	history     []ContractsPublicStakingFuncCall
	mutex       sync.Mutex
}

// PublicStaking delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContracts) PublicStaking() bindings.IPublicStaking {
	r0 := m.PublicStakingFunc.nextHook()()
	m.PublicStakingFunc.appendCall(ContractsPublicStakingFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the PublicStaking method
// of the parent MockContracts instance is invoked and the hook queue is
// empty.
func (f *ContractsPublicStakingFunc) SetDefaultHook(hook func() bindings.IPublicStaking) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PublicStaking method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsPublicStakingFunc) PushHook(hook func() bindings.IPublicStaking) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsPublicStakingFunc) SetDefaultReturn(r0 bindings.IPublicStaking) {
	f.SetDefaultHook(func() bindings.IPublicStaking {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsPublicStakingFunc) PushReturn(r0 bindings.IPublicStaking) {
	f.PushHook(func() bindings.IPublicStaking {
		return r0
	})
}

func (f *ContractsPublicStakingFunc) nextHook() func() bindings.IPublicStaking {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsPublicStakingFunc) appendCall(r0 ContractsPublicStakingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsPublicStakingFuncCall objects
// describing the invocations of this function.
func (f *ContractsPublicStakingFunc) History() []ContractsPublicStakingFuncCall {
	f.mutex.Lock()
	history := make([]ContractsPublicStakingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsPublicStakingFuncCall is an object that describes an invocation
// of method PublicStaking on an instance of MockContracts.
type ContractsPublicStakingFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IPublicStaking
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsPublicStakingFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsPublicStakingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsPublicStakingAddressFunc describes the behavior when the
// PublicStakingAddress method of the parent MockContracts instance is
// invoked.
type ContractsPublicStakingAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsPublicStakingAddressFuncCall
	mutex       sync.Mutex
}

// PublicStakingAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) PublicStakingAddress() common.Address {
	r0 := m.PublicStakingAddressFunc.nextHook()()
	m.PublicStakingAddressFunc.appendCall(ContractsPublicStakingAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the PublicStakingAddress
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsPublicStakingAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PublicStakingAddress method of the parent MockContracts instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ContractsPublicStakingAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsPublicStakingAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsPublicStakingAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsPublicStakingAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsPublicStakingAddressFunc) appendCall(r0 ContractsPublicStakingAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsPublicStakingAddressFuncCall
// objects describing the invocations of this function.
func (f *ContractsPublicStakingAddressFunc) History() []ContractsPublicStakingAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsPublicStakingAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsPublicStakingAddressFuncCall is an object that describes an
// invocation of method PublicStakingAddress on an instance of
// MockContracts.
type ContractsPublicStakingAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsPublicStakingAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsPublicStakingAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsSnapshotsFunc describes the behavior when the Snapshots method
// of the parent MockContracts instance is invoked.
type ContractsSnapshotsFunc struct {
	defaultHook func() bindings.ISnapshots
	hooks       []func() bindings.ISnapshots
	history     []ContractsSnapshotsFuncCall
	mutex       sync.Mutex
}

// Snapshots delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContracts) Snapshots() bindings.ISnapshots {
	r0 := m.SnapshotsFunc.nextHook()()
	m.SnapshotsFunc.appendCall(ContractsSnapshotsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Snapshots method of
// the parent MockContracts instance is invoked and the hook queue is empty.
func (f *ContractsSnapshotsFunc) SetDefaultHook(hook func() bindings.ISnapshots) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Snapshots method of the parent MockContracts instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContractsSnapshotsFunc) PushHook(hook func() bindings.ISnapshots) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsSnapshotsFunc) SetDefaultReturn(r0 bindings.ISnapshots) {
	f.SetDefaultHook(func() bindings.ISnapshots {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsSnapshotsFunc) PushReturn(r0 bindings.ISnapshots) {
	f.PushHook(func() bindings.ISnapshots {
		return r0
	})
}

func (f *ContractsSnapshotsFunc) nextHook() func() bindings.ISnapshots {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsSnapshotsFunc) appendCall(r0 ContractsSnapshotsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsSnapshotsFuncCall objects
// describing the invocations of this function.
func (f *ContractsSnapshotsFunc) History() []ContractsSnapshotsFuncCall {
	f.mutex.Lock()
	history := make([]ContractsSnapshotsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsSnapshotsFuncCall is an object that describes an invocation of
// method Snapshots on an instance of MockContracts.
type ContractsSnapshotsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.ISnapshots
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsSnapshotsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsSnapshotsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsSnapshotsAddressFunc describes the behavior when the
// SnapshotsAddress method of the parent MockContracts instance is invoked.
type ContractsSnapshotsAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsSnapshotsAddressFuncCall
	mutex       sync.Mutex
}

// SnapshotsAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) SnapshotsAddress() common.Address {
	r0 := m.SnapshotsAddressFunc.nextHook()()
	m.SnapshotsAddressFunc.appendCall(ContractsSnapshotsAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SnapshotsAddress
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsSnapshotsAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SnapshotsAddress method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsSnapshotsAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsSnapshotsAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsSnapshotsAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsSnapshotsAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsSnapshotsAddressFunc) appendCall(r0 ContractsSnapshotsAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsSnapshotsAddressFuncCall objects
// describing the invocations of this function.
func (f *ContractsSnapshotsAddressFunc) History() []ContractsSnapshotsAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsSnapshotsAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsSnapshotsAddressFuncCall is an object that describes an
// invocation of method SnapshotsAddress on an instance of MockContracts.
type ContractsSnapshotsAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsSnapshotsAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsSnapshotsAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsValidatorPoolFunc describes the behavior when the ValidatorPool
// method of the parent MockContracts instance is invoked.
type ContractsValidatorPoolFunc struct {
	defaultHook func() bindings.IValidatorPool
	hooks       []func() bindings.IValidatorPool
	history     []ContractsValidatorPoolFuncCall
	mutex       sync.Mutex
}

// ValidatorPool delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContracts) ValidatorPool() bindings.IValidatorPool {
	r0 := m.ValidatorPoolFunc.nextHook()()
	m.ValidatorPoolFunc.appendCall(ContractsValidatorPoolFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ValidatorPool method
// of the parent MockContracts instance is invoked and the hook queue is
// empty.
func (f *ContractsValidatorPoolFunc) SetDefaultHook(hook func() bindings.IValidatorPool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidatorPool method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsValidatorPoolFunc) PushHook(hook func() bindings.IValidatorPool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsValidatorPoolFunc) SetDefaultReturn(r0 bindings.IValidatorPool) {
	f.SetDefaultHook(func() bindings.IValidatorPool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsValidatorPoolFunc) PushReturn(r0 bindings.IValidatorPool) {
	f.PushHook(func() bindings.IValidatorPool {
		return r0
	})
}

func (f *ContractsValidatorPoolFunc) nextHook() func() bindings.IValidatorPool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsValidatorPoolFunc) appendCall(r0 ContractsValidatorPoolFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsValidatorPoolFuncCall objects
// describing the invocations of this function.
func (f *ContractsValidatorPoolFunc) History() []ContractsValidatorPoolFuncCall {
	f.mutex.Lock()
	history := make([]ContractsValidatorPoolFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsValidatorPoolFuncCall is an object that describes an invocation
// of method ValidatorPool on an instance of MockContracts.
type ContractsValidatorPoolFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IValidatorPool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsValidatorPoolFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsValidatorPoolFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsValidatorPoolAddressFunc describes the behavior when the
// ValidatorPoolAddress method of the parent MockContracts instance is
// invoked.
type ContractsValidatorPoolAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsValidatorPoolAddressFuncCall
	mutex       sync.Mutex
}

// ValidatorPoolAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) ValidatorPoolAddress() common.Address {
	r0 := m.ValidatorPoolAddressFunc.nextHook()()
	m.ValidatorPoolAddressFunc.appendCall(ContractsValidatorPoolAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ValidatorPoolAddress
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsValidatorPoolAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidatorPoolAddress method of the parent MockContracts instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ContractsValidatorPoolAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsValidatorPoolAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsValidatorPoolAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsValidatorPoolAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsValidatorPoolAddressFunc) appendCall(r0 ContractsValidatorPoolAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsValidatorPoolAddressFuncCall
// objects describing the invocations of this function.
func (f *ContractsValidatorPoolAddressFunc) History() []ContractsValidatorPoolAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsValidatorPoolAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsValidatorPoolAddressFuncCall is an object that describes an
// invocation of method ValidatorPoolAddress on an instance of
// MockContracts.
type ContractsValidatorPoolAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsValidatorPoolAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsValidatorPoolAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsValidatorStakingFunc describes the behavior when the
// ValidatorStaking method of the parent MockContracts instance is invoked.
type ContractsValidatorStakingFunc struct {
	defaultHook func() bindings.IValidatorStaking
	hooks       []func() bindings.IValidatorStaking
	history     []ContractsValidatorStakingFuncCall
	mutex       sync.Mutex
}

// ValidatorStaking delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) ValidatorStaking() bindings.IValidatorStaking {
	r0 := m.ValidatorStakingFunc.nextHook()()
	m.ValidatorStakingFunc.appendCall(ContractsValidatorStakingFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ValidatorStaking
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsValidatorStakingFunc) SetDefaultHook(hook func() bindings.IValidatorStaking) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidatorStaking method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsValidatorStakingFunc) PushHook(hook func() bindings.IValidatorStaking) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsValidatorStakingFunc) SetDefaultReturn(r0 bindings.IValidatorStaking) {
	f.SetDefaultHook(func() bindings.IValidatorStaking {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsValidatorStakingFunc) PushReturn(r0 bindings.IValidatorStaking) {
	f.PushHook(func() bindings.IValidatorStaking {
		return r0
	})
}

func (f *ContractsValidatorStakingFunc) nextHook() func() bindings.IValidatorStaking {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsValidatorStakingFunc) appendCall(r0 ContractsValidatorStakingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsValidatorStakingFuncCall objects
// describing the invocations of this function.
func (f *ContractsValidatorStakingFunc) History() []ContractsValidatorStakingFuncCall {
	f.mutex.Lock()
	history := make([]ContractsValidatorStakingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsValidatorStakingFuncCall is an object that describes an
// invocation of method ValidatorStaking on an instance of MockContracts.
type ContractsValidatorStakingFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IValidatorStaking
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsValidatorStakingFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsValidatorStakingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsValidatorStakingAddressFunc describes the behavior when the
// ValidatorStakingAddress method of the parent MockContracts instance is
// invoked.
type ContractsValidatorStakingAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsValidatorStakingAddressFuncCall
	mutex       sync.Mutex
}

// ValidatorStakingAddress delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockContracts) ValidatorStakingAddress() common.Address {
	r0 := m.ValidatorStakingAddressFunc.nextHook()()
	m.ValidatorStakingAddressFunc.appendCall(ContractsValidatorStakingAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ValidatorStakingAddress method of the parent MockContracts instance is
// invoked and the hook queue is empty.
func (f *ContractsValidatorStakingAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidatorStakingAddress method of the parent MockContracts instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ContractsValidatorStakingAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsValidatorStakingAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsValidatorStakingAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsValidatorStakingAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsValidatorStakingAddressFunc) appendCall(r0 ContractsValidatorStakingAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsValidatorStakingAddressFuncCall
// objects describing the invocations of this function.
func (f *ContractsValidatorStakingAddressFunc) History() []ContractsValidatorStakingAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsValidatorStakingAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsValidatorStakingAddressFuncCall is an object that describes an
// invocation of method ValidatorStakingAddress on an instance of
// MockContracts.
type ContractsValidatorStakingAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsValidatorStakingAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsValidatorStakingAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGethClient is a mock implementation of the GethClient interface (from
// the package github.com/alicenet/alicenet/blockchain/interfaces) used for
// unit testing.
type MockGethClient struct {
	// BalanceAtFunc is an instance of a mock function object controlling
	// the behavior of the method BalanceAt.
	BalanceAtFunc *GethClientBalanceAtFunc
	// BlockByHashFunc is an instance of a mock function object controlling
	// the behavior of the method BlockByHash.
	BlockByHashFunc *GethClientBlockByHashFunc
	// BlockByNumberFunc is an instance of a mock function object
	// controlling the behavior of the method BlockByNumber.
	BlockByNumberFunc *GethClientBlockByNumberFunc
	// CallContractFunc is an instance of a mock function object controlling
	// the behavior of the method CallContract.
	CallContractFunc *GethClientCallContractFunc
	// CodeAtFunc is an instance of a mock function object controlling the
	// behavior of the method CodeAt.
	CodeAtFunc *GethClientCodeAtFunc
	// EstimateGasFunc is an instance of a mock function object controlling
	// the behavior of the method EstimateGas.
	EstimateGasFunc *GethClientEstimateGasFunc
	// FilterLogsFunc is an instance of a mock function object controlling
	// the behavior of the method FilterLogs.
	FilterLogsFunc *GethClientFilterLogsFunc
	// HeaderByHashFunc is an instance of a mock function object controlling
	// the behavior of the method HeaderByHash.
	HeaderByHashFunc *GethClientHeaderByHashFunc
	// HeaderByNumberFunc is an instance of a mock function object
	// controlling the behavior of the method HeaderByNumber.
	HeaderByNumberFunc *GethClientHeaderByNumberFunc
	// NonceAtFunc is an instance of a mock function object controlling the
	// behavior of the method NonceAt.
	NonceAtFunc *GethClientNonceAtFunc
	// PendingCodeAtFunc is an instance of a mock function object
	// controlling the behavior of the method PendingCodeAt.
	PendingCodeAtFunc *GethClientPendingCodeAtFunc
	// PendingNonceAtFunc is an instance of a mock function object
	// controlling the behavior of the method PendingNonceAt.
	PendingNonceAtFunc *GethClientPendingNonceAtFunc
	// SendTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method SendTransaction.
	SendTransactionFunc *GethClientSendTransactionFunc
	// StorageAtFunc is an instance of a mock function object controlling
	// the behavior of the method StorageAt.
	StorageAtFunc *GethClientStorageAtFunc
	// SubscribeFilterLogsFunc is an instance of a mock function object
	// controlling the behavior of the method SubscribeFilterLogs.
	SubscribeFilterLogsFunc *GethClientSubscribeFilterLogsFunc
	// SubscribeNewHeadFunc is an instance of a mock function object
	// controlling the behavior of the method SubscribeNewHead.
	SubscribeNewHeadFunc *GethClientSubscribeNewHeadFunc
	// SuggestGasPriceFunc is an instance of a mock function object
	// controlling the behavior of the method SuggestGasPrice.
	SuggestGasPriceFunc *GethClientSuggestGasPriceFunc
	// SuggestGasTipCapFunc is an instance of a mock function object
	// controlling the behavior of the method SuggestGasTipCap.
	SuggestGasTipCapFunc *GethClientSuggestGasTipCapFunc
	// TransactionByHashFunc is an instance of a mock function object
	// controlling the behavior of the method TransactionByHash.
	TransactionByHashFunc *GethClientTransactionByHashFunc
	// TransactionCountFunc is an instance of a mock function object
	// controlling the behavior of the method TransactionCount.
	TransactionCountFunc *GethClientTransactionCountFunc
	// TransactionInBlockFunc is an instance of a mock function object
	// controlling the behavior of the method TransactionInBlock.
	TransactionInBlockFunc *GethClientTransactionInBlockFunc
	// TransactionReceiptFunc is an instance of a mock function object
	// controlling the behavior of the method TransactionReceipt.
	TransactionReceiptFunc *GethClientTransactionReceiptFunc
}

// NewMockGethClient creates a new mock of the GethClient interface. All
// methods return zero values for all results, unless overwritten.
func NewMockGethClient() *MockGethClient {
	return &MockGethClient{
		BalanceAtFunc: &GethClientBalanceAtFunc{
			defaultHook: func(context.Context, common.Address, *big.Int) (*big.Int, error) {
				return nil, nil
			},
		},
		BlockByHashFunc: &GethClientBlockByHashFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Block, error) {
				return nil, nil
			},
		},
		BlockByNumberFunc: &GethClientBlockByNumberFunc{
			defaultHook: func(context.Context, *big.Int) (*types.Block, error) {
				return nil, nil
			},
		},
		CallContractFunc: &GethClientCallContractFunc{
			defaultHook: func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error) {
				return nil, nil
			},
		},
		CodeAtFunc: &GethClientCodeAtFunc{
			defaultHook: func(context.Context, common.Address, *big.Int) ([]byte, error) {
				return nil, nil
			},
		},
		EstimateGasFunc: &GethClientEstimateGasFunc{
			defaultHook: func(context.Context, goethereum.CallMsg) (uint64, error) {
				return 0, nil
			},
		},
		FilterLogsFunc: &GethClientFilterLogsFunc{
			defaultHook: func(context.Context, goethereum.FilterQuery) ([]types.Log, error) {
				return nil, nil
			},
		},
		HeaderByHashFunc: &GethClientHeaderByHashFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Header, error) {
				return nil, nil
			},
		},
		HeaderByNumberFunc: &GethClientHeaderByNumberFunc{
			defaultHook: func(context.Context, *big.Int) (*types.Header, error) {
				return nil, nil
			},
		},
		NonceAtFunc: &GethClientNonceAtFunc{
			defaultHook: func(context.Context, common.Address, *big.Int) (uint64, error) {
				return 0, nil
			},
		},
		PendingCodeAtFunc: &GethClientPendingCodeAtFunc{
			defaultHook: func(context.Context, common.Address) ([]byte, error) {
				return nil, nil
			},
		},
		PendingNonceAtFunc: &GethClientPendingNonceAtFunc{
			defaultHook: func(context.Context, common.Address) (uint64, error) {
				return 0, nil
			},
		},
		SendTransactionFunc: &GethClientSendTransactionFunc{
			defaultHook: func(context.Context, *types.Transaction) error {
				return nil
			},
		},
		StorageAtFunc: &GethClientStorageAtFunc{
			defaultHook: func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error) {
				return nil, nil
			},
		},
		SubscribeFilterLogsFunc: &GethClientSubscribeFilterLogsFunc{
			defaultHook: func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error) {
				return nil, nil
			},
		},
		SubscribeNewHeadFunc: &GethClientSubscribeNewHeadFunc{
			defaultHook: func(context.Context, chan<- *types.Header) (goethereum.Subscription, error) {
				return nil, nil
			},
		},
		SuggestGasPriceFunc: &GethClientSuggestGasPriceFunc{
			defaultHook: func(context.Context) (*big.Int, error) {
				return nil, nil
			},
		},
		SuggestGasTipCapFunc: &GethClientSuggestGasTipCapFunc{
			defaultHook: func(context.Context) (*big.Int, error) {
				return nil, nil
			},
		},
		TransactionByHashFunc: &GethClientTransactionByHashFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Transaction, bool, error) {
				return nil, false, nil
			},
		},
		TransactionCountFunc: &GethClientTransactionCountFunc{
			defaultHook: func(context.Context, common.Hash) (uint, error) {
				return 0, nil
			},
		},
		TransactionInBlockFunc: &GethClientTransactionInBlockFunc{
			defaultHook: func(context.Context, common.Hash, uint) (*types.Transaction, error) {
				return nil, nil
			},
		},
		TransactionReceiptFunc: &GethClientTransactionReceiptFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Receipt, error) {
				return nil, nil
			},
		},
	}
}

// NewStrictMockGethClient creates a new mock of the GethClient interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockGethClient() *MockGethClient {
	return &MockGethClient{
		BalanceAtFunc: &GethClientBalanceAtFunc{
			defaultHook: func(context.Context, common.Address, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockGethClient.BalanceAt")
			},
		},
		BlockByHashFunc: &GethClientBlockByHashFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Block, error) {
				panic("unexpected invocation of MockGethClient.BlockByHash")
			},
		},
		BlockByNumberFunc: &GethClientBlockByNumberFunc{
			defaultHook: func(context.Context, *big.Int) (*types.Block, error) {
				panic("unexpected invocation of MockGethClient.BlockByNumber")
			},
		},
		CallContractFunc: &GethClientCallContractFunc{
			defaultHook: func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error) {
				panic("unexpected invocation of MockGethClient.CallContract")
			},
		},
		CodeAtFunc: &GethClientCodeAtFunc{
			defaultHook: func(context.Context, common.Address, *big.Int) ([]byte, error) {
				panic("unexpected invocation of MockGethClient.CodeAt")
			},
		},
		EstimateGasFunc: &GethClientEstimateGasFunc{
			defaultHook: func(context.Context, goethereum.CallMsg) (uint64, error) {
				panic("unexpected invocation of MockGethClient.EstimateGas")
			},
		},
		FilterLogsFunc: &GethClientFilterLogsFunc{
			defaultHook: func(context.Context, goethereum.FilterQuery) ([]types.Log, error) {
				panic("unexpected invocation of MockGethClient.FilterLogs")
			},
		},
		HeaderByHashFunc: &GethClientHeaderByHashFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Header, error) {
				panic("unexpected invocation of MockGethClient.HeaderByHash")
			},
		},
		HeaderByNumberFunc: &GethClientHeaderByNumberFunc{
			defaultHook: func(context.Context, *big.Int) (*types.Header, error) {
				panic("unexpected invocation of MockGethClient.HeaderByNumber")
			},
		},
		NonceAtFunc: &GethClientNonceAtFunc{
			defaultHook: func(context.Context, common.Address, *big.Int) (uint64, error) {
				panic("unexpected invocation of MockGethClient.NonceAt")
			},
		},
		PendingCodeAtFunc: &GethClientPendingCodeAtFunc{
			defaultHook: func(context.Context, common.Address) ([]byte, error) {
				panic("unexpected invocation of MockGethClient.PendingCodeAt")
			},
		},
		PendingNonceAtFunc: &GethClientPendingNonceAtFunc{
			defaultHook: func(context.Context, common.Address) (uint64, error) {
				panic("unexpected invocation of MockGethClient.PendingNonceAt")
			},
		},
		SendTransactionFunc: &GethClientSendTransactionFunc{
			defaultHook: func(context.Context, *types.Transaction) error {
				panic("unexpected invocation of MockGethClient.SendTransaction")
			},
		},
		StorageAtFunc: &GethClientStorageAtFunc{
			defaultHook: func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error) {
				panic("unexpected invocation of MockGethClient.StorageAt")
			},
		},
		SubscribeFilterLogsFunc: &GethClientSubscribeFilterLogsFunc{
			defaultHook: func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error) {
				panic("unexpected invocation of MockGethClient.SubscribeFilterLogs")
			},
		},
		SubscribeNewHeadFunc: &GethClientSubscribeNewHeadFunc{
			defaultHook: func(context.Context, chan<- *types.Header) (goethereum.Subscription, error) {
				panic("unexpected invocation of MockGethClient.SubscribeNewHead")
			},
		},
		SuggestGasPriceFunc: &GethClientSuggestGasPriceFunc{
			defaultHook: func(context.Context) (*big.Int, error) {
				panic("unexpected invocation of MockGethClient.SuggestGasPrice")
			},
		},
		SuggestGasTipCapFunc: &GethClientSuggestGasTipCapFunc{
			defaultHook: func(context.Context) (*big.Int, error) {
				panic("unexpected invocation of MockGethClient.SuggestGasTipCap")
			},
		},
		TransactionByHashFunc: &GethClientTransactionByHashFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Transaction, bool, error) {
				panic("unexpected invocation of MockGethClient.TransactionByHash")
			},
		},
		TransactionCountFunc: &GethClientTransactionCountFunc{
			defaultHook: func(context.Context, common.Hash) (uint, error) {
				panic("unexpected invocation of MockGethClient.TransactionCount")
			},
		},
		TransactionInBlockFunc: &GethClientTransactionInBlockFunc{
			defaultHook: func(context.Context, common.Hash, uint) (*types.Transaction, error) {
				panic("unexpected invocation of MockGethClient.TransactionInBlock")
			},
		},
		TransactionReceiptFunc: &GethClientTransactionReceiptFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Receipt, error) {
				panic("unexpected invocation of MockGethClient.TransactionReceipt")
			},
		},
	}
}

// NewMockGethClientFrom creates a new mock of the MockGethClient interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockGethClientFrom(i interfaces.GethClient) *MockGethClient {
	return &MockGethClient{
		BalanceAtFunc: &GethClientBalanceAtFunc{
			defaultHook: i.BalanceAt,
		},
		BlockByHashFunc: &GethClientBlockByHashFunc{
			defaultHook: i.BlockByHash,
		},
		BlockByNumberFunc: &GethClientBlockByNumberFunc{
			defaultHook: i.BlockByNumber,
		},
		CallContractFunc: &GethClientCallContractFunc{
			defaultHook: i.CallContract,
		},
		CodeAtFunc: &GethClientCodeAtFunc{
			defaultHook: i.CodeAt,
		},
		EstimateGasFunc: &GethClientEstimateGasFunc{
			defaultHook: i.EstimateGas,
		},
		FilterLogsFunc: &GethClientFilterLogsFunc{
			defaultHook: i.FilterLogs,
		},
		HeaderByHashFunc: &GethClientHeaderByHashFunc{
			defaultHook: i.HeaderByHash,
		},
		HeaderByNumberFunc: &GethClientHeaderByNumberFunc{
			defaultHook: i.HeaderByNumber,
		},
		NonceAtFunc: &GethClientNonceAtFunc{
			defaultHook: i.NonceAt,
		},
		PendingCodeAtFunc: &GethClientPendingCodeAtFunc{
			defaultHook: i.PendingCodeAt,
		},
		PendingNonceAtFunc: &GethClientPendingNonceAtFunc{
			defaultHook: i.PendingNonceAt,
		},
		SendTransactionFunc: &GethClientSendTransactionFunc{
			defaultHook: i.SendTransaction,
		},
		StorageAtFunc: &GethClientStorageAtFunc{
			defaultHook: i.StorageAt,
		},
		SubscribeFilterLogsFunc: &GethClientSubscribeFilterLogsFunc{
			defaultHook: i.SubscribeFilterLogs,
		},
		SubscribeNewHeadFunc: &GethClientSubscribeNewHeadFunc{
			defaultHook: i.SubscribeNewHead,
		},
		SuggestGasPriceFunc: &GethClientSuggestGasPriceFunc{
			defaultHook: i.SuggestGasPrice,
		},
		SuggestGasTipCapFunc: &GethClientSuggestGasTipCapFunc{
			defaultHook: i.SuggestGasTipCap,
		},
		TransactionByHashFunc: &GethClientTransactionByHashFunc{
			defaultHook: i.TransactionByHash,
		},
		TransactionCountFunc: &GethClientTransactionCountFunc{
			defaultHook: i.TransactionCount,
		},
		TransactionInBlockFunc: &GethClientTransactionInBlockFunc{
			defaultHook: i.TransactionInBlock,
		},
		TransactionReceiptFunc: &GethClientTransactionReceiptFunc{
			defaultHook: i.TransactionReceipt,
		},
	}
}

// GethClientBalanceAtFunc describes the behavior when the BalanceAt method
// of the parent MockGethClient instance is invoked.
type GethClientBalanceAtFunc struct {
	defaultHook func(context.Context, common.Address, *big.Int) (*big.Int, error)
	hooks       []func(context.Context, common.Address, *big.Int) (*big.Int, error)
	history     []GethClientBalanceAtFuncCall
	mutex       sync.Mutex
}

// BalanceAt delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGethClient) BalanceAt(v0 context.Context, v1 common.Address, v2 *big.Int) (*big.Int, error) {
	r0, r1 := m.BalanceAtFunc.nextHook()(v0, v1, v2)
	m.BalanceAtFunc.appendCall(GethClientBalanceAtFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BalanceAt method of
// the parent MockGethClient instance is invoked and the hook queue is
// empty.
func (f *GethClientBalanceAtFunc) SetDefaultHook(hook func(context.Context, common.Address, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BalanceAt method of the parent MockGethClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GethClientBalanceAtFunc) PushHook(hook func(context.Context, common.Address, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientBalanceAtFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Address, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientBalanceAtFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(context.Context, common.Address, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *GethClientBalanceAtFunc) nextHook() func(context.Context, common.Address, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientBalanceAtFunc) appendCall(r0 GethClientBalanceAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientBalanceAtFuncCall objects
// describing the invocations of this function.
func (f *GethClientBalanceAtFunc) History() []GethClientBalanceAtFuncCall {
	f.mutex.Lock()
	history := make([]GethClientBalanceAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientBalanceAtFuncCall is an object that describes an invocation of
// method BalanceAt on an instance of MockGethClient.
type GethClientBalanceAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientBalanceAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientBalanceAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientBlockByHashFunc describes the behavior when the BlockByHash
// method of the parent MockGethClient instance is invoked.
type GethClientBlockByHashFunc struct {
	defaultHook func(context.Context, common.Hash) (*types.Block, error)
	hooks       []func(context.Context, common.Hash) (*types.Block, error)
	history     []GethClientBlockByHashFuncCall
	mutex       sync.Mutex
}

// BlockByHash delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGethClient) BlockByHash(v0 context.Context, v1 common.Hash) (*types.Block, error) {
	r0, r1 := m.BlockByHashFunc.nextHook()(v0, v1)
	m.BlockByHashFunc.appendCall(GethClientBlockByHashFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BlockByHash method
// of the parent MockGethClient instance is invoked and the hook queue is
// empty.
func (f *GethClientBlockByHashFunc) SetDefaultHook(hook func(context.Context, common.Hash) (*types.Block, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BlockByHash method of the parent MockGethClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GethClientBlockByHashFunc) PushHook(hook func(context.Context, common.Hash) (*types.Block, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientBlockByHashFunc) SetDefaultReturn(r0 *types.Block, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Hash) (*types.Block, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientBlockByHashFunc) PushReturn(r0 *types.Block, r1 error) {
	f.PushHook(func(context.Context, common.Hash) (*types.Block, error) {
		return r0, r1
	})
}

func (f *GethClientBlockByHashFunc) nextHook() func(context.Context, common.Hash) (*types.Block, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientBlockByHashFunc) appendCall(r0 GethClientBlockByHashFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientBlockByHashFuncCall objects
// describing the invocations of this function.
func (f *GethClientBlockByHashFunc) History() []GethClientBlockByHashFuncCall {
	f.mutex.Lock()
	history := make([]GethClientBlockByHashFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientBlockByHashFuncCall is an object that describes an invocation
// of method BlockByHash on an instance of MockGethClient.
type GethClientBlockByHashFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Block
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientBlockByHashFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientBlockByHashFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientBlockByNumberFunc describes the behavior when the BlockByNumber
// method of the parent MockGethClient instance is invoked.
type GethClientBlockByNumberFunc struct {
	defaultHook func(context.Context, *big.Int) (*types.Block, error)
	hooks       []func(context.Context, *big.Int) (*types.Block, error)
	history     []GethClientBlockByNumberFuncCall
	mutex       sync.Mutex
}

// BlockByNumber delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGethClient) BlockByNumber(v0 context.Context, v1 *big.Int) (*types.Block, error) {
	r0, r1 := m.BlockByNumberFunc.nextHook()(v0, v1)
	m.BlockByNumberFunc.appendCall(GethClientBlockByNumberFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BlockByNumber method
// of the parent MockGethClient instance is invoked and the hook queue is
// empty.
func (f *GethClientBlockByNumberFunc) SetDefaultHook(hook func(context.Context, *big.Int) (*types.Block, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BlockByNumber method of the parent MockGethClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GethClientBlockByNumberFunc) PushHook(hook func(context.Context, *big.Int) (*types.Block, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientBlockByNumberFunc) SetDefaultReturn(r0 *types.Block, r1 error) {
	f.SetDefaultHook(func(context.Context, *big.Int) (*types.Block, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientBlockByNumberFunc) PushReturn(r0 *types.Block, r1 error) {
	f.PushHook(func(context.Context, *big.Int) (*types.Block, error) {
		return r0, r1
	})
}

func (f *GethClientBlockByNumberFunc) nextHook() func(context.Context, *big.Int) (*types.Block, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientBlockByNumberFunc) appendCall(r0 GethClientBlockByNumberFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientBlockByNumberFuncCall objects
// describing the invocations of this function.
func (f *GethClientBlockByNumberFunc) History() []GethClientBlockByNumberFuncCall {
	f.mutex.Lock()
	history := make([]GethClientBlockByNumberFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientBlockByNumberFuncCall is an object that describes an invocation
// of method BlockByNumber on an instance of MockGethClient.
type GethClientBlockByNumberFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Block
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientBlockByNumberFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientBlockByNumberFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientCallContractFunc describes the behavior when the CallContract
// method of the parent MockGethClient instance is invoked.
type GethClientCallContractFunc struct {
	defaultHook func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error)
	hooks       []func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error)
	history     []GethClientCallContractFuncCall
	mutex       sync.Mutex
}

// CallContract delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGethClient) CallContract(v0 context.Context, v1 goethereum.CallMsg, v2 *big.Int) ([]byte, error) {
	r0, r1 := m.CallContractFunc.nextHook()(v0, v1, v2)
	m.CallContractFunc.appendCall(GethClientCallContractFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CallContract method
// of the parent MockGethClient instance is invoked and the hook queue is
// empty.
func (f *GethClientCallContractFunc) SetDefaultHook(hook func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CallContract method of the parent MockGethClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GethClientCallContractFunc) PushHook(hook func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientCallContractFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientCallContractFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error) {
		return r0, r1
	})
}

func (f *GethClientCallContractFunc) nextHook() func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientCallContractFunc) appendCall(r0 GethClientCallContractFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientCallContractFuncCall objects
// describing the invocations of this function.
func (f *GethClientCallContractFunc) History() []GethClientCallContractFuncCall {
	f.mutex.Lock()
	history := make([]GethClientCallContractFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientCallContractFuncCall is an object that describes an invocation
// of method CallContract on an instance of MockGethClient.
type GethClientCallContractFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 goethereum.CallMsg
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientCallContractFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientCallContractFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientCodeAtFunc describes the behavior when the CodeAt method of the
// parent MockGethClient instance is invoked.
type GethClientCodeAtFunc struct {
	defaultHook func(context.Context, common.Address, *big.Int) ([]byte, error)
	hooks       []func(context.Context, common.Address, *big.Int) ([]byte, error)
	history     []GethClientCodeAtFuncCall
	mutex       sync.Mutex
}

// CodeAt delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGethClient) CodeAt(v0 context.Context, v1 common.Address, v2 *big.Int) ([]byte, error) {
	r0, r1 := m.CodeAtFunc.nextHook()(v0, v1, v2)
	m.CodeAtFunc.appendCall(GethClientCodeAtFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CodeAt method of the
// parent MockGethClient instance is invoked and the hook queue is empty.
func (f *GethClientCodeAtFunc) SetDefaultHook(hook func(context.Context, common.Address, *big.Int) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeAt method of the parent MockGethClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GethClientCodeAtFunc) PushHook(hook func(context.Context, common.Address, *big.Int) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientCodeAtFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Address, *big.Int) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientCodeAtFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, common.Address, *big.Int) ([]byte, error) {
		return r0, r1
	})
}

func (f *GethClientCodeAtFunc) nextHook() func(context.Context, common.Address, *big.Int) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientCodeAtFunc) appendCall(r0 GethClientCodeAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientCodeAtFuncCall objects describing
// the invocations of this function.
func (f *GethClientCodeAtFunc) History() []GethClientCodeAtFuncCall {
	f.mutex.Lock()
	history := make([]GethClientCodeAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientCodeAtFuncCall is an object that describes an invocation of
// method CodeAt on an instance of MockGethClient.
type GethClientCodeAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientCodeAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientCodeAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientEstimateGasFunc describes the behavior when the EstimateGas
// method of the parent MockGethClient instance is invoked.
type GethClientEstimateGasFunc struct {
	defaultHook func(context.Context, goethereum.CallMsg) (uint64, error)
	hooks       []func(context.Context, goethereum.CallMsg) (uint64, error)
	history     []GethClientEstimateGasFuncCall
	mutex       sync.Mutex
}

// EstimateGas delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGethClient) EstimateGas(v0 context.Context, v1 goethereum.CallMsg) (uint64, error) {
	r0, r1 := m.EstimateGasFunc.nextHook()(v0, v1)
	m.EstimateGasFunc.appendCall(GethClientEstimateGasFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the EstimateGas method
// of the parent MockGethClient instance is invoked and the hook queue is
// empty.
func (f *GethClientEstimateGasFunc) SetDefaultHook(hook func(context.Context, goethereum.CallMsg) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EstimateGas method of the parent MockGethClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GethClientEstimateGasFunc) PushHook(hook func(context.Context, goethereum.CallMsg) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientEstimateGasFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context, goethereum.CallMsg) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientEstimateGasFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context, goethereum.CallMsg) (uint64, error) {
		return r0, r1
	})
}

func (f *GethClientEstimateGasFunc) nextHook() func(context.Context, goethereum.CallMsg) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientEstimateGasFunc) appendCall(r0 GethClientEstimateGasFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientEstimateGasFuncCall objects
// describing the invocations of this function.
func (f *GethClientEstimateGasFunc) History() []GethClientEstimateGasFuncCall {
	f.mutex.Lock()
	history := make([]GethClientEstimateGasFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientEstimateGasFuncCall is an object that describes an invocation
// of method EstimateGas on an instance of MockGethClient.
type GethClientEstimateGasFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 goethereum.CallMsg
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientEstimateGasFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientEstimateGasFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientFilterLogsFunc describes the behavior when the FilterLogs
// method of the parent MockGethClient instance is invoked.
type GethClientFilterLogsFunc struct {
	defaultHook func(context.Context, goethereum.FilterQuery) ([]types.Log, error)
	hooks       []func(context.Context, goethereum.FilterQuery) ([]types.Log, error)
	history     []GethClientFilterLogsFuncCall
	mutex       sync.Mutex
}

// FilterLogs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGethClient) FilterLogs(v0 context.Context, v1 goethereum.FilterQuery) ([]types.Log, error) {
	r0, r1 := m.FilterLogsFunc.nextHook()(v0, v1)
	m.FilterLogsFunc.appendCall(GethClientFilterLogsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterLogs method of
// the parent MockGethClient instance is invoked and the hook queue is
// empty.
func (f *GethClientFilterLogsFunc) SetDefaultHook(hook func(context.Context, goethereum.FilterQuery) ([]types.Log, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterLogs method of the parent MockGethClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GethClientFilterLogsFunc) PushHook(hook func(context.Context, goethereum.FilterQuery) ([]types.Log, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientFilterLogsFunc) SetDefaultReturn(r0 []types.Log, r1 error) {
	f.SetDefaultHook(func(context.Context, goethereum.FilterQuery) ([]types.Log, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientFilterLogsFunc) PushReturn(r0 []types.Log, r1 error) {
	f.PushHook(func(context.Context, goethereum.FilterQuery) ([]types.Log, error) {
		return r0, r1
	})
}

func (f *GethClientFilterLogsFunc) nextHook() func(context.Context, goethereum.FilterQuery) ([]types.Log, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientFilterLogsFunc) appendCall(r0 GethClientFilterLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientFilterLogsFuncCall objects
// describing the invocations of this function.
func (f *GethClientFilterLogsFunc) History() []GethClientFilterLogsFuncCall {
	f.mutex.Lock()
	history := make([]GethClientFilterLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientFilterLogsFuncCall is an object that describes an invocation of
// method FilterLogs on an instance of MockGethClient.
type GethClientFilterLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 goethereum.FilterQuery
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Log
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientFilterLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientFilterLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientHeaderByHashFunc describes the behavior when the HeaderByHash
// method of the parent MockGethClient instance is invoked.
type GethClientHeaderByHashFunc struct {
	defaultHook func(context.Context, common.Hash) (*types.Header, error)
	hooks       []func(context.Context, common.Hash) (*types.Header, error)
	history     []GethClientHeaderByHashFuncCall
	mutex       sync.Mutex
}

// HeaderByHash delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGethClient) HeaderByHash(v0 context.Context, v1 common.Hash) (*types.Header, error) {
	r0, r1 := m.HeaderByHashFunc.nextHook()(v0, v1)
	m.HeaderByHashFunc.appendCall(GethClientHeaderByHashFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HeaderByHash method
// of the parent MockGethClient instance is invoked and the hook queue is
// empty.
func (f *GethClientHeaderByHashFunc) SetDefaultHook(hook func(context.Context, common.Hash) (*types.Header, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HeaderByHash method of the parent MockGethClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GethClientHeaderByHashFunc) PushHook(hook func(context.Context, common.Hash) (*types.Header, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientHeaderByHashFunc) SetDefaultReturn(r0 *types.Header, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Hash) (*types.Header, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientHeaderByHashFunc) PushReturn(r0 *types.Header, r1 error) {
	f.PushHook(func(context.Context, common.Hash) (*types.Header, error) {
		return r0, r1
	})
}

func (f *GethClientHeaderByHashFunc) nextHook() func(context.Context, common.Hash) (*types.Header, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientHeaderByHashFunc) appendCall(r0 GethClientHeaderByHashFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientHeaderByHashFuncCall objects
// describing the invocations of this function.
func (f *GethClientHeaderByHashFunc) History() []GethClientHeaderByHashFuncCall {
	f.mutex.Lock()
	history := make([]GethClientHeaderByHashFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientHeaderByHashFuncCall is an object that describes an invocation
// of method HeaderByHash on an instance of MockGethClient.
type GethClientHeaderByHashFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Header
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientHeaderByHashFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientHeaderByHashFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientHeaderByNumberFunc describes the behavior when the
// HeaderByNumber method of the parent MockGethClient instance is invoked.
type GethClientHeaderByNumberFunc struct {
	defaultHook func(context.Context, *big.Int) (*types.Header, error)
	hooks       []func(context.Context, *big.Int) (*types.Header, error)
	history     []GethClientHeaderByNumberFuncCall
	mutex       sync.Mutex
}

// HeaderByNumber delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGethClient) HeaderByNumber(v0 context.Context, v1 *big.Int) (*types.Header, error) {
	r0, r1 := m.HeaderByNumberFunc.nextHook()(v0, v1)
	m.HeaderByNumberFunc.appendCall(GethClientHeaderByNumberFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HeaderByNumber
// method of the parent MockGethClient instance is invoked and the hook
// queue is empty.
func (f *GethClientHeaderByNumberFunc) SetDefaultHook(hook func(context.Context, *big.Int) (*types.Header, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HeaderByNumber method of the parent MockGethClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GethClientHeaderByNumberFunc) PushHook(hook func(context.Context, *big.Int) (*types.Header, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientHeaderByNumberFunc) SetDefaultReturn(r0 *types.Header, r1 error) {
	f.SetDefaultHook(func(context.Context, *big.Int) (*types.Header, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientHeaderByNumberFunc) PushReturn(r0 *types.Header, r1 error) {
	f.PushHook(func(context.Context, *big.Int) (*types.Header, error) {
		return r0, r1
	})
}

func (f *GethClientHeaderByNumberFunc) nextHook() func(context.Context, *big.Int) (*types.Header, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientHeaderByNumberFunc) appendCall(r0 GethClientHeaderByNumberFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientHeaderByNumberFuncCall objects
// describing the invocations of this function.
func (f *GethClientHeaderByNumberFunc) History() []GethClientHeaderByNumberFuncCall {
	f.mutex.Lock()
	history := make([]GethClientHeaderByNumberFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientHeaderByNumberFuncCall is an object that describes an
// invocation of method HeaderByNumber on an instance of MockGethClient.
type GethClientHeaderByNumberFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Header
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientHeaderByNumberFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientHeaderByNumberFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientNonceAtFunc describes the behavior when the NonceAt method of
// the parent MockGethClient instance is invoked.
type GethClientNonceAtFunc struct {
	defaultHook func(context.Context, common.Address, *big.Int) (uint64, error)
	hooks       []func(context.Context, common.Address, *big.Int) (uint64, error)
	history     []GethClientNonceAtFuncCall
	mutex       sync.Mutex
}

// NonceAt delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGethClient) NonceAt(v0 context.Context, v1 common.Address, v2 *big.Int) (uint64, error) {
	r0, r1 := m.NonceAtFunc.nextHook()(v0, v1, v2)
	m.NonceAtFunc.appendCall(GethClientNonceAtFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the NonceAt method of
// the parent MockGethClient instance is invoked and the hook queue is
// empty.
func (f *GethClientNonceAtFunc) SetDefaultHook(hook func(context.Context, common.Address, *big.Int) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NonceAt method of the parent MockGethClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GethClientNonceAtFunc) PushHook(hook func(context.Context, common.Address, *big.Int) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientNonceAtFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Address, *big.Int) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientNonceAtFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context, common.Address, *big.Int) (uint64, error) {
		return r0, r1
	})
}

func (f *GethClientNonceAtFunc) nextHook() func(context.Context, common.Address, *big.Int) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientNonceAtFunc) appendCall(r0 GethClientNonceAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientNonceAtFuncCall objects
// describing the invocations of this function.
func (f *GethClientNonceAtFunc) History() []GethClientNonceAtFuncCall {
	f.mutex.Lock()
	history := make([]GethClientNonceAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientNonceAtFuncCall is an object that describes an invocation of
// method NonceAt on an instance of MockGethClient.
type GethClientNonceAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientNonceAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientNonceAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientPendingCodeAtFunc describes the behavior when the PendingCodeAt
// method of the parent MockGethClient instance is invoked.
type GethClientPendingCodeAtFunc struct {
	defaultHook func(context.Context, common.Address) ([]byte, error)
	hooks       []func(context.Context, common.Address) ([]byte, error)
	history     []GethClientPendingCodeAtFuncCall
	mutex       sync.Mutex
}

// PendingCodeAt delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGethClient) PendingCodeAt(v0 context.Context, v1 common.Address) ([]byte, error) {
	r0, r1 := m.PendingCodeAtFunc.nextHook()(v0, v1)
	m.PendingCodeAtFunc.appendCall(GethClientPendingCodeAtFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PendingCodeAt method
// of the parent MockGethClient instance is invoked and the hook queue is
// empty.
func (f *GethClientPendingCodeAtFunc) SetDefaultHook(hook func(context.Context, common.Address) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PendingCodeAt method of the parent MockGethClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GethClientPendingCodeAtFunc) PushHook(hook func(context.Context, common.Address) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientPendingCodeAtFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Address) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientPendingCodeAtFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, common.Address) ([]byte, error) {
		return r0, r1
	})
}

func (f *GethClientPendingCodeAtFunc) nextHook() func(context.Context, common.Address) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientPendingCodeAtFunc) appendCall(r0 GethClientPendingCodeAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientPendingCodeAtFuncCall objects
// describing the invocations of this function.
func (f *GethClientPendingCodeAtFunc) History() []GethClientPendingCodeAtFuncCall {
	f.mutex.Lock()
	history := make([]GethClientPendingCodeAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientPendingCodeAtFuncCall is an object that describes an invocation
// of method PendingCodeAt on an instance of MockGethClient.
type GethClientPendingCodeAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientPendingCodeAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientPendingCodeAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientPendingNonceAtFunc describes the behavior when the
// PendingNonceAt method of the parent MockGethClient instance is invoked.
type GethClientPendingNonceAtFunc struct {
	defaultHook func(context.Context, common.Address) (uint64, error)
	hooks       []func(context.Context, common.Address) (uint64, error)
	history     []GethClientPendingNonceAtFuncCall
	mutex       sync.Mutex
}

// PendingNonceAt delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGethClient) PendingNonceAt(v0 context.Context, v1 common.Address) (uint64, error) {
	r0, r1 := m.PendingNonceAtFunc.nextHook()(v0, v1)
	m.PendingNonceAtFunc.appendCall(GethClientPendingNonceAtFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PendingNonceAt
// method of the parent MockGethClient instance is invoked and the hook
// queue is empty.
func (f *GethClientPendingNonceAtFunc) SetDefaultHook(hook func(context.Context, common.Address) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PendingNonceAt method of the parent MockGethClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GethClientPendingNonceAtFunc) PushHook(hook func(context.Context, common.Address) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientPendingNonceAtFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Address) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientPendingNonceAtFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context, common.Address) (uint64, error) {
		return r0, r1
	})
}

func (f *GethClientPendingNonceAtFunc) nextHook() func(context.Context, common.Address) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientPendingNonceAtFunc) appendCall(r0 GethClientPendingNonceAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientPendingNonceAtFuncCall objects
// describing the invocations of this function.
func (f *GethClientPendingNonceAtFunc) History() []GethClientPendingNonceAtFuncCall {
	f.mutex.Lock()
	history := make([]GethClientPendingNonceAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientPendingNonceAtFuncCall is an object that describes an
// invocation of method PendingNonceAt on an instance of MockGethClient.
type GethClientPendingNonceAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientPendingNonceAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientPendingNonceAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientSendTransactionFunc describes the behavior when the
// SendTransaction method of the parent MockGethClient instance is invoked.
type GethClientSendTransactionFunc struct {
	defaultHook func(context.Context, *types.Transaction) error
	hooks       []func(context.Context, *types.Transaction) error
	history     []GethClientSendTransactionFuncCall
	mutex       sync.Mutex
}

// SendTransaction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGethClient) SendTransaction(v0 context.Context, v1 *types.Transaction) error {
	r0 := m.SendTransactionFunc.nextHook()(v0, v1)
	m.SendTransactionFunc.appendCall(GethClientSendTransactionFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendTransaction
// method of the parent MockGethClient instance is invoked and the hook
// queue is empty.
func (f *GethClientSendTransactionFunc) SetDefaultHook(hook func(context.Context, *types.Transaction) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendTransaction method of the parent MockGethClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GethClientSendTransactionFunc) PushHook(hook func(context.Context, *types.Transaction) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientSendTransactionFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.Transaction) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientSendTransactionFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.Transaction) error {
		return r0
	})
}

func (f *GethClientSendTransactionFunc) nextHook() func(context.Context, *types.Transaction) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientSendTransactionFunc) appendCall(r0 GethClientSendTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientSendTransactionFuncCall objects
// describing the invocations of this function.
func (f *GethClientSendTransactionFunc) History() []GethClientSendTransactionFuncCall {
	f.mutex.Lock()
	history := make([]GethClientSendTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientSendTransactionFuncCall is an object that describes an
// invocation of method SendTransaction on an instance of MockGethClient.
type GethClientSendTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Transaction
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientSendTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientSendTransactionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GethClientStorageAtFunc describes the behavior when the StorageAt method
// of the parent MockGethClient instance is invoked.
type GethClientStorageAtFunc struct {
	defaultHook func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error)
	hooks       []func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error)
	history     []GethClientStorageAtFuncCall
	mutex       sync.Mutex
}

// StorageAt delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGethClient) StorageAt(v0 context.Context, v1 common.Address, v2 common.Hash, v3 *big.Int) ([]byte, error) {
	r0, r1 := m.StorageAtFunc.nextHook()(v0, v1, v2, v3)
	m.StorageAtFunc.appendCall(GethClientStorageAtFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the StorageAt method of
// the parent MockGethClient instance is invoked and the hook queue is
// empty.
func (f *GethClientStorageAtFunc) SetDefaultHook(hook func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StorageAt method of the parent MockGethClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GethClientStorageAtFunc) PushHook(hook func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientStorageAtFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientStorageAtFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error) {
		return r0, r1
	})
}

func (f *GethClientStorageAtFunc) nextHook() func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientStorageAtFunc) appendCall(r0 GethClientStorageAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientStorageAtFuncCall objects
// describing the invocations of this function.
func (f *GethClientStorageAtFunc) History() []GethClientStorageAtFuncCall {
	f.mutex.Lock()
	history := make([]GethClientStorageAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientStorageAtFuncCall is an object that describes an invocation of
// method StorageAt on an instance of MockGethClient.
type GethClientStorageAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Hash
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientStorageAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientStorageAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientSubscribeFilterLogsFunc describes the behavior when the
// SubscribeFilterLogs method of the parent MockGethClient instance is
// invoked.
type GethClientSubscribeFilterLogsFunc struct {
	defaultHook func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error)
	hooks       []func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error)
	history     []GethClientSubscribeFilterLogsFuncCall
	mutex       sync.Mutex
}

// SubscribeFilterLogs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGethClient) SubscribeFilterLogs(v0 context.Context, v1 goethereum.FilterQuery, v2 chan<- types.Log) (goethereum.Subscription, error) {
	r0, r1 := m.SubscribeFilterLogsFunc.nextHook()(v0, v1, v2)
	m.SubscribeFilterLogsFunc.appendCall(GethClientSubscribeFilterLogsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SubscribeFilterLogs
// method of the parent MockGethClient instance is invoked and the hook
// queue is empty.
func (f *GethClientSubscribeFilterLogsFunc) SetDefaultHook(hook func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SubscribeFilterLogs method of the parent MockGethClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GethClientSubscribeFilterLogsFunc) PushHook(hook func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientSubscribeFilterLogsFunc) SetDefaultReturn(r0 goethereum.Subscription, r1 error) {
	f.SetDefaultHook(func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientSubscribeFilterLogsFunc) PushReturn(r0 goethereum.Subscription, r1 error) {
	f.PushHook(func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error) {
		return r0, r1
	})
}

func (f *GethClientSubscribeFilterLogsFunc) nextHook() func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientSubscribeFilterLogsFunc) appendCall(r0 GethClientSubscribeFilterLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientSubscribeFilterLogsFuncCall
// objects describing the invocations of this function.
func (f *GethClientSubscribeFilterLogsFunc) History() []GethClientSubscribeFilterLogsFuncCall {
	f.mutex.Lock()
	history := make([]GethClientSubscribeFilterLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientSubscribeFilterLogsFuncCall is an object that describes an
// invocation of method SubscribeFilterLogs on an instance of
// MockGethClient.
type GethClientSubscribeFilterLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 goethereum.FilterQuery
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 chan<- types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 goethereum.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientSubscribeFilterLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientSubscribeFilterLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientSubscribeNewHeadFunc describes the behavior when the
// SubscribeNewHead method of the parent MockGethClient instance is invoked.
type GethClientSubscribeNewHeadFunc struct {
	defaultHook func(context.Context, chan<- *types.Header) (goethereum.Subscription, error)
	hooks       []func(context.Context, chan<- *types.Header) (goethereum.Subscription, error)
	history     []GethClientSubscribeNewHeadFuncCall
	mutex       sync.Mutex
}

// SubscribeNewHead delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGethClient) SubscribeNewHead(v0 context.Context, v1 chan<- *types.Header) (goethereum.Subscription, error) {
	r0, r1 := m.SubscribeNewHeadFunc.nextHook()(v0, v1)
	m.SubscribeNewHeadFunc.appendCall(GethClientSubscribeNewHeadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SubscribeNewHead
// method of the parent MockGethClient instance is invoked and the hook
// queue is empty.
func (f *GethClientSubscribeNewHeadFunc) SetDefaultHook(hook func(context.Context, chan<- *types.Header) (goethereum.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SubscribeNewHead method of the parent MockGethClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GethClientSubscribeNewHeadFunc) PushHook(hook func(context.Context, chan<- *types.Header) (goethereum.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientSubscribeNewHeadFunc) SetDefaultReturn(r0 goethereum.Subscription, r1 error) {
	f.SetDefaultHook(func(context.Context, chan<- *types.Header) (goethereum.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientSubscribeNewHeadFunc) PushReturn(r0 goethereum.Subscription, r1 error) {
	f.PushHook(func(context.Context, chan<- *types.Header) (goethereum.Subscription, error) {
		return r0, r1
	})
}

func (f *GethClientSubscribeNewHeadFunc) nextHook() func(context.Context, chan<- *types.Header) (goethereum.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientSubscribeNewHeadFunc) appendCall(r0 GethClientSubscribeNewHeadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientSubscribeNewHeadFuncCall objects
// describing the invocations of this function.
func (f *GethClientSubscribeNewHeadFunc) History() []GethClientSubscribeNewHeadFuncCall {
	f.mutex.Lock()
	history := make([]GethClientSubscribeNewHeadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientSubscribeNewHeadFuncCall is an object that describes an
// invocation of method SubscribeNewHead on an instance of MockGethClient.
type GethClientSubscribeNewHeadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *types.Header
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 goethereum.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientSubscribeNewHeadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientSubscribeNewHeadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientSuggestGasPriceFunc describes the behavior when the
// SuggestGasPrice method of the parent MockGethClient instance is invoked.
type GethClientSuggestGasPriceFunc struct {
	defaultHook func(context.Context) (*big.Int, error)
	hooks       []func(context.Context) (*big.Int, error)
	history     []GethClientSuggestGasPriceFuncCall
	mutex       sync.Mutex
}

// SuggestGasPrice delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGethClient) SuggestGasPrice(v0 context.Context) (*big.Int, error) {
	r0, r1 := m.SuggestGasPriceFunc.nextHook()(v0)
	m.SuggestGasPriceFunc.appendCall(GethClientSuggestGasPriceFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SuggestGasPrice
// method of the parent MockGethClient instance is invoked and the hook
// queue is empty.
func (f *GethClientSuggestGasPriceFunc) SetDefaultHook(hook func(context.Context) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SuggestGasPrice method of the parent MockGethClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GethClientSuggestGasPriceFunc) PushHook(hook func(context.Context) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientSuggestGasPriceFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(context.Context) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientSuggestGasPriceFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(context.Context) (*big.Int, error) {
		return r0, r1
	})
}

func (f *GethClientSuggestGasPriceFunc) nextHook() func(context.Context) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientSuggestGasPriceFunc) appendCall(r0 GethClientSuggestGasPriceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientSuggestGasPriceFuncCall objects
// describing the invocations of this function.
func (f *GethClientSuggestGasPriceFunc) History() []GethClientSuggestGasPriceFuncCall {
	f.mutex.Lock()
	history := make([]GethClientSuggestGasPriceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientSuggestGasPriceFuncCall is an object that describes an
// invocation of method SuggestGasPrice on an instance of MockGethClient.
type GethClientSuggestGasPriceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientSuggestGasPriceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientSuggestGasPriceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientSuggestGasTipCapFunc describes the behavior when the
// SuggestGasTipCap method of the parent MockGethClient instance is invoked.
type GethClientSuggestGasTipCapFunc struct {
	defaultHook func(context.Context) (*big.Int, error)
	hooks       []func(context.Context) (*big.Int, error)
	history     []GethClientSuggestGasTipCapFuncCall
	mutex       sync.Mutex
}

// SuggestGasTipCap delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGethClient) SuggestGasTipCap(v0 context.Context) (*big.Int, error) {
	r0, r1 := m.SuggestGasTipCapFunc.nextHook()(v0)
	m.SuggestGasTipCapFunc.appendCall(GethClientSuggestGasTipCapFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SuggestGasTipCap
// method of the parent MockGethClient instance is invoked and the hook
// queue is empty.
func (f *GethClientSuggestGasTipCapFunc) SetDefaultHook(hook func(context.Context) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SuggestGasTipCap method of the parent MockGethClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GethClientSuggestGasTipCapFunc) PushHook(hook func(context.Context) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientSuggestGasTipCapFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(context.Context) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientSuggestGasTipCapFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(context.Context) (*big.Int, error) {
		return r0, r1
	})
}

func (f *GethClientSuggestGasTipCapFunc) nextHook() func(context.Context) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientSuggestGasTipCapFunc) appendCall(r0 GethClientSuggestGasTipCapFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientSuggestGasTipCapFuncCall objects
// describing the invocations of this function.
func (f *GethClientSuggestGasTipCapFunc) History() []GethClientSuggestGasTipCapFuncCall {
	f.mutex.Lock()
	history := make([]GethClientSuggestGasTipCapFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientSuggestGasTipCapFuncCall is an object that describes an
// invocation of method SuggestGasTipCap on an instance of MockGethClient.
type GethClientSuggestGasTipCapFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientSuggestGasTipCapFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientSuggestGasTipCapFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientTransactionByHashFunc describes the behavior when the
// TransactionByHash method of the parent MockGethClient instance is
// invoked.
type GethClientTransactionByHashFunc struct {
	defaultHook func(context.Context, common.Hash) (*types.Transaction, bool, error)
	hooks       []func(context.Context, common.Hash) (*types.Transaction, bool, error)
	history     []GethClientTransactionByHashFuncCall
	mutex       sync.Mutex
}

// TransactionByHash delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGethClient) TransactionByHash(v0 context.Context, v1 common.Hash) (*types.Transaction, bool, error) {
	r0, r1, r2 := m.TransactionByHashFunc.nextHook()(v0, v1)
	m.TransactionByHashFunc.appendCall(GethClientTransactionByHashFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the TransactionByHash
// method of the parent MockGethClient instance is invoked and the hook
// queue is empty.
func (f *GethClientTransactionByHashFunc) SetDefaultHook(hook func(context.Context, common.Hash) (*types.Transaction, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransactionByHash method of the parent MockGethClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GethClientTransactionByHashFunc) PushHook(hook func(context.Context, common.Hash) (*types.Transaction, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientTransactionByHashFunc) SetDefaultReturn(r0 *types.Transaction, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, common.Hash) (*types.Transaction, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientTransactionByHashFunc) PushReturn(r0 *types.Transaction, r1 bool, r2 error) {
	f.PushHook(func(context.Context, common.Hash) (*types.Transaction, bool, error) {
		return r0, r1, r2
	})
}

func (f *GethClientTransactionByHashFunc) nextHook() func(context.Context, common.Hash) (*types.Transaction, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientTransactionByHashFunc) appendCall(r0 GethClientTransactionByHashFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientTransactionByHashFuncCall objects
// describing the invocations of this function.
func (f *GethClientTransactionByHashFunc) History() []GethClientTransactionByHashFuncCall {
	f.mutex.Lock()
	history := make([]GethClientTransactionByHashFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientTransactionByHashFuncCall is an object that describes an
// invocation of method TransactionByHash on an instance of MockGethClient.
type GethClientTransactionByHashFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientTransactionByHashFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientTransactionByHashFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// GethClientTransactionCountFunc describes the behavior when the
// TransactionCount method of the parent MockGethClient instance is invoked.
type GethClientTransactionCountFunc struct {
	defaultHook func(context.Context, common.Hash) (uint, error)
	hooks       []func(context.Context, common.Hash) (uint, error)
	history     []GethClientTransactionCountFuncCall
	mutex       sync.Mutex
}

// TransactionCount delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGethClient) TransactionCount(v0 context.Context, v1 common.Hash) (uint, error) {
	r0, r1 := m.TransactionCountFunc.nextHook()(v0, v1)
	m.TransactionCountFunc.appendCall(GethClientTransactionCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TransactionCount
// method of the parent MockGethClient instance is invoked and the hook
// queue is empty.
func (f *GethClientTransactionCountFunc) SetDefaultHook(hook func(context.Context, common.Hash) (uint, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransactionCount method of the parent MockGethClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GethClientTransactionCountFunc) PushHook(hook func(context.Context, common.Hash) (uint, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientTransactionCountFunc) SetDefaultReturn(r0 uint, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Hash) (uint, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientTransactionCountFunc) PushReturn(r0 uint, r1 error) {
	f.PushHook(func(context.Context, common.Hash) (uint, error) {
		return r0, r1
	})
}

func (f *GethClientTransactionCountFunc) nextHook() func(context.Context, common.Hash) (uint, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientTransactionCountFunc) appendCall(r0 GethClientTransactionCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientTransactionCountFuncCall objects
// describing the invocations of this function.
func (f *GethClientTransactionCountFunc) History() []GethClientTransactionCountFuncCall {
	f.mutex.Lock()
	history := make([]GethClientTransactionCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientTransactionCountFuncCall is an object that describes an
// invocation of method TransactionCount on an instance of MockGethClient.
type GethClientTransactionCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientTransactionCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientTransactionCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientTransactionInBlockFunc describes the behavior when the
// TransactionInBlock method of the parent MockGethClient instance is
// invoked.
type GethClientTransactionInBlockFunc struct {
	defaultHook func(context.Context, common.Hash, uint) (*types.Transaction, error)
	hooks       []func(context.Context, common.Hash, uint) (*types.Transaction, error)
	history     []GethClientTransactionInBlockFuncCall
	mutex       sync.Mutex
}

// TransactionInBlock delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGethClient) TransactionInBlock(v0 context.Context, v1 common.Hash, v2 uint) (*types.Transaction, error) {
	r0, r1 := m.TransactionInBlockFunc.nextHook()(v0, v1, v2)
	m.TransactionInBlockFunc.appendCall(GethClientTransactionInBlockFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TransactionInBlock
// method of the parent MockGethClient instance is invoked and the hook
// queue is empty.
func (f *GethClientTransactionInBlockFunc) SetDefaultHook(hook func(context.Context, common.Hash, uint) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransactionInBlock method of the parent MockGethClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GethClientTransactionInBlockFunc) PushHook(hook func(context.Context, common.Hash, uint) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientTransactionInBlockFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Hash, uint) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientTransactionInBlockFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(context.Context, common.Hash, uint) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *GethClientTransactionInBlockFunc) nextHook() func(context.Context, common.Hash, uint) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientTransactionInBlockFunc) appendCall(r0 GethClientTransactionInBlockFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientTransactionInBlockFuncCall
// objects describing the invocations of this function.
func (f *GethClientTransactionInBlockFunc) History() []GethClientTransactionInBlockFuncCall {
	f.mutex.Lock()
	history := make([]GethClientTransactionInBlockFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientTransactionInBlockFuncCall is an object that describes an
// invocation of method TransactionInBlock on an instance of MockGethClient.
type GethClientTransactionInBlockFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 uint
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientTransactionInBlockFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientTransactionInBlockFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GethClientTransactionReceiptFunc describes the behavior when the
// TransactionReceipt method of the parent MockGethClient instance is
// invoked.
type GethClientTransactionReceiptFunc struct {
	defaultHook func(context.Context, common.Hash) (*types.Receipt, error)
	hooks       []func(context.Context, common.Hash) (*types.Receipt, error)
	history     []GethClientTransactionReceiptFuncCall
	mutex       sync.Mutex
}

// TransactionReceipt delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGethClient) TransactionReceipt(v0 context.Context, v1 common.Hash) (*types.Receipt, error) {
	r0, r1 := m.TransactionReceiptFunc.nextHook()(v0, v1)
	m.TransactionReceiptFunc.appendCall(GethClientTransactionReceiptFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TransactionReceipt
// method of the parent MockGethClient instance is invoked and the hook
// queue is empty.
func (f *GethClientTransactionReceiptFunc) SetDefaultHook(hook func(context.Context, common.Hash) (*types.Receipt, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransactionReceipt method of the parent MockGethClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GethClientTransactionReceiptFunc) PushHook(hook func(context.Context, common.Hash) (*types.Receipt, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GethClientTransactionReceiptFunc) SetDefaultReturn(r0 *types.Receipt, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Hash) (*types.Receipt, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GethClientTransactionReceiptFunc) PushReturn(r0 *types.Receipt, r1 error) {
	f.PushHook(func(context.Context, common.Hash) (*types.Receipt, error) {
		return r0, r1
	})
}

func (f *GethClientTransactionReceiptFunc) nextHook() func(context.Context, common.Hash) (*types.Receipt, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GethClientTransactionReceiptFunc) appendCall(r0 GethClientTransactionReceiptFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GethClientTransactionReceiptFuncCall
// objects describing the invocations of this function.
func (f *GethClientTransactionReceiptFunc) History() []GethClientTransactionReceiptFuncCall {
	f.mutex.Lock()
	history := make([]GethClientTransactionReceiptFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GethClientTransactionReceiptFuncCall is an object that describes an
// invocation of method TransactionReceipt on an instance of MockGethClient.
type GethClientTransactionReceiptFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Receipt
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GethClientTransactionReceiptFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GethClientTransactionReceiptFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockTask is a mock implementation of the Task interface (from the package
// github.com/alicenet/alicenet/blockchain/interfaces) used for unit testing.
type MockTask struct {
	// DoDoneFunc is an instance of a mock function object controlling the
	// behavior of the method DoDone.
	DoDoneFunc *TaskDoDoneFunc
	// DoRetryFunc is an instance of a mock function object controlling the
	// behavior of the method DoRetry.
	DoRetryFunc *TaskDoRetryFunc
	// DoWorkFunc is an instance of a mock function object controlling the
	// behavior of the method DoWork.
	DoWorkFunc *TaskDoWorkFunc
	// GetExecutionDataFunc is an instance of a mock function object
	// controlling the behavior of the method GetExecutionData.
	GetExecutionDataFunc *TaskGetExecutionDataFunc
	// InitializeFunc is an instance of a mock function object controlling
	// the behavior of the method Initialize.
	InitializeFunc *TaskInitializeFunc
	// ShouldRetryFunc is an instance of a mock function object controlling
	// the behavior of the method ShouldRetry.
	ShouldRetryFunc *TaskShouldRetryFunc
}

// NewMockTask creates a new mock of the Task interface. All methods return
// zero values for all results, unless overwritten.
func NewMockTask() *MockTask {
	return &MockTask{
		DoDoneFunc: &TaskDoDoneFunc{
			defaultHook: func(*logrus.Entry) {
				return
			},
		},
		DoRetryFunc: &TaskDoRetryFunc{
			defaultHook: func(context.Context, *logrus.Entry, interfaces.Ethereum) error {
				return nil
			},
		},
		DoWorkFunc: &TaskDoWorkFunc{
			defaultHook: func(context.Context, *logrus.Entry, interfaces.Ethereum) error {
				return nil
			},
		},
		GetExecutionDataFunc: &TaskGetExecutionDataFunc{
			defaultHook: func() interface{} {
				return nil
			},
		},
		InitializeFunc: &TaskInitializeFunc{
			defaultHook: func(context.Context, *logrus.Entry, interfaces.Ethereum, interface{}) error {
				return nil
			},
		},
		ShouldRetryFunc: &TaskShouldRetryFunc{
			defaultHook: func(context.Context, *logrus.Entry, interfaces.Ethereum) bool {
				return false
			},
		},
	}
}

// NewStrictMockTask creates a new mock of the Task interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockTask() *MockTask {
	return &MockTask{
		DoDoneFunc: &TaskDoDoneFunc{
			defaultHook: func(*logrus.Entry) {
				panic("unexpected invocation of MockTask.DoDone")
			},
		},
		DoRetryFunc: &TaskDoRetryFunc{
			defaultHook: func(context.Context, *logrus.Entry, interfaces.Ethereum) error {
				panic("unexpected invocation of MockTask.DoRetry")
			},
		},
		DoWorkFunc: &TaskDoWorkFunc{
			defaultHook: func(context.Context, *logrus.Entry, interfaces.Ethereum) error {
				panic("unexpected invocation of MockTask.DoWork")
			},
		},
		GetExecutionDataFunc: &TaskGetExecutionDataFunc{
			defaultHook: func() interface{} {
				panic("unexpected invocation of MockTask.GetExecutionData")
			},
		},
		InitializeFunc: &TaskInitializeFunc{
			defaultHook: func(context.Context, *logrus.Entry, interfaces.Ethereum, interface{}) error {
				panic("unexpected invocation of MockTask.Initialize")
			},
		},
		ShouldRetryFunc: &TaskShouldRetryFunc{
			defaultHook: func(context.Context, *logrus.Entry, interfaces.Ethereum) bool {
				panic("unexpected invocation of MockTask.ShouldRetry")
			},
		},
	}
}

// NewMockTaskFrom creates a new mock of the MockTask interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockTaskFrom(i interfaces.Task) *MockTask {
	return &MockTask{
		DoDoneFunc: &TaskDoDoneFunc{
			defaultHook: i.DoDone,
		},
		DoRetryFunc: &TaskDoRetryFunc{
			defaultHook: i.DoRetry,
		},
		DoWorkFunc: &TaskDoWorkFunc{
			defaultHook: i.DoWork,
		},
		GetExecutionDataFunc: &TaskGetExecutionDataFunc{
			defaultHook: i.GetExecutionData,
		},
		InitializeFunc: &TaskInitializeFunc{
			defaultHook: i.Initialize,
		},
		ShouldRetryFunc: &TaskShouldRetryFunc{
			defaultHook: i.ShouldRetry,
		},
	}
}

// TaskDoDoneFunc describes the behavior when the DoDone method of the
// parent MockTask instance is invoked.
type TaskDoDoneFunc struct {
	defaultHook func(*logrus.Entry)
	hooks       []func(*logrus.Entry)
	history     []TaskDoDoneFuncCall
	mutex       sync.Mutex
}

// DoDone delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) DoDone(v0 *logrus.Entry) {
	m.DoDoneFunc.nextHook()(v0)
	m.DoDoneFunc.appendCall(TaskDoDoneFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the DoDone method of the
// parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskDoDoneFunc) SetDefaultHook(hook func(*logrus.Entry)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DoDone method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskDoDoneFunc) PushHook(hook func(*logrus.Entry)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskDoDoneFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(*logrus.Entry) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskDoDoneFunc) PushReturn() {
	f.PushHook(func(*logrus.Entry) {
		return
	})
}

func (f *TaskDoDoneFunc) nextHook() func(*logrus.Entry) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskDoDoneFunc) appendCall(r0 TaskDoDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskDoDoneFuncCall objects describing the
// invocations of this function.
func (f *TaskDoDoneFunc) History() []TaskDoDoneFuncCall {
	f.mutex.Lock()
	history := make([]TaskDoDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskDoDoneFuncCall is an object that describes an invocation of method
// DoDone on an instance of MockTask.
type TaskDoDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *logrus.Entry
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskDoDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskDoDoneFuncCall) Results() []interface{} {
	return []interface{}{}
}

// TaskDoRetryFunc describes the behavior when the DoRetry method of the
// parent MockTask instance is invoked.
type TaskDoRetryFunc struct {
	defaultHook func(context.Context, *logrus.Entry, interfaces.Ethereum) error
	hooks       []func(context.Context, *logrus.Entry, interfaces.Ethereum) error
	history     []TaskDoRetryFuncCall
	mutex       sync.Mutex
}

// DoRetry delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) DoRetry(v0 context.Context, v1 *logrus.Entry, v2 interfaces.Ethereum) error {
	r0 := m.DoRetryFunc.nextHook()(v0, v1, v2)
	m.DoRetryFunc.appendCall(TaskDoRetryFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DoRetry method of
// the parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskDoRetryFunc) SetDefaultHook(hook func(context.Context, *logrus.Entry, interfaces.Ethereum) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DoRetry method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskDoRetryFunc) PushHook(hook func(context.Context, *logrus.Entry, interfaces.Ethereum) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskDoRetryFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *logrus.Entry, interfaces.Ethereum) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskDoRetryFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *logrus.Entry, interfaces.Ethereum) error {
		return r0
	})
}

func (f *TaskDoRetryFunc) nextHook() func(context.Context, *logrus.Entry, interfaces.Ethereum) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskDoRetryFunc) appendCall(r0 TaskDoRetryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskDoRetryFuncCall objects describing the
// invocations of this function.
func (f *TaskDoRetryFunc) History() []TaskDoRetryFuncCall {
	f.mutex.Lock()
	history := make([]TaskDoRetryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskDoRetryFuncCall is an object that describes an invocation of method
// DoRetry on an instance of MockTask.
type TaskDoRetryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *logrus.Entry
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 interfaces.Ethereum
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskDoRetryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskDoRetryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskDoWorkFunc describes the behavior when the DoWork method of the
// parent MockTask instance is invoked.
type TaskDoWorkFunc struct {
	defaultHook func(context.Context, *logrus.Entry, interfaces.Ethereum) error
	hooks       []func(context.Context, *logrus.Entry, interfaces.Ethereum) error
	history     []TaskDoWorkFuncCall
	mutex       sync.Mutex
}

// DoWork delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) DoWork(v0 context.Context, v1 *logrus.Entry, v2 interfaces.Ethereum) error {
	r0 := m.DoWorkFunc.nextHook()(v0, v1, v2)
	m.DoWorkFunc.appendCall(TaskDoWorkFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DoWork method of the
// parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskDoWorkFunc) SetDefaultHook(hook func(context.Context, *logrus.Entry, interfaces.Ethereum) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DoWork method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskDoWorkFunc) PushHook(hook func(context.Context, *logrus.Entry, interfaces.Ethereum) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskDoWorkFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *logrus.Entry, interfaces.Ethereum) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskDoWorkFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *logrus.Entry, interfaces.Ethereum) error {
		return r0
	})
}

func (f *TaskDoWorkFunc) nextHook() func(context.Context, *logrus.Entry, interfaces.Ethereum) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskDoWorkFunc) appendCall(r0 TaskDoWorkFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskDoWorkFuncCall objects describing the
// invocations of this function.
func (f *TaskDoWorkFunc) History() []TaskDoWorkFuncCall {
	f.mutex.Lock()
	history := make([]TaskDoWorkFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskDoWorkFuncCall is an object that describes an invocation of method
// DoWork on an instance of MockTask.
type TaskDoWorkFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *logrus.Entry
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 interfaces.Ethereum
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskDoWorkFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskDoWorkFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskGetExecutionDataFunc describes the behavior when the GetExecutionData
// method of the parent MockTask instance is invoked.
type TaskGetExecutionDataFunc struct {
	defaultHook func() interface{}
	hooks       []func() interface{}
	history     []TaskGetExecutionDataFuncCall
	mutex       sync.Mutex
}

// GetExecutionData delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockTask) GetExecutionData() interface{} {
	r0 := m.GetExecutionDataFunc.nextHook()()
	m.GetExecutionDataFunc.appendCall(TaskGetExecutionDataFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetExecutionData
// method of the parent MockTask instance is invoked and the hook queue is
// empty.
func (f *TaskGetExecutionDataFunc) SetDefaultHook(hook func() interface{}) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetExecutionData method of the parent MockTask instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TaskGetExecutionDataFunc) PushHook(hook func() interface{}) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskGetExecutionDataFunc) SetDefaultReturn(r0 interface{}) {
	f.SetDefaultHook(func() interface{} {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskGetExecutionDataFunc) PushReturn(r0 interface{}) {
	f.PushHook(func() interface{} {
		return r0
	})
}

func (f *TaskGetExecutionDataFunc) nextHook() func() interface{} {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskGetExecutionDataFunc) appendCall(r0 TaskGetExecutionDataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskGetExecutionDataFuncCall objects
// describing the invocations of this function.
func (f *TaskGetExecutionDataFunc) History() []TaskGetExecutionDataFuncCall {
	f.mutex.Lock()
	history := make([]TaskGetExecutionDataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskGetExecutionDataFuncCall is an object that describes an invocation of
// method GetExecutionData on an instance of MockTask.
type TaskGetExecutionDataFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskGetExecutionDataFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskGetExecutionDataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskInitializeFunc describes the behavior when the Initialize method of
// the parent MockTask instance is invoked.
type TaskInitializeFunc struct {
	defaultHook func(context.Context, *logrus.Entry, interfaces.Ethereum, interface{}) error
	hooks       []func(context.Context, *logrus.Entry, interfaces.Ethereum, interface{}) error
	history     []TaskInitializeFuncCall
	mutex       sync.Mutex
}

// Initialize delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTask) Initialize(v0 context.Context, v1 *logrus.Entry, v2 interfaces.Ethereum, v3 interface{}) error {
	r0 := m.InitializeFunc.nextHook()(v0, v1, v2, v3)
	m.InitializeFunc.appendCall(TaskInitializeFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Initialize method of
// the parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskInitializeFunc) SetDefaultHook(hook func(context.Context, *logrus.Entry, interfaces.Ethereum, interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Initialize method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskInitializeFunc) PushHook(hook func(context.Context, *logrus.Entry, interfaces.Ethereum, interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskInitializeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *logrus.Entry, interfaces.Ethereum, interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskInitializeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *logrus.Entry, interfaces.Ethereum, interface{}) error {
		return r0
	})
}

func (f *TaskInitializeFunc) nextHook() func(context.Context, *logrus.Entry, interfaces.Ethereum, interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskInitializeFunc) appendCall(r0 TaskInitializeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskInitializeFuncCall objects describing
// the invocations of this function.
func (f *TaskInitializeFunc) History() []TaskInitializeFuncCall {
	f.mutex.Lock()
	history := make([]TaskInitializeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskInitializeFuncCall is an object that describes an invocation of
// method Initialize on an instance of MockTask.
type TaskInitializeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *logrus.Entry
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 interfaces.Ethereum
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskInitializeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskInitializeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskShouldRetryFunc describes the behavior when the ShouldRetry method of
// the parent MockTask instance is invoked.
type TaskShouldRetryFunc struct {
	defaultHook func(context.Context, *logrus.Entry, interfaces.Ethereum) bool
	hooks       []func(context.Context, *logrus.Entry, interfaces.Ethereum) bool
	history     []TaskShouldRetryFuncCall
	mutex       sync.Mutex
}

// ShouldRetry delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTask) ShouldRetry(v0 context.Context, v1 *logrus.Entry, v2 interfaces.Ethereum) bool {
	r0 := m.ShouldRetryFunc.nextHook()(v0, v1, v2)
	m.ShouldRetryFunc.appendCall(TaskShouldRetryFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ShouldRetry method
// of the parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskShouldRetryFunc) SetDefaultHook(hook func(context.Context, *logrus.Entry, interfaces.Ethereum) bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ShouldRetry method of the parent MockTask instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TaskShouldRetryFunc) PushHook(hook func(context.Context, *logrus.Entry, interfaces.Ethereum) bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskShouldRetryFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func(context.Context, *logrus.Entry, interfaces.Ethereum) bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskShouldRetryFunc) PushReturn(r0 bool) {
	f.PushHook(func(context.Context, *logrus.Entry, interfaces.Ethereum) bool {
		return r0
	})
}

func (f *TaskShouldRetryFunc) nextHook() func(context.Context, *logrus.Entry, interfaces.Ethereum) bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskShouldRetryFunc) appendCall(r0 TaskShouldRetryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskShouldRetryFuncCall objects describing
// the invocations of this function.
func (f *TaskShouldRetryFunc) History() []TaskShouldRetryFuncCall {
	f.mutex.Lock()
	history := make([]TaskShouldRetryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskShouldRetryFuncCall is an object that describes an invocation of
// method ShouldRetry on an instance of MockTask.
type TaskShouldRetryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *logrus.Entry
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 interfaces.Ethereum
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskShouldRetryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskShouldRetryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockTxnQueue is a mock implementation of the TxnQueue interface (from the
// package github.com/alicenet/alicenet/blockchain/interfaces) used for unit
// testing.
type MockTxnQueue struct {
	// CloseFunc is an instance of a mock function object controlling the
	// behavior of the method Close.
	CloseFunc *TxnQueueCloseFunc
	// QueueAndWaitFunc is an instance of a mock function object controlling
	// the behavior of the method QueueAndWait.
	QueueAndWaitFunc *TxnQueueQueueAndWaitFunc
	// QueueGroupTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method QueueGroupTransaction.
	QueueGroupTransactionFunc *TxnQueueQueueGroupTransactionFunc
	// QueueTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method QueueTransaction.
	QueueTransactionFunc *TxnQueueQueueTransactionFunc
	// StartLoopFunc is an instance of a mock function object controlling
	// the behavior of the method StartLoop.
	StartLoopFunc *TxnQueueStartLoopFunc
	// StatusFunc is an instance of a mock function object controlling the
	// behavior of the method Status.
	StatusFunc *TxnQueueStatusFunc
	// WaitGroupTransactionsFunc is an instance of a mock function object
	// controlling the behavior of the method WaitGroupTransactions.
	WaitGroupTransactionsFunc *TxnQueueWaitGroupTransactionsFunc
	// WaitTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method WaitTransaction.
	WaitTransactionFunc *TxnQueueWaitTransactionFunc
}

// NewMockTxnQueue creates a new mock of the TxnQueue interface. All methods
// return zero values for all results, unless overwritten.
func NewMockTxnQueue() *MockTxnQueue {
	return &MockTxnQueue{
		CloseFunc: &TxnQueueCloseFunc{
			defaultHook: func() {
				return
			},
		},
		QueueAndWaitFunc: &TxnQueueQueueAndWaitFunc{
			defaultHook: func(context.Context, *types.Transaction) (*types.Receipt, error) {
				return nil, nil
			},
		},
		QueueGroupTransactionFunc: &TxnQueueQueueGroupTransactionFunc{
			defaultHook: func(context.Context, int, *types.Transaction) {
				return
			},
		},
		QueueTransactionFunc: &TxnQueueQueueTransactionFunc{
			defaultHook: func(context.Context, *types.Transaction) {
				return
			},
		},
		StartLoopFunc: &TxnQueueStartLoopFunc{
			defaultHook: func() {
				return
			},
		},
		StatusFunc: &TxnQueueStatusFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
		WaitGroupTransactionsFunc: &TxnQueueWaitGroupTransactionsFunc{
			defaultHook: func(context.Context, int) ([]*types.Receipt, error) {
				return nil, nil
			},
		},
		WaitTransactionFunc: &TxnQueueWaitTransactionFunc{
			defaultHook: func(context.Context, *types.Transaction) (*types.Receipt, error) {
				return nil, nil
			},
		},
	}
}

// NewStrictMockTxnQueue creates a new mock of the TxnQueue interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockTxnQueue() *MockTxnQueue {
	return &MockTxnQueue{
		CloseFunc: &TxnQueueCloseFunc{
			defaultHook: func() {
				panic("unexpected invocation of MockTxnQueue.Close")
			},
		},
		QueueAndWaitFunc: &TxnQueueQueueAndWaitFunc{
			defaultHook: func(context.Context, *types.Transaction) (*types.Receipt, error) {
				panic("unexpected invocation of MockTxnQueue.QueueAndWait")
			},
		},
		QueueGroupTransactionFunc: &TxnQueueQueueGroupTransactionFunc{
			defaultHook: func(context.Context, int, *types.Transaction) {
				panic("unexpected invocation of MockTxnQueue.QueueGroupTransaction")
			},
		},
		QueueTransactionFunc: &TxnQueueQueueTransactionFunc{
			defaultHook: func(context.Context, *types.Transaction) {
				panic("unexpected invocation of MockTxnQueue.QueueTransaction")
			},
		},
		StartLoopFunc: &TxnQueueStartLoopFunc{
			defaultHook: func() {
				panic("unexpected invocation of MockTxnQueue.StartLoop")
			},
		},
		StatusFunc: &TxnQueueStatusFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockTxnQueue.Status")
			},
		},
		WaitGroupTransactionsFunc: &TxnQueueWaitGroupTransactionsFunc{
			defaultHook: func(context.Context, int) ([]*types.Receipt, error) {
				panic("unexpected invocation of MockTxnQueue.WaitGroupTransactions")
			},
		},
		WaitTransactionFunc: &TxnQueueWaitTransactionFunc{
			defaultHook: func(context.Context, *types.Transaction) (*types.Receipt, error) {
				panic("unexpected invocation of MockTxnQueue.WaitTransaction")
			},
		},
	}
}

// NewMockTxnQueueFrom creates a new mock of the MockTxnQueue interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockTxnQueueFrom(i interfaces.TxnQueue) *MockTxnQueue {
	return &MockTxnQueue{
		CloseFunc: &TxnQueueCloseFunc{
			defaultHook: i.Close,
		},
		QueueAndWaitFunc: &TxnQueueQueueAndWaitFunc{
			defaultHook: i.QueueAndWait,
		},
		QueueGroupTransactionFunc: &TxnQueueQueueGroupTransactionFunc{
			defaultHook: i.QueueGroupTransaction,
		},
		QueueTransactionFunc: &TxnQueueQueueTransactionFunc{
			defaultHook: i.QueueTransaction,
		},
		StartLoopFunc: &TxnQueueStartLoopFunc{
			defaultHook: i.StartLoop,
		},
		StatusFunc: &TxnQueueStatusFunc{
			defaultHook: i.Status,
		},
		WaitGroupTransactionsFunc: &TxnQueueWaitGroupTransactionsFunc{
			defaultHook: i.WaitGroupTransactions,
		},
		WaitTransactionFunc: &TxnQueueWaitTransactionFunc{
			defaultHook: i.WaitTransaction,
		},
	}
}

// TxnQueueCloseFunc describes the behavior when the Close method of the
// parent MockTxnQueue instance is invoked.
type TxnQueueCloseFunc struct {
	defaultHook func()
	hooks       []func()
	history     []TxnQueueCloseFuncCall
	mutex       sync.Mutex
}

// Close delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTxnQueue) Close() {
	m.CloseFunc.nextHook()()
	m.CloseFunc.appendCall(TxnQueueCloseFuncCall{})
	return
}

// SetDefaultHook sets function that is called when the Close method of the
// parent MockTxnQueue instance is invoked and the hook queue is empty.
func (f *TxnQueueCloseFunc) SetDefaultHook(hook func()) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Close method of the parent MockTxnQueue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TxnQueueCloseFunc) PushHook(hook func()) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TxnQueueCloseFunc) SetDefaultReturn() {
	f.SetDefaultHook(func() {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TxnQueueCloseFunc) PushReturn() {
	f.PushHook(func() {
		return
	})
}

func (f *TxnQueueCloseFunc) nextHook() func() {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TxnQueueCloseFunc) appendCall(r0 TxnQueueCloseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TxnQueueCloseFuncCall objects describing
// the invocations of this function.
func (f *TxnQueueCloseFunc) History() []TxnQueueCloseFuncCall {
	f.mutex.Lock()
	history := make([]TxnQueueCloseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TxnQueueCloseFuncCall is an object that describes an invocation of method
// Close on an instance of MockTxnQueue.
type TxnQueueCloseFuncCall struct{}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TxnQueueCloseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TxnQueueCloseFuncCall) Results() []interface{} {
	return []interface{}{}
}

// TxnQueueQueueAndWaitFunc describes the behavior when the QueueAndWait
// method of the parent MockTxnQueue instance is invoked.
type TxnQueueQueueAndWaitFunc struct {
	defaultHook func(context.Context, *types.Transaction) (*types.Receipt, error)
	hooks       []func(context.Context, *types.Transaction) (*types.Receipt, error)
	history     []TxnQueueQueueAndWaitFuncCall
	mutex       sync.Mutex
}

// QueueAndWait delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTxnQueue) QueueAndWait(v0 context.Context, v1 *types.Transaction) (*types.Receipt, error) {
	r0, r1 := m.QueueAndWaitFunc.nextHook()(v0, v1)
	m.QueueAndWaitFunc.appendCall(TxnQueueQueueAndWaitFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueueAndWait method
// of the parent MockTxnQueue instance is invoked and the hook queue is
// empty.
func (f *TxnQueueQueueAndWaitFunc) SetDefaultHook(hook func(context.Context, *types.Transaction) (*types.Receipt, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueueAndWait method of the parent MockTxnQueue instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TxnQueueQueueAndWaitFunc) PushHook(hook func(context.Context, *types.Transaction) (*types.Receipt, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TxnQueueQueueAndWaitFunc) SetDefaultReturn(r0 *types.Receipt, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Transaction) (*types.Receipt, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TxnQueueQueueAndWaitFunc) PushReturn(r0 *types.Receipt, r1 error) {
	f.PushHook(func(context.Context, *types.Transaction) (*types.Receipt, error) {
		return r0, r1
	})
}

func (f *TxnQueueQueueAndWaitFunc) nextHook() func(context.Context, *types.Transaction) (*types.Receipt, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TxnQueueQueueAndWaitFunc) appendCall(r0 TxnQueueQueueAndWaitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TxnQueueQueueAndWaitFuncCall objects
// describing the invocations of this function.
func (f *TxnQueueQueueAndWaitFunc) History() []TxnQueueQueueAndWaitFuncCall {
	f.mutex.Lock()
	history := make([]TxnQueueQueueAndWaitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TxnQueueQueueAndWaitFuncCall is an object that describes an invocation of
// method QueueAndWait on an instance of MockTxnQueue.
type TxnQueueQueueAndWaitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Transaction
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Receipt
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TxnQueueQueueAndWaitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TxnQueueQueueAndWaitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TxnQueueQueueGroupTransactionFunc describes the behavior when the
// QueueGroupTransaction method of the parent MockTxnQueue instance is
// invoked.
type TxnQueueQueueGroupTransactionFunc struct {
	defaultHook func(context.Context, int, *types.Transaction)
	hooks       []func(context.Context, int, *types.Transaction)
	history     []TxnQueueQueueGroupTransactionFuncCall
	mutex       sync.Mutex
}

// QueueGroupTransaction delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockTxnQueue) QueueGroupTransaction(v0 context.Context, v1 int, v2 *types.Transaction) {
	m.QueueGroupTransactionFunc.nextHook()(v0, v1, v2)
	m.QueueGroupTransactionFunc.appendCall(TxnQueueQueueGroupTransactionFuncCall{v0, v1, v2})
	return
}

// SetDefaultHook sets function that is called when the
// QueueGroupTransaction method of the parent MockTxnQueue instance is
// invoked and the hook queue is empty.
func (f *TxnQueueQueueGroupTransactionFunc) SetDefaultHook(hook func(context.Context, int, *types.Transaction)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueueGroupTransaction method of the parent MockTxnQueue instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *TxnQueueQueueGroupTransactionFunc) PushHook(hook func(context.Context, int, *types.Transaction)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TxnQueueQueueGroupTransactionFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(context.Context, int, *types.Transaction) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TxnQueueQueueGroupTransactionFunc) PushReturn() {
	f.PushHook(func(context.Context, int, *types.Transaction) {
		return
	})
}

func (f *TxnQueueQueueGroupTransactionFunc) nextHook() func(context.Context, int, *types.Transaction) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TxnQueueQueueGroupTransactionFunc) appendCall(r0 TxnQueueQueueGroupTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TxnQueueQueueGroupTransactionFuncCall
// objects describing the invocations of this function.
func (f *TxnQueueQueueGroupTransactionFunc) History() []TxnQueueQueueGroupTransactionFuncCall {
	f.mutex.Lock()
	history := make([]TxnQueueQueueGroupTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TxnQueueQueueGroupTransactionFuncCall is an object that describes an
// invocation of method QueueGroupTransaction on an instance of
// MockTxnQueue.
type TxnQueueQueueGroupTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *types.Transaction
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TxnQueueQueueGroupTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TxnQueueQueueGroupTransactionFuncCall) Results() []interface{} {
	return []interface{}{}
}

// TxnQueueQueueTransactionFunc describes the behavior when the
// QueueTransaction method of the parent MockTxnQueue instance is invoked.
type TxnQueueQueueTransactionFunc struct {
	defaultHook func(context.Context, *types.Transaction)
	hooks       []func(context.Context, *types.Transaction)
	history     []TxnQueueQueueTransactionFuncCall
	mutex       sync.Mutex
}

// QueueTransaction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockTxnQueue) QueueTransaction(v0 context.Context, v1 *types.Transaction) {
	m.QueueTransactionFunc.nextHook()(v0, v1)
	m.QueueTransactionFunc.appendCall(TxnQueueQueueTransactionFuncCall{v0, v1})
	return
}

// SetDefaultHook sets function that is called when the QueueTransaction
// method of the parent MockTxnQueue instance is invoked and the hook queue
// is empty.
func (f *TxnQueueQueueTransactionFunc) SetDefaultHook(hook func(context.Context, *types.Transaction)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueueTransaction method of the parent MockTxnQueue instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TxnQueueQueueTransactionFunc) PushHook(hook func(context.Context, *types.Transaction)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TxnQueueQueueTransactionFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(context.Context, *types.Transaction) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TxnQueueQueueTransactionFunc) PushReturn() {
	f.PushHook(func(context.Context, *types.Transaction) {
		return
	})
}

func (f *TxnQueueQueueTransactionFunc) nextHook() func(context.Context, *types.Transaction) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TxnQueueQueueTransactionFunc) appendCall(r0 TxnQueueQueueTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TxnQueueQueueTransactionFuncCall objects
// describing the invocations of this function.
func (f *TxnQueueQueueTransactionFunc) History() []TxnQueueQueueTransactionFuncCall {
	f.mutex.Lock()
	history := make([]TxnQueueQueueTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TxnQueueQueueTransactionFuncCall is an object that describes an
// invocation of method QueueTransaction on an instance of MockTxnQueue.
type TxnQueueQueueTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Transaction
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TxnQueueQueueTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TxnQueueQueueTransactionFuncCall) Results() []interface{} {
	return []interface{}{}
}

// TxnQueueStartLoopFunc describes the behavior when the StartLoop method of
// the parent MockTxnQueue instance is invoked.
type TxnQueueStartLoopFunc struct {
	defaultHook func()
	hooks       []func()
	history     []TxnQueueStartLoopFuncCall
	mutex       sync.Mutex
}

// StartLoop delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTxnQueue) StartLoop() {
	m.StartLoopFunc.nextHook()()
	m.StartLoopFunc.appendCall(TxnQueueStartLoopFuncCall{})
	return
}

// SetDefaultHook sets function that is called when the StartLoop method of
// the parent MockTxnQueue instance is invoked and the hook queue is empty.
func (f *TxnQueueStartLoopFunc) SetDefaultHook(hook func()) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StartLoop method of the parent MockTxnQueue instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TxnQueueStartLoopFunc) PushHook(hook func()) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TxnQueueStartLoopFunc) SetDefaultReturn() {
	f.SetDefaultHook(func() {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TxnQueueStartLoopFunc) PushReturn() {
	f.PushHook(func() {
		return
	})
}

func (f *TxnQueueStartLoopFunc) nextHook() func() {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TxnQueueStartLoopFunc) appendCall(r0 TxnQueueStartLoopFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TxnQueueStartLoopFuncCall objects
// describing the invocations of this function.
func (f *TxnQueueStartLoopFunc) History() []TxnQueueStartLoopFuncCall {
	f.mutex.Lock()
	history := make([]TxnQueueStartLoopFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TxnQueueStartLoopFuncCall is an object that describes an invocation of
// method StartLoop on an instance of MockTxnQueue.
type TxnQueueStartLoopFuncCall struct{}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TxnQueueStartLoopFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TxnQueueStartLoopFuncCall) Results() []interface{} {
	return []interface{}{}
}

// TxnQueueStatusFunc describes the behavior when the Status method of the
// parent MockTxnQueue instance is invoked.
type TxnQueueStatusFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []TxnQueueStatusFuncCall
	mutex       sync.Mutex
}

// Status delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTxnQueue) Status(v0 context.Context) error {
	r0 := m.StatusFunc.nextHook()(v0)
	m.StatusFunc.appendCall(TxnQueueStatusFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Status method of the
// parent MockTxnQueue instance is invoked and the hook queue is empty.
func (f *TxnQueueStatusFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Status method of the parent MockTxnQueue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TxnQueueStatusFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TxnQueueStatusFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TxnQueueStatusFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *TxnQueueStatusFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TxnQueueStatusFunc) appendCall(r0 TxnQueueStatusFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TxnQueueStatusFuncCall objects describing
// the invocations of this function.
func (f *TxnQueueStatusFunc) History() []TxnQueueStatusFuncCall {
	f.mutex.Lock()
	history := make([]TxnQueueStatusFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TxnQueueStatusFuncCall is an object that describes an invocation of
// method Status on an instance of MockTxnQueue.
type TxnQueueStatusFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TxnQueueStatusFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TxnQueueStatusFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TxnQueueWaitGroupTransactionsFunc describes the behavior when the
// WaitGroupTransactions method of the parent MockTxnQueue instance is
// invoked.
type TxnQueueWaitGroupTransactionsFunc struct {
	defaultHook func(context.Context, int) ([]*types.Receipt, error)
	hooks       []func(context.Context, int) ([]*types.Receipt, error)
	history     []TxnQueueWaitGroupTransactionsFuncCall
	mutex       sync.Mutex
}

// WaitGroupTransactions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockTxnQueue) WaitGroupTransactions(v0 context.Context, v1 int) ([]*types.Receipt, error) {
	r0, r1 := m.WaitGroupTransactionsFunc.nextHook()(v0, v1)
	m.WaitGroupTransactionsFunc.appendCall(TxnQueueWaitGroupTransactionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WaitGroupTransactions method of the parent MockTxnQueue instance is
// invoked and the hook queue is empty.
func (f *TxnQueueWaitGroupTransactionsFunc) SetDefaultHook(hook func(context.Context, int) ([]*types.Receipt, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WaitGroupTransactions method of the parent MockTxnQueue instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *TxnQueueWaitGroupTransactionsFunc) PushHook(hook func(context.Context, int) ([]*types.Receipt, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TxnQueueWaitGroupTransactionsFunc) SetDefaultReturn(r0 []*types.Receipt, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]*types.Receipt, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TxnQueueWaitGroupTransactionsFunc) PushReturn(r0 []*types.Receipt, r1 error) {
	f.PushHook(func(context.Context, int) ([]*types.Receipt, error) {
		return r0, r1
	})
}

func (f *TxnQueueWaitGroupTransactionsFunc) nextHook() func(context.Context, int) ([]*types.Receipt, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TxnQueueWaitGroupTransactionsFunc) appendCall(r0 TxnQueueWaitGroupTransactionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TxnQueueWaitGroupTransactionsFuncCall
// objects describing the invocations of this function.
func (f *TxnQueueWaitGroupTransactionsFunc) History() []TxnQueueWaitGroupTransactionsFuncCall {
	f.mutex.Lock()
	history := make([]TxnQueueWaitGroupTransactionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TxnQueueWaitGroupTransactionsFuncCall is an object that describes an
// invocation of method WaitGroupTransactions on an instance of
// MockTxnQueue.
type TxnQueueWaitGroupTransactionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Receipt
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TxnQueueWaitGroupTransactionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TxnQueueWaitGroupTransactionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TxnQueueWaitTransactionFunc describes the behavior when the
// WaitTransaction method of the parent MockTxnQueue instance is invoked.
type TxnQueueWaitTransactionFunc struct {
	defaultHook func(context.Context, *types.Transaction) (*types.Receipt, error)
	hooks       []func(context.Context, *types.Transaction) (*types.Receipt, error)
	history     []TxnQueueWaitTransactionFuncCall
	mutex       sync.Mutex
}

// WaitTransaction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockTxnQueue) WaitTransaction(v0 context.Context, v1 *types.Transaction) (*types.Receipt, error) {
	r0, r1 := m.WaitTransactionFunc.nextHook()(v0, v1)
	m.WaitTransactionFunc.appendCall(TxnQueueWaitTransactionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WaitTransaction
// method of the parent MockTxnQueue instance is invoked and the hook queue
// is empty.
func (f *TxnQueueWaitTransactionFunc) SetDefaultHook(hook func(context.Context, *types.Transaction) (*types.Receipt, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WaitTransaction method of the parent MockTxnQueue instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TxnQueueWaitTransactionFunc) PushHook(hook func(context.Context, *types.Transaction) (*types.Receipt, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TxnQueueWaitTransactionFunc) SetDefaultReturn(r0 *types.Receipt, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Transaction) (*types.Receipt, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TxnQueueWaitTransactionFunc) PushReturn(r0 *types.Receipt, r1 error) {
	f.PushHook(func(context.Context, *types.Transaction) (*types.Receipt, error) {
		return r0, r1
	})
}

func (f *TxnQueueWaitTransactionFunc) nextHook() func(context.Context, *types.Transaction) (*types.Receipt, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TxnQueueWaitTransactionFunc) appendCall(r0 TxnQueueWaitTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TxnQueueWaitTransactionFuncCall objects
// describing the invocations of this function.
func (f *TxnQueueWaitTransactionFunc) History() []TxnQueueWaitTransactionFuncCall {
	f.mutex.Lock()
	history := make([]TxnQueueWaitTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TxnQueueWaitTransactionFuncCall is an object that describes an invocation
// of method WaitTransaction on an instance of MockTxnQueue.
type TxnQueueWaitTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Transaction
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Receipt
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TxnQueueWaitTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TxnQueueWaitTransactionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
