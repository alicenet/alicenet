// Code generated by go-mockgen 1.3.7; DO NOT EDIT.

package mocks

import (
	"math/big"
	"sync"

	bindings "github.com/alicenet/alicenet/bridge/bindings"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	event "github.com/ethereum/go-ethereum/event"
)

// MockIALCA is a mock implementation of the IALCA interface (from the
// package github.com/alicenet/alicenet/bridge/bindings) used for unit
// testing.
type MockIALCA struct {
	// AllowanceFunc is an instance of a mock function object controlling
	// the behavior of the method Allowance.
	AllowanceFunc *IALCAAllowanceFunc
	// ApproveFunc is an instance of a mock function object controlling the
	// behavior of the method Approve.
	ApproveFunc *IALCAApproveFunc
	// BalanceOfFunc is an instance of a mock function object controlling
	// the behavior of the method BalanceOf.
	BalanceOfFunc *IALCABalanceOfFunc
	// ConvertFunc is an instance of a mock function object controlling the
	// behavior of the method Convert.
	ConvertFunc *IALCAConvertFunc
	// DecimalsFunc is an instance of a mock function object controlling the
	// behavior of the method Decimals.
	DecimalsFunc *IALCADecimalsFunc
	// DecreaseAllowanceFunc is an instance of a mock function object
	// controlling the behavior of the method DecreaseAllowance.
	DecreaseAllowanceFunc *IALCADecreaseAllowanceFunc
	// ExternalBurnFunc is an instance of a mock function object controlling
	// the behavior of the method ExternalBurn.
	ExternalBurnFunc *IALCAExternalBurnFunc
	// ExternalMintFunc is an instance of a mock function object controlling
	// the behavior of the method ExternalMint.
	ExternalMintFunc *IALCAExternalMintFunc
	// FilterApprovalFunc is an instance of a mock function object
	// controlling the behavior of the method FilterApproval.
	FilterApprovalFunc *IALCAFilterApprovalFunc
	// FilterTransferFunc is an instance of a mock function object
	// controlling the behavior of the method FilterTransfer.
	FilterTransferFunc *IALCAFilterTransferFunc
	// FinishEarlyStageFunc is an instance of a mock function object
	// controlling the behavior of the method FinishEarlyStage.
	FinishEarlyStageFunc *IALCAFinishEarlyStageFunc
	// GetLegacyTokenAddressFunc is an instance of a mock function object
	// controlling the behavior of the method GetLegacyTokenAddress.
	GetLegacyTokenAddressFunc *IALCAGetLegacyTokenAddressFunc
	// GetMetamorphicContractAddressFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetMetamorphicContractAddress.
	GetMetamorphicContractAddressFunc *IALCAGetMetamorphicContractAddressFunc
	// IncreaseAllowanceFunc is an instance of a mock function object
	// controlling the behavior of the method IncreaseAllowance.
	IncreaseAllowanceFunc *IALCAIncreaseAllowanceFunc
	// MigrateFunc is an instance of a mock function object controlling the
	// behavior of the method Migrate.
	MigrateFunc *IALCAMigrateFunc
	// MigrateToFunc is an instance of a mock function object controlling
	// the behavior of the method MigrateTo.
	MigrateToFunc *IALCAMigrateToFunc
	// NameFunc is an instance of a mock function object controlling the
	// behavior of the method Name.
	NameFunc *IALCANameFunc
	// ParseApprovalFunc is an instance of a mock function object
	// controlling the behavior of the method ParseApproval.
	ParseApprovalFunc *IALCAParseApprovalFunc
	// ParseTransferFunc is an instance of a mock function object
	// controlling the behavior of the method ParseTransfer.
	ParseTransferFunc *IALCAParseTransferFunc
	// SymbolFunc is an instance of a mock function object controlling the
	// behavior of the method Symbol.
	SymbolFunc *IALCASymbolFunc
	// TotalSupplyFunc is an instance of a mock function object controlling
	// the behavior of the method TotalSupply.
	TotalSupplyFunc *IALCATotalSupplyFunc
	// TransferFunc is an instance of a mock function object controlling the
	// behavior of the method Transfer.
	TransferFunc *IALCATransferFunc
	// TransferFromFunc is an instance of a mock function object controlling
	// the behavior of the method TransferFrom.
	TransferFromFunc *IALCATransferFromFunc
	// WatchApprovalFunc is an instance of a mock function object
	// controlling the behavior of the method WatchApproval.
	WatchApprovalFunc *IALCAWatchApprovalFunc
	// WatchTransferFunc is an instance of a mock function object
	// controlling the behavior of the method WatchTransfer.
	WatchTransferFunc *IALCAWatchTransferFunc
}

// NewMockIALCA creates a new mock of the IALCA interface. All methods
// return zero values for all results, unless overwritten.
func NewMockIALCA() *MockIALCA {
	return &MockIALCA{
		AllowanceFunc: &IALCAAllowanceFunc{
			defaultHook: func(*bind.CallOpts, common.Address, common.Address) (r0 *big.Int, r1 error) {
				return
			},
		},
		ApproveFunc: &IALCAApproveFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		BalanceOfFunc: &IALCABalanceOfFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (r0 *big.Int, r1 error) {
				return
			},
		},
		ConvertFunc: &IALCAConvertFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		DecimalsFunc: &IALCADecimalsFunc{
			defaultHook: func(*bind.CallOpts) (r0 uint8, r1 error) {
				return
			},
		},
		DecreaseAllowanceFunc: &IALCADecreaseAllowanceFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		ExternalBurnFunc: &IALCAExternalBurnFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		ExternalMintFunc: &IALCAExternalMintFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		FilterApprovalFunc: &IALCAFilterApprovalFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address) (r0 *bindings.ALCAApprovalIterator, r1 error) {
				return
			},
		},
		FilterTransferFunc: &IALCAFilterTransferFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address) (r0 *bindings.ALCATransferIterator, r1 error) {
				return
			},
		},
		FinishEarlyStageFunc: &IALCAFinishEarlyStageFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		GetLegacyTokenAddressFunc: &IALCAGetLegacyTokenAddressFunc{
			defaultHook: func(*bind.CallOpts) (r0 common.Address, r1 error) {
				return
			},
		},
		GetMetamorphicContractAddressFunc: &IALCAGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (r0 common.Address, r1 error) {
				return
			},
		},
		IncreaseAllowanceFunc: &IALCAIncreaseAllowanceFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		MigrateFunc: &IALCAMigrateFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		MigrateToFunc: &IALCAMigrateToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		NameFunc: &IALCANameFunc{
			defaultHook: func(*bind.CallOpts) (r0 string, r1 error) {
				return
			},
		},
		ParseApprovalFunc: &IALCAParseApprovalFunc{
			defaultHook: func(types.Log) (r0 *bindings.ALCAApproval, r1 error) {
				return
			},
		},
		ParseTransferFunc: &IALCAParseTransferFunc{
			defaultHook: func(types.Log) (r0 *bindings.ALCATransfer, r1 error) {
				return
			},
		},
		SymbolFunc: &IALCASymbolFunc{
			defaultHook: func(*bind.CallOpts) (r0 string, r1 error) {
				return
			},
		},
		TotalSupplyFunc: &IALCATotalSupplyFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		TransferFunc: &IALCATransferFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		TransferFromFunc: &IALCATransferFromFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		WatchApprovalFunc: &IALCAWatchApprovalFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ALCAApproval, []common.Address, []common.Address) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchTransferFunc: &IALCAWatchTransferFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ALCATransfer, []common.Address, []common.Address) (r0 event.Subscription, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockIALCA creates a new mock of the IALCA interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockIALCA() *MockIALCA {
	return &MockIALCA{
		AllowanceFunc: &IALCAAllowanceFunc{
			defaultHook: func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error) {
				panic("unexpected invocation of MockIALCA.Allowance")
			},
		},
		ApproveFunc: &IALCAApproveFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCA.Approve")
			},
		},
		BalanceOfFunc: &IALCABalanceOfFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (*big.Int, error) {
				panic("unexpected invocation of MockIALCA.BalanceOf")
			},
		},
		ConvertFunc: &IALCAConvertFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIALCA.Convert")
			},
		},
		DecimalsFunc: &IALCADecimalsFunc{
			defaultHook: func(*bind.CallOpts) (uint8, error) {
				panic("unexpected invocation of MockIALCA.Decimals")
			},
		},
		DecreaseAllowanceFunc: &IALCADecreaseAllowanceFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCA.DecreaseAllowance")
			},
		},
		ExternalBurnFunc: &IALCAExternalBurnFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCA.ExternalBurn")
			},
		},
		ExternalMintFunc: &IALCAExternalMintFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCA.ExternalMint")
			},
		},
		FilterApprovalFunc: &IALCAFilterApprovalFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCAApprovalIterator, error) {
				panic("unexpected invocation of MockIALCA.FilterApproval")
			},
		},
		FilterTransferFunc: &IALCAFilterTransferFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCATransferIterator, error) {
				panic("unexpected invocation of MockIALCA.FilterTransfer")
			},
		},
		FinishEarlyStageFunc: &IALCAFinishEarlyStageFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCA.FinishEarlyStage")
			},
		},
		GetLegacyTokenAddressFunc: &IALCAGetLegacyTokenAddressFunc{
			defaultHook: func(*bind.CallOpts) (common.Address, error) {
				panic("unexpected invocation of MockIALCA.GetLegacyTokenAddress")
			},
		},
		GetMetamorphicContractAddressFunc: &IALCAGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
				panic("unexpected invocation of MockIALCA.GetMetamorphicContractAddress")
			},
		},
		IncreaseAllowanceFunc: &IALCAIncreaseAllowanceFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCA.IncreaseAllowance")
			},
		},
		MigrateFunc: &IALCAMigrateFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCA.Migrate")
			},
		},
		MigrateToFunc: &IALCAMigrateToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCA.MigrateTo")
			},
		},
		NameFunc: &IALCANameFunc{
			defaultHook: func(*bind.CallOpts) (string, error) {
				panic("unexpected invocation of MockIALCA.Name")
			},
		},
		ParseApprovalFunc: &IALCAParseApprovalFunc{
			defaultHook: func(types.Log) (*bindings.ALCAApproval, error) {
				panic("unexpected invocation of MockIALCA.ParseApproval")
			},
		},
		ParseTransferFunc: &IALCAParseTransferFunc{
			defaultHook: func(types.Log) (*bindings.ALCATransfer, error) {
				panic("unexpected invocation of MockIALCA.ParseTransfer")
			},
		},
		SymbolFunc: &IALCASymbolFunc{
			defaultHook: func(*bind.CallOpts) (string, error) {
				panic("unexpected invocation of MockIALCA.Symbol")
			},
		},
		TotalSupplyFunc: &IALCATotalSupplyFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIALCA.TotalSupply")
			},
		},
		TransferFunc: &IALCATransferFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCA.Transfer")
			},
		},
		TransferFromFunc: &IALCATransferFromFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCA.TransferFrom")
			},
		},
		WatchApprovalFunc: &IALCAWatchApprovalFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ALCAApproval, []common.Address, []common.Address) (event.Subscription, error) {
				panic("unexpected invocation of MockIALCA.WatchApproval")
			},
		},
		WatchTransferFunc: &IALCAWatchTransferFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ALCATransfer, []common.Address, []common.Address) (event.Subscription, error) {
				panic("unexpected invocation of MockIALCA.WatchTransfer")
			},
		},
	}
}

// NewMockIALCAFrom creates a new mock of the MockIALCA interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockIALCAFrom(i bindings.IALCA) *MockIALCA {
	return &MockIALCA{
		AllowanceFunc: &IALCAAllowanceFunc{
			defaultHook: i.Allowance,
		},
		ApproveFunc: &IALCAApproveFunc{
			defaultHook: i.Approve,
		},
		BalanceOfFunc: &IALCABalanceOfFunc{
			defaultHook: i.BalanceOf,
		},
		ConvertFunc: &IALCAConvertFunc{
			defaultHook: i.Convert,
		},
		DecimalsFunc: &IALCADecimalsFunc{
			defaultHook: i.Decimals,
		},
		DecreaseAllowanceFunc: &IALCADecreaseAllowanceFunc{
			defaultHook: i.DecreaseAllowance,
		},
		ExternalBurnFunc: &IALCAExternalBurnFunc{
			defaultHook: i.ExternalBurn,
		},
		ExternalMintFunc: &IALCAExternalMintFunc{
			defaultHook: i.ExternalMint,
		},
		FilterApprovalFunc: &IALCAFilterApprovalFunc{
			defaultHook: i.FilterApproval,
		},
		FilterTransferFunc: &IALCAFilterTransferFunc{
			defaultHook: i.FilterTransfer,
		},
		FinishEarlyStageFunc: &IALCAFinishEarlyStageFunc{
			defaultHook: i.FinishEarlyStage,
		},
		GetLegacyTokenAddressFunc: &IALCAGetLegacyTokenAddressFunc{
			defaultHook: i.GetLegacyTokenAddress,
		},
		GetMetamorphicContractAddressFunc: &IALCAGetMetamorphicContractAddressFunc{
			defaultHook: i.GetMetamorphicContractAddress,
		},
		IncreaseAllowanceFunc: &IALCAIncreaseAllowanceFunc{
			defaultHook: i.IncreaseAllowance,
		},
		MigrateFunc: &IALCAMigrateFunc{
			defaultHook: i.Migrate,
		},
		MigrateToFunc: &IALCAMigrateToFunc{
			defaultHook: i.MigrateTo,
		},
		NameFunc: &IALCANameFunc{
			defaultHook: i.Name,
		},
		ParseApprovalFunc: &IALCAParseApprovalFunc{
			defaultHook: i.ParseApproval,
		},
		ParseTransferFunc: &IALCAParseTransferFunc{
			defaultHook: i.ParseTransfer,
		},
		SymbolFunc: &IALCASymbolFunc{
			defaultHook: i.Symbol,
		},
		TotalSupplyFunc: &IALCATotalSupplyFunc{
			defaultHook: i.TotalSupply,
		},
		TransferFunc: &IALCATransferFunc{
			defaultHook: i.Transfer,
		},
		TransferFromFunc: &IALCATransferFromFunc{
			defaultHook: i.TransferFrom,
		},
		WatchApprovalFunc: &IALCAWatchApprovalFunc{
			defaultHook: i.WatchApproval,
		},
		WatchTransferFunc: &IALCAWatchTransferFunc{
			defaultHook: i.WatchTransfer,
		},
	}
}

// IALCAAllowanceFunc describes the behavior when the Allowance method of
// the parent MockIALCA instance is invoked.
type IALCAAllowanceFunc struct {
	defaultHook func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error)
	hooks       []func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error)
	history     []IALCAAllowanceFuncCall
	mutex       sync.Mutex
}

// Allowance delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCA) Allowance(v0 *bind.CallOpts, v1 common.Address, v2 common.Address) (*big.Int, error) {
	r0, r1 := m.AllowanceFunc.nextHook()(v0, v1, v2)
	m.AllowanceFunc.appendCall(IALCAAllowanceFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Allowance method of
// the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCAAllowanceFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Allowance method of the parent MockIALCA instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCAAllowanceFunc) PushHook(hook func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAAllowanceFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAAllowanceFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCAAllowanceFunc) nextHook() func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAAllowanceFunc) appendCall(r0 IALCAAllowanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAAllowanceFuncCall objects describing
// the invocations of this function.
func (f *IALCAAllowanceFunc) History() []IALCAAllowanceFuncCall {
	f.mutex.Lock()
	history := make([]IALCAAllowanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAAllowanceFuncCall is an object that describes an invocation of
// method Allowance on an instance of MockIALCA.
type IALCAAllowanceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAAllowanceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAAllowanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAApproveFunc describes the behavior when the Approve method of the
// parent MockIALCA instance is invoked.
type IALCAApproveFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCAApproveFuncCall
	mutex       sync.Mutex
}

// Approve delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCA) Approve(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.ApproveFunc.nextHook()(v0, v1, v2)
	m.ApproveFunc.appendCall(IALCAApproveFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Approve method of
// the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCAApproveFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Approve method of the parent MockIALCA instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCAApproveFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAApproveFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAApproveFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCAApproveFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAApproveFunc) appendCall(r0 IALCAApproveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAApproveFuncCall objects describing the
// invocations of this function.
func (f *IALCAApproveFunc) History() []IALCAApproveFuncCall {
	f.mutex.Lock()
	history := make([]IALCAApproveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAApproveFuncCall is an object that describes an invocation of method
// Approve on an instance of MockIALCA.
type IALCAApproveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAApproveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAApproveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCABalanceOfFunc describes the behavior when the BalanceOf method of
// the parent MockIALCA instance is invoked.
type IALCABalanceOfFunc struct {
	defaultHook func(*bind.CallOpts, common.Address) (*big.Int, error)
	hooks       []func(*bind.CallOpts, common.Address) (*big.Int, error)
	history     []IALCABalanceOfFuncCall
	mutex       sync.Mutex
}

// BalanceOf delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCA) BalanceOf(v0 *bind.CallOpts, v1 common.Address) (*big.Int, error) {
	r0, r1 := m.BalanceOfFunc.nextHook()(v0, v1)
	m.BalanceOfFunc.appendCall(IALCABalanceOfFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BalanceOf method of
// the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCABalanceOfFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BalanceOf method of the parent MockIALCA instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCABalanceOfFunc) PushHook(hook func(*bind.CallOpts, common.Address) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCABalanceOfFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCABalanceOfFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCABalanceOfFunc) nextHook() func(*bind.CallOpts, common.Address) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCABalanceOfFunc) appendCall(r0 IALCABalanceOfFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCABalanceOfFuncCall objects describing
// the invocations of this function.
func (f *IALCABalanceOfFunc) History() []IALCABalanceOfFuncCall {
	f.mutex.Lock()
	history := make([]IALCABalanceOfFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCABalanceOfFuncCall is an object that describes an invocation of
// method BalanceOf on an instance of MockIALCA.
type IALCABalanceOfFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCABalanceOfFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCABalanceOfFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAConvertFunc describes the behavior when the Convert method of the
// parent MockIALCA instance is invoked.
type IALCAConvertFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []IALCAConvertFuncCall
	mutex       sync.Mutex
}

// Convert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCA) Convert(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.ConvertFunc.nextHook()(v0, v1)
	m.ConvertFunc.appendCall(IALCAConvertFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Convert method of
// the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCAConvertFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Convert method of the parent MockIALCA instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCAConvertFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAConvertFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAConvertFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCAConvertFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAConvertFunc) appendCall(r0 IALCAConvertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAConvertFuncCall objects describing the
// invocations of this function.
func (f *IALCAConvertFunc) History() []IALCAConvertFuncCall {
	f.mutex.Lock()
	history := make([]IALCAConvertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAConvertFuncCall is an object that describes an invocation of method
// Convert on an instance of MockIALCA.
type IALCAConvertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAConvertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAConvertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCADecimalsFunc describes the behavior when the Decimals method of the
// parent MockIALCA instance is invoked.
type IALCADecimalsFunc struct {
	defaultHook func(*bind.CallOpts) (uint8, error)
	hooks       []func(*bind.CallOpts) (uint8, error)
	history     []IALCADecimalsFuncCall
	mutex       sync.Mutex
}

// Decimals delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCA) Decimals(v0 *bind.CallOpts) (uint8, error) {
	r0, r1 := m.DecimalsFunc.nextHook()(v0)
	m.DecimalsFunc.appendCall(IALCADecimalsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Decimals method of
// the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCADecimalsFunc) SetDefaultHook(hook func(*bind.CallOpts) (uint8, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Decimals method of the parent MockIALCA instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCADecimalsFunc) PushHook(hook func(*bind.CallOpts) (uint8, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCADecimalsFunc) SetDefaultReturn(r0 uint8, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (uint8, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCADecimalsFunc) PushReturn(r0 uint8, r1 error) {
	f.PushHook(func(*bind.CallOpts) (uint8, error) {
		return r0, r1
	})
}

func (f *IALCADecimalsFunc) nextHook() func(*bind.CallOpts) (uint8, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCADecimalsFunc) appendCall(r0 IALCADecimalsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCADecimalsFuncCall objects describing
// the invocations of this function.
func (f *IALCADecimalsFunc) History() []IALCADecimalsFuncCall {
	f.mutex.Lock()
	history := make([]IALCADecimalsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCADecimalsFuncCall is an object that describes an invocation of method
// Decimals on an instance of MockIALCA.
type IALCADecimalsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint8
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCADecimalsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCADecimalsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCADecreaseAllowanceFunc describes the behavior when the
// DecreaseAllowance method of the parent MockIALCA instance is invoked.
type IALCADecreaseAllowanceFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCADecreaseAllowanceFuncCall
	mutex       sync.Mutex
}

// DecreaseAllowance delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCA) DecreaseAllowance(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.DecreaseAllowanceFunc.nextHook()(v0, v1, v2)
	m.DecreaseAllowanceFunc.appendCall(IALCADecreaseAllowanceFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DecreaseAllowance
// method of the parent MockIALCA instance is invoked and the hook queue is
// empty.
func (f *IALCADecreaseAllowanceFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DecreaseAllowance method of the parent MockIALCA instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IALCADecreaseAllowanceFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCADecreaseAllowanceFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCADecreaseAllowanceFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCADecreaseAllowanceFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCADecreaseAllowanceFunc) appendCall(r0 IALCADecreaseAllowanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCADecreaseAllowanceFuncCall objects
// describing the invocations of this function.
func (f *IALCADecreaseAllowanceFunc) History() []IALCADecreaseAllowanceFuncCall {
	f.mutex.Lock()
	history := make([]IALCADecreaseAllowanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCADecreaseAllowanceFuncCall is an object that describes an invocation
// of method DecreaseAllowance on an instance of MockIALCA.
type IALCADecreaseAllowanceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCADecreaseAllowanceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCADecreaseAllowanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAExternalBurnFunc describes the behavior when the ExternalBurn method
// of the parent MockIALCA instance is invoked.
type IALCAExternalBurnFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCAExternalBurnFuncCall
	mutex       sync.Mutex
}

// ExternalBurn delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCA) ExternalBurn(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.ExternalBurnFunc.nextHook()(v0, v1, v2)
	m.ExternalBurnFunc.appendCall(IALCAExternalBurnFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExternalBurn method
// of the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCAExternalBurnFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalBurn method of the parent MockIALCA instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCAExternalBurnFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAExternalBurnFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAExternalBurnFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCAExternalBurnFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAExternalBurnFunc) appendCall(r0 IALCAExternalBurnFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAExternalBurnFuncCall objects
// describing the invocations of this function.
func (f *IALCAExternalBurnFunc) History() []IALCAExternalBurnFuncCall {
	f.mutex.Lock()
	history := make([]IALCAExternalBurnFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAExternalBurnFuncCall is an object that describes an invocation of
// method ExternalBurn on an instance of MockIALCA.
type IALCAExternalBurnFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAExternalBurnFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAExternalBurnFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAExternalMintFunc describes the behavior when the ExternalMint method
// of the parent MockIALCA instance is invoked.
type IALCAExternalMintFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCAExternalMintFuncCall
	mutex       sync.Mutex
}

// ExternalMint delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCA) ExternalMint(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.ExternalMintFunc.nextHook()(v0, v1, v2)
	m.ExternalMintFunc.appendCall(IALCAExternalMintFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExternalMint method
// of the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCAExternalMintFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalMint method of the parent MockIALCA instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCAExternalMintFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAExternalMintFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAExternalMintFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCAExternalMintFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAExternalMintFunc) appendCall(r0 IALCAExternalMintFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAExternalMintFuncCall objects
// describing the invocations of this function.
func (f *IALCAExternalMintFunc) History() []IALCAExternalMintFuncCall {
	f.mutex.Lock()
	history := make([]IALCAExternalMintFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAExternalMintFuncCall is an object that describes an invocation of
// method ExternalMint on an instance of MockIALCA.
type IALCAExternalMintFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAExternalMintFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAExternalMintFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAFilterApprovalFunc describes the behavior when the FilterApproval
// method of the parent MockIALCA instance is invoked.
type IALCAFilterApprovalFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCAApprovalIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCAApprovalIterator, error)
	history     []IALCAFilterApprovalFuncCall
	mutex       sync.Mutex
}

// FilterApproval delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCA) FilterApproval(v0 *bind.FilterOpts, v1 []common.Address, v2 []common.Address) (*bindings.ALCAApprovalIterator, error) {
	r0, r1 := m.FilterApprovalFunc.nextHook()(v0, v1, v2)
	m.FilterApprovalFunc.appendCall(IALCAFilterApprovalFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterApproval
// method of the parent MockIALCA instance is invoked and the hook queue is
// empty.
func (f *IALCAFilterApprovalFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCAApprovalIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterApproval method of the parent MockIALCA instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCAFilterApprovalFunc) PushHook(hook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCAApprovalIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAFilterApprovalFunc) SetDefaultReturn(r0 *bindings.ALCAApprovalIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCAApprovalIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAFilterApprovalFunc) PushReturn(r0 *bindings.ALCAApprovalIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCAApprovalIterator, error) {
		return r0, r1
	})
}

func (f *IALCAFilterApprovalFunc) nextHook() func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCAApprovalIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAFilterApprovalFunc) appendCall(r0 IALCAFilterApprovalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAFilterApprovalFuncCall objects
// describing the invocations of this function.
func (f *IALCAFilterApprovalFunc) History() []IALCAFilterApprovalFuncCall {
	f.mutex.Lock()
	history := make([]IALCAFilterApprovalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAFilterApprovalFuncCall is an object that describes an invocation of
// method FilterApproval on an instance of MockIALCA.
type IALCAFilterApprovalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ALCAApprovalIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAFilterApprovalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAFilterApprovalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAFilterTransferFunc describes the behavior when the FilterTransfer
// method of the parent MockIALCA instance is invoked.
type IALCAFilterTransferFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCATransferIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCATransferIterator, error)
	history     []IALCAFilterTransferFuncCall
	mutex       sync.Mutex
}

// FilterTransfer delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCA) FilterTransfer(v0 *bind.FilterOpts, v1 []common.Address, v2 []common.Address) (*bindings.ALCATransferIterator, error) {
	r0, r1 := m.FilterTransferFunc.nextHook()(v0, v1, v2)
	m.FilterTransferFunc.appendCall(IALCAFilterTransferFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterTransfer
// method of the parent MockIALCA instance is invoked and the hook queue is
// empty.
func (f *IALCAFilterTransferFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCATransferIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterTransfer method of the parent MockIALCA instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCAFilterTransferFunc) PushHook(hook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCATransferIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAFilterTransferFunc) SetDefaultReturn(r0 *bindings.ALCATransferIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCATransferIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAFilterTransferFunc) PushReturn(r0 *bindings.ALCATransferIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCATransferIterator, error) {
		return r0, r1
	})
}

func (f *IALCAFilterTransferFunc) nextHook() func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCATransferIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAFilterTransferFunc) appendCall(r0 IALCAFilterTransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAFilterTransferFuncCall objects
// describing the invocations of this function.
func (f *IALCAFilterTransferFunc) History() []IALCAFilterTransferFuncCall {
	f.mutex.Lock()
	history := make([]IALCAFilterTransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAFilterTransferFuncCall is an object that describes an invocation of
// method FilterTransfer on an instance of MockIALCA.
type IALCAFilterTransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ALCATransferIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAFilterTransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAFilterTransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAFinishEarlyStageFunc describes the behavior when the
// FinishEarlyStage method of the parent MockIALCA instance is invoked.
type IALCAFinishEarlyStageFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IALCAFinishEarlyStageFuncCall
	mutex       sync.Mutex
}

// FinishEarlyStage delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCA) FinishEarlyStage(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.FinishEarlyStageFunc.nextHook()(v0)
	m.FinishEarlyStageFunc.appendCall(IALCAFinishEarlyStageFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FinishEarlyStage
// method of the parent MockIALCA instance is invoked and the hook queue is
// empty.
func (f *IALCAFinishEarlyStageFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FinishEarlyStage method of the parent MockIALCA instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCAFinishEarlyStageFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAFinishEarlyStageFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAFinishEarlyStageFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCAFinishEarlyStageFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAFinishEarlyStageFunc) appendCall(r0 IALCAFinishEarlyStageFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAFinishEarlyStageFuncCall objects
// describing the invocations of this function.
func (f *IALCAFinishEarlyStageFunc) History() []IALCAFinishEarlyStageFuncCall {
	f.mutex.Lock()
	history := make([]IALCAFinishEarlyStageFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAFinishEarlyStageFuncCall is an object that describes an invocation
// of method FinishEarlyStage on an instance of MockIALCA.
type IALCAFinishEarlyStageFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAFinishEarlyStageFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAFinishEarlyStageFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAGetLegacyTokenAddressFunc describes the behavior when the
// GetLegacyTokenAddress method of the parent MockIALCA instance is invoked.
type IALCAGetLegacyTokenAddressFunc struct {
	defaultHook func(*bind.CallOpts) (common.Address, error)
	hooks       []func(*bind.CallOpts) (common.Address, error)
	history     []IALCAGetLegacyTokenAddressFuncCall
	mutex       sync.Mutex
}

// GetLegacyTokenAddress delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIALCA) GetLegacyTokenAddress(v0 *bind.CallOpts) (common.Address, error) {
	r0, r1 := m.GetLegacyTokenAddressFunc.nextHook()(v0)
	m.GetLegacyTokenAddressFunc.appendCall(IALCAGetLegacyTokenAddressFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLegacyTokenAddress method of the parent MockIALCA instance is invoked
// and the hook queue is empty.
func (f *IALCAGetLegacyTokenAddressFunc) SetDefaultHook(hook func(*bind.CallOpts) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLegacyTokenAddress method of the parent MockIALCA instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IALCAGetLegacyTokenAddressFunc) PushHook(hook func(*bind.CallOpts) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAGetLegacyTokenAddressFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAGetLegacyTokenAddressFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts) (common.Address, error) {
		return r0, r1
	})
}

func (f *IALCAGetLegacyTokenAddressFunc) nextHook() func(*bind.CallOpts) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAGetLegacyTokenAddressFunc) appendCall(r0 IALCAGetLegacyTokenAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAGetLegacyTokenAddressFuncCall objects
// describing the invocations of this function.
func (f *IALCAGetLegacyTokenAddressFunc) History() []IALCAGetLegacyTokenAddressFuncCall {
	f.mutex.Lock()
	history := make([]IALCAGetLegacyTokenAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAGetLegacyTokenAddressFuncCall is an object that describes an
// invocation of method GetLegacyTokenAddress on an instance of MockIALCA.
type IALCAGetLegacyTokenAddressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAGetLegacyTokenAddressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAGetLegacyTokenAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAGetMetamorphicContractAddressFunc describes the behavior when the
// GetMetamorphicContractAddress method of the parent MockIALCA instance is
// invoked.
type IALCAGetMetamorphicContractAddressFunc struct {
	defaultHook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	hooks       []func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	history     []IALCAGetMetamorphicContractAddressFuncCall
	mutex       sync.Mutex
}

// GetMetamorphicContractAddress delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIALCA) GetMetamorphicContractAddress(v0 *bind.CallOpts, v1 [32]byte, v2 common.Address) (common.Address, error) {
	r0, r1 := m.GetMetamorphicContractAddressFunc.nextHook()(v0, v1, v2)
	m.GetMetamorphicContractAddressFunc.appendCall(IALCAGetMetamorphicContractAddressFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMetamorphicContractAddress method of the parent MockIALCA instance is
// invoked and the hook queue is empty.
func (f *IALCAGetMetamorphicContractAddressFunc) SetDefaultHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMetamorphicContractAddress method of the parent MockIALCA instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IALCAGetMetamorphicContractAddressFunc) PushHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAGetMetamorphicContractAddressFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAGetMetamorphicContractAddressFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

func (f *IALCAGetMetamorphicContractAddressFunc) nextHook() func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAGetMetamorphicContractAddressFunc) appendCall(r0 IALCAGetMetamorphicContractAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAGetMetamorphicContractAddressFuncCall
// objects describing the invocations of this function.
func (f *IALCAGetMetamorphicContractAddressFunc) History() []IALCAGetMetamorphicContractAddressFuncCall {
	f.mutex.Lock()
	history := make([]IALCAGetMetamorphicContractAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAGetMetamorphicContractAddressFuncCall is an object that describes an
// invocation of method GetMetamorphicContractAddress on an instance of
// MockIALCA.
type IALCAGetMetamorphicContractAddressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAGetMetamorphicContractAddressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAGetMetamorphicContractAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAIncreaseAllowanceFunc describes the behavior when the
// IncreaseAllowance method of the parent MockIALCA instance is invoked.
type IALCAIncreaseAllowanceFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCAIncreaseAllowanceFuncCall
	mutex       sync.Mutex
}

// IncreaseAllowance delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCA) IncreaseAllowance(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.IncreaseAllowanceFunc.nextHook()(v0, v1, v2)
	m.IncreaseAllowanceFunc.appendCall(IALCAIncreaseAllowanceFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IncreaseAllowance
// method of the parent MockIALCA instance is invoked and the hook queue is
// empty.
func (f *IALCAIncreaseAllowanceFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IncreaseAllowance method of the parent MockIALCA instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IALCAIncreaseAllowanceFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAIncreaseAllowanceFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAIncreaseAllowanceFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCAIncreaseAllowanceFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAIncreaseAllowanceFunc) appendCall(r0 IALCAIncreaseAllowanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAIncreaseAllowanceFuncCall objects
// describing the invocations of this function.
func (f *IALCAIncreaseAllowanceFunc) History() []IALCAIncreaseAllowanceFuncCall {
	f.mutex.Lock()
	history := make([]IALCAIncreaseAllowanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAIncreaseAllowanceFuncCall is an object that describes an invocation
// of method IncreaseAllowance on an instance of MockIALCA.
type IALCAIncreaseAllowanceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAIncreaseAllowanceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAIncreaseAllowanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAMigrateFunc describes the behavior when the Migrate method of the
// parent MockIALCA instance is invoked.
type IALCAMigrateFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IALCAMigrateFuncCall
	mutex       sync.Mutex
}

// Migrate delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCA) Migrate(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.MigrateFunc.nextHook()(v0, v1)
	m.MigrateFunc.appendCall(IALCAMigrateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Migrate method of
// the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCAMigrateFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Migrate method of the parent MockIALCA instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCAMigrateFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAMigrateFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAMigrateFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCAMigrateFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAMigrateFunc) appendCall(r0 IALCAMigrateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAMigrateFuncCall objects describing the
// invocations of this function.
func (f *IALCAMigrateFunc) History() []IALCAMigrateFuncCall {
	f.mutex.Lock()
	history := make([]IALCAMigrateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAMigrateFuncCall is an object that describes an invocation of method
// Migrate on an instance of MockIALCA.
type IALCAMigrateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAMigrateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAMigrateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAMigrateToFunc describes the behavior when the MigrateTo method of
// the parent MockIALCA instance is invoked.
type IALCAMigrateToFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCAMigrateToFuncCall
	mutex       sync.Mutex
}

// MigrateTo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCA) MigrateTo(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.MigrateToFunc.nextHook()(v0, v1, v2)
	m.MigrateToFunc.appendCall(IALCAMigrateToFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MigrateTo method of
// the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCAMigrateToFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MigrateTo method of the parent MockIALCA instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCAMigrateToFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAMigrateToFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAMigrateToFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCAMigrateToFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAMigrateToFunc) appendCall(r0 IALCAMigrateToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAMigrateToFuncCall objects describing
// the invocations of this function.
func (f *IALCAMigrateToFunc) History() []IALCAMigrateToFuncCall {
	f.mutex.Lock()
	history := make([]IALCAMigrateToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAMigrateToFuncCall is an object that describes an invocation of
// method MigrateTo on an instance of MockIALCA.
type IALCAMigrateToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAMigrateToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAMigrateToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCANameFunc describes the behavior when the Name method of the parent
// MockIALCA instance is invoked.
type IALCANameFunc struct {
	defaultHook func(*bind.CallOpts) (string, error)
	hooks       []func(*bind.CallOpts) (string, error)
	history     []IALCANameFuncCall
	mutex       sync.Mutex
}

// Name delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCA) Name(v0 *bind.CallOpts) (string, error) {
	r0, r1 := m.NameFunc.nextHook()(v0)
	m.NameFunc.appendCall(IALCANameFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Name method of the
// parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCANameFunc) SetDefaultHook(hook func(*bind.CallOpts) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Name method of the parent MockIALCA instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCANameFunc) PushHook(hook func(*bind.CallOpts) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCANameFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCANameFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

func (f *IALCANameFunc) nextHook() func(*bind.CallOpts) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCANameFunc) appendCall(r0 IALCANameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCANameFuncCall objects describing the
// invocations of this function.
func (f *IALCANameFunc) History() []IALCANameFuncCall {
	f.mutex.Lock()
	history := make([]IALCANameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCANameFuncCall is an object that describes an invocation of method
// Name on an instance of MockIALCA.
type IALCANameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCANameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCANameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAParseApprovalFunc describes the behavior when the ParseApproval
// method of the parent MockIALCA instance is invoked.
type IALCAParseApprovalFunc struct {
	defaultHook func(types.Log) (*bindings.ALCAApproval, error)
	hooks       []func(types.Log) (*bindings.ALCAApproval, error)
	history     []IALCAParseApprovalFuncCall
	mutex       sync.Mutex
}

// ParseApproval delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCA) ParseApproval(v0 types.Log) (*bindings.ALCAApproval, error) {
	r0, r1 := m.ParseApprovalFunc.nextHook()(v0)
	m.ParseApprovalFunc.appendCall(IALCAParseApprovalFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseApproval method
// of the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCAParseApprovalFunc) SetDefaultHook(hook func(types.Log) (*bindings.ALCAApproval, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseApproval method of the parent MockIALCA instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCAParseApprovalFunc) PushHook(hook func(types.Log) (*bindings.ALCAApproval, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAParseApprovalFunc) SetDefaultReturn(r0 *bindings.ALCAApproval, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ALCAApproval, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAParseApprovalFunc) PushReturn(r0 *bindings.ALCAApproval, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ALCAApproval, error) {
		return r0, r1
	})
}

func (f *IALCAParseApprovalFunc) nextHook() func(types.Log) (*bindings.ALCAApproval, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAParseApprovalFunc) appendCall(r0 IALCAParseApprovalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAParseApprovalFuncCall objects
// describing the invocations of this function.
func (f *IALCAParseApprovalFunc) History() []IALCAParseApprovalFuncCall {
	f.mutex.Lock()
	history := make([]IALCAParseApprovalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAParseApprovalFuncCall is an object that describes an invocation of
// method ParseApproval on an instance of MockIALCA.
type IALCAParseApprovalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ALCAApproval
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAParseApprovalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAParseApprovalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAParseTransferFunc describes the behavior when the ParseTransfer
// method of the parent MockIALCA instance is invoked.
type IALCAParseTransferFunc struct {
	defaultHook func(types.Log) (*bindings.ALCATransfer, error)
	hooks       []func(types.Log) (*bindings.ALCATransfer, error)
	history     []IALCAParseTransferFuncCall
	mutex       sync.Mutex
}

// ParseTransfer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCA) ParseTransfer(v0 types.Log) (*bindings.ALCATransfer, error) {
	r0, r1 := m.ParseTransferFunc.nextHook()(v0)
	m.ParseTransferFunc.appendCall(IALCAParseTransferFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseTransfer method
// of the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCAParseTransferFunc) SetDefaultHook(hook func(types.Log) (*bindings.ALCATransfer, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseTransfer method of the parent MockIALCA instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCAParseTransferFunc) PushHook(hook func(types.Log) (*bindings.ALCATransfer, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAParseTransferFunc) SetDefaultReturn(r0 *bindings.ALCATransfer, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ALCATransfer, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAParseTransferFunc) PushReturn(r0 *bindings.ALCATransfer, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ALCATransfer, error) {
		return r0, r1
	})
}

func (f *IALCAParseTransferFunc) nextHook() func(types.Log) (*bindings.ALCATransfer, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAParseTransferFunc) appendCall(r0 IALCAParseTransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAParseTransferFuncCall objects
// describing the invocations of this function.
func (f *IALCAParseTransferFunc) History() []IALCAParseTransferFuncCall {
	f.mutex.Lock()
	history := make([]IALCAParseTransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAParseTransferFuncCall is an object that describes an invocation of
// method ParseTransfer on an instance of MockIALCA.
type IALCAParseTransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ALCATransfer
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAParseTransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAParseTransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCASymbolFunc describes the behavior when the Symbol method of the
// parent MockIALCA instance is invoked.
type IALCASymbolFunc struct {
	defaultHook func(*bind.CallOpts) (string, error)
	hooks       []func(*bind.CallOpts) (string, error)
	history     []IALCASymbolFuncCall
	mutex       sync.Mutex
}

// Symbol delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCA) Symbol(v0 *bind.CallOpts) (string, error) {
	r0, r1 := m.SymbolFunc.nextHook()(v0)
	m.SymbolFunc.appendCall(IALCASymbolFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Symbol method of the
// parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCASymbolFunc) SetDefaultHook(hook func(*bind.CallOpts) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Symbol method of the parent MockIALCA instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCASymbolFunc) PushHook(hook func(*bind.CallOpts) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCASymbolFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCASymbolFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

func (f *IALCASymbolFunc) nextHook() func(*bind.CallOpts) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCASymbolFunc) appendCall(r0 IALCASymbolFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCASymbolFuncCall objects describing the
// invocations of this function.
func (f *IALCASymbolFunc) History() []IALCASymbolFuncCall {
	f.mutex.Lock()
	history := make([]IALCASymbolFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCASymbolFuncCall is an object that describes an invocation of method
// Symbol on an instance of MockIALCA.
type IALCASymbolFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCASymbolFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCASymbolFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCATotalSupplyFunc describes the behavior when the TotalSupply method
// of the parent MockIALCA instance is invoked.
type IALCATotalSupplyFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IALCATotalSupplyFuncCall
	mutex       sync.Mutex
}

// TotalSupply delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCA) TotalSupply(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.TotalSupplyFunc.nextHook()(v0)
	m.TotalSupplyFunc.appendCall(IALCATotalSupplyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TotalSupply method
// of the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCATotalSupplyFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TotalSupply method of the parent MockIALCA instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCATotalSupplyFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCATotalSupplyFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCATotalSupplyFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCATotalSupplyFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCATotalSupplyFunc) appendCall(r0 IALCATotalSupplyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCATotalSupplyFuncCall objects describing
// the invocations of this function.
func (f *IALCATotalSupplyFunc) History() []IALCATotalSupplyFuncCall {
	f.mutex.Lock()
	history := make([]IALCATotalSupplyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCATotalSupplyFuncCall is an object that describes an invocation of
// method TotalSupply on an instance of MockIALCA.
type IALCATotalSupplyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCATotalSupplyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCATotalSupplyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCATransferFunc describes the behavior when the Transfer method of the
// parent MockIALCA instance is invoked.
type IALCATransferFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCATransferFuncCall
	mutex       sync.Mutex
}

// Transfer delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCA) Transfer(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.TransferFunc.nextHook()(v0, v1, v2)
	m.TransferFunc.appendCall(IALCATransferFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transfer method of
// the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCATransferFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transfer method of the parent MockIALCA instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCATransferFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCATransferFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCATransferFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCATransferFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCATransferFunc) appendCall(r0 IALCATransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCATransferFuncCall objects describing
// the invocations of this function.
func (f *IALCATransferFunc) History() []IALCATransferFuncCall {
	f.mutex.Lock()
	history := make([]IALCATransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCATransferFuncCall is an object that describes an invocation of method
// Transfer on an instance of MockIALCA.
type IALCATransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCATransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCATransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCATransferFromFunc describes the behavior when the TransferFrom method
// of the parent MockIALCA instance is invoked.
type IALCATransferFromFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCATransferFromFuncCall
	mutex       sync.Mutex
}

// TransferFrom delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCA) TransferFrom(v0 *bind.TransactOpts, v1 common.Address, v2 common.Address, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.TransferFromFunc.nextHook()(v0, v1, v2, v3)
	m.TransferFromFunc.appendCall(IALCATransferFromFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TransferFrom method
// of the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCATransferFromFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransferFrom method of the parent MockIALCA instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCATransferFromFunc) PushHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCATransferFromFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCATransferFromFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCATransferFromFunc) nextHook() func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCATransferFromFunc) appendCall(r0 IALCATransferFromFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCATransferFromFuncCall objects
// describing the invocations of this function.
func (f *IALCATransferFromFunc) History() []IALCATransferFromFuncCall {
	f.mutex.Lock()
	history := make([]IALCATransferFromFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCATransferFromFuncCall is an object that describes an invocation of
// method TransferFrom on an instance of MockIALCA.
type IALCATransferFromFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCATransferFromFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCATransferFromFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAWatchApprovalFunc describes the behavior when the WatchApproval
// method of the parent MockIALCA instance is invoked.
type IALCAWatchApprovalFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ALCAApproval, []common.Address, []common.Address) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ALCAApproval, []common.Address, []common.Address) (event.Subscription, error)
	history     []IALCAWatchApprovalFuncCall
	mutex       sync.Mutex
}

// WatchApproval delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCA) WatchApproval(v0 *bind.WatchOpts, v1 chan<- *bindings.ALCAApproval, v2 []common.Address, v3 []common.Address) (event.Subscription, error) {
	r0, r1 := m.WatchApprovalFunc.nextHook()(v0, v1, v2, v3)
	m.WatchApprovalFunc.appendCall(IALCAWatchApprovalFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchApproval method
// of the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCAWatchApprovalFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ALCAApproval, []common.Address, []common.Address) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchApproval method of the parent MockIALCA instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCAWatchApprovalFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ALCAApproval, []common.Address, []common.Address) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAWatchApprovalFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ALCAApproval, []common.Address, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAWatchApprovalFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ALCAApproval, []common.Address, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IALCAWatchApprovalFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ALCAApproval, []common.Address, []common.Address) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAWatchApprovalFunc) appendCall(r0 IALCAWatchApprovalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAWatchApprovalFuncCall objects
// describing the invocations of this function.
func (f *IALCAWatchApprovalFunc) History() []IALCAWatchApprovalFuncCall {
	f.mutex.Lock()
	history := make([]IALCAWatchApprovalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAWatchApprovalFuncCall is an object that describes an invocation of
// method WatchApproval on an instance of MockIALCA.
type IALCAWatchApprovalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ALCAApproval
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAWatchApprovalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAWatchApprovalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCAWatchTransferFunc describes the behavior when the WatchTransfer
// method of the parent MockIALCA instance is invoked.
type IALCAWatchTransferFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ALCATransfer, []common.Address, []common.Address) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ALCATransfer, []common.Address, []common.Address) (event.Subscription, error)
	history     []IALCAWatchTransferFuncCall
	mutex       sync.Mutex
}

// WatchTransfer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCA) WatchTransfer(v0 *bind.WatchOpts, v1 chan<- *bindings.ALCATransfer, v2 []common.Address, v3 []common.Address) (event.Subscription, error) {
	r0, r1 := m.WatchTransferFunc.nextHook()(v0, v1, v2, v3)
	m.WatchTransferFunc.appendCall(IALCAWatchTransferFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchTransfer method
// of the parent MockIALCA instance is invoked and the hook queue is empty.
func (f *IALCAWatchTransferFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ALCATransfer, []common.Address, []common.Address) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchTransfer method of the parent MockIALCA instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCAWatchTransferFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ALCATransfer, []common.Address, []common.Address) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCAWatchTransferFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ALCATransfer, []common.Address, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCAWatchTransferFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ALCATransfer, []common.Address, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IALCAWatchTransferFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ALCATransfer, []common.Address, []common.Address) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCAWatchTransferFunc) appendCall(r0 IALCAWatchTransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCAWatchTransferFuncCall objects
// describing the invocations of this function.
func (f *IALCAWatchTransferFunc) History() []IALCAWatchTransferFuncCall {
	f.mutex.Lock()
	history := make([]IALCAWatchTransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCAWatchTransferFuncCall is an object that describes an invocation of
// method WatchTransfer on an instance of MockIALCA.
type IALCAWatchTransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ALCATransfer
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCAWatchTransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCAWatchTransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockIALCB is a mock implementation of the IALCB interface (from the
// package github.com/alicenet/alicenet/bridge/bindings) used for unit
// testing.
type MockIALCB struct {
	// AllowanceFunc is an instance of a mock function object controlling
	// the behavior of the method Allowance.
	AllowanceFunc *IALCBAllowanceFunc
	// ApproveFunc is an instance of a mock function object controlling the
	// behavior of the method Approve.
	ApproveFunc *IALCBApproveFunc
	// BalanceOfFunc is an instance of a mock function object controlling
	// the behavior of the method BalanceOf.
	BalanceOfFunc *IALCBBalanceOfFunc
	// BurnFunc is an instance of a mock function object controlling the
	// behavior of the method Burn.
	BurnFunc *IALCBBurnFunc
	// BurnToFunc is an instance of a mock function object controlling the
	// behavior of the method BurnTo.
	BurnToFunc *IALCBBurnToFunc
	// DecimalsFunc is an instance of a mock function object controlling the
	// behavior of the method Decimals.
	DecimalsFunc *IALCBDecimalsFunc
	// DecreaseAllowanceFunc is an instance of a mock function object
	// controlling the behavior of the method DecreaseAllowance.
	DecreaseAllowanceFunc *IALCBDecreaseAllowanceFunc
	// DepositFunc is an instance of a mock function object controlling the
	// behavior of the method Deposit.
	DepositFunc *IALCBDepositFunc
	// DepositTokensOnBridgesFunc is an instance of a mock function object
	// controlling the behavior of the method DepositTokensOnBridges.
	DepositTokensOnBridgesFunc *IALCBDepositTokensOnBridgesFunc
	// DestroyTokensFunc is an instance of a mock function object
	// controlling the behavior of the method DestroyTokens.
	DestroyTokensFunc *IALCBDestroyTokensFunc
	// DistributeFunc is an instance of a mock function object controlling
	// the behavior of the method Distribute.
	DistributeFunc *IALCBDistributeFunc
	// FilterApprovalFunc is an instance of a mock function object
	// controlling the behavior of the method FilterApproval.
	FilterApprovalFunc *IALCBFilterApprovalFunc
	// FilterDepositReceivedFunc is an instance of a mock function object
	// controlling the behavior of the method FilterDepositReceived.
	FilterDepositReceivedFunc *IALCBFilterDepositReceivedFunc
	// FilterTransferFunc is an instance of a mock function object
	// controlling the behavior of the method FilterTransfer.
	FilterTransferFunc *IALCBFilterTransferFunc
	// GetCentralBridgeRouterAddressFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetCentralBridgeRouterAddress.
	GetCentralBridgeRouterAddressFunc *IALCBGetCentralBridgeRouterAddressFunc
	// GetDepositFunc is an instance of a mock function object controlling
	// the behavior of the method GetDeposit.
	GetDepositFunc *IALCBGetDepositFunc
	// GetDepositIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetDepositID.
	GetDepositIDFunc *IALCBGetDepositIDFunc
	// GetEthFromTokensBurnFunc is an instance of a mock function object
	// controlling the behavior of the method GetEthFromTokensBurn.
	GetEthFromTokensBurnFunc *IALCBGetEthFromTokensBurnFunc
	// GetEthToMintTokensFunc is an instance of a mock function object
	// controlling the behavior of the method GetEthToMintTokens.
	GetEthToMintTokensFunc *IALCBGetEthToMintTokensFunc
	// GetLatestEthFromTokensBurnFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetLatestEthFromTokensBurn.
	GetLatestEthFromTokensBurnFunc *IALCBGetLatestEthFromTokensBurnFunc
	// GetLatestEthToMintTokensFunc is an instance of a mock function object
	// controlling the behavior of the method GetLatestEthToMintTokens.
	GetLatestEthToMintTokensFunc *IALCBGetLatestEthToMintTokensFunc
	// GetLatestMintedTokensFromEthFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetLatestMintedTokensFromEth.
	GetLatestMintedTokensFromEthFunc *IALCBGetLatestMintedTokensFromEthFunc
	// GetMarketSpreadFunc is an instance of a mock function object
	// controlling the behavior of the method GetMarketSpread.
	GetMarketSpreadFunc *IALCBGetMarketSpreadFunc
	// GetMetamorphicContractAddressFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetMetamorphicContractAddress.
	GetMetamorphicContractAddressFunc *IALCBGetMetamorphicContractAddressFunc
	// GetMintedTokensFromEthFunc is an instance of a mock function object
	// controlling the behavior of the method GetMintedTokensFromEth.
	GetMintedTokensFromEthFunc *IALCBGetMintedTokensFromEthFunc
	// GetPoolBalanceFunc is an instance of a mock function object
	// controlling the behavior of the method GetPoolBalance.
	GetPoolBalanceFunc *IALCBGetPoolBalanceFunc
	// GetTotalTokensDepositedFunc is an instance of a mock function object
	// controlling the behavior of the method GetTotalTokensDeposited.
	GetTotalTokensDepositedFunc *IALCBGetTotalTokensDepositedFunc
	// GetYieldFunc is an instance of a mock function object controlling the
	// behavior of the method GetYield.
	GetYieldFunc *IALCBGetYieldFunc
	// IncreaseAllowanceFunc is an instance of a mock function object
	// controlling the behavior of the method IncreaseAllowance.
	IncreaseAllowanceFunc *IALCBIncreaseAllowanceFunc
	// MintFunc is an instance of a mock function object controlling the
	// behavior of the method Mint.
	MintFunc *IALCBMintFunc
	// MintDepositFunc is an instance of a mock function object controlling
	// the behavior of the method MintDeposit.
	MintDepositFunc *IALCBMintDepositFunc
	// MintToFunc is an instance of a mock function object controlling the
	// behavior of the method MintTo.
	MintToFunc *IALCBMintToFunc
	// NameFunc is an instance of a mock function object controlling the
	// behavior of the method Name.
	NameFunc *IALCBNameFunc
	// ParseApprovalFunc is an instance of a mock function object
	// controlling the behavior of the method ParseApproval.
	ParseApprovalFunc *IALCBParseApprovalFunc
	// ParseDepositReceivedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseDepositReceived.
	ParseDepositReceivedFunc *IALCBParseDepositReceivedFunc
	// ParseTransferFunc is an instance of a mock function object
	// controlling the behavior of the method ParseTransfer.
	ParseTransferFunc *IALCBParseTransferFunc
	// SetAccountTypeFunc is an instance of a mock function object
	// controlling the behavior of the method SetAccountType.
	SetAccountTypeFunc *IALCBSetAccountTypeFunc
	// SymbolFunc is an instance of a mock function object controlling the
	// behavior of the method Symbol.
	SymbolFunc *IALCBSymbolFunc
	// TotalSupplyFunc is an instance of a mock function object controlling
	// the behavior of the method TotalSupply.
	TotalSupplyFunc *IALCBTotalSupplyFunc
	// TransferFunc is an instance of a mock function object controlling the
	// behavior of the method Transfer.
	TransferFunc *IALCBTransferFunc
	// TransferFromFunc is an instance of a mock function object controlling
	// the behavior of the method TransferFrom.
	TransferFromFunc *IALCBTransferFromFunc
	// VirtualMintDepositFunc is an instance of a mock function object
	// controlling the behavior of the method VirtualMintDeposit.
	VirtualMintDepositFunc *IALCBVirtualMintDepositFunc
	// WatchApprovalFunc is an instance of a mock function object
	// controlling the behavior of the method WatchApproval.
	WatchApprovalFunc *IALCBWatchApprovalFunc
	// WatchDepositReceivedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchDepositReceived.
	WatchDepositReceivedFunc *IALCBWatchDepositReceivedFunc
	// WatchTransferFunc is an instance of a mock function object
	// controlling the behavior of the method WatchTransfer.
	WatchTransferFunc *IALCBWatchTransferFunc
}

// NewMockIALCB creates a new mock of the IALCB interface. All methods
// return zero values for all results, unless overwritten.
func NewMockIALCB() *MockIALCB {
	return &MockIALCB{
		AllowanceFunc: &IALCBAllowanceFunc{
			defaultHook: func(*bind.CallOpts, common.Address, common.Address) (r0 *big.Int, r1 error) {
				return
			},
		},
		ApproveFunc: &IALCBApproveFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		BalanceOfFunc: &IALCBBalanceOfFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (r0 *big.Int, r1 error) {
				return
			},
		},
		BurnFunc: &IALCBBurnFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		BurnToFunc: &IALCBBurnToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DecimalsFunc: &IALCBDecimalsFunc{
			defaultHook: func(*bind.CallOpts) (r0 uint8, r1 error) {
				return
			},
		},
		DecreaseAllowanceFunc: &IALCBDecreaseAllowanceFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DepositFunc: &IALCBDepositFunc{
			defaultHook: func(*bind.TransactOpts, uint8, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DepositTokensOnBridgesFunc: &IALCBDepositTokensOnBridgesFunc{
			defaultHook: func(*bind.TransactOpts, uint8, []byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DestroyTokensFunc: &IALCBDestroyTokensFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DistributeFunc: &IALCBDistributeFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		FilterApprovalFunc: &IALCBFilterApprovalFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address) (r0 *bindings.ALCBApprovalIterator, r1 error) {
				return
			},
		},
		FilterDepositReceivedFunc: &IALCBFilterDepositReceivedFunc{
			defaultHook: func(*bind.FilterOpts, []*big.Int, []uint8, []common.Address) (r0 *bindings.ALCBDepositReceivedIterator, r1 error) {
				return
			},
		},
		FilterTransferFunc: &IALCBFilterTransferFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address) (r0 *bindings.ALCBTransferIterator, r1 error) {
				return
			},
		},
		GetCentralBridgeRouterAddressFunc: &IALCBGetCentralBridgeRouterAddressFunc{
			defaultHook: func(*bind.CallOpts) (r0 common.Address, r1 error) {
				return
			},
		},
		GetDepositFunc: &IALCBGetDepositFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 bindings.Deposit, r1 error) {
				return
			},
		},
		GetDepositIDFunc: &IALCBGetDepositIDFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetEthFromTokensBurnFunc: &IALCBGetEthFromTokensBurnFunc{
			defaultHook: func(*bind.CallOpts, *big.Int, *big.Int, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetEthToMintTokensFunc: &IALCBGetEthToMintTokensFunc{
			defaultHook: func(*bind.CallOpts, *big.Int, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetLatestEthFromTokensBurnFunc: &IALCBGetLatestEthFromTokensBurnFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetLatestEthToMintTokensFunc: &IALCBGetLatestEthToMintTokensFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetLatestMintedTokensFromEthFunc: &IALCBGetLatestMintedTokensFromEthFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetMarketSpreadFunc: &IALCBGetMarketSpreadFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetMetamorphicContractAddressFunc: &IALCBGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (r0 common.Address, r1 error) {
				return
			},
		},
		GetMintedTokensFromEthFunc: &IALCBGetMintedTokensFromEthFunc{
			defaultHook: func(*bind.CallOpts, *big.Int, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetPoolBalanceFunc: &IALCBGetPoolBalanceFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetTotalTokensDepositedFunc: &IALCBGetTotalTokensDepositedFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetYieldFunc: &IALCBGetYieldFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		IncreaseAllowanceFunc: &IALCBIncreaseAllowanceFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		MintFunc: &IALCBMintFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		MintDepositFunc: &IALCBMintDepositFunc{
			defaultHook: func(*bind.TransactOpts, uint8, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		MintToFunc: &IALCBMintToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		NameFunc: &IALCBNameFunc{
			defaultHook: func(*bind.CallOpts) (r0 string, r1 error) {
				return
			},
		},
		ParseApprovalFunc: &IALCBParseApprovalFunc{
			defaultHook: func(types.Log) (r0 *bindings.ALCBApproval, r1 error) {
				return
			},
		},
		ParseDepositReceivedFunc: &IALCBParseDepositReceivedFunc{
			defaultHook: func(types.Log) (r0 *bindings.ALCBDepositReceived, r1 error) {
				return
			},
		},
		ParseTransferFunc: &IALCBParseTransferFunc{
			defaultHook: func(types.Log) (r0 *bindings.ALCBTransfer, r1 error) {
				return
			},
		},
		SetAccountTypeFunc: &IALCBSetAccountTypeFunc{
			defaultHook: func(*bind.TransactOpts, uint8, bool) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SymbolFunc: &IALCBSymbolFunc{
			defaultHook: func(*bind.CallOpts) (r0 string, r1 error) {
				return
			},
		},
		TotalSupplyFunc: &IALCBTotalSupplyFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		TransferFunc: &IALCBTransferFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		TransferFromFunc: &IALCBTransferFromFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		VirtualMintDepositFunc: &IALCBVirtualMintDepositFunc{
			defaultHook: func(*bind.TransactOpts, uint8, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		WatchApprovalFunc: &IALCBWatchApprovalFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ALCBApproval, []common.Address, []common.Address) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchDepositReceivedFunc: &IALCBWatchDepositReceivedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ALCBDepositReceived, []*big.Int, []uint8, []common.Address) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchTransferFunc: &IALCBWatchTransferFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ALCBTransfer, []common.Address, []common.Address) (r0 event.Subscription, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockIALCB creates a new mock of the IALCB interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockIALCB() *MockIALCB {
	return &MockIALCB{
		AllowanceFunc: &IALCBAllowanceFunc{
			defaultHook: func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.Allowance")
			},
		},
		ApproveFunc: &IALCBApproveFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.Approve")
			},
		},
		BalanceOfFunc: &IALCBBalanceOfFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.BalanceOf")
			},
		},
		BurnFunc: &IALCBBurnFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.Burn")
			},
		},
		BurnToFunc: &IALCBBurnToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.BurnTo")
			},
		},
		DecimalsFunc: &IALCBDecimalsFunc{
			defaultHook: func(*bind.CallOpts) (uint8, error) {
				panic("unexpected invocation of MockIALCB.Decimals")
			},
		},
		DecreaseAllowanceFunc: &IALCBDecreaseAllowanceFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.DecreaseAllowance")
			},
		},
		DepositFunc: &IALCBDepositFunc{
			defaultHook: func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.Deposit")
			},
		},
		DepositTokensOnBridgesFunc: &IALCBDepositTokensOnBridgesFunc{
			defaultHook: func(*bind.TransactOpts, uint8, []byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.DepositTokensOnBridges")
			},
		},
		DestroyTokensFunc: &IALCBDestroyTokensFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.DestroyTokens")
			},
		},
		DistributeFunc: &IALCBDistributeFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.Distribute")
			},
		},
		FilterApprovalFunc: &IALCBFilterApprovalFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBApprovalIterator, error) {
				panic("unexpected invocation of MockIALCB.FilterApproval")
			},
		},
		FilterDepositReceivedFunc: &IALCBFilterDepositReceivedFunc{
			defaultHook: func(*bind.FilterOpts, []*big.Int, []uint8, []common.Address) (*bindings.ALCBDepositReceivedIterator, error) {
				panic("unexpected invocation of MockIALCB.FilterDepositReceived")
			},
		},
		FilterTransferFunc: &IALCBFilterTransferFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBTransferIterator, error) {
				panic("unexpected invocation of MockIALCB.FilterTransfer")
			},
		},
		GetCentralBridgeRouterAddressFunc: &IALCBGetCentralBridgeRouterAddressFunc{
			defaultHook: func(*bind.CallOpts) (common.Address, error) {
				panic("unexpected invocation of MockIALCB.GetCentralBridgeRouterAddress")
			},
		},
		GetDepositFunc: &IALCBGetDepositFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (bindings.Deposit, error) {
				panic("unexpected invocation of MockIALCB.GetDeposit")
			},
		},
		GetDepositIDFunc: &IALCBGetDepositIDFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.GetDepositID")
			},
		},
		GetEthFromTokensBurnFunc: &IALCBGetEthFromTokensBurnFunc{
			defaultHook: func(*bind.CallOpts, *big.Int, *big.Int, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.GetEthFromTokensBurn")
			},
		},
		GetEthToMintTokensFunc: &IALCBGetEthToMintTokensFunc{
			defaultHook: func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.GetEthToMintTokens")
			},
		},
		GetLatestEthFromTokensBurnFunc: &IALCBGetLatestEthFromTokensBurnFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.GetLatestEthFromTokensBurn")
			},
		},
		GetLatestEthToMintTokensFunc: &IALCBGetLatestEthToMintTokensFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.GetLatestEthToMintTokens")
			},
		},
		GetLatestMintedTokensFromEthFunc: &IALCBGetLatestMintedTokensFromEthFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.GetLatestMintedTokensFromEth")
			},
		},
		GetMarketSpreadFunc: &IALCBGetMarketSpreadFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.GetMarketSpread")
			},
		},
		GetMetamorphicContractAddressFunc: &IALCBGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
				panic("unexpected invocation of MockIALCB.GetMetamorphicContractAddress")
			},
		},
		GetMintedTokensFromEthFunc: &IALCBGetMintedTokensFromEthFunc{
			defaultHook: func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.GetMintedTokensFromEth")
			},
		},
		GetPoolBalanceFunc: &IALCBGetPoolBalanceFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.GetPoolBalance")
			},
		},
		GetTotalTokensDepositedFunc: &IALCBGetTotalTokensDepositedFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.GetTotalTokensDeposited")
			},
		},
		GetYieldFunc: &IALCBGetYieldFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.GetYield")
			},
		},
		IncreaseAllowanceFunc: &IALCBIncreaseAllowanceFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.IncreaseAllowance")
			},
		},
		MintFunc: &IALCBMintFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.Mint")
			},
		},
		MintDepositFunc: &IALCBMintDepositFunc{
			defaultHook: func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.MintDeposit")
			},
		},
		MintToFunc: &IALCBMintToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.MintTo")
			},
		},
		NameFunc: &IALCBNameFunc{
			defaultHook: func(*bind.CallOpts) (string, error) {
				panic("unexpected invocation of MockIALCB.Name")
			},
		},
		ParseApprovalFunc: &IALCBParseApprovalFunc{
			defaultHook: func(types.Log) (*bindings.ALCBApproval, error) {
				panic("unexpected invocation of MockIALCB.ParseApproval")
			},
		},
		ParseDepositReceivedFunc: &IALCBParseDepositReceivedFunc{
			defaultHook: func(types.Log) (*bindings.ALCBDepositReceived, error) {
				panic("unexpected invocation of MockIALCB.ParseDepositReceived")
			},
		},
		ParseTransferFunc: &IALCBParseTransferFunc{
			defaultHook: func(types.Log) (*bindings.ALCBTransfer, error) {
				panic("unexpected invocation of MockIALCB.ParseTransfer")
			},
		},
		SetAccountTypeFunc: &IALCBSetAccountTypeFunc{
			defaultHook: func(*bind.TransactOpts, uint8, bool) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.SetAccountType")
			},
		},
		SymbolFunc: &IALCBSymbolFunc{
			defaultHook: func(*bind.CallOpts) (string, error) {
				panic("unexpected invocation of MockIALCB.Symbol")
			},
		},
		TotalSupplyFunc: &IALCBTotalSupplyFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIALCB.TotalSupply")
			},
		},
		TransferFunc: &IALCBTransferFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.Transfer")
			},
		},
		TransferFromFunc: &IALCBTransferFromFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.TransferFrom")
			},
		},
		VirtualMintDepositFunc: &IALCBVirtualMintDepositFunc{
			defaultHook: func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIALCB.VirtualMintDeposit")
			},
		},
		WatchApprovalFunc: &IALCBWatchApprovalFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ALCBApproval, []common.Address, []common.Address) (event.Subscription, error) {
				panic("unexpected invocation of MockIALCB.WatchApproval")
			},
		},
		WatchDepositReceivedFunc: &IALCBWatchDepositReceivedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ALCBDepositReceived, []*big.Int, []uint8, []common.Address) (event.Subscription, error) {
				panic("unexpected invocation of MockIALCB.WatchDepositReceived")
			},
		},
		WatchTransferFunc: &IALCBWatchTransferFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ALCBTransfer, []common.Address, []common.Address) (event.Subscription, error) {
				panic("unexpected invocation of MockIALCB.WatchTransfer")
			},
		},
	}
}

// NewMockIALCBFrom creates a new mock of the MockIALCB interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockIALCBFrom(i bindings.IALCB) *MockIALCB {
	return &MockIALCB{
		AllowanceFunc: &IALCBAllowanceFunc{
			defaultHook: i.Allowance,
		},
		ApproveFunc: &IALCBApproveFunc{
			defaultHook: i.Approve,
		},
		BalanceOfFunc: &IALCBBalanceOfFunc{
			defaultHook: i.BalanceOf,
		},
		BurnFunc: &IALCBBurnFunc{
			defaultHook: i.Burn,
		},
		BurnToFunc: &IALCBBurnToFunc{
			defaultHook: i.BurnTo,
		},
		DecimalsFunc: &IALCBDecimalsFunc{
			defaultHook: i.Decimals,
		},
		DecreaseAllowanceFunc: &IALCBDecreaseAllowanceFunc{
			defaultHook: i.DecreaseAllowance,
		},
		DepositFunc: &IALCBDepositFunc{
			defaultHook: i.Deposit,
		},
		DepositTokensOnBridgesFunc: &IALCBDepositTokensOnBridgesFunc{
			defaultHook: i.DepositTokensOnBridges,
		},
		DestroyTokensFunc: &IALCBDestroyTokensFunc{
			defaultHook: i.DestroyTokens,
		},
		DistributeFunc: &IALCBDistributeFunc{
			defaultHook: i.Distribute,
		},
		FilterApprovalFunc: &IALCBFilterApprovalFunc{
			defaultHook: i.FilterApproval,
		},
		FilterDepositReceivedFunc: &IALCBFilterDepositReceivedFunc{
			defaultHook: i.FilterDepositReceived,
		},
		FilterTransferFunc: &IALCBFilterTransferFunc{
			defaultHook: i.FilterTransfer,
		},
		GetCentralBridgeRouterAddressFunc: &IALCBGetCentralBridgeRouterAddressFunc{
			defaultHook: i.GetCentralBridgeRouterAddress,
		},
		GetDepositFunc: &IALCBGetDepositFunc{
			defaultHook: i.GetDeposit,
		},
		GetDepositIDFunc: &IALCBGetDepositIDFunc{
			defaultHook: i.GetDepositID,
		},
		GetEthFromTokensBurnFunc: &IALCBGetEthFromTokensBurnFunc{
			defaultHook: i.GetEthFromTokensBurn,
		},
		GetEthToMintTokensFunc: &IALCBGetEthToMintTokensFunc{
			defaultHook: i.GetEthToMintTokens,
		},
		GetLatestEthFromTokensBurnFunc: &IALCBGetLatestEthFromTokensBurnFunc{
			defaultHook: i.GetLatestEthFromTokensBurn,
		},
		GetLatestEthToMintTokensFunc: &IALCBGetLatestEthToMintTokensFunc{
			defaultHook: i.GetLatestEthToMintTokens,
		},
		GetLatestMintedTokensFromEthFunc: &IALCBGetLatestMintedTokensFromEthFunc{
			defaultHook: i.GetLatestMintedTokensFromEth,
		},
		GetMarketSpreadFunc: &IALCBGetMarketSpreadFunc{
			defaultHook: i.GetMarketSpread,
		},
		GetMetamorphicContractAddressFunc: &IALCBGetMetamorphicContractAddressFunc{
			defaultHook: i.GetMetamorphicContractAddress,
		},
		GetMintedTokensFromEthFunc: &IALCBGetMintedTokensFromEthFunc{
			defaultHook: i.GetMintedTokensFromEth,
		},
		GetPoolBalanceFunc: &IALCBGetPoolBalanceFunc{
			defaultHook: i.GetPoolBalance,
		},
		GetTotalTokensDepositedFunc: &IALCBGetTotalTokensDepositedFunc{
			defaultHook: i.GetTotalTokensDeposited,
		},
		GetYieldFunc: &IALCBGetYieldFunc{
			defaultHook: i.GetYield,
		},
		IncreaseAllowanceFunc: &IALCBIncreaseAllowanceFunc{
			defaultHook: i.IncreaseAllowance,
		},
		MintFunc: &IALCBMintFunc{
			defaultHook: i.Mint,
		},
		MintDepositFunc: &IALCBMintDepositFunc{
			defaultHook: i.MintDeposit,
		},
		MintToFunc: &IALCBMintToFunc{
			defaultHook: i.MintTo,
		},
		NameFunc: &IALCBNameFunc{
			defaultHook: i.Name,
		},
		ParseApprovalFunc: &IALCBParseApprovalFunc{
			defaultHook: i.ParseApproval,
		},
		ParseDepositReceivedFunc: &IALCBParseDepositReceivedFunc{
			defaultHook: i.ParseDepositReceived,
		},
		ParseTransferFunc: &IALCBParseTransferFunc{
			defaultHook: i.ParseTransfer,
		},
		SetAccountTypeFunc: &IALCBSetAccountTypeFunc{
			defaultHook: i.SetAccountType,
		},
		SymbolFunc: &IALCBSymbolFunc{
			defaultHook: i.Symbol,
		},
		TotalSupplyFunc: &IALCBTotalSupplyFunc{
			defaultHook: i.TotalSupply,
		},
		TransferFunc: &IALCBTransferFunc{
			defaultHook: i.Transfer,
		},
		TransferFromFunc: &IALCBTransferFromFunc{
			defaultHook: i.TransferFrom,
		},
		VirtualMintDepositFunc: &IALCBVirtualMintDepositFunc{
			defaultHook: i.VirtualMintDeposit,
		},
		WatchApprovalFunc: &IALCBWatchApprovalFunc{
			defaultHook: i.WatchApproval,
		},
		WatchDepositReceivedFunc: &IALCBWatchDepositReceivedFunc{
			defaultHook: i.WatchDepositReceived,
		},
		WatchTransferFunc: &IALCBWatchTransferFunc{
			defaultHook: i.WatchTransfer,
		},
	}
}

// IALCBAllowanceFunc describes the behavior when the Allowance method of
// the parent MockIALCB instance is invoked.
type IALCBAllowanceFunc struct {
	defaultHook func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error)
	hooks       []func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error)
	history     []IALCBAllowanceFuncCall
	mutex       sync.Mutex
}

// Allowance delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCB) Allowance(v0 *bind.CallOpts, v1 common.Address, v2 common.Address) (*big.Int, error) {
	r0, r1 := m.AllowanceFunc.nextHook()(v0, v1, v2)
	m.AllowanceFunc.appendCall(IALCBAllowanceFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Allowance method of
// the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBAllowanceFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Allowance method of the parent MockIALCB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCBAllowanceFunc) PushHook(hook func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBAllowanceFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBAllowanceFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBAllowanceFunc) nextHook() func(*bind.CallOpts, common.Address, common.Address) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBAllowanceFunc) appendCall(r0 IALCBAllowanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBAllowanceFuncCall objects describing
// the invocations of this function.
func (f *IALCBAllowanceFunc) History() []IALCBAllowanceFuncCall {
	f.mutex.Lock()
	history := make([]IALCBAllowanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBAllowanceFuncCall is an object that describes an invocation of
// method Allowance on an instance of MockIALCB.
type IALCBAllowanceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBAllowanceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBAllowanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBApproveFunc describes the behavior when the Approve method of the
// parent MockIALCB instance is invoked.
type IALCBApproveFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCBApproveFuncCall
	mutex       sync.Mutex
}

// Approve delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCB) Approve(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.ApproveFunc.nextHook()(v0, v1, v2)
	m.ApproveFunc.appendCall(IALCBApproveFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Approve method of
// the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBApproveFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Approve method of the parent MockIALCB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCBApproveFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBApproveFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBApproveFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBApproveFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBApproveFunc) appendCall(r0 IALCBApproveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBApproveFuncCall objects describing the
// invocations of this function.
func (f *IALCBApproveFunc) History() []IALCBApproveFuncCall {
	f.mutex.Lock()
	history := make([]IALCBApproveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBApproveFuncCall is an object that describes an invocation of method
// Approve on an instance of MockIALCB.
type IALCBApproveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBApproveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBApproveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBBalanceOfFunc describes the behavior when the BalanceOf method of
// the parent MockIALCB instance is invoked.
type IALCBBalanceOfFunc struct {
	defaultHook func(*bind.CallOpts, common.Address) (*big.Int, error)
	hooks       []func(*bind.CallOpts, common.Address) (*big.Int, error)
	history     []IALCBBalanceOfFuncCall
	mutex       sync.Mutex
}

// BalanceOf delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCB) BalanceOf(v0 *bind.CallOpts, v1 common.Address) (*big.Int, error) {
	r0, r1 := m.BalanceOfFunc.nextHook()(v0, v1)
	m.BalanceOfFunc.appendCall(IALCBBalanceOfFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BalanceOf method of
// the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBBalanceOfFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BalanceOf method of the parent MockIALCB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCBBalanceOfFunc) PushHook(hook func(*bind.CallOpts, common.Address) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBBalanceOfFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBBalanceOfFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBBalanceOfFunc) nextHook() func(*bind.CallOpts, common.Address) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBBalanceOfFunc) appendCall(r0 IALCBBalanceOfFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBBalanceOfFuncCall objects describing
// the invocations of this function.
func (f *IALCBBalanceOfFunc) History() []IALCBBalanceOfFuncCall {
	f.mutex.Lock()
	history := make([]IALCBBalanceOfFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBBalanceOfFuncCall is an object that describes an invocation of
// method BalanceOf on an instance of MockIALCB.
type IALCBBalanceOfFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBBalanceOfFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBBalanceOfFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBBurnFunc describes the behavior when the Burn method of the parent
// MockIALCB instance is invoked.
type IALCBBurnFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)
	history     []IALCBBurnFuncCall
	mutex       sync.Mutex
}

// Burn delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCB) Burn(v0 *bind.TransactOpts, v1 *big.Int, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.BurnFunc.nextHook()(v0, v1, v2)
	m.BurnFunc.appendCall(IALCBBurnFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Burn method of the
// parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBBurnFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Burn method of the parent MockIALCB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCBBurnFunc) PushHook(hook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBBurnFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBBurnFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBBurnFunc) nextHook() func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBBurnFunc) appendCall(r0 IALCBBurnFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBBurnFuncCall objects describing the
// invocations of this function.
func (f *IALCBBurnFunc) History() []IALCBBurnFuncCall {
	f.mutex.Lock()
	history := make([]IALCBBurnFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBBurnFuncCall is an object that describes an invocation of method
// Burn on an instance of MockIALCB.
type IALCBBurnFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBBurnFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBBurnFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBBurnToFunc describes the behavior when the BurnTo method of the
// parent MockIALCB instance is invoked.
type IALCBBurnToFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)
	history     []IALCBBurnToFuncCall
	mutex       sync.Mutex
}

// BurnTo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCB) BurnTo(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.BurnToFunc.nextHook()(v0, v1, v2, v3)
	m.BurnToFunc.appendCall(IALCBBurnToFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BurnTo method of the
// parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBBurnToFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BurnTo method of the parent MockIALCB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCBBurnToFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBBurnToFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBBurnToFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBBurnToFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBBurnToFunc) appendCall(r0 IALCBBurnToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBBurnToFuncCall objects describing the
// invocations of this function.
func (f *IALCBBurnToFunc) History() []IALCBBurnToFuncCall {
	f.mutex.Lock()
	history := make([]IALCBBurnToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBBurnToFuncCall is an object that describes an invocation of method
// BurnTo on an instance of MockIALCB.
type IALCBBurnToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBBurnToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBBurnToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBDecimalsFunc describes the behavior when the Decimals method of the
// parent MockIALCB instance is invoked.
type IALCBDecimalsFunc struct {
	defaultHook func(*bind.CallOpts) (uint8, error)
	hooks       []func(*bind.CallOpts) (uint8, error)
	history     []IALCBDecimalsFuncCall
	mutex       sync.Mutex
}

// Decimals delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCB) Decimals(v0 *bind.CallOpts) (uint8, error) {
	r0, r1 := m.DecimalsFunc.nextHook()(v0)
	m.DecimalsFunc.appendCall(IALCBDecimalsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Decimals method of
// the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBDecimalsFunc) SetDefaultHook(hook func(*bind.CallOpts) (uint8, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Decimals method of the parent MockIALCB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCBDecimalsFunc) PushHook(hook func(*bind.CallOpts) (uint8, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBDecimalsFunc) SetDefaultReturn(r0 uint8, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (uint8, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBDecimalsFunc) PushReturn(r0 uint8, r1 error) {
	f.PushHook(func(*bind.CallOpts) (uint8, error) {
		return r0, r1
	})
}

func (f *IALCBDecimalsFunc) nextHook() func(*bind.CallOpts) (uint8, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBDecimalsFunc) appendCall(r0 IALCBDecimalsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBDecimalsFuncCall objects describing
// the invocations of this function.
func (f *IALCBDecimalsFunc) History() []IALCBDecimalsFuncCall {
	f.mutex.Lock()
	history := make([]IALCBDecimalsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBDecimalsFuncCall is an object that describes an invocation of method
// Decimals on an instance of MockIALCB.
type IALCBDecimalsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint8
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBDecimalsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBDecimalsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBDecreaseAllowanceFunc describes the behavior when the
// DecreaseAllowance method of the parent MockIALCB instance is invoked.
type IALCBDecreaseAllowanceFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCBDecreaseAllowanceFuncCall
	mutex       sync.Mutex
}

// DecreaseAllowance delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCB) DecreaseAllowance(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.DecreaseAllowanceFunc.nextHook()(v0, v1, v2)
	m.DecreaseAllowanceFunc.appendCall(IALCBDecreaseAllowanceFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DecreaseAllowance
// method of the parent MockIALCB instance is invoked and the hook queue is
// empty.
func (f *IALCBDecreaseAllowanceFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DecreaseAllowance method of the parent MockIALCB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IALCBDecreaseAllowanceFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBDecreaseAllowanceFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBDecreaseAllowanceFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBDecreaseAllowanceFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBDecreaseAllowanceFunc) appendCall(r0 IALCBDecreaseAllowanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBDecreaseAllowanceFuncCall objects
// describing the invocations of this function.
func (f *IALCBDecreaseAllowanceFunc) History() []IALCBDecreaseAllowanceFuncCall {
	f.mutex.Lock()
	history := make([]IALCBDecreaseAllowanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBDecreaseAllowanceFuncCall is an object that describes an invocation
// of method DecreaseAllowance on an instance of MockIALCB.
type IALCBDecreaseAllowanceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBDecreaseAllowanceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBDecreaseAllowanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBDepositFunc describes the behavior when the Deposit method of the
// parent MockIALCB instance is invoked.
type IALCBDepositFunc struct {
	defaultHook func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCBDepositFuncCall
	mutex       sync.Mutex
}

// Deposit delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCB) Deposit(v0 *bind.TransactOpts, v1 uint8, v2 common.Address, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.DepositFunc.nextHook()(v0, v1, v2, v3)
	m.DepositFunc.appendCall(IALCBDepositFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Deposit method of
// the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBDepositFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Deposit method of the parent MockIALCB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCBDepositFunc) PushHook(hook func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBDepositFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBDepositFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBDepositFunc) nextHook() func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBDepositFunc) appendCall(r0 IALCBDepositFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBDepositFuncCall objects describing the
// invocations of this function.
func (f *IALCBDepositFunc) History() []IALCBDepositFuncCall {
	f.mutex.Lock()
	history := make([]IALCBDepositFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBDepositFuncCall is an object that describes an invocation of method
// Deposit on an instance of MockIALCB.
type IALCBDepositFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint8
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBDepositFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBDepositFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBDepositTokensOnBridgesFunc describes the behavior when the
// DepositTokensOnBridges method of the parent MockIALCB instance is
// invoked.
type IALCBDepositTokensOnBridgesFunc struct {
	defaultHook func(*bind.TransactOpts, uint8, []byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint8, []byte) (*types.Transaction, error)
	history     []IALCBDepositTokensOnBridgesFuncCall
	mutex       sync.Mutex
}

// DepositTokensOnBridges delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIALCB) DepositTokensOnBridges(v0 *bind.TransactOpts, v1 uint8, v2 []byte) (*types.Transaction, error) {
	r0, r1 := m.DepositTokensOnBridgesFunc.nextHook()(v0, v1, v2)
	m.DepositTokensOnBridgesFunc.appendCall(IALCBDepositTokensOnBridgesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// DepositTokensOnBridges method of the parent MockIALCB instance is invoked
// and the hook queue is empty.
func (f *IALCBDepositTokensOnBridgesFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint8, []byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DepositTokensOnBridges method of the parent MockIALCB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IALCBDepositTokensOnBridgesFunc) PushHook(hook func(*bind.TransactOpts, uint8, []byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBDepositTokensOnBridgesFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint8, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBDepositTokensOnBridgesFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint8, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBDepositTokensOnBridgesFunc) nextHook() func(*bind.TransactOpts, uint8, []byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBDepositTokensOnBridgesFunc) appendCall(r0 IALCBDepositTokensOnBridgesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBDepositTokensOnBridgesFuncCall objects
// describing the invocations of this function.
func (f *IALCBDepositTokensOnBridgesFunc) History() []IALCBDepositTokensOnBridgesFuncCall {
	f.mutex.Lock()
	history := make([]IALCBDepositTokensOnBridgesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBDepositTokensOnBridgesFuncCall is an object that describes an
// invocation of method DepositTokensOnBridges on an instance of MockIALCB.
type IALCBDepositTokensOnBridgesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint8
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBDepositTokensOnBridgesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBDepositTokensOnBridgesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBDestroyTokensFunc describes the behavior when the DestroyTokens
// method of the parent MockIALCB instance is invoked.
type IALCBDestroyTokensFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IALCBDestroyTokensFuncCall
	mutex       sync.Mutex
}

// DestroyTokens delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCB) DestroyTokens(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.DestroyTokensFunc.nextHook()(v0, v1)
	m.DestroyTokensFunc.appendCall(IALCBDestroyTokensFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DestroyTokens method
// of the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBDestroyTokensFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DestroyTokens method of the parent MockIALCB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBDestroyTokensFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBDestroyTokensFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBDestroyTokensFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBDestroyTokensFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBDestroyTokensFunc) appendCall(r0 IALCBDestroyTokensFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBDestroyTokensFuncCall objects
// describing the invocations of this function.
func (f *IALCBDestroyTokensFunc) History() []IALCBDestroyTokensFuncCall {
	f.mutex.Lock()
	history := make([]IALCBDestroyTokensFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBDestroyTokensFuncCall is an object that describes an invocation of
// method DestroyTokens on an instance of MockIALCB.
type IALCBDestroyTokensFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBDestroyTokensFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBDestroyTokensFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBDistributeFunc describes the behavior when the Distribute method of
// the parent MockIALCB instance is invoked.
type IALCBDistributeFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IALCBDistributeFuncCall
	mutex       sync.Mutex
}

// Distribute delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCB) Distribute(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.DistributeFunc.nextHook()(v0)
	m.DistributeFunc.appendCall(IALCBDistributeFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Distribute method of
// the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBDistributeFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Distribute method of the parent MockIALCB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBDistributeFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBDistributeFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBDistributeFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBDistributeFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBDistributeFunc) appendCall(r0 IALCBDistributeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBDistributeFuncCall objects describing
// the invocations of this function.
func (f *IALCBDistributeFunc) History() []IALCBDistributeFuncCall {
	f.mutex.Lock()
	history := make([]IALCBDistributeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBDistributeFuncCall is an object that describes an invocation of
// method Distribute on an instance of MockIALCB.
type IALCBDistributeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBDistributeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBDistributeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBFilterApprovalFunc describes the behavior when the FilterApproval
// method of the parent MockIALCB instance is invoked.
type IALCBFilterApprovalFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBApprovalIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBApprovalIterator, error)
	history     []IALCBFilterApprovalFuncCall
	mutex       sync.Mutex
}

// FilterApproval delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCB) FilterApproval(v0 *bind.FilterOpts, v1 []common.Address, v2 []common.Address) (*bindings.ALCBApprovalIterator, error) {
	r0, r1 := m.FilterApprovalFunc.nextHook()(v0, v1, v2)
	m.FilterApprovalFunc.appendCall(IALCBFilterApprovalFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterApproval
// method of the parent MockIALCB instance is invoked and the hook queue is
// empty.
func (f *IALCBFilterApprovalFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBApprovalIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterApproval method of the parent MockIALCB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBFilterApprovalFunc) PushHook(hook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBApprovalIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBFilterApprovalFunc) SetDefaultReturn(r0 *bindings.ALCBApprovalIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBApprovalIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBFilterApprovalFunc) PushReturn(r0 *bindings.ALCBApprovalIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBApprovalIterator, error) {
		return r0, r1
	})
}

func (f *IALCBFilterApprovalFunc) nextHook() func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBApprovalIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBFilterApprovalFunc) appendCall(r0 IALCBFilterApprovalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBFilterApprovalFuncCall objects
// describing the invocations of this function.
func (f *IALCBFilterApprovalFunc) History() []IALCBFilterApprovalFuncCall {
	f.mutex.Lock()
	history := make([]IALCBFilterApprovalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBFilterApprovalFuncCall is an object that describes an invocation of
// method FilterApproval on an instance of MockIALCB.
type IALCBFilterApprovalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ALCBApprovalIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBFilterApprovalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBFilterApprovalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBFilterDepositReceivedFunc describes the behavior when the
// FilterDepositReceived method of the parent MockIALCB instance is invoked.
type IALCBFilterDepositReceivedFunc struct {
	defaultHook func(*bind.FilterOpts, []*big.Int, []uint8, []common.Address) (*bindings.ALCBDepositReceivedIterator, error)
	hooks       []func(*bind.FilterOpts, []*big.Int, []uint8, []common.Address) (*bindings.ALCBDepositReceivedIterator, error)
	history     []IALCBFilterDepositReceivedFuncCall
	mutex       sync.Mutex
}

// FilterDepositReceived delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIALCB) FilterDepositReceived(v0 *bind.FilterOpts, v1 []*big.Int, v2 []uint8, v3 []common.Address) (*bindings.ALCBDepositReceivedIterator, error) {
	r0, r1 := m.FilterDepositReceivedFunc.nextHook()(v0, v1, v2, v3)
	m.FilterDepositReceivedFunc.appendCall(IALCBFilterDepositReceivedFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterDepositReceived method of the parent MockIALCB instance is invoked
// and the hook queue is empty.
func (f *IALCBFilterDepositReceivedFunc) SetDefaultHook(hook func(*bind.FilterOpts, []*big.Int, []uint8, []common.Address) (*bindings.ALCBDepositReceivedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterDepositReceived method of the parent MockIALCB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IALCBFilterDepositReceivedFunc) PushHook(hook func(*bind.FilterOpts, []*big.Int, []uint8, []common.Address) (*bindings.ALCBDepositReceivedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBFilterDepositReceivedFunc) SetDefaultReturn(r0 *bindings.ALCBDepositReceivedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []*big.Int, []uint8, []common.Address) (*bindings.ALCBDepositReceivedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBFilterDepositReceivedFunc) PushReturn(r0 *bindings.ALCBDepositReceivedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []*big.Int, []uint8, []common.Address) (*bindings.ALCBDepositReceivedIterator, error) {
		return r0, r1
	})
}

func (f *IALCBFilterDepositReceivedFunc) nextHook() func(*bind.FilterOpts, []*big.Int, []uint8, []common.Address) (*bindings.ALCBDepositReceivedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBFilterDepositReceivedFunc) appendCall(r0 IALCBFilterDepositReceivedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBFilterDepositReceivedFuncCall objects
// describing the invocations of this function.
func (f *IALCBFilterDepositReceivedFunc) History() []IALCBFilterDepositReceivedFuncCall {
	f.mutex.Lock()
	history := make([]IALCBFilterDepositReceivedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBFilterDepositReceivedFuncCall is an object that describes an
// invocation of method FilterDepositReceived on an instance of MockIALCB.
type IALCBFilterDepositReceivedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []uint8
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ALCBDepositReceivedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBFilterDepositReceivedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBFilterDepositReceivedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBFilterTransferFunc describes the behavior when the FilterTransfer
// method of the parent MockIALCB instance is invoked.
type IALCBFilterTransferFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBTransferIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBTransferIterator, error)
	history     []IALCBFilterTransferFuncCall
	mutex       sync.Mutex
}

// FilterTransfer delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCB) FilterTransfer(v0 *bind.FilterOpts, v1 []common.Address, v2 []common.Address) (*bindings.ALCBTransferIterator, error) {
	r0, r1 := m.FilterTransferFunc.nextHook()(v0, v1, v2)
	m.FilterTransferFunc.appendCall(IALCBFilterTransferFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterTransfer
// method of the parent MockIALCB instance is invoked and the hook queue is
// empty.
func (f *IALCBFilterTransferFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBTransferIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterTransfer method of the parent MockIALCB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBFilterTransferFunc) PushHook(hook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBTransferIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBFilterTransferFunc) SetDefaultReturn(r0 *bindings.ALCBTransferIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBTransferIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBFilterTransferFunc) PushReturn(r0 *bindings.ALCBTransferIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBTransferIterator, error) {
		return r0, r1
	})
}

func (f *IALCBFilterTransferFunc) nextHook() func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ALCBTransferIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBFilterTransferFunc) appendCall(r0 IALCBFilterTransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBFilterTransferFuncCall objects
// describing the invocations of this function.
func (f *IALCBFilterTransferFunc) History() []IALCBFilterTransferFuncCall {
	f.mutex.Lock()
	history := make([]IALCBFilterTransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBFilterTransferFuncCall is an object that describes an invocation of
// method FilterTransfer on an instance of MockIALCB.
type IALCBFilterTransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ALCBTransferIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBFilterTransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBFilterTransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetCentralBridgeRouterAddressFunc describes the behavior when the
// GetCentralBridgeRouterAddress method of the parent MockIALCB instance is
// invoked.
type IALCBGetCentralBridgeRouterAddressFunc struct {
	defaultHook func(*bind.CallOpts) (common.Address, error)
	hooks       []func(*bind.CallOpts) (common.Address, error)
	history     []IALCBGetCentralBridgeRouterAddressFuncCall
	mutex       sync.Mutex
}

// GetCentralBridgeRouterAddress delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIALCB) GetCentralBridgeRouterAddress(v0 *bind.CallOpts) (common.Address, error) {
	r0, r1 := m.GetCentralBridgeRouterAddressFunc.nextHook()(v0)
	m.GetCentralBridgeRouterAddressFunc.appendCall(IALCBGetCentralBridgeRouterAddressFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetCentralBridgeRouterAddress method of the parent MockIALCB instance is
// invoked and the hook queue is empty.
func (f *IALCBGetCentralBridgeRouterAddressFunc) SetDefaultHook(hook func(*bind.CallOpts) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCentralBridgeRouterAddress method of the parent MockIALCB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IALCBGetCentralBridgeRouterAddressFunc) PushHook(hook func(*bind.CallOpts) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetCentralBridgeRouterAddressFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetCentralBridgeRouterAddressFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts) (common.Address, error) {
		return r0, r1
	})
}

func (f *IALCBGetCentralBridgeRouterAddressFunc) nextHook() func(*bind.CallOpts) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetCentralBridgeRouterAddressFunc) appendCall(r0 IALCBGetCentralBridgeRouterAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetCentralBridgeRouterAddressFuncCall
// objects describing the invocations of this function.
func (f *IALCBGetCentralBridgeRouterAddressFunc) History() []IALCBGetCentralBridgeRouterAddressFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetCentralBridgeRouterAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetCentralBridgeRouterAddressFuncCall is an object that describes an
// invocation of method GetCentralBridgeRouterAddress on an instance of
// MockIALCB.
type IALCBGetCentralBridgeRouterAddressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetCentralBridgeRouterAddressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetCentralBridgeRouterAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetDepositFunc describes the behavior when the GetDeposit method of
// the parent MockIALCB instance is invoked.
type IALCBGetDepositFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (bindings.Deposit, error)
	hooks       []func(*bind.CallOpts, *big.Int) (bindings.Deposit, error)
	history     []IALCBGetDepositFuncCall
	mutex       sync.Mutex
}

// GetDeposit delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCB) GetDeposit(v0 *bind.CallOpts, v1 *big.Int) (bindings.Deposit, error) {
	r0, r1 := m.GetDepositFunc.nextHook()(v0, v1)
	m.GetDepositFunc.appendCall(IALCBGetDepositFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDeposit method of
// the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBGetDepositFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (bindings.Deposit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDeposit method of the parent MockIALCB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBGetDepositFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (bindings.Deposit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetDepositFunc) SetDefaultReturn(r0 bindings.Deposit, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (bindings.Deposit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetDepositFunc) PushReturn(r0 bindings.Deposit, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (bindings.Deposit, error) {
		return r0, r1
	})
}

func (f *IALCBGetDepositFunc) nextHook() func(*bind.CallOpts, *big.Int) (bindings.Deposit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetDepositFunc) appendCall(r0 IALCBGetDepositFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetDepositFuncCall objects describing
// the invocations of this function.
func (f *IALCBGetDepositFunc) History() []IALCBGetDepositFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetDepositFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetDepositFuncCall is an object that describes an invocation of
// method GetDeposit on an instance of MockIALCB.
type IALCBGetDepositFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.Deposit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetDepositFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetDepositFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetDepositIDFunc describes the behavior when the GetDepositID method
// of the parent MockIALCB instance is invoked.
type IALCBGetDepositIDFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IALCBGetDepositIDFuncCall
	mutex       sync.Mutex
}

// GetDepositID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCB) GetDepositID(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetDepositIDFunc.nextHook()(v0)
	m.GetDepositIDFunc.appendCall(IALCBGetDepositIDFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDepositID method
// of the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBGetDepositIDFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDepositID method of the parent MockIALCB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBGetDepositIDFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetDepositIDFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetDepositIDFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBGetDepositIDFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetDepositIDFunc) appendCall(r0 IALCBGetDepositIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetDepositIDFuncCall objects
// describing the invocations of this function.
func (f *IALCBGetDepositIDFunc) History() []IALCBGetDepositIDFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetDepositIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetDepositIDFuncCall is an object that describes an invocation of
// method GetDepositID on an instance of MockIALCB.
type IALCBGetDepositIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetDepositIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetDepositIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetEthFromTokensBurnFunc describes the behavior when the
// GetEthFromTokensBurn method of the parent MockIALCB instance is invoked.
type IALCBGetEthFromTokensBurnFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int, *big.Int, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int, *big.Int, *big.Int) (*big.Int, error)
	history     []IALCBGetEthFromTokensBurnFuncCall
	mutex       sync.Mutex
}

// GetEthFromTokensBurn delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCB) GetEthFromTokensBurn(v0 *bind.CallOpts, v1 *big.Int, v2 *big.Int, v3 *big.Int) (*big.Int, error) {
	r0, r1 := m.GetEthFromTokensBurnFunc.nextHook()(v0, v1, v2, v3)
	m.GetEthFromTokensBurnFunc.appendCall(IALCBGetEthFromTokensBurnFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetEthFromTokensBurn
// method of the parent MockIALCB instance is invoked and the hook queue is
// empty.
func (f *IALCBGetEthFromTokensBurnFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int, *big.Int, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEthFromTokensBurn method of the parent MockIALCB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IALCBGetEthFromTokensBurnFunc) PushHook(hook func(*bind.CallOpts, *big.Int, *big.Int, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetEthFromTokensBurnFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int, *big.Int, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetEthFromTokensBurnFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int, *big.Int, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBGetEthFromTokensBurnFunc) nextHook() func(*bind.CallOpts, *big.Int, *big.Int, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetEthFromTokensBurnFunc) appendCall(r0 IALCBGetEthFromTokensBurnFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetEthFromTokensBurnFuncCall objects
// describing the invocations of this function.
func (f *IALCBGetEthFromTokensBurnFunc) History() []IALCBGetEthFromTokensBurnFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetEthFromTokensBurnFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetEthFromTokensBurnFuncCall is an object that describes an
// invocation of method GetEthFromTokensBurn on an instance of MockIALCB.
type IALCBGetEthFromTokensBurnFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetEthFromTokensBurnFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetEthFromTokensBurnFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetEthToMintTokensFunc describes the behavior when the
// GetEthToMintTokens method of the parent MockIALCB instance is invoked.
type IALCBGetEthToMintTokensFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error)
	history     []IALCBGetEthToMintTokensFuncCall
	mutex       sync.Mutex
}

// GetEthToMintTokens delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCB) GetEthToMintTokens(v0 *bind.CallOpts, v1 *big.Int, v2 *big.Int) (*big.Int, error) {
	r0, r1 := m.GetEthToMintTokensFunc.nextHook()(v0, v1, v2)
	m.GetEthToMintTokensFunc.appendCall(IALCBGetEthToMintTokensFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetEthToMintTokens
// method of the parent MockIALCB instance is invoked and the hook queue is
// empty.
func (f *IALCBGetEthToMintTokensFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEthToMintTokens method of the parent MockIALCB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IALCBGetEthToMintTokensFunc) PushHook(hook func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetEthToMintTokensFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetEthToMintTokensFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBGetEthToMintTokensFunc) nextHook() func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetEthToMintTokensFunc) appendCall(r0 IALCBGetEthToMintTokensFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetEthToMintTokensFuncCall objects
// describing the invocations of this function.
func (f *IALCBGetEthToMintTokensFunc) History() []IALCBGetEthToMintTokensFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetEthToMintTokensFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetEthToMintTokensFuncCall is an object that describes an invocation
// of method GetEthToMintTokens on an instance of MockIALCB.
type IALCBGetEthToMintTokensFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetEthToMintTokensFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetEthToMintTokensFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetLatestEthFromTokensBurnFunc describes the behavior when the
// GetLatestEthFromTokensBurn method of the parent MockIALCB instance is
// invoked.
type IALCBGetLatestEthFromTokensBurnFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []IALCBGetLatestEthFromTokensBurnFuncCall
	mutex       sync.Mutex
}

// GetLatestEthFromTokensBurn delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIALCB) GetLatestEthFromTokensBurn(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.GetLatestEthFromTokensBurnFunc.nextHook()(v0, v1)
	m.GetLatestEthFromTokensBurnFunc.appendCall(IALCBGetLatestEthFromTokensBurnFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLatestEthFromTokensBurn method of the parent MockIALCB instance is
// invoked and the hook queue is empty.
func (f *IALCBGetLatestEthFromTokensBurnFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestEthFromTokensBurn method of the parent MockIALCB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IALCBGetLatestEthFromTokensBurnFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetLatestEthFromTokensBurnFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetLatestEthFromTokensBurnFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBGetLatestEthFromTokensBurnFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetLatestEthFromTokensBurnFunc) appendCall(r0 IALCBGetLatestEthFromTokensBurnFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetLatestEthFromTokensBurnFuncCall
// objects describing the invocations of this function.
func (f *IALCBGetLatestEthFromTokensBurnFunc) History() []IALCBGetLatestEthFromTokensBurnFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetLatestEthFromTokensBurnFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetLatestEthFromTokensBurnFuncCall is an object that describes an
// invocation of method GetLatestEthFromTokensBurn on an instance of
// MockIALCB.
type IALCBGetLatestEthFromTokensBurnFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetLatestEthFromTokensBurnFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetLatestEthFromTokensBurnFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetLatestEthToMintTokensFunc describes the behavior when the
// GetLatestEthToMintTokens method of the parent MockIALCB instance is
// invoked.
type IALCBGetLatestEthToMintTokensFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []IALCBGetLatestEthToMintTokensFuncCall
	mutex       sync.Mutex
}

// GetLatestEthToMintTokens delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIALCB) GetLatestEthToMintTokens(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.GetLatestEthToMintTokensFunc.nextHook()(v0, v1)
	m.GetLatestEthToMintTokensFunc.appendCall(IALCBGetLatestEthToMintTokensFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLatestEthToMintTokens method of the parent MockIALCB instance is
// invoked and the hook queue is empty.
func (f *IALCBGetLatestEthToMintTokensFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestEthToMintTokens method of the parent MockIALCB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IALCBGetLatestEthToMintTokensFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetLatestEthToMintTokensFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetLatestEthToMintTokensFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBGetLatestEthToMintTokensFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetLatestEthToMintTokensFunc) appendCall(r0 IALCBGetLatestEthToMintTokensFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetLatestEthToMintTokensFuncCall
// objects describing the invocations of this function.
func (f *IALCBGetLatestEthToMintTokensFunc) History() []IALCBGetLatestEthToMintTokensFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetLatestEthToMintTokensFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetLatestEthToMintTokensFuncCall is an object that describes an
// invocation of method GetLatestEthToMintTokens on an instance of
// MockIALCB.
type IALCBGetLatestEthToMintTokensFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetLatestEthToMintTokensFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetLatestEthToMintTokensFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetLatestMintedTokensFromEthFunc describes the behavior when the
// GetLatestMintedTokensFromEth method of the parent MockIALCB instance is
// invoked.
type IALCBGetLatestMintedTokensFromEthFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []IALCBGetLatestMintedTokensFromEthFuncCall
	mutex       sync.Mutex
}

// GetLatestMintedTokensFromEth delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIALCB) GetLatestMintedTokensFromEth(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.GetLatestMintedTokensFromEthFunc.nextHook()(v0, v1)
	m.GetLatestMintedTokensFromEthFunc.appendCall(IALCBGetLatestMintedTokensFromEthFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLatestMintedTokensFromEth method of the parent MockIALCB instance is
// invoked and the hook queue is empty.
func (f *IALCBGetLatestMintedTokensFromEthFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestMintedTokensFromEth method of the parent MockIALCB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IALCBGetLatestMintedTokensFromEthFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetLatestMintedTokensFromEthFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetLatestMintedTokensFromEthFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBGetLatestMintedTokensFromEthFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetLatestMintedTokensFromEthFunc) appendCall(r0 IALCBGetLatestMintedTokensFromEthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetLatestMintedTokensFromEthFuncCall
// objects describing the invocations of this function.
func (f *IALCBGetLatestMintedTokensFromEthFunc) History() []IALCBGetLatestMintedTokensFromEthFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetLatestMintedTokensFromEthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetLatestMintedTokensFromEthFuncCall is an object that describes an
// invocation of method GetLatestMintedTokensFromEth on an instance of
// MockIALCB.
type IALCBGetLatestMintedTokensFromEthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetLatestMintedTokensFromEthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetLatestMintedTokensFromEthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetMarketSpreadFunc describes the behavior when the GetMarketSpread
// method of the parent MockIALCB instance is invoked.
type IALCBGetMarketSpreadFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IALCBGetMarketSpreadFuncCall
	mutex       sync.Mutex
}

// GetMarketSpread delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCB) GetMarketSpread(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetMarketSpreadFunc.nextHook()(v0)
	m.GetMarketSpreadFunc.appendCall(IALCBGetMarketSpreadFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetMarketSpread
// method of the parent MockIALCB instance is invoked and the hook queue is
// empty.
func (f *IALCBGetMarketSpreadFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMarketSpread method of the parent MockIALCB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBGetMarketSpreadFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetMarketSpreadFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetMarketSpreadFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBGetMarketSpreadFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetMarketSpreadFunc) appendCall(r0 IALCBGetMarketSpreadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetMarketSpreadFuncCall objects
// describing the invocations of this function.
func (f *IALCBGetMarketSpreadFunc) History() []IALCBGetMarketSpreadFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetMarketSpreadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetMarketSpreadFuncCall is an object that describes an invocation of
// method GetMarketSpread on an instance of MockIALCB.
type IALCBGetMarketSpreadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetMarketSpreadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetMarketSpreadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetMetamorphicContractAddressFunc describes the behavior when the
// GetMetamorphicContractAddress method of the parent MockIALCB instance is
// invoked.
type IALCBGetMetamorphicContractAddressFunc struct {
	defaultHook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	hooks       []func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	history     []IALCBGetMetamorphicContractAddressFuncCall
	mutex       sync.Mutex
}

// GetMetamorphicContractAddress delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIALCB) GetMetamorphicContractAddress(v0 *bind.CallOpts, v1 [32]byte, v2 common.Address) (common.Address, error) {
	r0, r1 := m.GetMetamorphicContractAddressFunc.nextHook()(v0, v1, v2)
	m.GetMetamorphicContractAddressFunc.appendCall(IALCBGetMetamorphicContractAddressFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMetamorphicContractAddress method of the parent MockIALCB instance is
// invoked and the hook queue is empty.
func (f *IALCBGetMetamorphicContractAddressFunc) SetDefaultHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMetamorphicContractAddress method of the parent MockIALCB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IALCBGetMetamorphicContractAddressFunc) PushHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetMetamorphicContractAddressFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetMetamorphicContractAddressFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

func (f *IALCBGetMetamorphicContractAddressFunc) nextHook() func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetMetamorphicContractAddressFunc) appendCall(r0 IALCBGetMetamorphicContractAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetMetamorphicContractAddressFuncCall
// objects describing the invocations of this function.
func (f *IALCBGetMetamorphicContractAddressFunc) History() []IALCBGetMetamorphicContractAddressFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetMetamorphicContractAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetMetamorphicContractAddressFuncCall is an object that describes an
// invocation of method GetMetamorphicContractAddress on an instance of
// MockIALCB.
type IALCBGetMetamorphicContractAddressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetMetamorphicContractAddressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetMetamorphicContractAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetMintedTokensFromEthFunc describes the behavior when the
// GetMintedTokensFromEth method of the parent MockIALCB instance is
// invoked.
type IALCBGetMintedTokensFromEthFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error)
	history     []IALCBGetMintedTokensFromEthFuncCall
	mutex       sync.Mutex
}

// GetMintedTokensFromEth delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIALCB) GetMintedTokensFromEth(v0 *bind.CallOpts, v1 *big.Int, v2 *big.Int) (*big.Int, error) {
	r0, r1 := m.GetMintedTokensFromEthFunc.nextHook()(v0, v1, v2)
	m.GetMintedTokensFromEthFunc.appendCall(IALCBGetMintedTokensFromEthFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMintedTokensFromEth method of the parent MockIALCB instance is invoked
// and the hook queue is empty.
func (f *IALCBGetMintedTokensFromEthFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMintedTokensFromEth method of the parent MockIALCB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IALCBGetMintedTokensFromEthFunc) PushHook(hook func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetMintedTokensFromEthFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetMintedTokensFromEthFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBGetMintedTokensFromEthFunc) nextHook() func(*bind.CallOpts, *big.Int, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetMintedTokensFromEthFunc) appendCall(r0 IALCBGetMintedTokensFromEthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetMintedTokensFromEthFuncCall objects
// describing the invocations of this function.
func (f *IALCBGetMintedTokensFromEthFunc) History() []IALCBGetMintedTokensFromEthFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetMintedTokensFromEthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetMintedTokensFromEthFuncCall is an object that describes an
// invocation of method GetMintedTokensFromEth on an instance of MockIALCB.
type IALCBGetMintedTokensFromEthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetMintedTokensFromEthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetMintedTokensFromEthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetPoolBalanceFunc describes the behavior when the GetPoolBalance
// method of the parent MockIALCB instance is invoked.
type IALCBGetPoolBalanceFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IALCBGetPoolBalanceFuncCall
	mutex       sync.Mutex
}

// GetPoolBalance delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCB) GetPoolBalance(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetPoolBalanceFunc.nextHook()(v0)
	m.GetPoolBalanceFunc.appendCall(IALCBGetPoolBalanceFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPoolBalance
// method of the parent MockIALCB instance is invoked and the hook queue is
// empty.
func (f *IALCBGetPoolBalanceFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPoolBalance method of the parent MockIALCB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBGetPoolBalanceFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetPoolBalanceFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetPoolBalanceFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBGetPoolBalanceFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetPoolBalanceFunc) appendCall(r0 IALCBGetPoolBalanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetPoolBalanceFuncCall objects
// describing the invocations of this function.
func (f *IALCBGetPoolBalanceFunc) History() []IALCBGetPoolBalanceFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetPoolBalanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetPoolBalanceFuncCall is an object that describes an invocation of
// method GetPoolBalance on an instance of MockIALCB.
type IALCBGetPoolBalanceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetPoolBalanceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetPoolBalanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetTotalTokensDepositedFunc describes the behavior when the
// GetTotalTokensDeposited method of the parent MockIALCB instance is
// invoked.
type IALCBGetTotalTokensDepositedFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IALCBGetTotalTokensDepositedFuncCall
	mutex       sync.Mutex
}

// GetTotalTokensDeposited delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIALCB) GetTotalTokensDeposited(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetTotalTokensDepositedFunc.nextHook()(v0)
	m.GetTotalTokensDepositedFunc.appendCall(IALCBGetTotalTokensDepositedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetTotalTokensDeposited method of the parent MockIALCB instance is
// invoked and the hook queue is empty.
func (f *IALCBGetTotalTokensDepositedFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTotalTokensDeposited method of the parent MockIALCB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IALCBGetTotalTokensDepositedFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetTotalTokensDepositedFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetTotalTokensDepositedFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBGetTotalTokensDepositedFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetTotalTokensDepositedFunc) appendCall(r0 IALCBGetTotalTokensDepositedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetTotalTokensDepositedFuncCall
// objects describing the invocations of this function.
func (f *IALCBGetTotalTokensDepositedFunc) History() []IALCBGetTotalTokensDepositedFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetTotalTokensDepositedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetTotalTokensDepositedFuncCall is an object that describes an
// invocation of method GetTotalTokensDeposited on an instance of MockIALCB.
type IALCBGetTotalTokensDepositedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetTotalTokensDepositedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetTotalTokensDepositedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBGetYieldFunc describes the behavior when the GetYield method of the
// parent MockIALCB instance is invoked.
type IALCBGetYieldFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IALCBGetYieldFuncCall
	mutex       sync.Mutex
}

// GetYield delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCB) GetYield(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetYieldFunc.nextHook()(v0)
	m.GetYieldFunc.appendCall(IALCBGetYieldFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetYield method of
// the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBGetYieldFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetYield method of the parent MockIALCB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCBGetYieldFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBGetYieldFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBGetYieldFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBGetYieldFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBGetYieldFunc) appendCall(r0 IALCBGetYieldFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBGetYieldFuncCall objects describing
// the invocations of this function.
func (f *IALCBGetYieldFunc) History() []IALCBGetYieldFuncCall {
	f.mutex.Lock()
	history := make([]IALCBGetYieldFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBGetYieldFuncCall is an object that describes an invocation of method
// GetYield on an instance of MockIALCB.
type IALCBGetYieldFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBGetYieldFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBGetYieldFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBIncreaseAllowanceFunc describes the behavior when the
// IncreaseAllowance method of the parent MockIALCB instance is invoked.
type IALCBIncreaseAllowanceFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCBIncreaseAllowanceFuncCall
	mutex       sync.Mutex
}

// IncreaseAllowance delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCB) IncreaseAllowance(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.IncreaseAllowanceFunc.nextHook()(v0, v1, v2)
	m.IncreaseAllowanceFunc.appendCall(IALCBIncreaseAllowanceFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IncreaseAllowance
// method of the parent MockIALCB instance is invoked and the hook queue is
// empty.
func (f *IALCBIncreaseAllowanceFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IncreaseAllowance method of the parent MockIALCB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IALCBIncreaseAllowanceFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBIncreaseAllowanceFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBIncreaseAllowanceFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBIncreaseAllowanceFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBIncreaseAllowanceFunc) appendCall(r0 IALCBIncreaseAllowanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBIncreaseAllowanceFuncCall objects
// describing the invocations of this function.
func (f *IALCBIncreaseAllowanceFunc) History() []IALCBIncreaseAllowanceFuncCall {
	f.mutex.Lock()
	history := make([]IALCBIncreaseAllowanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBIncreaseAllowanceFuncCall is an object that describes an invocation
// of method IncreaseAllowance on an instance of MockIALCB.
type IALCBIncreaseAllowanceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBIncreaseAllowanceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBIncreaseAllowanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBMintFunc describes the behavior when the Mint method of the parent
// MockIALCB instance is invoked.
type IALCBMintFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IALCBMintFuncCall
	mutex       sync.Mutex
}

// Mint delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCB) Mint(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.MintFunc.nextHook()(v0, v1)
	m.MintFunc.appendCall(IALCBMintFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Mint method of the
// parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBMintFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Mint method of the parent MockIALCB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCBMintFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBMintFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBMintFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBMintFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBMintFunc) appendCall(r0 IALCBMintFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBMintFuncCall objects describing the
// invocations of this function.
func (f *IALCBMintFunc) History() []IALCBMintFuncCall {
	f.mutex.Lock()
	history := make([]IALCBMintFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBMintFuncCall is an object that describes an invocation of method
// Mint on an instance of MockIALCB.
type IALCBMintFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBMintFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBMintFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBMintDepositFunc describes the behavior when the MintDeposit method
// of the parent MockIALCB instance is invoked.
type IALCBMintDepositFunc struct {
	defaultHook func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCBMintDepositFuncCall
	mutex       sync.Mutex
}

// MintDeposit delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCB) MintDeposit(v0 *bind.TransactOpts, v1 uint8, v2 common.Address, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.MintDepositFunc.nextHook()(v0, v1, v2, v3)
	m.MintDepositFunc.appendCall(IALCBMintDepositFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MintDeposit method
// of the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBMintDepositFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MintDeposit method of the parent MockIALCB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBMintDepositFunc) PushHook(hook func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBMintDepositFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBMintDepositFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBMintDepositFunc) nextHook() func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBMintDepositFunc) appendCall(r0 IALCBMintDepositFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBMintDepositFuncCall objects describing
// the invocations of this function.
func (f *IALCBMintDepositFunc) History() []IALCBMintDepositFuncCall {
	f.mutex.Lock()
	history := make([]IALCBMintDepositFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBMintDepositFuncCall is an object that describes an invocation of
// method MintDeposit on an instance of MockIALCB.
type IALCBMintDepositFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint8
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBMintDepositFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBMintDepositFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBMintToFunc describes the behavior when the MintTo method of the
// parent MockIALCB instance is invoked.
type IALCBMintToFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCBMintToFuncCall
	mutex       sync.Mutex
}

// MintTo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCB) MintTo(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.MintToFunc.nextHook()(v0, v1, v2)
	m.MintToFunc.appendCall(IALCBMintToFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MintTo method of the
// parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBMintToFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MintTo method of the parent MockIALCB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCBMintToFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBMintToFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBMintToFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBMintToFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBMintToFunc) appendCall(r0 IALCBMintToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBMintToFuncCall objects describing the
// invocations of this function.
func (f *IALCBMintToFunc) History() []IALCBMintToFuncCall {
	f.mutex.Lock()
	history := make([]IALCBMintToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBMintToFuncCall is an object that describes an invocation of method
// MintTo on an instance of MockIALCB.
type IALCBMintToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBMintToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBMintToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBNameFunc describes the behavior when the Name method of the parent
// MockIALCB instance is invoked.
type IALCBNameFunc struct {
	defaultHook func(*bind.CallOpts) (string, error)
	hooks       []func(*bind.CallOpts) (string, error)
	history     []IALCBNameFuncCall
	mutex       sync.Mutex
}

// Name delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCB) Name(v0 *bind.CallOpts) (string, error) {
	r0, r1 := m.NameFunc.nextHook()(v0)
	m.NameFunc.appendCall(IALCBNameFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Name method of the
// parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBNameFunc) SetDefaultHook(hook func(*bind.CallOpts) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Name method of the parent MockIALCB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCBNameFunc) PushHook(hook func(*bind.CallOpts) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBNameFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBNameFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

func (f *IALCBNameFunc) nextHook() func(*bind.CallOpts) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBNameFunc) appendCall(r0 IALCBNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBNameFuncCall objects describing the
// invocations of this function.
func (f *IALCBNameFunc) History() []IALCBNameFuncCall {
	f.mutex.Lock()
	history := make([]IALCBNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBNameFuncCall is an object that describes an invocation of method
// Name on an instance of MockIALCB.
type IALCBNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBParseApprovalFunc describes the behavior when the ParseApproval
// method of the parent MockIALCB instance is invoked.
type IALCBParseApprovalFunc struct {
	defaultHook func(types.Log) (*bindings.ALCBApproval, error)
	hooks       []func(types.Log) (*bindings.ALCBApproval, error)
	history     []IALCBParseApprovalFuncCall
	mutex       sync.Mutex
}

// ParseApproval delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCB) ParseApproval(v0 types.Log) (*bindings.ALCBApproval, error) {
	r0, r1 := m.ParseApprovalFunc.nextHook()(v0)
	m.ParseApprovalFunc.appendCall(IALCBParseApprovalFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseApproval method
// of the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBParseApprovalFunc) SetDefaultHook(hook func(types.Log) (*bindings.ALCBApproval, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseApproval method of the parent MockIALCB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBParseApprovalFunc) PushHook(hook func(types.Log) (*bindings.ALCBApproval, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBParseApprovalFunc) SetDefaultReturn(r0 *bindings.ALCBApproval, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ALCBApproval, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBParseApprovalFunc) PushReturn(r0 *bindings.ALCBApproval, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ALCBApproval, error) {
		return r0, r1
	})
}

func (f *IALCBParseApprovalFunc) nextHook() func(types.Log) (*bindings.ALCBApproval, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBParseApprovalFunc) appendCall(r0 IALCBParseApprovalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBParseApprovalFuncCall objects
// describing the invocations of this function.
func (f *IALCBParseApprovalFunc) History() []IALCBParseApprovalFuncCall {
	f.mutex.Lock()
	history := make([]IALCBParseApprovalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBParseApprovalFuncCall is an object that describes an invocation of
// method ParseApproval on an instance of MockIALCB.
type IALCBParseApprovalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ALCBApproval
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBParseApprovalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBParseApprovalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBParseDepositReceivedFunc describes the behavior when the
// ParseDepositReceived method of the parent MockIALCB instance is invoked.
type IALCBParseDepositReceivedFunc struct {
	defaultHook func(types.Log) (*bindings.ALCBDepositReceived, error)
	hooks       []func(types.Log) (*bindings.ALCBDepositReceived, error)
	history     []IALCBParseDepositReceivedFuncCall
	mutex       sync.Mutex
}

// ParseDepositReceived delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCB) ParseDepositReceived(v0 types.Log) (*bindings.ALCBDepositReceived, error) {
	r0, r1 := m.ParseDepositReceivedFunc.nextHook()(v0)
	m.ParseDepositReceivedFunc.appendCall(IALCBParseDepositReceivedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseDepositReceived
// method of the parent MockIALCB instance is invoked and the hook queue is
// empty.
func (f *IALCBParseDepositReceivedFunc) SetDefaultHook(hook func(types.Log) (*bindings.ALCBDepositReceived, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseDepositReceived method of the parent MockIALCB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IALCBParseDepositReceivedFunc) PushHook(hook func(types.Log) (*bindings.ALCBDepositReceived, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBParseDepositReceivedFunc) SetDefaultReturn(r0 *bindings.ALCBDepositReceived, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ALCBDepositReceived, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBParseDepositReceivedFunc) PushReturn(r0 *bindings.ALCBDepositReceived, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ALCBDepositReceived, error) {
		return r0, r1
	})
}

func (f *IALCBParseDepositReceivedFunc) nextHook() func(types.Log) (*bindings.ALCBDepositReceived, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBParseDepositReceivedFunc) appendCall(r0 IALCBParseDepositReceivedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBParseDepositReceivedFuncCall objects
// describing the invocations of this function.
func (f *IALCBParseDepositReceivedFunc) History() []IALCBParseDepositReceivedFuncCall {
	f.mutex.Lock()
	history := make([]IALCBParseDepositReceivedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBParseDepositReceivedFuncCall is an object that describes an
// invocation of method ParseDepositReceived on an instance of MockIALCB.
type IALCBParseDepositReceivedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ALCBDepositReceived
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBParseDepositReceivedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBParseDepositReceivedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBParseTransferFunc describes the behavior when the ParseTransfer
// method of the parent MockIALCB instance is invoked.
type IALCBParseTransferFunc struct {
	defaultHook func(types.Log) (*bindings.ALCBTransfer, error)
	hooks       []func(types.Log) (*bindings.ALCBTransfer, error)
	history     []IALCBParseTransferFuncCall
	mutex       sync.Mutex
}

// ParseTransfer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCB) ParseTransfer(v0 types.Log) (*bindings.ALCBTransfer, error) {
	r0, r1 := m.ParseTransferFunc.nextHook()(v0)
	m.ParseTransferFunc.appendCall(IALCBParseTransferFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseTransfer method
// of the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBParseTransferFunc) SetDefaultHook(hook func(types.Log) (*bindings.ALCBTransfer, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseTransfer method of the parent MockIALCB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBParseTransferFunc) PushHook(hook func(types.Log) (*bindings.ALCBTransfer, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBParseTransferFunc) SetDefaultReturn(r0 *bindings.ALCBTransfer, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ALCBTransfer, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBParseTransferFunc) PushReturn(r0 *bindings.ALCBTransfer, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ALCBTransfer, error) {
		return r0, r1
	})
}

func (f *IALCBParseTransferFunc) nextHook() func(types.Log) (*bindings.ALCBTransfer, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBParseTransferFunc) appendCall(r0 IALCBParseTransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBParseTransferFuncCall objects
// describing the invocations of this function.
func (f *IALCBParseTransferFunc) History() []IALCBParseTransferFuncCall {
	f.mutex.Lock()
	history := make([]IALCBParseTransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBParseTransferFuncCall is an object that describes an invocation of
// method ParseTransfer on an instance of MockIALCB.
type IALCBParseTransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ALCBTransfer
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBParseTransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBParseTransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBSetAccountTypeFunc describes the behavior when the SetAccountType
// method of the parent MockIALCB instance is invoked.
type IALCBSetAccountTypeFunc struct {
	defaultHook func(*bind.TransactOpts, uint8, bool) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint8, bool) (*types.Transaction, error)
	history     []IALCBSetAccountTypeFuncCall
	mutex       sync.Mutex
}

// SetAccountType delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCB) SetAccountType(v0 *bind.TransactOpts, v1 uint8, v2 bool) (*types.Transaction, error) {
	r0, r1 := m.SetAccountTypeFunc.nextHook()(v0, v1, v2)
	m.SetAccountTypeFunc.appendCall(IALCBSetAccountTypeFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetAccountType
// method of the parent MockIALCB instance is invoked and the hook queue is
// empty.
func (f *IALCBSetAccountTypeFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint8, bool) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetAccountType method of the parent MockIALCB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBSetAccountTypeFunc) PushHook(hook func(*bind.TransactOpts, uint8, bool) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBSetAccountTypeFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint8, bool) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBSetAccountTypeFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint8, bool) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBSetAccountTypeFunc) nextHook() func(*bind.TransactOpts, uint8, bool) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBSetAccountTypeFunc) appendCall(r0 IALCBSetAccountTypeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBSetAccountTypeFuncCall objects
// describing the invocations of this function.
func (f *IALCBSetAccountTypeFunc) History() []IALCBSetAccountTypeFuncCall {
	f.mutex.Lock()
	history := make([]IALCBSetAccountTypeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBSetAccountTypeFuncCall is an object that describes an invocation of
// method SetAccountType on an instance of MockIALCB.
type IALCBSetAccountTypeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint8
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBSetAccountTypeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBSetAccountTypeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBSymbolFunc describes the behavior when the Symbol method of the
// parent MockIALCB instance is invoked.
type IALCBSymbolFunc struct {
	defaultHook func(*bind.CallOpts) (string, error)
	hooks       []func(*bind.CallOpts) (string, error)
	history     []IALCBSymbolFuncCall
	mutex       sync.Mutex
}

// Symbol delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCB) Symbol(v0 *bind.CallOpts) (string, error) {
	r0, r1 := m.SymbolFunc.nextHook()(v0)
	m.SymbolFunc.appendCall(IALCBSymbolFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Symbol method of the
// parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBSymbolFunc) SetDefaultHook(hook func(*bind.CallOpts) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Symbol method of the parent MockIALCB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCBSymbolFunc) PushHook(hook func(*bind.CallOpts) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBSymbolFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBSymbolFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

func (f *IALCBSymbolFunc) nextHook() func(*bind.CallOpts) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBSymbolFunc) appendCall(r0 IALCBSymbolFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBSymbolFuncCall objects describing the
// invocations of this function.
func (f *IALCBSymbolFunc) History() []IALCBSymbolFuncCall {
	f.mutex.Lock()
	history := make([]IALCBSymbolFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBSymbolFuncCall is an object that describes an invocation of method
// Symbol on an instance of MockIALCB.
type IALCBSymbolFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBSymbolFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBSymbolFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBTotalSupplyFunc describes the behavior when the TotalSupply method
// of the parent MockIALCB instance is invoked.
type IALCBTotalSupplyFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IALCBTotalSupplyFuncCall
	mutex       sync.Mutex
}

// TotalSupply delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCB) TotalSupply(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.TotalSupplyFunc.nextHook()(v0)
	m.TotalSupplyFunc.appendCall(IALCBTotalSupplyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TotalSupply method
// of the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBTotalSupplyFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TotalSupply method of the parent MockIALCB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBTotalSupplyFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBTotalSupplyFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBTotalSupplyFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IALCBTotalSupplyFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBTotalSupplyFunc) appendCall(r0 IALCBTotalSupplyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBTotalSupplyFuncCall objects describing
// the invocations of this function.
func (f *IALCBTotalSupplyFunc) History() []IALCBTotalSupplyFuncCall {
	f.mutex.Lock()
	history := make([]IALCBTotalSupplyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBTotalSupplyFuncCall is an object that describes an invocation of
// method TotalSupply on an instance of MockIALCB.
type IALCBTotalSupplyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBTotalSupplyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBTotalSupplyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBTransferFunc describes the behavior when the Transfer method of the
// parent MockIALCB instance is invoked.
type IALCBTransferFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCBTransferFuncCall
	mutex       sync.Mutex
}

// Transfer delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIALCB) Transfer(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.TransferFunc.nextHook()(v0, v1, v2)
	m.TransferFunc.appendCall(IALCBTransferFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transfer method of
// the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBTransferFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transfer method of the parent MockIALCB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IALCBTransferFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBTransferFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBTransferFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBTransferFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBTransferFunc) appendCall(r0 IALCBTransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBTransferFuncCall objects describing
// the invocations of this function.
func (f *IALCBTransferFunc) History() []IALCBTransferFuncCall {
	f.mutex.Lock()
	history := make([]IALCBTransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBTransferFuncCall is an object that describes an invocation of method
// Transfer on an instance of MockIALCB.
type IALCBTransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBTransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBTransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBTransferFromFunc describes the behavior when the TransferFrom method
// of the parent MockIALCB instance is invoked.
type IALCBTransferFromFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCBTransferFromFuncCall
	mutex       sync.Mutex
}

// TransferFrom delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCB) TransferFrom(v0 *bind.TransactOpts, v1 common.Address, v2 common.Address, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.TransferFromFunc.nextHook()(v0, v1, v2, v3)
	m.TransferFromFunc.appendCall(IALCBTransferFromFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TransferFrom method
// of the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBTransferFromFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransferFrom method of the parent MockIALCB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBTransferFromFunc) PushHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBTransferFromFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBTransferFromFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBTransferFromFunc) nextHook() func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBTransferFromFunc) appendCall(r0 IALCBTransferFromFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBTransferFromFuncCall objects
// describing the invocations of this function.
func (f *IALCBTransferFromFunc) History() []IALCBTransferFromFuncCall {
	f.mutex.Lock()
	history := make([]IALCBTransferFromFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBTransferFromFuncCall is an object that describes an invocation of
// method TransferFrom on an instance of MockIALCB.
type IALCBTransferFromFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBTransferFromFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBTransferFromFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBVirtualMintDepositFunc describes the behavior when the
// VirtualMintDeposit method of the parent MockIALCB instance is invoked.
type IALCBVirtualMintDepositFunc struct {
	defaultHook func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error)
	history     []IALCBVirtualMintDepositFuncCall
	mutex       sync.Mutex
}

// VirtualMintDeposit delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCB) VirtualMintDeposit(v0 *bind.TransactOpts, v1 uint8, v2 common.Address, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.VirtualMintDepositFunc.nextHook()(v0, v1, v2, v3)
	m.VirtualMintDepositFunc.appendCall(IALCBVirtualMintDepositFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the VirtualMintDeposit
// method of the parent MockIALCB instance is invoked and the hook queue is
// empty.
func (f *IALCBVirtualMintDepositFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VirtualMintDeposit method of the parent MockIALCB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IALCBVirtualMintDepositFunc) PushHook(hook func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBVirtualMintDepositFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBVirtualMintDepositFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IALCBVirtualMintDepositFunc) nextHook() func(*bind.TransactOpts, uint8, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBVirtualMintDepositFunc) appendCall(r0 IALCBVirtualMintDepositFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBVirtualMintDepositFuncCall objects
// describing the invocations of this function.
func (f *IALCBVirtualMintDepositFunc) History() []IALCBVirtualMintDepositFuncCall {
	f.mutex.Lock()
	history := make([]IALCBVirtualMintDepositFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBVirtualMintDepositFuncCall is an object that describes an invocation
// of method VirtualMintDeposit on an instance of MockIALCB.
type IALCBVirtualMintDepositFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint8
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBVirtualMintDepositFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBVirtualMintDepositFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBWatchApprovalFunc describes the behavior when the WatchApproval
// method of the parent MockIALCB instance is invoked.
type IALCBWatchApprovalFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ALCBApproval, []common.Address, []common.Address) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ALCBApproval, []common.Address, []common.Address) (event.Subscription, error)
	history     []IALCBWatchApprovalFuncCall
	mutex       sync.Mutex
}

// WatchApproval delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCB) WatchApproval(v0 *bind.WatchOpts, v1 chan<- *bindings.ALCBApproval, v2 []common.Address, v3 []common.Address) (event.Subscription, error) {
	r0, r1 := m.WatchApprovalFunc.nextHook()(v0, v1, v2, v3)
	m.WatchApprovalFunc.appendCall(IALCBWatchApprovalFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchApproval method
// of the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBWatchApprovalFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ALCBApproval, []common.Address, []common.Address) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchApproval method of the parent MockIALCB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBWatchApprovalFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ALCBApproval, []common.Address, []common.Address) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBWatchApprovalFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ALCBApproval, []common.Address, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBWatchApprovalFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ALCBApproval, []common.Address, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IALCBWatchApprovalFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ALCBApproval, []common.Address, []common.Address) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBWatchApprovalFunc) appendCall(r0 IALCBWatchApprovalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBWatchApprovalFuncCall objects
// describing the invocations of this function.
func (f *IALCBWatchApprovalFunc) History() []IALCBWatchApprovalFuncCall {
	f.mutex.Lock()
	history := make([]IALCBWatchApprovalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBWatchApprovalFuncCall is an object that describes an invocation of
// method WatchApproval on an instance of MockIALCB.
type IALCBWatchApprovalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ALCBApproval
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBWatchApprovalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBWatchApprovalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBWatchDepositReceivedFunc describes the behavior when the
// WatchDepositReceived method of the parent MockIALCB instance is invoked.
type IALCBWatchDepositReceivedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ALCBDepositReceived, []*big.Int, []uint8, []common.Address) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ALCBDepositReceived, []*big.Int, []uint8, []common.Address) (event.Subscription, error)
	history     []IALCBWatchDepositReceivedFuncCall
	mutex       sync.Mutex
}

// WatchDepositReceived delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIALCB) WatchDepositReceived(v0 *bind.WatchOpts, v1 chan<- *bindings.ALCBDepositReceived, v2 []*big.Int, v3 []uint8, v4 []common.Address) (event.Subscription, error) {
	r0, r1 := m.WatchDepositReceivedFunc.nextHook()(v0, v1, v2, v3, v4)
	m.WatchDepositReceivedFunc.appendCall(IALCBWatchDepositReceivedFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchDepositReceived
// method of the parent MockIALCB instance is invoked and the hook queue is
// empty.
func (f *IALCBWatchDepositReceivedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ALCBDepositReceived, []*big.Int, []uint8, []common.Address) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchDepositReceived method of the parent MockIALCB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IALCBWatchDepositReceivedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ALCBDepositReceived, []*big.Int, []uint8, []common.Address) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBWatchDepositReceivedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ALCBDepositReceived, []*big.Int, []uint8, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBWatchDepositReceivedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ALCBDepositReceived, []*big.Int, []uint8, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IALCBWatchDepositReceivedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ALCBDepositReceived, []*big.Int, []uint8, []common.Address) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBWatchDepositReceivedFunc) appendCall(r0 IALCBWatchDepositReceivedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBWatchDepositReceivedFuncCall objects
// describing the invocations of this function.
func (f *IALCBWatchDepositReceivedFunc) History() []IALCBWatchDepositReceivedFuncCall {
	f.mutex.Lock()
	history := make([]IALCBWatchDepositReceivedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBWatchDepositReceivedFuncCall is an object that describes an
// invocation of method WatchDepositReceived on an instance of MockIALCB.
type IALCBWatchDepositReceivedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ALCBDepositReceived
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []uint8
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBWatchDepositReceivedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBWatchDepositReceivedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IALCBWatchTransferFunc describes the behavior when the WatchTransfer
// method of the parent MockIALCB instance is invoked.
type IALCBWatchTransferFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ALCBTransfer, []common.Address, []common.Address) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ALCBTransfer, []common.Address, []common.Address) (event.Subscription, error)
	history     []IALCBWatchTransferFuncCall
	mutex       sync.Mutex
}

// WatchTransfer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIALCB) WatchTransfer(v0 *bind.WatchOpts, v1 chan<- *bindings.ALCBTransfer, v2 []common.Address, v3 []common.Address) (event.Subscription, error) {
	r0, r1 := m.WatchTransferFunc.nextHook()(v0, v1, v2, v3)
	m.WatchTransferFunc.appendCall(IALCBWatchTransferFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchTransfer method
// of the parent MockIALCB instance is invoked and the hook queue is empty.
func (f *IALCBWatchTransferFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ALCBTransfer, []common.Address, []common.Address) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchTransfer method of the parent MockIALCB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IALCBWatchTransferFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ALCBTransfer, []common.Address, []common.Address) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IALCBWatchTransferFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ALCBTransfer, []common.Address, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IALCBWatchTransferFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ALCBTransfer, []common.Address, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IALCBWatchTransferFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ALCBTransfer, []common.Address, []common.Address) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IALCBWatchTransferFunc) appendCall(r0 IALCBWatchTransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IALCBWatchTransferFuncCall objects
// describing the invocations of this function.
func (f *IALCBWatchTransferFunc) History() []IALCBWatchTransferFuncCall {
	f.mutex.Lock()
	history := make([]IALCBWatchTransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IALCBWatchTransferFuncCall is an object that describes an invocation of
// method WatchTransfer on an instance of MockIALCB.
type IALCBWatchTransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ALCBTransfer
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IALCBWatchTransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IALCBWatchTransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockIAliceNetFactory is a mock implementation of the IAliceNetFactory
// interface (from the package github.com/alicenet/alicenet/bridge/bindings)
// used for unit testing.
type MockIAliceNetFactory struct {
	// AddNewExternalContractFunc is an instance of a mock function object
	// controlling the behavior of the method AddNewExternalContract.
	AddNewExternalContractFunc *IAliceNetFactoryAddNewExternalContractFunc
	// CallAnyFunc is an instance of a mock function object controlling the
	// behavior of the method CallAny.
	CallAnyFunc *IAliceNetFactoryCallAnyFunc
	// ContractsFunc is an instance of a mock function object controlling
	// the behavior of the method Contracts.
	ContractsFunc *IAliceNetFactoryContractsFunc
	// DeployCreateFunc is an instance of a mock function object controlling
	// the behavior of the method DeployCreate.
	DeployCreateFunc *IAliceNetFactoryDeployCreateFunc
	// DeployCreate2Func is an instance of a mock function object
	// controlling the behavior of the method DeployCreate2.
	DeployCreate2Func *IAliceNetFactoryDeployCreate2Func
	// DeployCreateAndRegisterFunc is an instance of a mock function object
	// controlling the behavior of the method DeployCreateAndRegister.
	DeployCreateAndRegisterFunc *IAliceNetFactoryDeployCreateAndRegisterFunc
	// DeployProxyFunc is an instance of a mock function object controlling
	// the behavior of the method DeployProxy.
	DeployProxyFunc *IAliceNetFactoryDeployProxyFunc
	// FallbackFunc is an instance of a mock function object controlling the
	// behavior of the method Fallback.
	FallbackFunc *IAliceNetFactoryFallbackFunc
	// FilterDeployedFunc is an instance of a mock function object
	// controlling the behavior of the method FilterDeployed.
	FilterDeployedFunc *IAliceNetFactoryFilterDeployedFunc
	// FilterDeployedProxyFunc is an instance of a mock function object
	// controlling the behavior of the method FilterDeployedProxy.
	FilterDeployedProxyFunc *IAliceNetFactoryFilterDeployedProxyFunc
	// FilterDeployedRawFunc is an instance of a mock function object
	// controlling the behavior of the method FilterDeployedRaw.
	FilterDeployedRawFunc *IAliceNetFactoryFilterDeployedRawFunc
	// FilterDeployedStaticFunc is an instance of a mock function object
	// controlling the behavior of the method FilterDeployedStatic.
	FilterDeployedStaticFunc *IAliceNetFactoryFilterDeployedStaticFunc
	// FilterDeployedTemplateFunc is an instance of a mock function object
	// controlling the behavior of the method FilterDeployedTemplate.
	FilterDeployedTemplateFunc *IAliceNetFactoryFilterDeployedTemplateFunc
	// FilterUpgradedProxyFunc is an instance of a mock function object
	// controlling the behavior of the method FilterUpgradedProxy.
	FilterUpgradedProxyFunc *IAliceNetFactoryFilterUpgradedProxyFunc
	// GetALCAAddressFunc is an instance of a mock function object
	// controlling the behavior of the method GetALCAAddress.
	GetALCAAddressFunc *IAliceNetFactoryGetALCAAddressFunc
	// GetALCACreationCodeHashFunc is an instance of a mock function object
	// controlling the behavior of the method GetALCACreationCodeHash.
	GetALCACreationCodeHashFunc *IAliceNetFactoryGetALCACreationCodeHashFunc
	// GetImplementationFunc is an instance of a mock function object
	// controlling the behavior of the method GetImplementation.
	GetImplementationFunc *IAliceNetFactoryGetImplementationFunc
	// GetMetamorphicContractAddressFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetMetamorphicContractAddress.
	GetMetamorphicContractAddressFunc *IAliceNetFactoryGetMetamorphicContractAddressFunc
	// GetNumContractsFunc is an instance of a mock function object
	// controlling the behavior of the method GetNumContracts.
	GetNumContractsFunc *IAliceNetFactoryGetNumContractsFunc
	// GetProxyImplementationFunc is an instance of a mock function object
	// controlling the behavior of the method GetProxyImplementation.
	GetProxyImplementationFunc *IAliceNetFactoryGetProxyImplementationFunc
	// InitializeContractFunc is an instance of a mock function object
	// controlling the behavior of the method InitializeContract.
	InitializeContractFunc *IAliceNetFactoryInitializeContractFunc
	// LookupFunc is an instance of a mock function object controlling the
	// behavior of the method Lookup.
	LookupFunc *IAliceNetFactoryLookupFunc
	// MultiCallFunc is an instance of a mock function object controlling
	// the behavior of the method MultiCall.
	MultiCallFunc *IAliceNetFactoryMultiCallFunc
	// OwnerFunc is an instance of a mock function object controlling the
	// behavior of the method Owner.
	OwnerFunc *IAliceNetFactoryOwnerFunc
	// ParseDeployedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseDeployed.
	ParseDeployedFunc *IAliceNetFactoryParseDeployedFunc
	// ParseDeployedProxyFunc is an instance of a mock function object
	// controlling the behavior of the method ParseDeployedProxy.
	ParseDeployedProxyFunc *IAliceNetFactoryParseDeployedProxyFunc
	// ParseDeployedRawFunc is an instance of a mock function object
	// controlling the behavior of the method ParseDeployedRaw.
	ParseDeployedRawFunc *IAliceNetFactoryParseDeployedRawFunc
	// ParseDeployedStaticFunc is an instance of a mock function object
	// controlling the behavior of the method ParseDeployedStatic.
	ParseDeployedStaticFunc *IAliceNetFactoryParseDeployedStaticFunc
	// ParseDeployedTemplateFunc is an instance of a mock function object
	// controlling the behavior of the method ParseDeployedTemplate.
	ParseDeployedTemplateFunc *IAliceNetFactoryParseDeployedTemplateFunc
	// ParseUpgradedProxyFunc is an instance of a mock function object
	// controlling the behavior of the method ParseUpgradedProxy.
	ParseUpgradedProxyFunc *IAliceNetFactoryParseUpgradedProxyFunc
	// SetOwnerFunc is an instance of a mock function object controlling the
	// behavior of the method SetOwner.
	SetOwnerFunc *IAliceNetFactorySetOwnerFunc
	// UpgradeProxyFunc is an instance of a mock function object controlling
	// the behavior of the method UpgradeProxy.
	UpgradeProxyFunc *IAliceNetFactoryUpgradeProxyFunc
	// WatchDeployedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchDeployed.
	WatchDeployedFunc *IAliceNetFactoryWatchDeployedFunc
	// WatchDeployedProxyFunc is an instance of a mock function object
	// controlling the behavior of the method WatchDeployedProxy.
	WatchDeployedProxyFunc *IAliceNetFactoryWatchDeployedProxyFunc
	// WatchDeployedRawFunc is an instance of a mock function object
	// controlling the behavior of the method WatchDeployedRaw.
	WatchDeployedRawFunc *IAliceNetFactoryWatchDeployedRawFunc
	// WatchDeployedStaticFunc is an instance of a mock function object
	// controlling the behavior of the method WatchDeployedStatic.
	WatchDeployedStaticFunc *IAliceNetFactoryWatchDeployedStaticFunc
	// WatchDeployedTemplateFunc is an instance of a mock function object
	// controlling the behavior of the method WatchDeployedTemplate.
	WatchDeployedTemplateFunc *IAliceNetFactoryWatchDeployedTemplateFunc
	// WatchUpgradedProxyFunc is an instance of a mock function object
	// controlling the behavior of the method WatchUpgradedProxy.
	WatchUpgradedProxyFunc *IAliceNetFactoryWatchUpgradedProxyFunc
}

// NewMockIAliceNetFactory creates a new mock of the IAliceNetFactory
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockIAliceNetFactory() *MockIAliceNetFactory {
	return &MockIAliceNetFactory{
		AddNewExternalContractFunc: &IAliceNetFactoryAddNewExternalContractFunc{
			defaultHook: func(*bind.TransactOpts, [32]byte, common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CallAnyFunc: &IAliceNetFactoryCallAnyFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int, []byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		ContractsFunc: &IAliceNetFactoryContractsFunc{
			defaultHook: func(*bind.CallOpts) (r0 [][32]byte, r1 error) {
				return
			},
		},
		DeployCreateFunc: &IAliceNetFactoryDeployCreateFunc{
			defaultHook: func(*bind.TransactOpts, []byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DeployCreate2Func: &IAliceNetFactoryDeployCreate2Func{
			defaultHook: func(*bind.TransactOpts, *big.Int, [32]byte, []byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DeployCreateAndRegisterFunc: &IAliceNetFactoryDeployCreateAndRegisterFunc{
			defaultHook: func(*bind.TransactOpts, []byte, [32]byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DeployProxyFunc: &IAliceNetFactoryDeployProxyFunc{
			defaultHook: func(*bind.TransactOpts, [32]byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		FallbackFunc: &IAliceNetFactoryFallbackFunc{
			defaultHook: func(*bind.TransactOpts, []byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		FilterDeployedFunc: &IAliceNetFactoryFilterDeployedFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.AliceNetFactoryDeployedIterator, r1 error) {
				return
			},
		},
		FilterDeployedProxyFunc: &IAliceNetFactoryFilterDeployedProxyFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.AliceNetFactoryDeployedProxyIterator, r1 error) {
				return
			},
		},
		FilterDeployedRawFunc: &IAliceNetFactoryFilterDeployedRawFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.AliceNetFactoryDeployedRawIterator, r1 error) {
				return
			},
		},
		FilterDeployedStaticFunc: &IAliceNetFactoryFilterDeployedStaticFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.AliceNetFactoryDeployedStaticIterator, r1 error) {
				return
			},
		},
		FilterDeployedTemplateFunc: &IAliceNetFactoryFilterDeployedTemplateFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.AliceNetFactoryDeployedTemplateIterator, r1 error) {
				return
			},
		},
		FilterUpgradedProxyFunc: &IAliceNetFactoryFilterUpgradedProxyFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.AliceNetFactoryUpgradedProxyIterator, r1 error) {
				return
			},
		},
		GetALCAAddressFunc: &IAliceNetFactoryGetALCAAddressFunc{
			defaultHook: func(*bind.CallOpts) (r0 common.Address, r1 error) {
				return
			},
		},
		GetALCACreationCodeHashFunc: &IAliceNetFactoryGetALCACreationCodeHashFunc{
			defaultHook: func(*bind.CallOpts) (r0 [32]byte, r1 error) {
				return
			},
		},
		GetImplementationFunc: &IAliceNetFactoryGetImplementationFunc{
			defaultHook: func(*bind.CallOpts) (r0 common.Address, r1 error) {
				return
			},
		},
		GetMetamorphicContractAddressFunc: &IAliceNetFactoryGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (r0 common.Address, r1 error) {
				return
			},
		},
		GetNumContractsFunc: &IAliceNetFactoryGetNumContractsFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetProxyImplementationFunc: &IAliceNetFactoryGetProxyImplementationFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (r0 common.Address, r1 error) {
				return
			},
		},
		InitializeContractFunc: &IAliceNetFactoryInitializeContractFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, []byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		LookupFunc: &IAliceNetFactoryLookupFunc{
			defaultHook: func(*bind.CallOpts, [32]byte) (r0 common.Address, r1 error) {
				return
			},
		},
		MultiCallFunc: &IAliceNetFactoryMultiCallFunc{
			defaultHook: func(*bind.TransactOpts, []bindings.AliceNetFactoryBaseMultiCallArgs) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		OwnerFunc: &IAliceNetFactoryOwnerFunc{
			defaultHook: func(*bind.CallOpts) (r0 common.Address, r1 error) {
				return
			},
		},
		ParseDeployedFunc: &IAliceNetFactoryParseDeployedFunc{
			defaultHook: func(types.Log) (r0 *bindings.AliceNetFactoryDeployed, r1 error) {
				return
			},
		},
		ParseDeployedProxyFunc: &IAliceNetFactoryParseDeployedProxyFunc{
			defaultHook: func(types.Log) (r0 *bindings.AliceNetFactoryDeployedProxy, r1 error) {
				return
			},
		},
		ParseDeployedRawFunc: &IAliceNetFactoryParseDeployedRawFunc{
			defaultHook: func(types.Log) (r0 *bindings.AliceNetFactoryDeployedRaw, r1 error) {
				return
			},
		},
		ParseDeployedStaticFunc: &IAliceNetFactoryParseDeployedStaticFunc{
			defaultHook: func(types.Log) (r0 *bindings.AliceNetFactoryDeployedStatic, r1 error) {
				return
			},
		},
		ParseDeployedTemplateFunc: &IAliceNetFactoryParseDeployedTemplateFunc{
			defaultHook: func(types.Log) (r0 *bindings.AliceNetFactoryDeployedTemplate, r1 error) {
				return
			},
		},
		ParseUpgradedProxyFunc: &IAliceNetFactoryParseUpgradedProxyFunc{
			defaultHook: func(types.Log) (r0 *bindings.AliceNetFactoryUpgradedProxy, r1 error) {
				return
			},
		},
		SetOwnerFunc: &IAliceNetFactorySetOwnerFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		UpgradeProxyFunc: &IAliceNetFactoryUpgradeProxyFunc{
			defaultHook: func(*bind.TransactOpts, [32]byte, common.Address, []byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		WatchDeployedFunc: &IAliceNetFactoryWatchDeployedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployed) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchDeployedProxyFunc: &IAliceNetFactoryWatchDeployedProxyFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedProxy) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchDeployedRawFunc: &IAliceNetFactoryWatchDeployedRawFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedRaw) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchDeployedStaticFunc: &IAliceNetFactoryWatchDeployedStaticFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedStatic) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchDeployedTemplateFunc: &IAliceNetFactoryWatchDeployedTemplateFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedTemplate) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchUpgradedProxyFunc: &IAliceNetFactoryWatchUpgradedProxyFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryUpgradedProxy) (r0 event.Subscription, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockIAliceNetFactory creates a new mock of the IAliceNetFactory
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockIAliceNetFactory() *MockIAliceNetFactory {
	return &MockIAliceNetFactory{
		AddNewExternalContractFunc: &IAliceNetFactoryAddNewExternalContractFunc{
			defaultHook: func(*bind.TransactOpts, [32]byte, common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIAliceNetFactory.AddNewExternalContract")
			},
		},
		CallAnyFunc: &IAliceNetFactoryCallAnyFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int, []byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIAliceNetFactory.CallAny")
			},
		},
		ContractsFunc: &IAliceNetFactoryContractsFunc{
			defaultHook: func(*bind.CallOpts) ([][32]byte, error) {
				panic("unexpected invocation of MockIAliceNetFactory.Contracts")
			},
		},
		DeployCreateFunc: &IAliceNetFactoryDeployCreateFunc{
			defaultHook: func(*bind.TransactOpts, []byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIAliceNetFactory.DeployCreate")
			},
		},
		DeployCreate2Func: &IAliceNetFactoryDeployCreate2Func{
			defaultHook: func(*bind.TransactOpts, *big.Int, [32]byte, []byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIAliceNetFactory.DeployCreate2")
			},
		},
		DeployCreateAndRegisterFunc: &IAliceNetFactoryDeployCreateAndRegisterFunc{
			defaultHook: func(*bind.TransactOpts, []byte, [32]byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIAliceNetFactory.DeployCreateAndRegister")
			},
		},
		DeployProxyFunc: &IAliceNetFactoryDeployProxyFunc{
			defaultHook: func(*bind.TransactOpts, [32]byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIAliceNetFactory.DeployProxy")
			},
		},
		FallbackFunc: &IAliceNetFactoryFallbackFunc{
			defaultHook: func(*bind.TransactOpts, []byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIAliceNetFactory.Fallback")
			},
		},
		FilterDeployedFunc: &IAliceNetFactoryFilterDeployedFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedIterator, error) {
				panic("unexpected invocation of MockIAliceNetFactory.FilterDeployed")
			},
		},
		FilterDeployedProxyFunc: &IAliceNetFactoryFilterDeployedProxyFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedProxyIterator, error) {
				panic("unexpected invocation of MockIAliceNetFactory.FilterDeployedProxy")
			},
		},
		FilterDeployedRawFunc: &IAliceNetFactoryFilterDeployedRawFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedRawIterator, error) {
				panic("unexpected invocation of MockIAliceNetFactory.FilterDeployedRaw")
			},
		},
		FilterDeployedStaticFunc: &IAliceNetFactoryFilterDeployedStaticFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedStaticIterator, error) {
				panic("unexpected invocation of MockIAliceNetFactory.FilterDeployedStatic")
			},
		},
		FilterDeployedTemplateFunc: &IAliceNetFactoryFilterDeployedTemplateFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedTemplateIterator, error) {
				panic("unexpected invocation of MockIAliceNetFactory.FilterDeployedTemplate")
			},
		},
		FilterUpgradedProxyFunc: &IAliceNetFactoryFilterUpgradedProxyFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.AliceNetFactoryUpgradedProxyIterator, error) {
				panic("unexpected invocation of MockIAliceNetFactory.FilterUpgradedProxy")
			},
		},
		GetALCAAddressFunc: &IAliceNetFactoryGetALCAAddressFunc{
			defaultHook: func(*bind.CallOpts) (common.Address, error) {
				panic("unexpected invocation of MockIAliceNetFactory.GetALCAAddress")
			},
		},
		GetALCACreationCodeHashFunc: &IAliceNetFactoryGetALCACreationCodeHashFunc{
			defaultHook: func(*bind.CallOpts) ([32]byte, error) {
				panic("unexpected invocation of MockIAliceNetFactory.GetALCACreationCodeHash")
			},
		},
		GetImplementationFunc: &IAliceNetFactoryGetImplementationFunc{
			defaultHook: func(*bind.CallOpts) (common.Address, error) {
				panic("unexpected invocation of MockIAliceNetFactory.GetImplementation")
			},
		},
		GetMetamorphicContractAddressFunc: &IAliceNetFactoryGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
				panic("unexpected invocation of MockIAliceNetFactory.GetMetamorphicContractAddress")
			},
		},
		GetNumContractsFunc: &IAliceNetFactoryGetNumContractsFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIAliceNetFactory.GetNumContracts")
			},
		},
		GetProxyImplementationFunc: &IAliceNetFactoryGetProxyImplementationFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (common.Address, error) {
				panic("unexpected invocation of MockIAliceNetFactory.GetProxyImplementation")
			},
		},
		InitializeContractFunc: &IAliceNetFactoryInitializeContractFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, []byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIAliceNetFactory.InitializeContract")
			},
		},
		LookupFunc: &IAliceNetFactoryLookupFunc{
			defaultHook: func(*bind.CallOpts, [32]byte) (common.Address, error) {
				panic("unexpected invocation of MockIAliceNetFactory.Lookup")
			},
		},
		MultiCallFunc: &IAliceNetFactoryMultiCallFunc{
			defaultHook: func(*bind.TransactOpts, []bindings.AliceNetFactoryBaseMultiCallArgs) (*types.Transaction, error) {
				panic("unexpected invocation of MockIAliceNetFactory.MultiCall")
			},
		},
		OwnerFunc: &IAliceNetFactoryOwnerFunc{
			defaultHook: func(*bind.CallOpts) (common.Address, error) {
				panic("unexpected invocation of MockIAliceNetFactory.Owner")
			},
		},
		ParseDeployedFunc: &IAliceNetFactoryParseDeployedFunc{
			defaultHook: func(types.Log) (*bindings.AliceNetFactoryDeployed, error) {
				panic("unexpected invocation of MockIAliceNetFactory.ParseDeployed")
			},
		},
		ParseDeployedProxyFunc: &IAliceNetFactoryParseDeployedProxyFunc{
			defaultHook: func(types.Log) (*bindings.AliceNetFactoryDeployedProxy, error) {
				panic("unexpected invocation of MockIAliceNetFactory.ParseDeployedProxy")
			},
		},
		ParseDeployedRawFunc: &IAliceNetFactoryParseDeployedRawFunc{
			defaultHook: func(types.Log) (*bindings.AliceNetFactoryDeployedRaw, error) {
				panic("unexpected invocation of MockIAliceNetFactory.ParseDeployedRaw")
			},
		},
		ParseDeployedStaticFunc: &IAliceNetFactoryParseDeployedStaticFunc{
			defaultHook: func(types.Log) (*bindings.AliceNetFactoryDeployedStatic, error) {
				panic("unexpected invocation of MockIAliceNetFactory.ParseDeployedStatic")
			},
		},
		ParseDeployedTemplateFunc: &IAliceNetFactoryParseDeployedTemplateFunc{
			defaultHook: func(types.Log) (*bindings.AliceNetFactoryDeployedTemplate, error) {
				panic("unexpected invocation of MockIAliceNetFactory.ParseDeployedTemplate")
			},
		},
		ParseUpgradedProxyFunc: &IAliceNetFactoryParseUpgradedProxyFunc{
			defaultHook: func(types.Log) (*bindings.AliceNetFactoryUpgradedProxy, error) {
				panic("unexpected invocation of MockIAliceNetFactory.ParseUpgradedProxy")
			},
		},
		SetOwnerFunc: &IAliceNetFactorySetOwnerFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIAliceNetFactory.SetOwner")
			},
		},
		UpgradeProxyFunc: &IAliceNetFactoryUpgradeProxyFunc{
			defaultHook: func(*bind.TransactOpts, [32]byte, common.Address, []byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIAliceNetFactory.UpgradeProxy")
			},
		},
		WatchDeployedFunc: &IAliceNetFactoryWatchDeployedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployed) (event.Subscription, error) {
				panic("unexpected invocation of MockIAliceNetFactory.WatchDeployed")
			},
		},
		WatchDeployedProxyFunc: &IAliceNetFactoryWatchDeployedProxyFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedProxy) (event.Subscription, error) {
				panic("unexpected invocation of MockIAliceNetFactory.WatchDeployedProxy")
			},
		},
		WatchDeployedRawFunc: &IAliceNetFactoryWatchDeployedRawFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedRaw) (event.Subscription, error) {
				panic("unexpected invocation of MockIAliceNetFactory.WatchDeployedRaw")
			},
		},
		WatchDeployedStaticFunc: &IAliceNetFactoryWatchDeployedStaticFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedStatic) (event.Subscription, error) {
				panic("unexpected invocation of MockIAliceNetFactory.WatchDeployedStatic")
			},
		},
		WatchDeployedTemplateFunc: &IAliceNetFactoryWatchDeployedTemplateFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedTemplate) (event.Subscription, error) {
				panic("unexpected invocation of MockIAliceNetFactory.WatchDeployedTemplate")
			},
		},
		WatchUpgradedProxyFunc: &IAliceNetFactoryWatchUpgradedProxyFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryUpgradedProxy) (event.Subscription, error) {
				panic("unexpected invocation of MockIAliceNetFactory.WatchUpgradedProxy")
			},
		},
	}
}

// NewMockIAliceNetFactoryFrom creates a new mock of the
// MockIAliceNetFactory interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockIAliceNetFactoryFrom(i bindings.IAliceNetFactory) *MockIAliceNetFactory {
	return &MockIAliceNetFactory{
		AddNewExternalContractFunc: &IAliceNetFactoryAddNewExternalContractFunc{
			defaultHook: i.AddNewExternalContract,
		},
		CallAnyFunc: &IAliceNetFactoryCallAnyFunc{
			defaultHook: i.CallAny,
		},
		ContractsFunc: &IAliceNetFactoryContractsFunc{
			defaultHook: i.Contracts,
		},
		DeployCreateFunc: &IAliceNetFactoryDeployCreateFunc{
			defaultHook: i.DeployCreate,
		},
		DeployCreate2Func: &IAliceNetFactoryDeployCreate2Func{
			defaultHook: i.DeployCreate2,
		},
		DeployCreateAndRegisterFunc: &IAliceNetFactoryDeployCreateAndRegisterFunc{
			defaultHook: i.DeployCreateAndRegister,
		},
		DeployProxyFunc: &IAliceNetFactoryDeployProxyFunc{
			defaultHook: i.DeployProxy,
		},
		FallbackFunc: &IAliceNetFactoryFallbackFunc{
			defaultHook: i.Fallback,
		},
		FilterDeployedFunc: &IAliceNetFactoryFilterDeployedFunc{
			defaultHook: i.FilterDeployed,
		},
		FilterDeployedProxyFunc: &IAliceNetFactoryFilterDeployedProxyFunc{
			defaultHook: i.FilterDeployedProxy,
		},
		FilterDeployedRawFunc: &IAliceNetFactoryFilterDeployedRawFunc{
			defaultHook: i.FilterDeployedRaw,
		},
		FilterDeployedStaticFunc: &IAliceNetFactoryFilterDeployedStaticFunc{
			defaultHook: i.FilterDeployedStatic,
		},
		FilterDeployedTemplateFunc: &IAliceNetFactoryFilterDeployedTemplateFunc{
			defaultHook: i.FilterDeployedTemplate,
		},
		FilterUpgradedProxyFunc: &IAliceNetFactoryFilterUpgradedProxyFunc{
			defaultHook: i.FilterUpgradedProxy,
		},
		GetALCAAddressFunc: &IAliceNetFactoryGetALCAAddressFunc{
			defaultHook: i.GetALCAAddress,
		},
		GetALCACreationCodeHashFunc: &IAliceNetFactoryGetALCACreationCodeHashFunc{
			defaultHook: i.GetALCACreationCodeHash,
		},
		GetImplementationFunc: &IAliceNetFactoryGetImplementationFunc{
			defaultHook: i.GetImplementation,
		},
		GetMetamorphicContractAddressFunc: &IAliceNetFactoryGetMetamorphicContractAddressFunc{
			defaultHook: i.GetMetamorphicContractAddress,
		},
		GetNumContractsFunc: &IAliceNetFactoryGetNumContractsFunc{
			defaultHook: i.GetNumContracts,
		},
		GetProxyImplementationFunc: &IAliceNetFactoryGetProxyImplementationFunc{
			defaultHook: i.GetProxyImplementation,
		},
		InitializeContractFunc: &IAliceNetFactoryInitializeContractFunc{
			defaultHook: i.InitializeContract,
		},
		LookupFunc: &IAliceNetFactoryLookupFunc{
			defaultHook: i.Lookup,
		},
		MultiCallFunc: &IAliceNetFactoryMultiCallFunc{
			defaultHook: i.MultiCall,
		},
		OwnerFunc: &IAliceNetFactoryOwnerFunc{
			defaultHook: i.Owner,
		},
		ParseDeployedFunc: &IAliceNetFactoryParseDeployedFunc{
			defaultHook: i.ParseDeployed,
		},
		ParseDeployedProxyFunc: &IAliceNetFactoryParseDeployedProxyFunc{
			defaultHook: i.ParseDeployedProxy,
		},
		ParseDeployedRawFunc: &IAliceNetFactoryParseDeployedRawFunc{
			defaultHook: i.ParseDeployedRaw,
		},
		ParseDeployedStaticFunc: &IAliceNetFactoryParseDeployedStaticFunc{
			defaultHook: i.ParseDeployedStatic,
		},
		ParseDeployedTemplateFunc: &IAliceNetFactoryParseDeployedTemplateFunc{
			defaultHook: i.ParseDeployedTemplate,
		},
		ParseUpgradedProxyFunc: &IAliceNetFactoryParseUpgradedProxyFunc{
			defaultHook: i.ParseUpgradedProxy,
		},
		SetOwnerFunc: &IAliceNetFactorySetOwnerFunc{
			defaultHook: i.SetOwner,
		},
		UpgradeProxyFunc: &IAliceNetFactoryUpgradeProxyFunc{
			defaultHook: i.UpgradeProxy,
		},
		WatchDeployedFunc: &IAliceNetFactoryWatchDeployedFunc{
			defaultHook: i.WatchDeployed,
		},
		WatchDeployedProxyFunc: &IAliceNetFactoryWatchDeployedProxyFunc{
			defaultHook: i.WatchDeployedProxy,
		},
		WatchDeployedRawFunc: &IAliceNetFactoryWatchDeployedRawFunc{
			defaultHook: i.WatchDeployedRaw,
		},
		WatchDeployedStaticFunc: &IAliceNetFactoryWatchDeployedStaticFunc{
			defaultHook: i.WatchDeployedStatic,
		},
		WatchDeployedTemplateFunc: &IAliceNetFactoryWatchDeployedTemplateFunc{
			defaultHook: i.WatchDeployedTemplate,
		},
		WatchUpgradedProxyFunc: &IAliceNetFactoryWatchUpgradedProxyFunc{
			defaultHook: i.WatchUpgradedProxy,
		},
	}
}

// IAliceNetFactoryAddNewExternalContractFunc describes the behavior when
// the AddNewExternalContract method of the parent MockIAliceNetFactory
// instance is invoked.
type IAliceNetFactoryAddNewExternalContractFunc struct {
	defaultHook func(*bind.TransactOpts, [32]byte, common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, [32]byte, common.Address) (*types.Transaction, error)
	history     []IAliceNetFactoryAddNewExternalContractFuncCall
	mutex       sync.Mutex
}

// AddNewExternalContract delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) AddNewExternalContract(v0 *bind.TransactOpts, v1 [32]byte, v2 common.Address) (*types.Transaction, error) {
	r0, r1 := m.AddNewExternalContractFunc.nextHook()(v0, v1, v2)
	m.AddNewExternalContractFunc.appendCall(IAliceNetFactoryAddNewExternalContractFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AddNewExternalContract method of the parent MockIAliceNetFactory instance
// is invoked and the hook queue is empty.
func (f *IAliceNetFactoryAddNewExternalContractFunc) SetDefaultHook(hook func(*bind.TransactOpts, [32]byte, common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddNewExternalContract method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryAddNewExternalContractFunc) PushHook(hook func(*bind.TransactOpts, [32]byte, common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryAddNewExternalContractFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, [32]byte, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryAddNewExternalContractFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, [32]byte, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryAddNewExternalContractFunc) nextHook() func(*bind.TransactOpts, [32]byte, common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryAddNewExternalContractFunc) appendCall(r0 IAliceNetFactoryAddNewExternalContractFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IAliceNetFactoryAddNewExternalContractFuncCall objects describing the
// invocations of this function.
func (f *IAliceNetFactoryAddNewExternalContractFunc) History() []IAliceNetFactoryAddNewExternalContractFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryAddNewExternalContractFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryAddNewExternalContractFuncCall is an object that
// describes an invocation of method AddNewExternalContract on an instance
// of MockIAliceNetFactory.
type IAliceNetFactoryAddNewExternalContractFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryAddNewExternalContractFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryAddNewExternalContractFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryCallAnyFunc describes the behavior when the CallAny
// method of the parent MockIAliceNetFactory instance is invoked.
type IAliceNetFactoryCallAnyFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int, []byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int, []byte) (*types.Transaction, error)
	history     []IAliceNetFactoryCallAnyFuncCall
	mutex       sync.Mutex
}

// CallAny delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIAliceNetFactory) CallAny(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int, v3 []byte) (*types.Transaction, error) {
	r0, r1 := m.CallAnyFunc.nextHook()(v0, v1, v2, v3)
	m.CallAnyFunc.appendCall(IAliceNetFactoryCallAnyFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CallAny method of
// the parent MockIAliceNetFactory instance is invoked and the hook queue is
// empty.
func (f *IAliceNetFactoryCallAnyFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int, []byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CallAny method of the parent MockIAliceNetFactory instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IAliceNetFactoryCallAnyFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int, []byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryCallAnyFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryCallAnyFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryCallAnyFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int, []byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryCallAnyFunc) appendCall(r0 IAliceNetFactoryCallAnyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryCallAnyFuncCall objects
// describing the invocations of this function.
func (f *IAliceNetFactoryCallAnyFunc) History() []IAliceNetFactoryCallAnyFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryCallAnyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryCallAnyFuncCall is an object that describes an invocation
// of method CallAny on an instance of MockIAliceNetFactory.
type IAliceNetFactoryCallAnyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryCallAnyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryCallAnyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryContractsFunc describes the behavior when the Contracts
// method of the parent MockIAliceNetFactory instance is invoked.
type IAliceNetFactoryContractsFunc struct {
	defaultHook func(*bind.CallOpts) ([][32]byte, error)
	hooks       []func(*bind.CallOpts) ([][32]byte, error)
	history     []IAliceNetFactoryContractsFuncCall
	mutex       sync.Mutex
}

// Contracts delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIAliceNetFactory) Contracts(v0 *bind.CallOpts) ([][32]byte, error) {
	r0, r1 := m.ContractsFunc.nextHook()(v0)
	m.ContractsFunc.appendCall(IAliceNetFactoryContractsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Contracts method of
// the parent MockIAliceNetFactory instance is invoked and the hook queue is
// empty.
func (f *IAliceNetFactoryContractsFunc) SetDefaultHook(hook func(*bind.CallOpts) ([][32]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Contracts method of the parent MockIAliceNetFactory instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IAliceNetFactoryContractsFunc) PushHook(hook func(*bind.CallOpts) ([][32]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryContractsFunc) SetDefaultReturn(r0 [][32]byte, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) ([][32]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryContractsFunc) PushReturn(r0 [][32]byte, r1 error) {
	f.PushHook(func(*bind.CallOpts) ([][32]byte, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryContractsFunc) nextHook() func(*bind.CallOpts) ([][32]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryContractsFunc) appendCall(r0 IAliceNetFactoryContractsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryContractsFuncCall objects
// describing the invocations of this function.
func (f *IAliceNetFactoryContractsFunc) History() []IAliceNetFactoryContractsFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryContractsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryContractsFuncCall is an object that describes an
// invocation of method Contracts on an instance of MockIAliceNetFactory.
type IAliceNetFactoryContractsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 [][32]byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryContractsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryContractsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryDeployCreateFunc describes the behavior when the
// DeployCreate method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryDeployCreateFunc struct {
	defaultHook func(*bind.TransactOpts, []byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []byte) (*types.Transaction, error)
	history     []IAliceNetFactoryDeployCreateFuncCall
	mutex       sync.Mutex
}

// DeployCreate delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) DeployCreate(v0 *bind.TransactOpts, v1 []byte) (*types.Transaction, error) {
	r0, r1 := m.DeployCreateFunc.nextHook()(v0, v1)
	m.DeployCreateFunc.appendCall(IAliceNetFactoryDeployCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeployCreate method
// of the parent MockIAliceNetFactory instance is invoked and the hook queue
// is empty.
func (f *IAliceNetFactoryDeployCreateFunc) SetDefaultHook(hook func(*bind.TransactOpts, []byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeployCreate method of the parent MockIAliceNetFactory instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IAliceNetFactoryDeployCreateFunc) PushHook(hook func(*bind.TransactOpts, []byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryDeployCreateFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryDeployCreateFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryDeployCreateFunc) nextHook() func(*bind.TransactOpts, []byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryDeployCreateFunc) appendCall(r0 IAliceNetFactoryDeployCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryDeployCreateFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryDeployCreateFunc) History() []IAliceNetFactoryDeployCreateFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryDeployCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryDeployCreateFuncCall is an object that describes an
// invocation of method DeployCreate on an instance of MockIAliceNetFactory.
type IAliceNetFactoryDeployCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryDeployCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryDeployCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryDeployCreate2Func describes the behavior when the
// DeployCreate2 method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryDeployCreate2Func struct {
	defaultHook func(*bind.TransactOpts, *big.Int, [32]byte, []byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int, [32]byte, []byte) (*types.Transaction, error)
	history     []IAliceNetFactoryDeployCreate2FuncCall
	mutex       sync.Mutex
}

// DeployCreate2 delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) DeployCreate2(v0 *bind.TransactOpts, v1 *big.Int, v2 [32]byte, v3 []byte) (*types.Transaction, error) {
	r0, r1 := m.DeployCreate2Func.nextHook()(v0, v1, v2, v3)
	m.DeployCreate2Func.appendCall(IAliceNetFactoryDeployCreate2FuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeployCreate2 method
// of the parent MockIAliceNetFactory instance is invoked and the hook queue
// is empty.
func (f *IAliceNetFactoryDeployCreate2Func) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int, [32]byte, []byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeployCreate2 method of the parent MockIAliceNetFactory instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IAliceNetFactoryDeployCreate2Func) PushHook(hook func(*bind.TransactOpts, *big.Int, [32]byte, []byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryDeployCreate2Func) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int, [32]byte, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryDeployCreate2Func) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int, [32]byte, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryDeployCreate2Func) nextHook() func(*bind.TransactOpts, *big.Int, [32]byte, []byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryDeployCreate2Func) appendCall(r0 IAliceNetFactoryDeployCreate2FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryDeployCreate2FuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryDeployCreate2Func) History() []IAliceNetFactoryDeployCreate2FuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryDeployCreate2FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryDeployCreate2FuncCall is an object that describes an
// invocation of method DeployCreate2 on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryDeployCreate2FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 [32]byte
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryDeployCreate2FuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryDeployCreate2FuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryDeployCreateAndRegisterFunc describes the behavior when
// the DeployCreateAndRegister method of the parent MockIAliceNetFactory
// instance is invoked.
type IAliceNetFactoryDeployCreateAndRegisterFunc struct {
	defaultHook func(*bind.TransactOpts, []byte, [32]byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []byte, [32]byte) (*types.Transaction, error)
	history     []IAliceNetFactoryDeployCreateAndRegisterFuncCall
	mutex       sync.Mutex
}

// DeployCreateAndRegister delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) DeployCreateAndRegister(v0 *bind.TransactOpts, v1 []byte, v2 [32]byte) (*types.Transaction, error) {
	r0, r1 := m.DeployCreateAndRegisterFunc.nextHook()(v0, v1, v2)
	m.DeployCreateAndRegisterFunc.appendCall(IAliceNetFactoryDeployCreateAndRegisterFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// DeployCreateAndRegister method of the parent MockIAliceNetFactory
// instance is invoked and the hook queue is empty.
func (f *IAliceNetFactoryDeployCreateAndRegisterFunc) SetDefaultHook(hook func(*bind.TransactOpts, []byte, [32]byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeployCreateAndRegister method of the parent MockIAliceNetFactory
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IAliceNetFactoryDeployCreateAndRegisterFunc) PushHook(hook func(*bind.TransactOpts, []byte, [32]byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryDeployCreateAndRegisterFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []byte, [32]byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryDeployCreateAndRegisterFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []byte, [32]byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryDeployCreateAndRegisterFunc) nextHook() func(*bind.TransactOpts, []byte, [32]byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryDeployCreateAndRegisterFunc) appendCall(r0 IAliceNetFactoryDeployCreateAndRegisterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IAliceNetFactoryDeployCreateAndRegisterFuncCall objects describing the
// invocations of this function.
func (f *IAliceNetFactoryDeployCreateAndRegisterFunc) History() []IAliceNetFactoryDeployCreateAndRegisterFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryDeployCreateAndRegisterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryDeployCreateAndRegisterFuncCall is an object that
// describes an invocation of method DeployCreateAndRegister on an instance
// of MockIAliceNetFactory.
type IAliceNetFactoryDeployCreateAndRegisterFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 [32]byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryDeployCreateAndRegisterFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryDeployCreateAndRegisterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryDeployProxyFunc describes the behavior when the
// DeployProxy method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryDeployProxyFunc struct {
	defaultHook func(*bind.TransactOpts, [32]byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, [32]byte) (*types.Transaction, error)
	history     []IAliceNetFactoryDeployProxyFuncCall
	mutex       sync.Mutex
}

// DeployProxy delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) DeployProxy(v0 *bind.TransactOpts, v1 [32]byte) (*types.Transaction, error) {
	r0, r1 := m.DeployProxyFunc.nextHook()(v0, v1)
	m.DeployProxyFunc.appendCall(IAliceNetFactoryDeployProxyFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeployProxy method
// of the parent MockIAliceNetFactory instance is invoked and the hook queue
// is empty.
func (f *IAliceNetFactoryDeployProxyFunc) SetDefaultHook(hook func(*bind.TransactOpts, [32]byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeployProxy method of the parent MockIAliceNetFactory instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IAliceNetFactoryDeployProxyFunc) PushHook(hook func(*bind.TransactOpts, [32]byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryDeployProxyFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, [32]byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryDeployProxyFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, [32]byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryDeployProxyFunc) nextHook() func(*bind.TransactOpts, [32]byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryDeployProxyFunc) appendCall(r0 IAliceNetFactoryDeployProxyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryDeployProxyFuncCall objects
// describing the invocations of this function.
func (f *IAliceNetFactoryDeployProxyFunc) History() []IAliceNetFactoryDeployProxyFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryDeployProxyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryDeployProxyFuncCall is an object that describes an
// invocation of method DeployProxy on an instance of MockIAliceNetFactory.
type IAliceNetFactoryDeployProxyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryDeployProxyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryDeployProxyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryFallbackFunc describes the behavior when the Fallback
// method of the parent MockIAliceNetFactory instance is invoked.
type IAliceNetFactoryFallbackFunc struct {
	defaultHook func(*bind.TransactOpts, []byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []byte) (*types.Transaction, error)
	history     []IAliceNetFactoryFallbackFuncCall
	mutex       sync.Mutex
}

// Fallback delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIAliceNetFactory) Fallback(v0 *bind.TransactOpts, v1 []byte) (*types.Transaction, error) {
	r0, r1 := m.FallbackFunc.nextHook()(v0, v1)
	m.FallbackFunc.appendCall(IAliceNetFactoryFallbackFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Fallback method of
// the parent MockIAliceNetFactory instance is invoked and the hook queue is
// empty.
func (f *IAliceNetFactoryFallbackFunc) SetDefaultHook(hook func(*bind.TransactOpts, []byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Fallback method of the parent MockIAliceNetFactory instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IAliceNetFactoryFallbackFunc) PushHook(hook func(*bind.TransactOpts, []byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryFallbackFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryFallbackFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryFallbackFunc) nextHook() func(*bind.TransactOpts, []byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryFallbackFunc) appendCall(r0 IAliceNetFactoryFallbackFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryFallbackFuncCall objects
// describing the invocations of this function.
func (f *IAliceNetFactoryFallbackFunc) History() []IAliceNetFactoryFallbackFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryFallbackFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryFallbackFuncCall is an object that describes an
// invocation of method Fallback on an instance of MockIAliceNetFactory.
type IAliceNetFactoryFallbackFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryFallbackFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryFallbackFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryFilterDeployedFunc describes the behavior when the
// FilterDeployed method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryFilterDeployedFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedIterator, error)
	history     []IAliceNetFactoryFilterDeployedFuncCall
	mutex       sync.Mutex
}

// FilterDeployed delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) FilterDeployed(v0 *bind.FilterOpts) (*bindings.AliceNetFactoryDeployedIterator, error) {
	r0, r1 := m.FilterDeployedFunc.nextHook()(v0)
	m.FilterDeployedFunc.appendCall(IAliceNetFactoryFilterDeployedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterDeployed
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryFilterDeployedFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterDeployed method of the parent MockIAliceNetFactory instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IAliceNetFactoryFilterDeployedFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryFilterDeployedFunc) SetDefaultReturn(r0 *bindings.AliceNetFactoryDeployedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryFilterDeployedFunc) PushReturn(r0 *bindings.AliceNetFactoryDeployedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedIterator, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryFilterDeployedFunc) nextHook() func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryFilterDeployedFunc) appendCall(r0 IAliceNetFactoryFilterDeployedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryFilterDeployedFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryFilterDeployedFunc) History() []IAliceNetFactoryFilterDeployedFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryFilterDeployedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryFilterDeployedFuncCall is an object that describes an
// invocation of method FilterDeployed on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryFilterDeployedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.AliceNetFactoryDeployedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryFilterDeployedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryFilterDeployedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryFilterDeployedProxyFunc describes the behavior when the
// FilterDeployedProxy method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryFilterDeployedProxyFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedProxyIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedProxyIterator, error)
	history     []IAliceNetFactoryFilterDeployedProxyFuncCall
	mutex       sync.Mutex
}

// FilterDeployedProxy delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) FilterDeployedProxy(v0 *bind.FilterOpts) (*bindings.AliceNetFactoryDeployedProxyIterator, error) {
	r0, r1 := m.FilterDeployedProxyFunc.nextHook()(v0)
	m.FilterDeployedProxyFunc.appendCall(IAliceNetFactoryFilterDeployedProxyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterDeployedProxy
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryFilterDeployedProxyFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedProxyIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterDeployedProxy method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryFilterDeployedProxyFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedProxyIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryFilterDeployedProxyFunc) SetDefaultReturn(r0 *bindings.AliceNetFactoryDeployedProxyIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedProxyIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryFilterDeployedProxyFunc) PushReturn(r0 *bindings.AliceNetFactoryDeployedProxyIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedProxyIterator, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryFilterDeployedProxyFunc) nextHook() func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedProxyIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryFilterDeployedProxyFunc) appendCall(r0 IAliceNetFactoryFilterDeployedProxyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryFilterDeployedProxyFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryFilterDeployedProxyFunc) History() []IAliceNetFactoryFilterDeployedProxyFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryFilterDeployedProxyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryFilterDeployedProxyFuncCall is an object that describes
// an invocation of method FilterDeployedProxy on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryFilterDeployedProxyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.AliceNetFactoryDeployedProxyIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryFilterDeployedProxyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryFilterDeployedProxyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryFilterDeployedRawFunc describes the behavior when the
// FilterDeployedRaw method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryFilterDeployedRawFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedRawIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedRawIterator, error)
	history     []IAliceNetFactoryFilterDeployedRawFuncCall
	mutex       sync.Mutex
}

// FilterDeployedRaw delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) FilterDeployedRaw(v0 *bind.FilterOpts) (*bindings.AliceNetFactoryDeployedRawIterator, error) {
	r0, r1 := m.FilterDeployedRawFunc.nextHook()(v0)
	m.FilterDeployedRawFunc.appendCall(IAliceNetFactoryFilterDeployedRawFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterDeployedRaw
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryFilterDeployedRawFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedRawIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterDeployedRaw method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryFilterDeployedRawFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedRawIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryFilterDeployedRawFunc) SetDefaultReturn(r0 *bindings.AliceNetFactoryDeployedRawIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedRawIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryFilterDeployedRawFunc) PushReturn(r0 *bindings.AliceNetFactoryDeployedRawIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedRawIterator, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryFilterDeployedRawFunc) nextHook() func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedRawIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryFilterDeployedRawFunc) appendCall(r0 IAliceNetFactoryFilterDeployedRawFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryFilterDeployedRawFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryFilterDeployedRawFunc) History() []IAliceNetFactoryFilterDeployedRawFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryFilterDeployedRawFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryFilterDeployedRawFuncCall is an object that describes an
// invocation of method FilterDeployedRaw on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryFilterDeployedRawFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.AliceNetFactoryDeployedRawIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryFilterDeployedRawFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryFilterDeployedRawFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryFilterDeployedStaticFunc describes the behavior when the
// FilterDeployedStatic method of the parent MockIAliceNetFactory instance
// is invoked.
type IAliceNetFactoryFilterDeployedStaticFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedStaticIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedStaticIterator, error)
	history     []IAliceNetFactoryFilterDeployedStaticFuncCall
	mutex       sync.Mutex
}

// FilterDeployedStatic delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) FilterDeployedStatic(v0 *bind.FilterOpts) (*bindings.AliceNetFactoryDeployedStaticIterator, error) {
	r0, r1 := m.FilterDeployedStaticFunc.nextHook()(v0)
	m.FilterDeployedStaticFunc.appendCall(IAliceNetFactoryFilterDeployedStaticFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterDeployedStatic
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryFilterDeployedStaticFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedStaticIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterDeployedStatic method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryFilterDeployedStaticFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedStaticIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryFilterDeployedStaticFunc) SetDefaultReturn(r0 *bindings.AliceNetFactoryDeployedStaticIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedStaticIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryFilterDeployedStaticFunc) PushReturn(r0 *bindings.AliceNetFactoryDeployedStaticIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedStaticIterator, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryFilterDeployedStaticFunc) nextHook() func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedStaticIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryFilterDeployedStaticFunc) appendCall(r0 IAliceNetFactoryFilterDeployedStaticFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IAliceNetFactoryFilterDeployedStaticFuncCall objects describing the
// invocations of this function.
func (f *IAliceNetFactoryFilterDeployedStaticFunc) History() []IAliceNetFactoryFilterDeployedStaticFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryFilterDeployedStaticFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryFilterDeployedStaticFuncCall is an object that describes
// an invocation of method FilterDeployedStatic on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryFilterDeployedStaticFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.AliceNetFactoryDeployedStaticIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryFilterDeployedStaticFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryFilterDeployedStaticFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryFilterDeployedTemplateFunc describes the behavior when
// the FilterDeployedTemplate method of the parent MockIAliceNetFactory
// instance is invoked.
type IAliceNetFactoryFilterDeployedTemplateFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedTemplateIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedTemplateIterator, error)
	history     []IAliceNetFactoryFilterDeployedTemplateFuncCall
	mutex       sync.Mutex
}

// FilterDeployedTemplate delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) FilterDeployedTemplate(v0 *bind.FilterOpts) (*bindings.AliceNetFactoryDeployedTemplateIterator, error) {
	r0, r1 := m.FilterDeployedTemplateFunc.nextHook()(v0)
	m.FilterDeployedTemplateFunc.appendCall(IAliceNetFactoryFilterDeployedTemplateFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterDeployedTemplate method of the parent MockIAliceNetFactory instance
// is invoked and the hook queue is empty.
func (f *IAliceNetFactoryFilterDeployedTemplateFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedTemplateIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterDeployedTemplate method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryFilterDeployedTemplateFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedTemplateIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryFilterDeployedTemplateFunc) SetDefaultReturn(r0 *bindings.AliceNetFactoryDeployedTemplateIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedTemplateIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryFilterDeployedTemplateFunc) PushReturn(r0 *bindings.AliceNetFactoryDeployedTemplateIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedTemplateIterator, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryFilterDeployedTemplateFunc) nextHook() func(*bind.FilterOpts) (*bindings.AliceNetFactoryDeployedTemplateIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryFilterDeployedTemplateFunc) appendCall(r0 IAliceNetFactoryFilterDeployedTemplateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IAliceNetFactoryFilterDeployedTemplateFuncCall objects describing the
// invocations of this function.
func (f *IAliceNetFactoryFilterDeployedTemplateFunc) History() []IAliceNetFactoryFilterDeployedTemplateFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryFilterDeployedTemplateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryFilterDeployedTemplateFuncCall is an object that
// describes an invocation of method FilterDeployedTemplate on an instance
// of MockIAliceNetFactory.
type IAliceNetFactoryFilterDeployedTemplateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.AliceNetFactoryDeployedTemplateIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryFilterDeployedTemplateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryFilterDeployedTemplateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryFilterUpgradedProxyFunc describes the behavior when the
// FilterUpgradedProxy method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryFilterUpgradedProxyFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.AliceNetFactoryUpgradedProxyIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.AliceNetFactoryUpgradedProxyIterator, error)
	history     []IAliceNetFactoryFilterUpgradedProxyFuncCall
	mutex       sync.Mutex
}

// FilterUpgradedProxy delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) FilterUpgradedProxy(v0 *bind.FilterOpts) (*bindings.AliceNetFactoryUpgradedProxyIterator, error) {
	r0, r1 := m.FilterUpgradedProxyFunc.nextHook()(v0)
	m.FilterUpgradedProxyFunc.appendCall(IAliceNetFactoryFilterUpgradedProxyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterUpgradedProxy
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryFilterUpgradedProxyFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.AliceNetFactoryUpgradedProxyIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterUpgradedProxy method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryFilterUpgradedProxyFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.AliceNetFactoryUpgradedProxyIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryFilterUpgradedProxyFunc) SetDefaultReturn(r0 *bindings.AliceNetFactoryUpgradedProxyIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.AliceNetFactoryUpgradedProxyIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryFilterUpgradedProxyFunc) PushReturn(r0 *bindings.AliceNetFactoryUpgradedProxyIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.AliceNetFactoryUpgradedProxyIterator, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryFilterUpgradedProxyFunc) nextHook() func(*bind.FilterOpts) (*bindings.AliceNetFactoryUpgradedProxyIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryFilterUpgradedProxyFunc) appendCall(r0 IAliceNetFactoryFilterUpgradedProxyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryFilterUpgradedProxyFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryFilterUpgradedProxyFunc) History() []IAliceNetFactoryFilterUpgradedProxyFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryFilterUpgradedProxyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryFilterUpgradedProxyFuncCall is an object that describes
// an invocation of method FilterUpgradedProxy on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryFilterUpgradedProxyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.AliceNetFactoryUpgradedProxyIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryFilterUpgradedProxyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryFilterUpgradedProxyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryGetALCAAddressFunc describes the behavior when the
// GetALCAAddress method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryGetALCAAddressFunc struct {
	defaultHook func(*bind.CallOpts) (common.Address, error)
	hooks       []func(*bind.CallOpts) (common.Address, error)
	history     []IAliceNetFactoryGetALCAAddressFuncCall
	mutex       sync.Mutex
}

// GetALCAAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) GetALCAAddress(v0 *bind.CallOpts) (common.Address, error) {
	r0, r1 := m.GetALCAAddressFunc.nextHook()(v0)
	m.GetALCAAddressFunc.appendCall(IAliceNetFactoryGetALCAAddressFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetALCAAddress
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryGetALCAAddressFunc) SetDefaultHook(hook func(*bind.CallOpts) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetALCAAddress method of the parent MockIAliceNetFactory instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IAliceNetFactoryGetALCAAddressFunc) PushHook(hook func(*bind.CallOpts) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryGetALCAAddressFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryGetALCAAddressFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts) (common.Address, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryGetALCAAddressFunc) nextHook() func(*bind.CallOpts) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryGetALCAAddressFunc) appendCall(r0 IAliceNetFactoryGetALCAAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryGetALCAAddressFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryGetALCAAddressFunc) History() []IAliceNetFactoryGetALCAAddressFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryGetALCAAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryGetALCAAddressFuncCall is an object that describes an
// invocation of method GetALCAAddress on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryGetALCAAddressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryGetALCAAddressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryGetALCAAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryGetALCACreationCodeHashFunc describes the behavior when
// the GetALCACreationCodeHash method of the parent MockIAliceNetFactory
// instance is invoked.
type IAliceNetFactoryGetALCACreationCodeHashFunc struct {
	defaultHook func(*bind.CallOpts) ([32]byte, error)
	hooks       []func(*bind.CallOpts) ([32]byte, error)
	history     []IAliceNetFactoryGetALCACreationCodeHashFuncCall
	mutex       sync.Mutex
}

// GetALCACreationCodeHash delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) GetALCACreationCodeHash(v0 *bind.CallOpts) ([32]byte, error) {
	r0, r1 := m.GetALCACreationCodeHashFunc.nextHook()(v0)
	m.GetALCACreationCodeHashFunc.appendCall(IAliceNetFactoryGetALCACreationCodeHashFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetALCACreationCodeHash method of the parent MockIAliceNetFactory
// instance is invoked and the hook queue is empty.
func (f *IAliceNetFactoryGetALCACreationCodeHashFunc) SetDefaultHook(hook func(*bind.CallOpts) ([32]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetALCACreationCodeHash method of the parent MockIAliceNetFactory
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IAliceNetFactoryGetALCACreationCodeHashFunc) PushHook(hook func(*bind.CallOpts) ([32]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryGetALCACreationCodeHashFunc) SetDefaultReturn(r0 [32]byte, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) ([32]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryGetALCACreationCodeHashFunc) PushReturn(r0 [32]byte, r1 error) {
	f.PushHook(func(*bind.CallOpts) ([32]byte, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryGetALCACreationCodeHashFunc) nextHook() func(*bind.CallOpts) ([32]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryGetALCACreationCodeHashFunc) appendCall(r0 IAliceNetFactoryGetALCACreationCodeHashFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IAliceNetFactoryGetALCACreationCodeHashFuncCall objects describing the
// invocations of this function.
func (f *IAliceNetFactoryGetALCACreationCodeHashFunc) History() []IAliceNetFactoryGetALCACreationCodeHashFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryGetALCACreationCodeHashFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryGetALCACreationCodeHashFuncCall is an object that
// describes an invocation of method GetALCACreationCodeHash on an instance
// of MockIAliceNetFactory.
type IAliceNetFactoryGetALCACreationCodeHashFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 [32]byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryGetALCACreationCodeHashFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryGetALCACreationCodeHashFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryGetImplementationFunc describes the behavior when the
// GetImplementation method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryGetImplementationFunc struct {
	defaultHook func(*bind.CallOpts) (common.Address, error)
	hooks       []func(*bind.CallOpts) (common.Address, error)
	history     []IAliceNetFactoryGetImplementationFuncCall
	mutex       sync.Mutex
}

// GetImplementation delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) GetImplementation(v0 *bind.CallOpts) (common.Address, error) {
	r0, r1 := m.GetImplementationFunc.nextHook()(v0)
	m.GetImplementationFunc.appendCall(IAliceNetFactoryGetImplementationFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetImplementation
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryGetImplementationFunc) SetDefaultHook(hook func(*bind.CallOpts) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetImplementation method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryGetImplementationFunc) PushHook(hook func(*bind.CallOpts) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryGetImplementationFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryGetImplementationFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts) (common.Address, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryGetImplementationFunc) nextHook() func(*bind.CallOpts) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryGetImplementationFunc) appendCall(r0 IAliceNetFactoryGetImplementationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryGetImplementationFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryGetImplementationFunc) History() []IAliceNetFactoryGetImplementationFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryGetImplementationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryGetImplementationFuncCall is an object that describes an
// invocation of method GetImplementation on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryGetImplementationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryGetImplementationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryGetImplementationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryGetMetamorphicContractAddressFunc describes the behavior
// when the GetMetamorphicContractAddress method of the parent
// MockIAliceNetFactory instance is invoked.
type IAliceNetFactoryGetMetamorphicContractAddressFunc struct {
	defaultHook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	hooks       []func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	history     []IAliceNetFactoryGetMetamorphicContractAddressFuncCall
	mutex       sync.Mutex
}

// GetMetamorphicContractAddress delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) GetMetamorphicContractAddress(v0 *bind.CallOpts, v1 [32]byte, v2 common.Address) (common.Address, error) {
	r0, r1 := m.GetMetamorphicContractAddressFunc.nextHook()(v0, v1, v2)
	m.GetMetamorphicContractAddressFunc.appendCall(IAliceNetFactoryGetMetamorphicContractAddressFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMetamorphicContractAddress method of the parent MockIAliceNetFactory
// instance is invoked and the hook queue is empty.
func (f *IAliceNetFactoryGetMetamorphicContractAddressFunc) SetDefaultHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMetamorphicContractAddress method of the parent MockIAliceNetFactory
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IAliceNetFactoryGetMetamorphicContractAddressFunc) PushHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryGetMetamorphicContractAddressFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryGetMetamorphicContractAddressFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryGetMetamorphicContractAddressFunc) nextHook() func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryGetMetamorphicContractAddressFunc) appendCall(r0 IAliceNetFactoryGetMetamorphicContractAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IAliceNetFactoryGetMetamorphicContractAddressFuncCall objects describing
// the invocations of this function.
func (f *IAliceNetFactoryGetMetamorphicContractAddressFunc) History() []IAliceNetFactoryGetMetamorphicContractAddressFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryGetMetamorphicContractAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryGetMetamorphicContractAddressFuncCall is an object that
// describes an invocation of method GetMetamorphicContractAddress on an
// instance of MockIAliceNetFactory.
type IAliceNetFactoryGetMetamorphicContractAddressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryGetMetamorphicContractAddressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryGetMetamorphicContractAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryGetNumContractsFunc describes the behavior when the
// GetNumContracts method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryGetNumContractsFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IAliceNetFactoryGetNumContractsFuncCall
	mutex       sync.Mutex
}

// GetNumContracts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) GetNumContracts(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetNumContractsFunc.nextHook()(v0)
	m.GetNumContractsFunc.appendCall(IAliceNetFactoryGetNumContractsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetNumContracts
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryGetNumContractsFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetNumContracts method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryGetNumContractsFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryGetNumContractsFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryGetNumContractsFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryGetNumContractsFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryGetNumContractsFunc) appendCall(r0 IAliceNetFactoryGetNumContractsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryGetNumContractsFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryGetNumContractsFunc) History() []IAliceNetFactoryGetNumContractsFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryGetNumContractsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryGetNumContractsFuncCall is an object that describes an
// invocation of method GetNumContracts on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryGetNumContractsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryGetNumContractsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryGetNumContractsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryGetProxyImplementationFunc describes the behavior when
// the GetProxyImplementation method of the parent MockIAliceNetFactory
// instance is invoked.
type IAliceNetFactoryGetProxyImplementationFunc struct {
	defaultHook func(*bind.CallOpts, common.Address) (common.Address, error)
	hooks       []func(*bind.CallOpts, common.Address) (common.Address, error)
	history     []IAliceNetFactoryGetProxyImplementationFuncCall
	mutex       sync.Mutex
}

// GetProxyImplementation delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) GetProxyImplementation(v0 *bind.CallOpts, v1 common.Address) (common.Address, error) {
	r0, r1 := m.GetProxyImplementationFunc.nextHook()(v0, v1)
	m.GetProxyImplementationFunc.appendCall(IAliceNetFactoryGetProxyImplementationFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetProxyImplementation method of the parent MockIAliceNetFactory instance
// is invoked and the hook queue is empty.
func (f *IAliceNetFactoryGetProxyImplementationFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetProxyImplementation method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryGetProxyImplementationFunc) PushHook(hook func(*bind.CallOpts, common.Address) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryGetProxyImplementationFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryGetProxyImplementationFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address) (common.Address, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryGetProxyImplementationFunc) nextHook() func(*bind.CallOpts, common.Address) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryGetProxyImplementationFunc) appendCall(r0 IAliceNetFactoryGetProxyImplementationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IAliceNetFactoryGetProxyImplementationFuncCall objects describing the
// invocations of this function.
func (f *IAliceNetFactoryGetProxyImplementationFunc) History() []IAliceNetFactoryGetProxyImplementationFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryGetProxyImplementationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryGetProxyImplementationFuncCall is an object that
// describes an invocation of method GetProxyImplementation on an instance
// of MockIAliceNetFactory.
type IAliceNetFactoryGetProxyImplementationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryGetProxyImplementationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryGetProxyImplementationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryInitializeContractFunc describes the behavior when the
// InitializeContract method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryInitializeContractFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, []byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, []byte) (*types.Transaction, error)
	history     []IAliceNetFactoryInitializeContractFuncCall
	mutex       sync.Mutex
}

// InitializeContract delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) InitializeContract(v0 *bind.TransactOpts, v1 common.Address, v2 []byte) (*types.Transaction, error) {
	r0, r1 := m.InitializeContractFunc.nextHook()(v0, v1, v2)
	m.InitializeContractFunc.appendCall(IAliceNetFactoryInitializeContractFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the InitializeContract
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryInitializeContractFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, []byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InitializeContract method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryInitializeContractFunc) PushHook(hook func(*bind.TransactOpts, common.Address, []byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryInitializeContractFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryInitializeContractFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryInitializeContractFunc) nextHook() func(*bind.TransactOpts, common.Address, []byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryInitializeContractFunc) appendCall(r0 IAliceNetFactoryInitializeContractFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryInitializeContractFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryInitializeContractFunc) History() []IAliceNetFactoryInitializeContractFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryInitializeContractFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryInitializeContractFuncCall is an object that describes an
// invocation of method InitializeContract on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryInitializeContractFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryInitializeContractFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryInitializeContractFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryLookupFunc describes the behavior when the Lookup method
// of the parent MockIAliceNetFactory instance is invoked.
type IAliceNetFactoryLookupFunc struct {
	defaultHook func(*bind.CallOpts, [32]byte) (common.Address, error)
	hooks       []func(*bind.CallOpts, [32]byte) (common.Address, error)
	history     []IAliceNetFactoryLookupFuncCall
	mutex       sync.Mutex
}

// Lookup delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIAliceNetFactory) Lookup(v0 *bind.CallOpts, v1 [32]byte) (common.Address, error) {
	r0, r1 := m.LookupFunc.nextHook()(v0, v1)
	m.LookupFunc.appendCall(IAliceNetFactoryLookupFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Lookup method of the
// parent MockIAliceNetFactory instance is invoked and the hook queue is
// empty.
func (f *IAliceNetFactoryLookupFunc) SetDefaultHook(hook func(*bind.CallOpts, [32]byte) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Lookup method of the parent MockIAliceNetFactory instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IAliceNetFactoryLookupFunc) PushHook(hook func(*bind.CallOpts, [32]byte) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryLookupFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, [32]byte) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryLookupFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, [32]byte) (common.Address, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryLookupFunc) nextHook() func(*bind.CallOpts, [32]byte) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryLookupFunc) appendCall(r0 IAliceNetFactoryLookupFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryLookupFuncCall objects
// describing the invocations of this function.
func (f *IAliceNetFactoryLookupFunc) History() []IAliceNetFactoryLookupFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryLookupFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryLookupFuncCall is an object that describes an invocation
// of method Lookup on an instance of MockIAliceNetFactory.
type IAliceNetFactoryLookupFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryLookupFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryLookupFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryMultiCallFunc describes the behavior when the MultiCall
// method of the parent MockIAliceNetFactory instance is invoked.
type IAliceNetFactoryMultiCallFunc struct {
	defaultHook func(*bind.TransactOpts, []bindings.AliceNetFactoryBaseMultiCallArgs) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []bindings.AliceNetFactoryBaseMultiCallArgs) (*types.Transaction, error)
	history     []IAliceNetFactoryMultiCallFuncCall
	mutex       sync.Mutex
}

// MultiCall delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIAliceNetFactory) MultiCall(v0 *bind.TransactOpts, v1 []bindings.AliceNetFactoryBaseMultiCallArgs) (*types.Transaction, error) {
	r0, r1 := m.MultiCallFunc.nextHook()(v0, v1)
	m.MultiCallFunc.appendCall(IAliceNetFactoryMultiCallFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MultiCall method of
// the parent MockIAliceNetFactory instance is invoked and the hook queue is
// empty.
func (f *IAliceNetFactoryMultiCallFunc) SetDefaultHook(hook func(*bind.TransactOpts, []bindings.AliceNetFactoryBaseMultiCallArgs) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MultiCall method of the parent MockIAliceNetFactory instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IAliceNetFactoryMultiCallFunc) PushHook(hook func(*bind.TransactOpts, []bindings.AliceNetFactoryBaseMultiCallArgs) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryMultiCallFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []bindings.AliceNetFactoryBaseMultiCallArgs) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryMultiCallFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []bindings.AliceNetFactoryBaseMultiCallArgs) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryMultiCallFunc) nextHook() func(*bind.TransactOpts, []bindings.AliceNetFactoryBaseMultiCallArgs) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryMultiCallFunc) appendCall(r0 IAliceNetFactoryMultiCallFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryMultiCallFuncCall objects
// describing the invocations of this function.
func (f *IAliceNetFactoryMultiCallFunc) History() []IAliceNetFactoryMultiCallFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryMultiCallFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryMultiCallFuncCall is an object that describes an
// invocation of method MultiCall on an instance of MockIAliceNetFactory.
type IAliceNetFactoryMultiCallFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []bindings.AliceNetFactoryBaseMultiCallArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryMultiCallFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryMultiCallFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryOwnerFunc describes the behavior when the Owner method of
// the parent MockIAliceNetFactory instance is invoked.
type IAliceNetFactoryOwnerFunc struct {
	defaultHook func(*bind.CallOpts) (common.Address, error)
	hooks       []func(*bind.CallOpts) (common.Address, error)
	history     []IAliceNetFactoryOwnerFuncCall
	mutex       sync.Mutex
}

// Owner delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIAliceNetFactory) Owner(v0 *bind.CallOpts) (common.Address, error) {
	r0, r1 := m.OwnerFunc.nextHook()(v0)
	m.OwnerFunc.appendCall(IAliceNetFactoryOwnerFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Owner method of the
// parent MockIAliceNetFactory instance is invoked and the hook queue is
// empty.
func (f *IAliceNetFactoryOwnerFunc) SetDefaultHook(hook func(*bind.CallOpts) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Owner method of the parent MockIAliceNetFactory instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IAliceNetFactoryOwnerFunc) PushHook(hook func(*bind.CallOpts) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryOwnerFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryOwnerFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts) (common.Address, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryOwnerFunc) nextHook() func(*bind.CallOpts) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryOwnerFunc) appendCall(r0 IAliceNetFactoryOwnerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryOwnerFuncCall objects
// describing the invocations of this function.
func (f *IAliceNetFactoryOwnerFunc) History() []IAliceNetFactoryOwnerFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryOwnerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryOwnerFuncCall is an object that describes an invocation
// of method Owner on an instance of MockIAliceNetFactory.
type IAliceNetFactoryOwnerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryOwnerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryOwnerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryParseDeployedFunc describes the behavior when the
// ParseDeployed method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryParseDeployedFunc struct {
	defaultHook func(types.Log) (*bindings.AliceNetFactoryDeployed, error)
	hooks       []func(types.Log) (*bindings.AliceNetFactoryDeployed, error)
	history     []IAliceNetFactoryParseDeployedFuncCall
	mutex       sync.Mutex
}

// ParseDeployed delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) ParseDeployed(v0 types.Log) (*bindings.AliceNetFactoryDeployed, error) {
	r0, r1 := m.ParseDeployedFunc.nextHook()(v0)
	m.ParseDeployedFunc.appendCall(IAliceNetFactoryParseDeployedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseDeployed method
// of the parent MockIAliceNetFactory instance is invoked and the hook queue
// is empty.
func (f *IAliceNetFactoryParseDeployedFunc) SetDefaultHook(hook func(types.Log) (*bindings.AliceNetFactoryDeployed, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseDeployed method of the parent MockIAliceNetFactory instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IAliceNetFactoryParseDeployedFunc) PushHook(hook func(types.Log) (*bindings.AliceNetFactoryDeployed, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryParseDeployedFunc) SetDefaultReturn(r0 *bindings.AliceNetFactoryDeployed, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.AliceNetFactoryDeployed, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryParseDeployedFunc) PushReturn(r0 *bindings.AliceNetFactoryDeployed, r1 error) {
	f.PushHook(func(types.Log) (*bindings.AliceNetFactoryDeployed, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryParseDeployedFunc) nextHook() func(types.Log) (*bindings.AliceNetFactoryDeployed, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryParseDeployedFunc) appendCall(r0 IAliceNetFactoryParseDeployedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryParseDeployedFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryParseDeployedFunc) History() []IAliceNetFactoryParseDeployedFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryParseDeployedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryParseDeployedFuncCall is an object that describes an
// invocation of method ParseDeployed on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryParseDeployedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.AliceNetFactoryDeployed
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryParseDeployedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryParseDeployedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryParseDeployedProxyFunc describes the behavior when the
// ParseDeployedProxy method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryParseDeployedProxyFunc struct {
	defaultHook func(types.Log) (*bindings.AliceNetFactoryDeployedProxy, error)
	hooks       []func(types.Log) (*bindings.AliceNetFactoryDeployedProxy, error)
	history     []IAliceNetFactoryParseDeployedProxyFuncCall
	mutex       sync.Mutex
}

// ParseDeployedProxy delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) ParseDeployedProxy(v0 types.Log) (*bindings.AliceNetFactoryDeployedProxy, error) {
	r0, r1 := m.ParseDeployedProxyFunc.nextHook()(v0)
	m.ParseDeployedProxyFunc.appendCall(IAliceNetFactoryParseDeployedProxyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseDeployedProxy
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryParseDeployedProxyFunc) SetDefaultHook(hook func(types.Log) (*bindings.AliceNetFactoryDeployedProxy, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseDeployedProxy method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryParseDeployedProxyFunc) PushHook(hook func(types.Log) (*bindings.AliceNetFactoryDeployedProxy, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryParseDeployedProxyFunc) SetDefaultReturn(r0 *bindings.AliceNetFactoryDeployedProxy, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.AliceNetFactoryDeployedProxy, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryParseDeployedProxyFunc) PushReturn(r0 *bindings.AliceNetFactoryDeployedProxy, r1 error) {
	f.PushHook(func(types.Log) (*bindings.AliceNetFactoryDeployedProxy, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryParseDeployedProxyFunc) nextHook() func(types.Log) (*bindings.AliceNetFactoryDeployedProxy, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryParseDeployedProxyFunc) appendCall(r0 IAliceNetFactoryParseDeployedProxyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryParseDeployedProxyFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryParseDeployedProxyFunc) History() []IAliceNetFactoryParseDeployedProxyFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryParseDeployedProxyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryParseDeployedProxyFuncCall is an object that describes an
// invocation of method ParseDeployedProxy on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryParseDeployedProxyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.AliceNetFactoryDeployedProxy
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryParseDeployedProxyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryParseDeployedProxyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryParseDeployedRawFunc describes the behavior when the
// ParseDeployedRaw method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryParseDeployedRawFunc struct {
	defaultHook func(types.Log) (*bindings.AliceNetFactoryDeployedRaw, error)
	hooks       []func(types.Log) (*bindings.AliceNetFactoryDeployedRaw, error)
	history     []IAliceNetFactoryParseDeployedRawFuncCall
	mutex       sync.Mutex
}

// ParseDeployedRaw delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) ParseDeployedRaw(v0 types.Log) (*bindings.AliceNetFactoryDeployedRaw, error) {
	r0, r1 := m.ParseDeployedRawFunc.nextHook()(v0)
	m.ParseDeployedRawFunc.appendCall(IAliceNetFactoryParseDeployedRawFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseDeployedRaw
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryParseDeployedRawFunc) SetDefaultHook(hook func(types.Log) (*bindings.AliceNetFactoryDeployedRaw, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseDeployedRaw method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryParseDeployedRawFunc) PushHook(hook func(types.Log) (*bindings.AliceNetFactoryDeployedRaw, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryParseDeployedRawFunc) SetDefaultReturn(r0 *bindings.AliceNetFactoryDeployedRaw, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.AliceNetFactoryDeployedRaw, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryParseDeployedRawFunc) PushReturn(r0 *bindings.AliceNetFactoryDeployedRaw, r1 error) {
	f.PushHook(func(types.Log) (*bindings.AliceNetFactoryDeployedRaw, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryParseDeployedRawFunc) nextHook() func(types.Log) (*bindings.AliceNetFactoryDeployedRaw, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryParseDeployedRawFunc) appendCall(r0 IAliceNetFactoryParseDeployedRawFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryParseDeployedRawFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryParseDeployedRawFunc) History() []IAliceNetFactoryParseDeployedRawFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryParseDeployedRawFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryParseDeployedRawFuncCall is an object that describes an
// invocation of method ParseDeployedRaw on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryParseDeployedRawFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.AliceNetFactoryDeployedRaw
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryParseDeployedRawFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryParseDeployedRawFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryParseDeployedStaticFunc describes the behavior when the
// ParseDeployedStatic method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryParseDeployedStaticFunc struct {
	defaultHook func(types.Log) (*bindings.AliceNetFactoryDeployedStatic, error)
	hooks       []func(types.Log) (*bindings.AliceNetFactoryDeployedStatic, error)
	history     []IAliceNetFactoryParseDeployedStaticFuncCall
	mutex       sync.Mutex
}

// ParseDeployedStatic delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) ParseDeployedStatic(v0 types.Log) (*bindings.AliceNetFactoryDeployedStatic, error) {
	r0, r1 := m.ParseDeployedStaticFunc.nextHook()(v0)
	m.ParseDeployedStaticFunc.appendCall(IAliceNetFactoryParseDeployedStaticFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseDeployedStatic
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryParseDeployedStaticFunc) SetDefaultHook(hook func(types.Log) (*bindings.AliceNetFactoryDeployedStatic, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseDeployedStatic method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryParseDeployedStaticFunc) PushHook(hook func(types.Log) (*bindings.AliceNetFactoryDeployedStatic, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryParseDeployedStaticFunc) SetDefaultReturn(r0 *bindings.AliceNetFactoryDeployedStatic, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.AliceNetFactoryDeployedStatic, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryParseDeployedStaticFunc) PushReturn(r0 *bindings.AliceNetFactoryDeployedStatic, r1 error) {
	f.PushHook(func(types.Log) (*bindings.AliceNetFactoryDeployedStatic, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryParseDeployedStaticFunc) nextHook() func(types.Log) (*bindings.AliceNetFactoryDeployedStatic, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryParseDeployedStaticFunc) appendCall(r0 IAliceNetFactoryParseDeployedStaticFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryParseDeployedStaticFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryParseDeployedStaticFunc) History() []IAliceNetFactoryParseDeployedStaticFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryParseDeployedStaticFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryParseDeployedStaticFuncCall is an object that describes
// an invocation of method ParseDeployedStatic on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryParseDeployedStaticFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.AliceNetFactoryDeployedStatic
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryParseDeployedStaticFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryParseDeployedStaticFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryParseDeployedTemplateFunc describes the behavior when the
// ParseDeployedTemplate method of the parent MockIAliceNetFactory instance
// is invoked.
type IAliceNetFactoryParseDeployedTemplateFunc struct {
	defaultHook func(types.Log) (*bindings.AliceNetFactoryDeployedTemplate, error)
	hooks       []func(types.Log) (*bindings.AliceNetFactoryDeployedTemplate, error)
	history     []IAliceNetFactoryParseDeployedTemplateFuncCall
	mutex       sync.Mutex
}

// ParseDeployedTemplate delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) ParseDeployedTemplate(v0 types.Log) (*bindings.AliceNetFactoryDeployedTemplate, error) {
	r0, r1 := m.ParseDeployedTemplateFunc.nextHook()(v0)
	m.ParseDeployedTemplateFunc.appendCall(IAliceNetFactoryParseDeployedTemplateFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseDeployedTemplate method of the parent MockIAliceNetFactory instance
// is invoked and the hook queue is empty.
func (f *IAliceNetFactoryParseDeployedTemplateFunc) SetDefaultHook(hook func(types.Log) (*bindings.AliceNetFactoryDeployedTemplate, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseDeployedTemplate method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryParseDeployedTemplateFunc) PushHook(hook func(types.Log) (*bindings.AliceNetFactoryDeployedTemplate, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryParseDeployedTemplateFunc) SetDefaultReturn(r0 *bindings.AliceNetFactoryDeployedTemplate, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.AliceNetFactoryDeployedTemplate, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryParseDeployedTemplateFunc) PushReturn(r0 *bindings.AliceNetFactoryDeployedTemplate, r1 error) {
	f.PushHook(func(types.Log) (*bindings.AliceNetFactoryDeployedTemplate, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryParseDeployedTemplateFunc) nextHook() func(types.Log) (*bindings.AliceNetFactoryDeployedTemplate, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryParseDeployedTemplateFunc) appendCall(r0 IAliceNetFactoryParseDeployedTemplateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IAliceNetFactoryParseDeployedTemplateFuncCall objects describing the
// invocations of this function.
func (f *IAliceNetFactoryParseDeployedTemplateFunc) History() []IAliceNetFactoryParseDeployedTemplateFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryParseDeployedTemplateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryParseDeployedTemplateFuncCall is an object that describes
// an invocation of method ParseDeployedTemplate on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryParseDeployedTemplateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.AliceNetFactoryDeployedTemplate
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryParseDeployedTemplateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryParseDeployedTemplateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryParseUpgradedProxyFunc describes the behavior when the
// ParseUpgradedProxy method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryParseUpgradedProxyFunc struct {
	defaultHook func(types.Log) (*bindings.AliceNetFactoryUpgradedProxy, error)
	hooks       []func(types.Log) (*bindings.AliceNetFactoryUpgradedProxy, error)
	history     []IAliceNetFactoryParseUpgradedProxyFuncCall
	mutex       sync.Mutex
}

// ParseUpgradedProxy delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) ParseUpgradedProxy(v0 types.Log) (*bindings.AliceNetFactoryUpgradedProxy, error) {
	r0, r1 := m.ParseUpgradedProxyFunc.nextHook()(v0)
	m.ParseUpgradedProxyFunc.appendCall(IAliceNetFactoryParseUpgradedProxyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseUpgradedProxy
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryParseUpgradedProxyFunc) SetDefaultHook(hook func(types.Log) (*bindings.AliceNetFactoryUpgradedProxy, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseUpgradedProxy method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryParseUpgradedProxyFunc) PushHook(hook func(types.Log) (*bindings.AliceNetFactoryUpgradedProxy, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryParseUpgradedProxyFunc) SetDefaultReturn(r0 *bindings.AliceNetFactoryUpgradedProxy, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.AliceNetFactoryUpgradedProxy, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryParseUpgradedProxyFunc) PushReturn(r0 *bindings.AliceNetFactoryUpgradedProxy, r1 error) {
	f.PushHook(func(types.Log) (*bindings.AliceNetFactoryUpgradedProxy, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryParseUpgradedProxyFunc) nextHook() func(types.Log) (*bindings.AliceNetFactoryUpgradedProxy, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryParseUpgradedProxyFunc) appendCall(r0 IAliceNetFactoryParseUpgradedProxyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryParseUpgradedProxyFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryParseUpgradedProxyFunc) History() []IAliceNetFactoryParseUpgradedProxyFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryParseUpgradedProxyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryParseUpgradedProxyFuncCall is an object that describes an
// invocation of method ParseUpgradedProxy on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryParseUpgradedProxyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.AliceNetFactoryUpgradedProxy
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryParseUpgradedProxyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryParseUpgradedProxyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactorySetOwnerFunc describes the behavior when the SetOwner
// method of the parent MockIAliceNetFactory instance is invoked.
type IAliceNetFactorySetOwnerFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	history     []IAliceNetFactorySetOwnerFuncCall
	mutex       sync.Mutex
}

// SetOwner delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIAliceNetFactory) SetOwner(v0 *bind.TransactOpts, v1 common.Address) (*types.Transaction, error) {
	r0, r1 := m.SetOwnerFunc.nextHook()(v0, v1)
	m.SetOwnerFunc.appendCall(IAliceNetFactorySetOwnerFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetOwner method of
// the parent MockIAliceNetFactory instance is invoked and the hook queue is
// empty.
func (f *IAliceNetFactorySetOwnerFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetOwner method of the parent MockIAliceNetFactory instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IAliceNetFactorySetOwnerFunc) PushHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactorySetOwnerFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactorySetOwnerFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactorySetOwnerFunc) nextHook() func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactorySetOwnerFunc) appendCall(r0 IAliceNetFactorySetOwnerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactorySetOwnerFuncCall objects
// describing the invocations of this function.
func (f *IAliceNetFactorySetOwnerFunc) History() []IAliceNetFactorySetOwnerFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactorySetOwnerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactorySetOwnerFuncCall is an object that describes an
// invocation of method SetOwner on an instance of MockIAliceNetFactory.
type IAliceNetFactorySetOwnerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactorySetOwnerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactorySetOwnerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryUpgradeProxyFunc describes the behavior when the
// UpgradeProxy method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryUpgradeProxyFunc struct {
	defaultHook func(*bind.TransactOpts, [32]byte, common.Address, []byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, [32]byte, common.Address, []byte) (*types.Transaction, error)
	history     []IAliceNetFactoryUpgradeProxyFuncCall
	mutex       sync.Mutex
}

// UpgradeProxy delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) UpgradeProxy(v0 *bind.TransactOpts, v1 [32]byte, v2 common.Address, v3 []byte) (*types.Transaction, error) {
	r0, r1 := m.UpgradeProxyFunc.nextHook()(v0, v1, v2, v3)
	m.UpgradeProxyFunc.appendCall(IAliceNetFactoryUpgradeProxyFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpgradeProxy method
// of the parent MockIAliceNetFactory instance is invoked and the hook queue
// is empty.
func (f *IAliceNetFactoryUpgradeProxyFunc) SetDefaultHook(hook func(*bind.TransactOpts, [32]byte, common.Address, []byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpgradeProxy method of the parent MockIAliceNetFactory instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IAliceNetFactoryUpgradeProxyFunc) PushHook(hook func(*bind.TransactOpts, [32]byte, common.Address, []byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryUpgradeProxyFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, [32]byte, common.Address, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryUpgradeProxyFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, [32]byte, common.Address, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryUpgradeProxyFunc) nextHook() func(*bind.TransactOpts, [32]byte, common.Address, []byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryUpgradeProxyFunc) appendCall(r0 IAliceNetFactoryUpgradeProxyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryUpgradeProxyFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryUpgradeProxyFunc) History() []IAliceNetFactoryUpgradeProxyFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryUpgradeProxyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryUpgradeProxyFuncCall is an object that describes an
// invocation of method UpgradeProxy on an instance of MockIAliceNetFactory.
type IAliceNetFactoryUpgradeProxyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryUpgradeProxyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryUpgradeProxyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryWatchDeployedFunc describes the behavior when the
// WatchDeployed method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryWatchDeployedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployed) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployed) (event.Subscription, error)
	history     []IAliceNetFactoryWatchDeployedFuncCall
	mutex       sync.Mutex
}

// WatchDeployed delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) WatchDeployed(v0 *bind.WatchOpts, v1 chan<- *bindings.AliceNetFactoryDeployed) (event.Subscription, error) {
	r0, r1 := m.WatchDeployedFunc.nextHook()(v0, v1)
	m.WatchDeployedFunc.appendCall(IAliceNetFactoryWatchDeployedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchDeployed method
// of the parent MockIAliceNetFactory instance is invoked and the hook queue
// is empty.
func (f *IAliceNetFactoryWatchDeployedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployed) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchDeployed method of the parent MockIAliceNetFactory instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IAliceNetFactoryWatchDeployedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployed) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryWatchDeployedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployed) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryWatchDeployedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployed) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryWatchDeployedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployed) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryWatchDeployedFunc) appendCall(r0 IAliceNetFactoryWatchDeployedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryWatchDeployedFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryWatchDeployedFunc) History() []IAliceNetFactoryWatchDeployedFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryWatchDeployedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryWatchDeployedFuncCall is an object that describes an
// invocation of method WatchDeployed on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryWatchDeployedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.AliceNetFactoryDeployed
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryWatchDeployedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryWatchDeployedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryWatchDeployedProxyFunc describes the behavior when the
// WatchDeployedProxy method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryWatchDeployedProxyFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedProxy) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedProxy) (event.Subscription, error)
	history     []IAliceNetFactoryWatchDeployedProxyFuncCall
	mutex       sync.Mutex
}

// WatchDeployedProxy delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) WatchDeployedProxy(v0 *bind.WatchOpts, v1 chan<- *bindings.AliceNetFactoryDeployedProxy) (event.Subscription, error) {
	r0, r1 := m.WatchDeployedProxyFunc.nextHook()(v0, v1)
	m.WatchDeployedProxyFunc.appendCall(IAliceNetFactoryWatchDeployedProxyFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchDeployedProxy
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryWatchDeployedProxyFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedProxy) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchDeployedProxy method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryWatchDeployedProxyFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedProxy) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryWatchDeployedProxyFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedProxy) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryWatchDeployedProxyFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedProxy) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryWatchDeployedProxyFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedProxy) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryWatchDeployedProxyFunc) appendCall(r0 IAliceNetFactoryWatchDeployedProxyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryWatchDeployedProxyFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryWatchDeployedProxyFunc) History() []IAliceNetFactoryWatchDeployedProxyFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryWatchDeployedProxyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryWatchDeployedProxyFuncCall is an object that describes an
// invocation of method WatchDeployedProxy on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryWatchDeployedProxyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.AliceNetFactoryDeployedProxy
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryWatchDeployedProxyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryWatchDeployedProxyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryWatchDeployedRawFunc describes the behavior when the
// WatchDeployedRaw method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryWatchDeployedRawFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedRaw) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedRaw) (event.Subscription, error)
	history     []IAliceNetFactoryWatchDeployedRawFuncCall
	mutex       sync.Mutex
}

// WatchDeployedRaw delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) WatchDeployedRaw(v0 *bind.WatchOpts, v1 chan<- *bindings.AliceNetFactoryDeployedRaw) (event.Subscription, error) {
	r0, r1 := m.WatchDeployedRawFunc.nextHook()(v0, v1)
	m.WatchDeployedRawFunc.appendCall(IAliceNetFactoryWatchDeployedRawFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchDeployedRaw
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryWatchDeployedRawFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedRaw) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchDeployedRaw method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryWatchDeployedRawFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedRaw) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryWatchDeployedRawFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedRaw) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryWatchDeployedRawFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedRaw) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryWatchDeployedRawFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedRaw) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryWatchDeployedRawFunc) appendCall(r0 IAliceNetFactoryWatchDeployedRawFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryWatchDeployedRawFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryWatchDeployedRawFunc) History() []IAliceNetFactoryWatchDeployedRawFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryWatchDeployedRawFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryWatchDeployedRawFuncCall is an object that describes an
// invocation of method WatchDeployedRaw on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryWatchDeployedRawFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.AliceNetFactoryDeployedRaw
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryWatchDeployedRawFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryWatchDeployedRawFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryWatchDeployedStaticFunc describes the behavior when the
// WatchDeployedStatic method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryWatchDeployedStaticFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedStatic) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedStatic) (event.Subscription, error)
	history     []IAliceNetFactoryWatchDeployedStaticFuncCall
	mutex       sync.Mutex
}

// WatchDeployedStatic delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) WatchDeployedStatic(v0 *bind.WatchOpts, v1 chan<- *bindings.AliceNetFactoryDeployedStatic) (event.Subscription, error) {
	r0, r1 := m.WatchDeployedStaticFunc.nextHook()(v0, v1)
	m.WatchDeployedStaticFunc.appendCall(IAliceNetFactoryWatchDeployedStaticFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchDeployedStatic
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryWatchDeployedStaticFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedStatic) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchDeployedStatic method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryWatchDeployedStaticFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedStatic) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryWatchDeployedStaticFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedStatic) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryWatchDeployedStaticFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedStatic) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryWatchDeployedStaticFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedStatic) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryWatchDeployedStaticFunc) appendCall(r0 IAliceNetFactoryWatchDeployedStaticFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryWatchDeployedStaticFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryWatchDeployedStaticFunc) History() []IAliceNetFactoryWatchDeployedStaticFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryWatchDeployedStaticFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryWatchDeployedStaticFuncCall is an object that describes
// an invocation of method WatchDeployedStatic on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryWatchDeployedStaticFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.AliceNetFactoryDeployedStatic
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryWatchDeployedStaticFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryWatchDeployedStaticFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryWatchDeployedTemplateFunc describes the behavior when the
// WatchDeployedTemplate method of the parent MockIAliceNetFactory instance
// is invoked.
type IAliceNetFactoryWatchDeployedTemplateFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedTemplate) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedTemplate) (event.Subscription, error)
	history     []IAliceNetFactoryWatchDeployedTemplateFuncCall
	mutex       sync.Mutex
}

// WatchDeployedTemplate delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) WatchDeployedTemplate(v0 *bind.WatchOpts, v1 chan<- *bindings.AliceNetFactoryDeployedTemplate) (event.Subscription, error) {
	r0, r1 := m.WatchDeployedTemplateFunc.nextHook()(v0, v1)
	m.WatchDeployedTemplateFunc.appendCall(IAliceNetFactoryWatchDeployedTemplateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchDeployedTemplate method of the parent MockIAliceNetFactory instance
// is invoked and the hook queue is empty.
func (f *IAliceNetFactoryWatchDeployedTemplateFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedTemplate) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchDeployedTemplate method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryWatchDeployedTemplateFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedTemplate) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryWatchDeployedTemplateFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedTemplate) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryWatchDeployedTemplateFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedTemplate) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryWatchDeployedTemplateFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryDeployedTemplate) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryWatchDeployedTemplateFunc) appendCall(r0 IAliceNetFactoryWatchDeployedTemplateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IAliceNetFactoryWatchDeployedTemplateFuncCall objects describing the
// invocations of this function.
func (f *IAliceNetFactoryWatchDeployedTemplateFunc) History() []IAliceNetFactoryWatchDeployedTemplateFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryWatchDeployedTemplateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryWatchDeployedTemplateFuncCall is an object that describes
// an invocation of method WatchDeployedTemplate on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryWatchDeployedTemplateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.AliceNetFactoryDeployedTemplate
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryWatchDeployedTemplateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryWatchDeployedTemplateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IAliceNetFactoryWatchUpgradedProxyFunc describes the behavior when the
// WatchUpgradedProxy method of the parent MockIAliceNetFactory instance is
// invoked.
type IAliceNetFactoryWatchUpgradedProxyFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryUpgradedProxy) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryUpgradedProxy) (event.Subscription, error)
	history     []IAliceNetFactoryWatchUpgradedProxyFuncCall
	mutex       sync.Mutex
}

// WatchUpgradedProxy delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAliceNetFactory) WatchUpgradedProxy(v0 *bind.WatchOpts, v1 chan<- *bindings.AliceNetFactoryUpgradedProxy) (event.Subscription, error) {
	r0, r1 := m.WatchUpgradedProxyFunc.nextHook()(v0, v1)
	m.WatchUpgradedProxyFunc.appendCall(IAliceNetFactoryWatchUpgradedProxyFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchUpgradedProxy
// method of the parent MockIAliceNetFactory instance is invoked and the
// hook queue is empty.
func (f *IAliceNetFactoryWatchUpgradedProxyFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryUpgradedProxy) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchUpgradedProxy method of the parent MockIAliceNetFactory instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAliceNetFactoryWatchUpgradedProxyFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryUpgradedProxy) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAliceNetFactoryWatchUpgradedProxyFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryUpgradedProxy) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAliceNetFactoryWatchUpgradedProxyFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryUpgradedProxy) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IAliceNetFactoryWatchUpgradedProxyFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.AliceNetFactoryUpgradedProxy) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAliceNetFactoryWatchUpgradedProxyFunc) appendCall(r0 IAliceNetFactoryWatchUpgradedProxyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAliceNetFactoryWatchUpgradedProxyFuncCall
// objects describing the invocations of this function.
func (f *IAliceNetFactoryWatchUpgradedProxyFunc) History() []IAliceNetFactoryWatchUpgradedProxyFuncCall {
	f.mutex.Lock()
	history := make([]IAliceNetFactoryWatchUpgradedProxyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAliceNetFactoryWatchUpgradedProxyFuncCall is an object that describes an
// invocation of method WatchUpgradedProxy on an instance of
// MockIAliceNetFactory.
type IAliceNetFactoryWatchUpgradedProxyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.AliceNetFactoryUpgradedProxy
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAliceNetFactoryWatchUpgradedProxyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAliceNetFactoryWatchUpgradedProxyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockIDynamics is a mock implementation of the IDynamics interface (from
// the package github.com/alicenet/alicenet/bridge/bindings) used for unit
// testing.
type MockIDynamics struct {
	// ChangeDynamicValuesFunc is an instance of a mock function object
	// controlling the behavior of the method ChangeDynamicValues.
	ChangeDynamicValuesFunc *IDynamicsChangeDynamicValuesFunc
	// DecodeDynamicValuesFunc is an instance of a mock function object
	// controlling the behavior of the method DecodeDynamicValues.
	DecodeDynamicValuesFunc *IDynamicsDecodeDynamicValuesFunc
	// DeployStorageFunc is an instance of a mock function object
	// controlling the behavior of the method DeployStorage.
	DeployStorageFunc *IDynamicsDeployStorageFunc
	// EncodeDynamicValuesFunc is an instance of a mock function object
	// controlling the behavior of the method EncodeDynamicValues.
	EncodeDynamicValuesFunc *IDynamicsEncodeDynamicValuesFunc
	// FilterDeployedStorageContractFunc is an instance of a mock function
	// object controlling the behavior of the method
	// FilterDeployedStorageContract.
	FilterDeployedStorageContractFunc *IDynamicsFilterDeployedStorageContractFunc
	// FilterDynamicValueChangedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// FilterDynamicValueChanged.
	FilterDynamicValueChangedFunc *IDynamicsFilterDynamicValueChangedFunc
	// FilterInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method FilterInitialized.
	FilterInitializedFunc *IDynamicsFilterInitializedFunc
	// FilterNewAliceNetNodeVersionAvailableFunc is an instance of a mock
	// function object controlling the behavior of the method
	// FilterNewAliceNetNodeVersionAvailable.
	FilterNewAliceNetNodeVersionAvailableFunc *IDynamicsFilterNewAliceNetNodeVersionAvailableFunc
	// FilterNewCanonicalAliceNetNodeVersionFunc is an instance of a mock
	// function object controlling the behavior of the method
	// FilterNewCanonicalAliceNetNodeVersion.
	FilterNewCanonicalAliceNetNodeVersionFunc *IDynamicsFilterNewCanonicalAliceNetNodeVersionFunc
	// GetConfigurationFunc is an instance of a mock function object
	// controlling the behavior of the method GetConfiguration.
	GetConfigurationFunc *IDynamicsGetConfigurationFunc
	// GetEncodingVersionFunc is an instance of a mock function object
	// controlling the behavior of the method GetEncodingVersion.
	GetEncodingVersionFunc *IDynamicsGetEncodingVersionFunc
	// GetLatestAliceNetVersionFunc is an instance of a mock function object
	// controlling the behavior of the method GetLatestAliceNetVersion.
	GetLatestAliceNetVersionFunc *IDynamicsGetLatestAliceNetVersionFunc
	// GetLatestDynamicValuesFunc is an instance of a mock function object
	// controlling the behavior of the method GetLatestDynamicValues.
	GetLatestDynamicValuesFunc *IDynamicsGetLatestDynamicValuesFunc
	// GetMetamorphicContractAddressFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetMetamorphicContractAddress.
	GetMetamorphicContractAddressFunc *IDynamicsGetMetamorphicContractAddressFunc
	// GetPreviousDynamicValuesFunc is an instance of a mock function object
	// controlling the behavior of the method GetPreviousDynamicValues.
	GetPreviousDynamicValuesFunc *IDynamicsGetPreviousDynamicValuesFunc
	// InitializeFunc is an instance of a mock function object controlling
	// the behavior of the method Initialize.
	InitializeFunc *IDynamicsInitializeFunc
	// ParseDeployedStorageContractFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ParseDeployedStorageContract.
	ParseDeployedStorageContractFunc *IDynamicsParseDeployedStorageContractFunc
	// ParseDynamicValueChangedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseDynamicValueChanged.
	ParseDynamicValueChangedFunc *IDynamicsParseDynamicValueChangedFunc
	// ParseInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseInitialized.
	ParseInitializedFunc *IDynamicsParseInitializedFunc
	// ParseNewAliceNetNodeVersionAvailableFunc is an instance of a mock
	// function object controlling the behavior of the method
	// ParseNewAliceNetNodeVersionAvailable.
	ParseNewAliceNetNodeVersionAvailableFunc *IDynamicsParseNewAliceNetNodeVersionAvailableFunc
	// ParseNewCanonicalAliceNetNodeVersionFunc is an instance of a mock
	// function object controlling the behavior of the method
	// ParseNewCanonicalAliceNetNodeVersion.
	ParseNewCanonicalAliceNetNodeVersionFunc *IDynamicsParseNewCanonicalAliceNetNodeVersionFunc
	// SetConfigurationFunc is an instance of a mock function object
	// controlling the behavior of the method SetConfiguration.
	SetConfigurationFunc *IDynamicsSetConfigurationFunc
	// UpdateAliceNetNodeVersionFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpdateAliceNetNodeVersion.
	UpdateAliceNetNodeVersionFunc *IDynamicsUpdateAliceNetNodeVersionFunc
	// UpdateHeadFunc is an instance of a mock function object controlling
	// the behavior of the method UpdateHead.
	UpdateHeadFunc *IDynamicsUpdateHeadFunc
	// WatchDeployedStorageContractFunc is an instance of a mock function
	// object controlling the behavior of the method
	// WatchDeployedStorageContract.
	WatchDeployedStorageContractFunc *IDynamicsWatchDeployedStorageContractFunc
	// WatchDynamicValueChangedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchDynamicValueChanged.
	WatchDynamicValueChangedFunc *IDynamicsWatchDynamicValueChangedFunc
	// WatchInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchInitialized.
	WatchInitializedFunc *IDynamicsWatchInitializedFunc
	// WatchNewAliceNetNodeVersionAvailableFunc is an instance of a mock
	// function object controlling the behavior of the method
	// WatchNewAliceNetNodeVersionAvailable.
	WatchNewAliceNetNodeVersionAvailableFunc *IDynamicsWatchNewAliceNetNodeVersionAvailableFunc
	// WatchNewCanonicalAliceNetNodeVersionFunc is an instance of a mock
	// function object controlling the behavior of the method
	// WatchNewCanonicalAliceNetNodeVersion.
	WatchNewCanonicalAliceNetNodeVersionFunc *IDynamicsWatchNewCanonicalAliceNetNodeVersionFunc
}

// NewMockIDynamics creates a new mock of the IDynamics interface. All
// methods return zero values for all results, unless overwritten.
func NewMockIDynamics() *MockIDynamics {
	return &MockIDynamics{
		ChangeDynamicValuesFunc: &IDynamicsChangeDynamicValuesFunc{
			defaultHook: func(*bind.TransactOpts, uint32, bindings.DynamicValues) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DecodeDynamicValuesFunc: &IDynamicsDecodeDynamicValuesFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (r0 bindings.DynamicValues, r1 error) {
				return
			},
		},
		DeployStorageFunc: &IDynamicsDeployStorageFunc{
			defaultHook: func(*bind.TransactOpts, []byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		EncodeDynamicValuesFunc: &IDynamicsEncodeDynamicValuesFunc{
			defaultHook: func(*bind.CallOpts, bindings.DynamicValues) (r0 []byte, r1 error) {
				return
			},
		},
		FilterDeployedStorageContractFunc: &IDynamicsFilterDeployedStorageContractFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.DynamicsDeployedStorageContractIterator, r1 error) {
				return
			},
		},
		FilterDynamicValueChangedFunc: &IDynamicsFilterDynamicValueChangedFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.DynamicsDynamicValueChangedIterator, r1 error) {
				return
			},
		},
		FilterInitializedFunc: &IDynamicsFilterInitializedFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.DynamicsInitializedIterator, r1 error) {
				return
			},
		},
		FilterNewAliceNetNodeVersionAvailableFunc: &IDynamicsFilterNewAliceNetNodeVersionAvailableFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.DynamicsNewAliceNetNodeVersionAvailableIterator, r1 error) {
				return
			},
		},
		FilterNewCanonicalAliceNetNodeVersionFunc: &IDynamicsFilterNewCanonicalAliceNetNodeVersionFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.DynamicsNewCanonicalAliceNetNodeVersionIterator, r1 error) {
				return
			},
		},
		GetConfigurationFunc: &IDynamicsGetConfigurationFunc{
			defaultHook: func(*bind.CallOpts) (r0 bindings.Configuration, r1 error) {
				return
			},
		},
		GetEncodingVersionFunc: &IDynamicsGetEncodingVersionFunc{
			defaultHook: func(*bind.CallOpts) (r0 uint8, r1 error) {
				return
			},
		},
		GetLatestAliceNetVersionFunc: &IDynamicsGetLatestAliceNetVersionFunc{
			defaultHook: func(*bind.CallOpts) (r0 bindings.CanonicalVersion, r1 error) {
				return
			},
		},
		GetLatestDynamicValuesFunc: &IDynamicsGetLatestDynamicValuesFunc{
			defaultHook: func(*bind.CallOpts) (r0 bindings.DynamicValues, r1 error) {
				return
			},
		},
		GetMetamorphicContractAddressFunc: &IDynamicsGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (r0 common.Address, r1 error) {
				return
			},
		},
		GetPreviousDynamicValuesFunc: &IDynamicsGetPreviousDynamicValuesFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 bindings.DynamicValues, r1 error) {
				return
			},
		},
		InitializeFunc: &IDynamicsInitializeFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		ParseDeployedStorageContractFunc: &IDynamicsParseDeployedStorageContractFunc{
			defaultHook: func(types.Log) (r0 *bindings.DynamicsDeployedStorageContract, r1 error) {
				return
			},
		},
		ParseDynamicValueChangedFunc: &IDynamicsParseDynamicValueChangedFunc{
			defaultHook: func(types.Log) (r0 *bindings.DynamicsDynamicValueChanged, r1 error) {
				return
			},
		},
		ParseInitializedFunc: &IDynamicsParseInitializedFunc{
			defaultHook: func(types.Log) (r0 *bindings.DynamicsInitialized, r1 error) {
				return
			},
		},
		ParseNewAliceNetNodeVersionAvailableFunc: &IDynamicsParseNewAliceNetNodeVersionAvailableFunc{
			defaultHook: func(types.Log) (r0 *bindings.DynamicsNewAliceNetNodeVersionAvailable, r1 error) {
				return
			},
		},
		ParseNewCanonicalAliceNetNodeVersionFunc: &IDynamicsParseNewCanonicalAliceNetNodeVersionFunc{
			defaultHook: func(types.Log) (r0 *bindings.DynamicsNewCanonicalAliceNetNodeVersion, r1 error) {
				return
			},
		},
		SetConfigurationFunc: &IDynamicsSetConfigurationFunc{
			defaultHook: func(*bind.TransactOpts, bindings.Configuration) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		UpdateAliceNetNodeVersionFunc: &IDynamicsUpdateAliceNetNodeVersionFunc{
			defaultHook: func(*bind.TransactOpts, uint32, uint32, uint32, uint32, [32]byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		UpdateHeadFunc: &IDynamicsUpdateHeadFunc{
			defaultHook: func(*bind.TransactOpts, uint32) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		WatchDeployedStorageContractFunc: &IDynamicsWatchDeployedStorageContractFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.DynamicsDeployedStorageContract) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchDynamicValueChangedFunc: &IDynamicsWatchDynamicValueChangedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.DynamicsDynamicValueChanged) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchInitializedFunc: &IDynamicsWatchInitializedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.DynamicsInitialized) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchNewAliceNetNodeVersionAvailableFunc: &IDynamicsWatchNewAliceNetNodeVersionAvailableFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.DynamicsNewAliceNetNodeVersionAvailable) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchNewCanonicalAliceNetNodeVersionFunc: &IDynamicsWatchNewCanonicalAliceNetNodeVersionFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.DynamicsNewCanonicalAliceNetNodeVersion) (r0 event.Subscription, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockIDynamics creates a new mock of the IDynamics interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockIDynamics() *MockIDynamics {
	return &MockIDynamics{
		ChangeDynamicValuesFunc: &IDynamicsChangeDynamicValuesFunc{
			defaultHook: func(*bind.TransactOpts, uint32, bindings.DynamicValues) (*types.Transaction, error) {
				panic("unexpected invocation of MockIDynamics.ChangeDynamicValues")
			},
		},
		DecodeDynamicValuesFunc: &IDynamicsDecodeDynamicValuesFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (bindings.DynamicValues, error) {
				panic("unexpected invocation of MockIDynamics.DecodeDynamicValues")
			},
		},
		DeployStorageFunc: &IDynamicsDeployStorageFunc{
			defaultHook: func(*bind.TransactOpts, []byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIDynamics.DeployStorage")
			},
		},
		EncodeDynamicValuesFunc: &IDynamicsEncodeDynamicValuesFunc{
			defaultHook: func(*bind.CallOpts, bindings.DynamicValues) ([]byte, error) {
				panic("unexpected invocation of MockIDynamics.EncodeDynamicValues")
			},
		},
		FilterDeployedStorageContractFunc: &IDynamicsFilterDeployedStorageContractFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.DynamicsDeployedStorageContractIterator, error) {
				panic("unexpected invocation of MockIDynamics.FilterDeployedStorageContract")
			},
		},
		FilterDynamicValueChangedFunc: &IDynamicsFilterDynamicValueChangedFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.DynamicsDynamicValueChangedIterator, error) {
				panic("unexpected invocation of MockIDynamics.FilterDynamicValueChanged")
			},
		},
		FilterInitializedFunc: &IDynamicsFilterInitializedFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.DynamicsInitializedIterator, error) {
				panic("unexpected invocation of MockIDynamics.FilterInitialized")
			},
		},
		FilterNewAliceNetNodeVersionAvailableFunc: &IDynamicsFilterNewAliceNetNodeVersionAvailableFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.DynamicsNewAliceNetNodeVersionAvailableIterator, error) {
				panic("unexpected invocation of MockIDynamics.FilterNewAliceNetNodeVersionAvailable")
			},
		},
		FilterNewCanonicalAliceNetNodeVersionFunc: &IDynamicsFilterNewCanonicalAliceNetNodeVersionFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.DynamicsNewCanonicalAliceNetNodeVersionIterator, error) {
				panic("unexpected invocation of MockIDynamics.FilterNewCanonicalAliceNetNodeVersion")
			},
		},
		GetConfigurationFunc: &IDynamicsGetConfigurationFunc{
			defaultHook: func(*bind.CallOpts) (bindings.Configuration, error) {
				panic("unexpected invocation of MockIDynamics.GetConfiguration")
			},
		},
		GetEncodingVersionFunc: &IDynamicsGetEncodingVersionFunc{
			defaultHook: func(*bind.CallOpts) (uint8, error) {
				panic("unexpected invocation of MockIDynamics.GetEncodingVersion")
			},
		},
		GetLatestAliceNetVersionFunc: &IDynamicsGetLatestAliceNetVersionFunc{
			defaultHook: func(*bind.CallOpts) (bindings.CanonicalVersion, error) {
				panic("unexpected invocation of MockIDynamics.GetLatestAliceNetVersion")
			},
		},
		GetLatestDynamicValuesFunc: &IDynamicsGetLatestDynamicValuesFunc{
			defaultHook: func(*bind.CallOpts) (bindings.DynamicValues, error) {
				panic("unexpected invocation of MockIDynamics.GetLatestDynamicValues")
			},
		},
		GetMetamorphicContractAddressFunc: &IDynamicsGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
				panic("unexpected invocation of MockIDynamics.GetMetamorphicContractAddress")
			},
		},
		GetPreviousDynamicValuesFunc: &IDynamicsGetPreviousDynamicValuesFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (bindings.DynamicValues, error) {
				panic("unexpected invocation of MockIDynamics.GetPreviousDynamicValues")
			},
		},
		InitializeFunc: &IDynamicsInitializeFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIDynamics.Initialize")
			},
		},
		ParseDeployedStorageContractFunc: &IDynamicsParseDeployedStorageContractFunc{
			defaultHook: func(types.Log) (*bindings.DynamicsDeployedStorageContract, error) {
				panic("unexpected invocation of MockIDynamics.ParseDeployedStorageContract")
			},
		},
		ParseDynamicValueChangedFunc: &IDynamicsParseDynamicValueChangedFunc{
			defaultHook: func(types.Log) (*bindings.DynamicsDynamicValueChanged, error) {
				panic("unexpected invocation of MockIDynamics.ParseDynamicValueChanged")
			},
		},
		ParseInitializedFunc: &IDynamicsParseInitializedFunc{
			defaultHook: func(types.Log) (*bindings.DynamicsInitialized, error) {
				panic("unexpected invocation of MockIDynamics.ParseInitialized")
			},
		},
		ParseNewAliceNetNodeVersionAvailableFunc: &IDynamicsParseNewAliceNetNodeVersionAvailableFunc{
			defaultHook: func(types.Log) (*bindings.DynamicsNewAliceNetNodeVersionAvailable, error) {
				panic("unexpected invocation of MockIDynamics.ParseNewAliceNetNodeVersionAvailable")
			},
		},
		ParseNewCanonicalAliceNetNodeVersionFunc: &IDynamicsParseNewCanonicalAliceNetNodeVersionFunc{
			defaultHook: func(types.Log) (*bindings.DynamicsNewCanonicalAliceNetNodeVersion, error) {
				panic("unexpected invocation of MockIDynamics.ParseNewCanonicalAliceNetNodeVersion")
			},
		},
		SetConfigurationFunc: &IDynamicsSetConfigurationFunc{
			defaultHook: func(*bind.TransactOpts, bindings.Configuration) (*types.Transaction, error) {
				panic("unexpected invocation of MockIDynamics.SetConfiguration")
			},
		},
		UpdateAliceNetNodeVersionFunc: &IDynamicsUpdateAliceNetNodeVersionFunc{
			defaultHook: func(*bind.TransactOpts, uint32, uint32, uint32, uint32, [32]byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIDynamics.UpdateAliceNetNodeVersion")
			},
		},
		UpdateHeadFunc: &IDynamicsUpdateHeadFunc{
			defaultHook: func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
				panic("unexpected invocation of MockIDynamics.UpdateHead")
			},
		},
		WatchDeployedStorageContractFunc: &IDynamicsWatchDeployedStorageContractFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.DynamicsDeployedStorageContract) (event.Subscription, error) {
				panic("unexpected invocation of MockIDynamics.WatchDeployedStorageContract")
			},
		},
		WatchDynamicValueChangedFunc: &IDynamicsWatchDynamicValueChangedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.DynamicsDynamicValueChanged) (event.Subscription, error) {
				panic("unexpected invocation of MockIDynamics.WatchDynamicValueChanged")
			},
		},
		WatchInitializedFunc: &IDynamicsWatchInitializedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.DynamicsInitialized) (event.Subscription, error) {
				panic("unexpected invocation of MockIDynamics.WatchInitialized")
			},
		},
		WatchNewAliceNetNodeVersionAvailableFunc: &IDynamicsWatchNewAliceNetNodeVersionAvailableFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.DynamicsNewAliceNetNodeVersionAvailable) (event.Subscription, error) {
				panic("unexpected invocation of MockIDynamics.WatchNewAliceNetNodeVersionAvailable")
			},
		},
		WatchNewCanonicalAliceNetNodeVersionFunc: &IDynamicsWatchNewCanonicalAliceNetNodeVersionFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.DynamicsNewCanonicalAliceNetNodeVersion) (event.Subscription, error) {
				panic("unexpected invocation of MockIDynamics.WatchNewCanonicalAliceNetNodeVersion")
			},
		},
	}
}

// NewMockIDynamicsFrom creates a new mock of the MockIDynamics interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockIDynamicsFrom(i bindings.IDynamics) *MockIDynamics {
	return &MockIDynamics{
		ChangeDynamicValuesFunc: &IDynamicsChangeDynamicValuesFunc{
			defaultHook: i.ChangeDynamicValues,
		},
		DecodeDynamicValuesFunc: &IDynamicsDecodeDynamicValuesFunc{
			defaultHook: i.DecodeDynamicValues,
		},
		DeployStorageFunc: &IDynamicsDeployStorageFunc{
			defaultHook: i.DeployStorage,
		},
		EncodeDynamicValuesFunc: &IDynamicsEncodeDynamicValuesFunc{
			defaultHook: i.EncodeDynamicValues,
		},
		FilterDeployedStorageContractFunc: &IDynamicsFilterDeployedStorageContractFunc{
			defaultHook: i.FilterDeployedStorageContract,
		},
		FilterDynamicValueChangedFunc: &IDynamicsFilterDynamicValueChangedFunc{
			defaultHook: i.FilterDynamicValueChanged,
		},
		FilterInitializedFunc: &IDynamicsFilterInitializedFunc{
			defaultHook: i.FilterInitialized,
		},
		FilterNewAliceNetNodeVersionAvailableFunc: &IDynamicsFilterNewAliceNetNodeVersionAvailableFunc{
			defaultHook: i.FilterNewAliceNetNodeVersionAvailable,
		},
		FilterNewCanonicalAliceNetNodeVersionFunc: &IDynamicsFilterNewCanonicalAliceNetNodeVersionFunc{
			defaultHook: i.FilterNewCanonicalAliceNetNodeVersion,
		},
		GetConfigurationFunc: &IDynamicsGetConfigurationFunc{
			defaultHook: i.GetConfiguration,
		},
		GetEncodingVersionFunc: &IDynamicsGetEncodingVersionFunc{
			defaultHook: i.GetEncodingVersion,
		},
		GetLatestAliceNetVersionFunc: &IDynamicsGetLatestAliceNetVersionFunc{
			defaultHook: i.GetLatestAliceNetVersion,
		},
		GetLatestDynamicValuesFunc: &IDynamicsGetLatestDynamicValuesFunc{
			defaultHook: i.GetLatestDynamicValues,
		},
		GetMetamorphicContractAddressFunc: &IDynamicsGetMetamorphicContractAddressFunc{
			defaultHook: i.GetMetamorphicContractAddress,
		},
		GetPreviousDynamicValuesFunc: &IDynamicsGetPreviousDynamicValuesFunc{
			defaultHook: i.GetPreviousDynamicValues,
		},
		InitializeFunc: &IDynamicsInitializeFunc{
			defaultHook: i.Initialize,
		},
		ParseDeployedStorageContractFunc: &IDynamicsParseDeployedStorageContractFunc{
			defaultHook: i.ParseDeployedStorageContract,
		},
		ParseDynamicValueChangedFunc: &IDynamicsParseDynamicValueChangedFunc{
			defaultHook: i.ParseDynamicValueChanged,
		},
		ParseInitializedFunc: &IDynamicsParseInitializedFunc{
			defaultHook: i.ParseInitialized,
		},
		ParseNewAliceNetNodeVersionAvailableFunc: &IDynamicsParseNewAliceNetNodeVersionAvailableFunc{
			defaultHook: i.ParseNewAliceNetNodeVersionAvailable,
		},
		ParseNewCanonicalAliceNetNodeVersionFunc: &IDynamicsParseNewCanonicalAliceNetNodeVersionFunc{
			defaultHook: i.ParseNewCanonicalAliceNetNodeVersion,
		},
		SetConfigurationFunc: &IDynamicsSetConfigurationFunc{
			defaultHook: i.SetConfiguration,
		},
		UpdateAliceNetNodeVersionFunc: &IDynamicsUpdateAliceNetNodeVersionFunc{
			defaultHook: i.UpdateAliceNetNodeVersion,
		},
		UpdateHeadFunc: &IDynamicsUpdateHeadFunc{
			defaultHook: i.UpdateHead,
		},
		WatchDeployedStorageContractFunc: &IDynamicsWatchDeployedStorageContractFunc{
			defaultHook: i.WatchDeployedStorageContract,
		},
		WatchDynamicValueChangedFunc: &IDynamicsWatchDynamicValueChangedFunc{
			defaultHook: i.WatchDynamicValueChanged,
		},
		WatchInitializedFunc: &IDynamicsWatchInitializedFunc{
			defaultHook: i.WatchInitialized,
		},
		WatchNewAliceNetNodeVersionAvailableFunc: &IDynamicsWatchNewAliceNetNodeVersionAvailableFunc{
			defaultHook: i.WatchNewAliceNetNodeVersionAvailable,
		},
		WatchNewCanonicalAliceNetNodeVersionFunc: &IDynamicsWatchNewCanonicalAliceNetNodeVersionFunc{
			defaultHook: i.WatchNewCanonicalAliceNetNodeVersion,
		},
	}
}

// IDynamicsChangeDynamicValuesFunc describes the behavior when the
// ChangeDynamicValues method of the parent MockIDynamics instance is
// invoked.
type IDynamicsChangeDynamicValuesFunc struct {
	defaultHook func(*bind.TransactOpts, uint32, bindings.DynamicValues) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint32, bindings.DynamicValues) (*types.Transaction, error)
	history     []IDynamicsChangeDynamicValuesFuncCall
	mutex       sync.Mutex
}

// ChangeDynamicValues delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIDynamics) ChangeDynamicValues(v0 *bind.TransactOpts, v1 uint32, v2 bindings.DynamicValues) (*types.Transaction, error) {
	r0, r1 := m.ChangeDynamicValuesFunc.nextHook()(v0, v1, v2)
	m.ChangeDynamicValuesFunc.appendCall(IDynamicsChangeDynamicValuesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ChangeDynamicValues
// method of the parent MockIDynamics instance is invoked and the hook queue
// is empty.
func (f *IDynamicsChangeDynamicValuesFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint32, bindings.DynamicValues) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ChangeDynamicValues method of the parent MockIDynamics instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IDynamicsChangeDynamicValuesFunc) PushHook(hook func(*bind.TransactOpts, uint32, bindings.DynamicValues) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsChangeDynamicValuesFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint32, bindings.DynamicValues) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsChangeDynamicValuesFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint32, bindings.DynamicValues) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IDynamicsChangeDynamicValuesFunc) nextHook() func(*bind.TransactOpts, uint32, bindings.DynamicValues) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsChangeDynamicValuesFunc) appendCall(r0 IDynamicsChangeDynamicValuesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsChangeDynamicValuesFuncCall
// objects describing the invocations of this function.
func (f *IDynamicsChangeDynamicValuesFunc) History() []IDynamicsChangeDynamicValuesFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsChangeDynamicValuesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsChangeDynamicValuesFuncCall is an object that describes an
// invocation of method ChangeDynamicValues on an instance of MockIDynamics.
type IDynamicsChangeDynamicValuesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bindings.DynamicValues
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsChangeDynamicValuesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsChangeDynamicValuesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsDecodeDynamicValuesFunc describes the behavior when the
// DecodeDynamicValues method of the parent MockIDynamics instance is
// invoked.
type IDynamicsDecodeDynamicValuesFunc struct {
	defaultHook func(*bind.CallOpts, common.Address) (bindings.DynamicValues, error)
	hooks       []func(*bind.CallOpts, common.Address) (bindings.DynamicValues, error)
	history     []IDynamicsDecodeDynamicValuesFuncCall
	mutex       sync.Mutex
}

// DecodeDynamicValues delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIDynamics) DecodeDynamicValues(v0 *bind.CallOpts, v1 common.Address) (bindings.DynamicValues, error) {
	r0, r1 := m.DecodeDynamicValuesFunc.nextHook()(v0, v1)
	m.DecodeDynamicValuesFunc.appendCall(IDynamicsDecodeDynamicValuesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DecodeDynamicValues
// method of the parent MockIDynamics instance is invoked and the hook queue
// is empty.
func (f *IDynamicsDecodeDynamicValuesFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address) (bindings.DynamicValues, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DecodeDynamicValues method of the parent MockIDynamics instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IDynamicsDecodeDynamicValuesFunc) PushHook(hook func(*bind.CallOpts, common.Address) (bindings.DynamicValues, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsDecodeDynamicValuesFunc) SetDefaultReturn(r0 bindings.DynamicValues, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address) (bindings.DynamicValues, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsDecodeDynamicValuesFunc) PushReturn(r0 bindings.DynamicValues, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address) (bindings.DynamicValues, error) {
		return r0, r1
	})
}

func (f *IDynamicsDecodeDynamicValuesFunc) nextHook() func(*bind.CallOpts, common.Address) (bindings.DynamicValues, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsDecodeDynamicValuesFunc) appendCall(r0 IDynamicsDecodeDynamicValuesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsDecodeDynamicValuesFuncCall
// objects describing the invocations of this function.
func (f *IDynamicsDecodeDynamicValuesFunc) History() []IDynamicsDecodeDynamicValuesFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsDecodeDynamicValuesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsDecodeDynamicValuesFuncCall is an object that describes an
// invocation of method DecodeDynamicValues on an instance of MockIDynamics.
type IDynamicsDecodeDynamicValuesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.DynamicValues
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsDecodeDynamicValuesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsDecodeDynamicValuesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsDeployStorageFunc describes the behavior when the DeployStorage
// method of the parent MockIDynamics instance is invoked.
type IDynamicsDeployStorageFunc struct {
	defaultHook func(*bind.TransactOpts, []byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []byte) (*types.Transaction, error)
	history     []IDynamicsDeployStorageFuncCall
	mutex       sync.Mutex
}

// DeployStorage delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIDynamics) DeployStorage(v0 *bind.TransactOpts, v1 []byte) (*types.Transaction, error) {
	r0, r1 := m.DeployStorageFunc.nextHook()(v0, v1)
	m.DeployStorageFunc.appendCall(IDynamicsDeployStorageFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeployStorage method
// of the parent MockIDynamics instance is invoked and the hook queue is
// empty.
func (f *IDynamicsDeployStorageFunc) SetDefaultHook(hook func(*bind.TransactOpts, []byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeployStorage method of the parent MockIDynamics instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IDynamicsDeployStorageFunc) PushHook(hook func(*bind.TransactOpts, []byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsDeployStorageFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsDeployStorageFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IDynamicsDeployStorageFunc) nextHook() func(*bind.TransactOpts, []byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsDeployStorageFunc) appendCall(r0 IDynamicsDeployStorageFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsDeployStorageFuncCall objects
// describing the invocations of this function.
func (f *IDynamicsDeployStorageFunc) History() []IDynamicsDeployStorageFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsDeployStorageFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsDeployStorageFuncCall is an object that describes an invocation
// of method DeployStorage on an instance of MockIDynamics.
type IDynamicsDeployStorageFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsDeployStorageFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsDeployStorageFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsEncodeDynamicValuesFunc describes the behavior when the
// EncodeDynamicValues method of the parent MockIDynamics instance is
// invoked.
type IDynamicsEncodeDynamicValuesFunc struct {
	defaultHook func(*bind.CallOpts, bindings.DynamicValues) ([]byte, error)
	hooks       []func(*bind.CallOpts, bindings.DynamicValues) ([]byte, error)
	history     []IDynamicsEncodeDynamicValuesFuncCall
	mutex       sync.Mutex
}

// EncodeDynamicValues delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIDynamics) EncodeDynamicValues(v0 *bind.CallOpts, v1 bindings.DynamicValues) ([]byte, error) {
	r0, r1 := m.EncodeDynamicValuesFunc.nextHook()(v0, v1)
	m.EncodeDynamicValuesFunc.appendCall(IDynamicsEncodeDynamicValuesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the EncodeDynamicValues
// method of the parent MockIDynamics instance is invoked and the hook queue
// is empty.
func (f *IDynamicsEncodeDynamicValuesFunc) SetDefaultHook(hook func(*bind.CallOpts, bindings.DynamicValues) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EncodeDynamicValues method of the parent MockIDynamics instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IDynamicsEncodeDynamicValuesFunc) PushHook(hook func(*bind.CallOpts, bindings.DynamicValues) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsEncodeDynamicValuesFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, bindings.DynamicValues) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsEncodeDynamicValuesFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(*bind.CallOpts, bindings.DynamicValues) ([]byte, error) {
		return r0, r1
	})
}

func (f *IDynamicsEncodeDynamicValuesFunc) nextHook() func(*bind.CallOpts, bindings.DynamicValues) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsEncodeDynamicValuesFunc) appendCall(r0 IDynamicsEncodeDynamicValuesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsEncodeDynamicValuesFuncCall
// objects describing the invocations of this function.
func (f *IDynamicsEncodeDynamicValuesFunc) History() []IDynamicsEncodeDynamicValuesFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsEncodeDynamicValuesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsEncodeDynamicValuesFuncCall is an object that describes an
// invocation of method EncodeDynamicValues on an instance of MockIDynamics.
type IDynamicsEncodeDynamicValuesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 bindings.DynamicValues
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsEncodeDynamicValuesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsEncodeDynamicValuesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsFilterDeployedStorageContractFunc describes the behavior when
// the FilterDeployedStorageContract method of the parent MockIDynamics
// instance is invoked.
type IDynamicsFilterDeployedStorageContractFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.DynamicsDeployedStorageContractIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.DynamicsDeployedStorageContractIterator, error)
	history     []IDynamicsFilterDeployedStorageContractFuncCall
	mutex       sync.Mutex
}

// FilterDeployedStorageContract delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIDynamics) FilterDeployedStorageContract(v0 *bind.FilterOpts) (*bindings.DynamicsDeployedStorageContractIterator, error) {
	r0, r1 := m.FilterDeployedStorageContractFunc.nextHook()(v0)
	m.FilterDeployedStorageContractFunc.appendCall(IDynamicsFilterDeployedStorageContractFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterDeployedStorageContract method of the parent MockIDynamics instance
// is invoked and the hook queue is empty.
func (f *IDynamicsFilterDeployedStorageContractFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.DynamicsDeployedStorageContractIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterDeployedStorageContract method of the parent MockIDynamics instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IDynamicsFilterDeployedStorageContractFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.DynamicsDeployedStorageContractIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsFilterDeployedStorageContractFunc) SetDefaultReturn(r0 *bindings.DynamicsDeployedStorageContractIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.DynamicsDeployedStorageContractIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsFilterDeployedStorageContractFunc) PushReturn(r0 *bindings.DynamicsDeployedStorageContractIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.DynamicsDeployedStorageContractIterator, error) {
		return r0, r1
	})
}

func (f *IDynamicsFilterDeployedStorageContractFunc) nextHook() func(*bind.FilterOpts) (*bindings.DynamicsDeployedStorageContractIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsFilterDeployedStorageContractFunc) appendCall(r0 IDynamicsFilterDeployedStorageContractFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IDynamicsFilterDeployedStorageContractFuncCall objects describing the
// invocations of this function.
func (f *IDynamicsFilterDeployedStorageContractFunc) History() []IDynamicsFilterDeployedStorageContractFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsFilterDeployedStorageContractFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsFilterDeployedStorageContractFuncCall is an object that
// describes an invocation of method FilterDeployedStorageContract on an
// instance of MockIDynamics.
type IDynamicsFilterDeployedStorageContractFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.DynamicsDeployedStorageContractIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsFilterDeployedStorageContractFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsFilterDeployedStorageContractFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsFilterDynamicValueChangedFunc describes the behavior when the
// FilterDynamicValueChanged method of the parent MockIDynamics instance is
// invoked.
type IDynamicsFilterDynamicValueChangedFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.DynamicsDynamicValueChangedIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.DynamicsDynamicValueChangedIterator, error)
	history     []IDynamicsFilterDynamicValueChangedFuncCall
	mutex       sync.Mutex
}

// FilterDynamicValueChanged delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIDynamics) FilterDynamicValueChanged(v0 *bind.FilterOpts) (*bindings.DynamicsDynamicValueChangedIterator, error) {
	r0, r1 := m.FilterDynamicValueChangedFunc.nextHook()(v0)
	m.FilterDynamicValueChangedFunc.appendCall(IDynamicsFilterDynamicValueChangedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterDynamicValueChanged method of the parent MockIDynamics instance is
// invoked and the hook queue is empty.
func (f *IDynamicsFilterDynamicValueChangedFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.DynamicsDynamicValueChangedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterDynamicValueChanged method of the parent MockIDynamics instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IDynamicsFilterDynamicValueChangedFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.DynamicsDynamicValueChangedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsFilterDynamicValueChangedFunc) SetDefaultReturn(r0 *bindings.DynamicsDynamicValueChangedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.DynamicsDynamicValueChangedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsFilterDynamicValueChangedFunc) PushReturn(r0 *bindings.DynamicsDynamicValueChangedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.DynamicsDynamicValueChangedIterator, error) {
		return r0, r1
	})
}

func (f *IDynamicsFilterDynamicValueChangedFunc) nextHook() func(*bind.FilterOpts) (*bindings.DynamicsDynamicValueChangedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsFilterDynamicValueChangedFunc) appendCall(r0 IDynamicsFilterDynamicValueChangedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsFilterDynamicValueChangedFuncCall
// objects describing the invocations of this function.
func (f *IDynamicsFilterDynamicValueChangedFunc) History() []IDynamicsFilterDynamicValueChangedFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsFilterDynamicValueChangedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsFilterDynamicValueChangedFuncCall is an object that describes an
// invocation of method FilterDynamicValueChanged on an instance of
// MockIDynamics.
type IDynamicsFilterDynamicValueChangedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.DynamicsDynamicValueChangedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsFilterDynamicValueChangedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsFilterDynamicValueChangedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsFilterInitializedFunc describes the behavior when the
// FilterInitialized method of the parent MockIDynamics instance is invoked.
type IDynamicsFilterInitializedFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.DynamicsInitializedIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.DynamicsInitializedIterator, error)
	history     []IDynamicsFilterInitializedFuncCall
	mutex       sync.Mutex
}

// FilterInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIDynamics) FilterInitialized(v0 *bind.FilterOpts) (*bindings.DynamicsInitializedIterator, error) {
	r0, r1 := m.FilterInitializedFunc.nextHook()(v0)
	m.FilterInitializedFunc.appendCall(IDynamicsFilterInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterInitialized
// method of the parent MockIDynamics instance is invoked and the hook queue
// is empty.
func (f *IDynamicsFilterInitializedFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.DynamicsInitializedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterInitialized method of the parent MockIDynamics instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IDynamicsFilterInitializedFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.DynamicsInitializedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsFilterInitializedFunc) SetDefaultReturn(r0 *bindings.DynamicsInitializedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.DynamicsInitializedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsFilterInitializedFunc) PushReturn(r0 *bindings.DynamicsInitializedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.DynamicsInitializedIterator, error) {
		return r0, r1
	})
}

func (f *IDynamicsFilterInitializedFunc) nextHook() func(*bind.FilterOpts) (*bindings.DynamicsInitializedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsFilterInitializedFunc) appendCall(r0 IDynamicsFilterInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsFilterInitializedFuncCall objects
// describing the invocations of this function.
func (f *IDynamicsFilterInitializedFunc) History() []IDynamicsFilterInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsFilterInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsFilterInitializedFuncCall is an object that describes an
// invocation of method FilterInitialized on an instance of MockIDynamics.
type IDynamicsFilterInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.DynamicsInitializedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsFilterInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsFilterInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsFilterNewAliceNetNodeVersionAvailableFunc describes the behavior
// when the FilterNewAliceNetNodeVersionAvailable method of the parent
// MockIDynamics instance is invoked.
type IDynamicsFilterNewAliceNetNodeVersionAvailableFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.DynamicsNewAliceNetNodeVersionAvailableIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.DynamicsNewAliceNetNodeVersionAvailableIterator, error)
	history     []IDynamicsFilterNewAliceNetNodeVersionAvailableFuncCall
	mutex       sync.Mutex
}

// FilterNewAliceNetNodeVersionAvailable delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockIDynamics) FilterNewAliceNetNodeVersionAvailable(v0 *bind.FilterOpts) (*bindings.DynamicsNewAliceNetNodeVersionAvailableIterator, error) {
	r0, r1 := m.FilterNewAliceNetNodeVersionAvailableFunc.nextHook()(v0)
	m.FilterNewAliceNetNodeVersionAvailableFunc.appendCall(IDynamicsFilterNewAliceNetNodeVersionAvailableFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterNewAliceNetNodeVersionAvailable method of the parent MockIDynamics
// instance is invoked and the hook queue is empty.
func (f *IDynamicsFilterNewAliceNetNodeVersionAvailableFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.DynamicsNewAliceNetNodeVersionAvailableIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterNewAliceNetNodeVersionAvailable method of the parent MockIDynamics
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IDynamicsFilterNewAliceNetNodeVersionAvailableFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.DynamicsNewAliceNetNodeVersionAvailableIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsFilterNewAliceNetNodeVersionAvailableFunc) SetDefaultReturn(r0 *bindings.DynamicsNewAliceNetNodeVersionAvailableIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.DynamicsNewAliceNetNodeVersionAvailableIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsFilterNewAliceNetNodeVersionAvailableFunc) PushReturn(r0 *bindings.DynamicsNewAliceNetNodeVersionAvailableIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.DynamicsNewAliceNetNodeVersionAvailableIterator, error) {
		return r0, r1
	})
}

func (f *IDynamicsFilterNewAliceNetNodeVersionAvailableFunc) nextHook() func(*bind.FilterOpts) (*bindings.DynamicsNewAliceNetNodeVersionAvailableIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsFilterNewAliceNetNodeVersionAvailableFunc) appendCall(r0 IDynamicsFilterNewAliceNetNodeVersionAvailableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IDynamicsFilterNewAliceNetNodeVersionAvailableFuncCall objects describing
// the invocations of this function.
func (f *IDynamicsFilterNewAliceNetNodeVersionAvailableFunc) History() []IDynamicsFilterNewAliceNetNodeVersionAvailableFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsFilterNewAliceNetNodeVersionAvailableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsFilterNewAliceNetNodeVersionAvailableFuncCall is an object that
// describes an invocation of method FilterNewAliceNetNodeVersionAvailable
// on an instance of MockIDynamics.
type IDynamicsFilterNewAliceNetNodeVersionAvailableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.DynamicsNewAliceNetNodeVersionAvailableIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsFilterNewAliceNetNodeVersionAvailableFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsFilterNewAliceNetNodeVersionAvailableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsFilterNewCanonicalAliceNetNodeVersionFunc describes the behavior
// when the FilterNewCanonicalAliceNetNodeVersion method of the parent
// MockIDynamics instance is invoked.
type IDynamicsFilterNewCanonicalAliceNetNodeVersionFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.DynamicsNewCanonicalAliceNetNodeVersionIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.DynamicsNewCanonicalAliceNetNodeVersionIterator, error)
	history     []IDynamicsFilterNewCanonicalAliceNetNodeVersionFuncCall
	mutex       sync.Mutex
}

// FilterNewCanonicalAliceNetNodeVersion delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockIDynamics) FilterNewCanonicalAliceNetNodeVersion(v0 *bind.FilterOpts) (*bindings.DynamicsNewCanonicalAliceNetNodeVersionIterator, error) {
	r0, r1 := m.FilterNewCanonicalAliceNetNodeVersionFunc.nextHook()(v0)
	m.FilterNewCanonicalAliceNetNodeVersionFunc.appendCall(IDynamicsFilterNewCanonicalAliceNetNodeVersionFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterNewCanonicalAliceNetNodeVersion method of the parent MockIDynamics
// instance is invoked and the hook queue is empty.
func (f *IDynamicsFilterNewCanonicalAliceNetNodeVersionFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.DynamicsNewCanonicalAliceNetNodeVersionIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterNewCanonicalAliceNetNodeVersion method of the parent MockIDynamics
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IDynamicsFilterNewCanonicalAliceNetNodeVersionFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.DynamicsNewCanonicalAliceNetNodeVersionIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsFilterNewCanonicalAliceNetNodeVersionFunc) SetDefaultReturn(r0 *bindings.DynamicsNewCanonicalAliceNetNodeVersionIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.DynamicsNewCanonicalAliceNetNodeVersionIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsFilterNewCanonicalAliceNetNodeVersionFunc) PushReturn(r0 *bindings.DynamicsNewCanonicalAliceNetNodeVersionIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.DynamicsNewCanonicalAliceNetNodeVersionIterator, error) {
		return r0, r1
	})
}

func (f *IDynamicsFilterNewCanonicalAliceNetNodeVersionFunc) nextHook() func(*bind.FilterOpts) (*bindings.DynamicsNewCanonicalAliceNetNodeVersionIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsFilterNewCanonicalAliceNetNodeVersionFunc) appendCall(r0 IDynamicsFilterNewCanonicalAliceNetNodeVersionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IDynamicsFilterNewCanonicalAliceNetNodeVersionFuncCall objects describing
// the invocations of this function.
func (f *IDynamicsFilterNewCanonicalAliceNetNodeVersionFunc) History() []IDynamicsFilterNewCanonicalAliceNetNodeVersionFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsFilterNewCanonicalAliceNetNodeVersionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsFilterNewCanonicalAliceNetNodeVersionFuncCall is an object that
// describes an invocation of method FilterNewCanonicalAliceNetNodeVersion
// on an instance of MockIDynamics.
type IDynamicsFilterNewCanonicalAliceNetNodeVersionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.DynamicsNewCanonicalAliceNetNodeVersionIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsFilterNewCanonicalAliceNetNodeVersionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsFilterNewCanonicalAliceNetNodeVersionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsGetConfigurationFunc describes the behavior when the
// GetConfiguration method of the parent MockIDynamics instance is invoked.
type IDynamicsGetConfigurationFunc struct {
	defaultHook func(*bind.CallOpts) (bindings.Configuration, error)
	hooks       []func(*bind.CallOpts) (bindings.Configuration, error)
	history     []IDynamicsGetConfigurationFuncCall
	mutex       sync.Mutex
}

// GetConfiguration delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIDynamics) GetConfiguration(v0 *bind.CallOpts) (bindings.Configuration, error) {
	r0, r1 := m.GetConfigurationFunc.nextHook()(v0)
	m.GetConfigurationFunc.appendCall(IDynamicsGetConfigurationFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetConfiguration
// method of the parent MockIDynamics instance is invoked and the hook queue
// is empty.
func (f *IDynamicsGetConfigurationFunc) SetDefaultHook(hook func(*bind.CallOpts) (bindings.Configuration, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetConfiguration method of the parent MockIDynamics instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IDynamicsGetConfigurationFunc) PushHook(hook func(*bind.CallOpts) (bindings.Configuration, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsGetConfigurationFunc) SetDefaultReturn(r0 bindings.Configuration, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (bindings.Configuration, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsGetConfigurationFunc) PushReturn(r0 bindings.Configuration, r1 error) {
	f.PushHook(func(*bind.CallOpts) (bindings.Configuration, error) {
		return r0, r1
	})
}

func (f *IDynamicsGetConfigurationFunc) nextHook() func(*bind.CallOpts) (bindings.Configuration, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsGetConfigurationFunc) appendCall(r0 IDynamicsGetConfigurationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsGetConfigurationFuncCall objects
// describing the invocations of this function.
func (f *IDynamicsGetConfigurationFunc) History() []IDynamicsGetConfigurationFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsGetConfigurationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsGetConfigurationFuncCall is an object that describes an
// invocation of method GetConfiguration on an instance of MockIDynamics.
type IDynamicsGetConfigurationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.Configuration
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsGetConfigurationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsGetConfigurationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsGetEncodingVersionFunc describes the behavior when the
// GetEncodingVersion method of the parent MockIDynamics instance is
// invoked.
type IDynamicsGetEncodingVersionFunc struct {
	defaultHook func(*bind.CallOpts) (uint8, error)
	hooks       []func(*bind.CallOpts) (uint8, error)
	history     []IDynamicsGetEncodingVersionFuncCall
	mutex       sync.Mutex
}

// GetEncodingVersion delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIDynamics) GetEncodingVersion(v0 *bind.CallOpts) (uint8, error) {
	r0, r1 := m.GetEncodingVersionFunc.nextHook()(v0)
	m.GetEncodingVersionFunc.appendCall(IDynamicsGetEncodingVersionFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetEncodingVersion
// method of the parent MockIDynamics instance is invoked and the hook queue
// is empty.
func (f *IDynamicsGetEncodingVersionFunc) SetDefaultHook(hook func(*bind.CallOpts) (uint8, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEncodingVersion method of the parent MockIDynamics instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IDynamicsGetEncodingVersionFunc) PushHook(hook func(*bind.CallOpts) (uint8, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsGetEncodingVersionFunc) SetDefaultReturn(r0 uint8, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (uint8, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsGetEncodingVersionFunc) PushReturn(r0 uint8, r1 error) {
	f.PushHook(func(*bind.CallOpts) (uint8, error) {
		return r0, r1
	})
}

func (f *IDynamicsGetEncodingVersionFunc) nextHook() func(*bind.CallOpts) (uint8, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsGetEncodingVersionFunc) appendCall(r0 IDynamicsGetEncodingVersionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsGetEncodingVersionFuncCall objects
// describing the invocations of this function.
func (f *IDynamicsGetEncodingVersionFunc) History() []IDynamicsGetEncodingVersionFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsGetEncodingVersionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsGetEncodingVersionFuncCall is an object that describes an
// invocation of method GetEncodingVersion on an instance of MockIDynamics.
type IDynamicsGetEncodingVersionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint8
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsGetEncodingVersionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsGetEncodingVersionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsGetLatestAliceNetVersionFunc describes the behavior when the
// GetLatestAliceNetVersion method of the parent MockIDynamics instance is
// invoked.
type IDynamicsGetLatestAliceNetVersionFunc struct {
	defaultHook func(*bind.CallOpts) (bindings.CanonicalVersion, error)
	hooks       []func(*bind.CallOpts) (bindings.CanonicalVersion, error)
	history     []IDynamicsGetLatestAliceNetVersionFuncCall
	mutex       sync.Mutex
}

// GetLatestAliceNetVersion delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIDynamics) GetLatestAliceNetVersion(v0 *bind.CallOpts) (bindings.CanonicalVersion, error) {
	r0, r1 := m.GetLatestAliceNetVersionFunc.nextHook()(v0)
	m.GetLatestAliceNetVersionFunc.appendCall(IDynamicsGetLatestAliceNetVersionFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLatestAliceNetVersion method of the parent MockIDynamics instance is
// invoked and the hook queue is empty.
func (f *IDynamicsGetLatestAliceNetVersionFunc) SetDefaultHook(hook func(*bind.CallOpts) (bindings.CanonicalVersion, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestAliceNetVersion method of the parent MockIDynamics instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IDynamicsGetLatestAliceNetVersionFunc) PushHook(hook func(*bind.CallOpts) (bindings.CanonicalVersion, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsGetLatestAliceNetVersionFunc) SetDefaultReturn(r0 bindings.CanonicalVersion, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (bindings.CanonicalVersion, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsGetLatestAliceNetVersionFunc) PushReturn(r0 bindings.CanonicalVersion, r1 error) {
	f.PushHook(func(*bind.CallOpts) (bindings.CanonicalVersion, error) {
		return r0, r1
	})
}

func (f *IDynamicsGetLatestAliceNetVersionFunc) nextHook() func(*bind.CallOpts) (bindings.CanonicalVersion, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsGetLatestAliceNetVersionFunc) appendCall(r0 IDynamicsGetLatestAliceNetVersionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsGetLatestAliceNetVersionFuncCall
// objects describing the invocations of this function.
func (f *IDynamicsGetLatestAliceNetVersionFunc) History() []IDynamicsGetLatestAliceNetVersionFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsGetLatestAliceNetVersionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsGetLatestAliceNetVersionFuncCall is an object that describes an
// invocation of method GetLatestAliceNetVersion on an instance of
// MockIDynamics.
type IDynamicsGetLatestAliceNetVersionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.CanonicalVersion
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsGetLatestAliceNetVersionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsGetLatestAliceNetVersionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsGetLatestDynamicValuesFunc describes the behavior when the
// GetLatestDynamicValues method of the parent MockIDynamics instance is
// invoked.
type IDynamicsGetLatestDynamicValuesFunc struct {
	defaultHook func(*bind.CallOpts) (bindings.DynamicValues, error)
	hooks       []func(*bind.CallOpts) (bindings.DynamicValues, error)
	history     []IDynamicsGetLatestDynamicValuesFuncCall
	mutex       sync.Mutex
}

// GetLatestDynamicValues delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIDynamics) GetLatestDynamicValues(v0 *bind.CallOpts) (bindings.DynamicValues, error) {
	r0, r1 := m.GetLatestDynamicValuesFunc.nextHook()(v0)
	m.GetLatestDynamicValuesFunc.appendCall(IDynamicsGetLatestDynamicValuesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLatestDynamicValues method of the parent MockIDynamics instance is
// invoked and the hook queue is empty.
func (f *IDynamicsGetLatestDynamicValuesFunc) SetDefaultHook(hook func(*bind.CallOpts) (bindings.DynamicValues, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestDynamicValues method of the parent MockIDynamics instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IDynamicsGetLatestDynamicValuesFunc) PushHook(hook func(*bind.CallOpts) (bindings.DynamicValues, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsGetLatestDynamicValuesFunc) SetDefaultReturn(r0 bindings.DynamicValues, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (bindings.DynamicValues, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsGetLatestDynamicValuesFunc) PushReturn(r0 bindings.DynamicValues, r1 error) {
	f.PushHook(func(*bind.CallOpts) (bindings.DynamicValues, error) {
		return r0, r1
	})
}

func (f *IDynamicsGetLatestDynamicValuesFunc) nextHook() func(*bind.CallOpts) (bindings.DynamicValues, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsGetLatestDynamicValuesFunc) appendCall(r0 IDynamicsGetLatestDynamicValuesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsGetLatestDynamicValuesFuncCall
// objects describing the invocations of this function.
func (f *IDynamicsGetLatestDynamicValuesFunc) History() []IDynamicsGetLatestDynamicValuesFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsGetLatestDynamicValuesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsGetLatestDynamicValuesFuncCall is an object that describes an
// invocation of method GetLatestDynamicValues on an instance of
// MockIDynamics.
type IDynamicsGetLatestDynamicValuesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.DynamicValues
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsGetLatestDynamicValuesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsGetLatestDynamicValuesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsGetMetamorphicContractAddressFunc describes the behavior when
// the GetMetamorphicContractAddress method of the parent MockIDynamics
// instance is invoked.
type IDynamicsGetMetamorphicContractAddressFunc struct {
	defaultHook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	hooks       []func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	history     []IDynamicsGetMetamorphicContractAddressFuncCall
	mutex       sync.Mutex
}

// GetMetamorphicContractAddress delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIDynamics) GetMetamorphicContractAddress(v0 *bind.CallOpts, v1 [32]byte, v2 common.Address) (common.Address, error) {
	r0, r1 := m.GetMetamorphicContractAddressFunc.nextHook()(v0, v1, v2)
	m.GetMetamorphicContractAddressFunc.appendCall(IDynamicsGetMetamorphicContractAddressFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMetamorphicContractAddress method of the parent MockIDynamics instance
// is invoked and the hook queue is empty.
func (f *IDynamicsGetMetamorphicContractAddressFunc) SetDefaultHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMetamorphicContractAddress method of the parent MockIDynamics instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IDynamicsGetMetamorphicContractAddressFunc) PushHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsGetMetamorphicContractAddressFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsGetMetamorphicContractAddressFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

func (f *IDynamicsGetMetamorphicContractAddressFunc) nextHook() func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsGetMetamorphicContractAddressFunc) appendCall(r0 IDynamicsGetMetamorphicContractAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IDynamicsGetMetamorphicContractAddressFuncCall objects describing the
// invocations of this function.
func (f *IDynamicsGetMetamorphicContractAddressFunc) History() []IDynamicsGetMetamorphicContractAddressFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsGetMetamorphicContractAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsGetMetamorphicContractAddressFuncCall is an object that
// describes an invocation of method GetMetamorphicContractAddress on an
// instance of MockIDynamics.
type IDynamicsGetMetamorphicContractAddressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsGetMetamorphicContractAddressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsGetMetamorphicContractAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsGetPreviousDynamicValuesFunc describes the behavior when the
// GetPreviousDynamicValues method of the parent MockIDynamics instance is
// invoked.
type IDynamicsGetPreviousDynamicValuesFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (bindings.DynamicValues, error)
	hooks       []func(*bind.CallOpts, *big.Int) (bindings.DynamicValues, error)
	history     []IDynamicsGetPreviousDynamicValuesFuncCall
	mutex       sync.Mutex
}

// GetPreviousDynamicValues delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIDynamics) GetPreviousDynamicValues(v0 *bind.CallOpts, v1 *big.Int) (bindings.DynamicValues, error) {
	r0, r1 := m.GetPreviousDynamicValuesFunc.nextHook()(v0, v1)
	m.GetPreviousDynamicValuesFunc.appendCall(IDynamicsGetPreviousDynamicValuesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetPreviousDynamicValues method of the parent MockIDynamics instance is
// invoked and the hook queue is empty.
func (f *IDynamicsGetPreviousDynamicValuesFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (bindings.DynamicValues, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPreviousDynamicValues method of the parent MockIDynamics instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IDynamicsGetPreviousDynamicValuesFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (bindings.DynamicValues, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsGetPreviousDynamicValuesFunc) SetDefaultReturn(r0 bindings.DynamicValues, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (bindings.DynamicValues, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsGetPreviousDynamicValuesFunc) PushReturn(r0 bindings.DynamicValues, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (bindings.DynamicValues, error) {
		return r0, r1
	})
}

func (f *IDynamicsGetPreviousDynamicValuesFunc) nextHook() func(*bind.CallOpts, *big.Int) (bindings.DynamicValues, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsGetPreviousDynamicValuesFunc) appendCall(r0 IDynamicsGetPreviousDynamicValuesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsGetPreviousDynamicValuesFuncCall
// objects describing the invocations of this function.
func (f *IDynamicsGetPreviousDynamicValuesFunc) History() []IDynamicsGetPreviousDynamicValuesFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsGetPreviousDynamicValuesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsGetPreviousDynamicValuesFuncCall is an object that describes an
// invocation of method GetPreviousDynamicValues on an instance of
// MockIDynamics.
type IDynamicsGetPreviousDynamicValuesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.DynamicValues
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsGetPreviousDynamicValuesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsGetPreviousDynamicValuesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsInitializeFunc describes the behavior when the Initialize method
// of the parent MockIDynamics instance is invoked.
type IDynamicsInitializeFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IDynamicsInitializeFuncCall
	mutex       sync.Mutex
}

// Initialize delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIDynamics) Initialize(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.InitializeFunc.nextHook()(v0)
	m.InitializeFunc.appendCall(IDynamicsInitializeFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Initialize method of
// the parent MockIDynamics instance is invoked and the hook queue is empty.
func (f *IDynamicsInitializeFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Initialize method of the parent MockIDynamics instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IDynamicsInitializeFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsInitializeFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsInitializeFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IDynamicsInitializeFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsInitializeFunc) appendCall(r0 IDynamicsInitializeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsInitializeFuncCall objects
// describing the invocations of this function.
func (f *IDynamicsInitializeFunc) History() []IDynamicsInitializeFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsInitializeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsInitializeFuncCall is an object that describes an invocation of
// method Initialize on an instance of MockIDynamics.
type IDynamicsInitializeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsInitializeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsInitializeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsParseDeployedStorageContractFunc describes the behavior when the
// ParseDeployedStorageContract method of the parent MockIDynamics instance
// is invoked.
type IDynamicsParseDeployedStorageContractFunc struct {
	defaultHook func(types.Log) (*bindings.DynamicsDeployedStorageContract, error)
	hooks       []func(types.Log) (*bindings.DynamicsDeployedStorageContract, error)
	history     []IDynamicsParseDeployedStorageContractFuncCall
	mutex       sync.Mutex
}

// ParseDeployedStorageContract delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIDynamics) ParseDeployedStorageContract(v0 types.Log) (*bindings.DynamicsDeployedStorageContract, error) {
	r0, r1 := m.ParseDeployedStorageContractFunc.nextHook()(v0)
	m.ParseDeployedStorageContractFunc.appendCall(IDynamicsParseDeployedStorageContractFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseDeployedStorageContract method of the parent MockIDynamics instance
// is invoked and the hook queue is empty.
func (f *IDynamicsParseDeployedStorageContractFunc) SetDefaultHook(hook func(types.Log) (*bindings.DynamicsDeployedStorageContract, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseDeployedStorageContract method of the parent MockIDynamics instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IDynamicsParseDeployedStorageContractFunc) PushHook(hook func(types.Log) (*bindings.DynamicsDeployedStorageContract, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsParseDeployedStorageContractFunc) SetDefaultReturn(r0 *bindings.DynamicsDeployedStorageContract, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.DynamicsDeployedStorageContract, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsParseDeployedStorageContractFunc) PushReturn(r0 *bindings.DynamicsDeployedStorageContract, r1 error) {
	f.PushHook(func(types.Log) (*bindings.DynamicsDeployedStorageContract, error) {
		return r0, r1
	})
}

func (f *IDynamicsParseDeployedStorageContractFunc) nextHook() func(types.Log) (*bindings.DynamicsDeployedStorageContract, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsParseDeployedStorageContractFunc) appendCall(r0 IDynamicsParseDeployedStorageContractFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IDynamicsParseDeployedStorageContractFuncCall objects describing the
// invocations of this function.
func (f *IDynamicsParseDeployedStorageContractFunc) History() []IDynamicsParseDeployedStorageContractFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsParseDeployedStorageContractFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsParseDeployedStorageContractFuncCall is an object that describes
// an invocation of method ParseDeployedStorageContract on an instance of
// MockIDynamics.
type IDynamicsParseDeployedStorageContractFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.DynamicsDeployedStorageContract
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsParseDeployedStorageContractFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsParseDeployedStorageContractFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsParseDynamicValueChangedFunc describes the behavior when the
// ParseDynamicValueChanged method of the parent MockIDynamics instance is
// invoked.
type IDynamicsParseDynamicValueChangedFunc struct {
	defaultHook func(types.Log) (*bindings.DynamicsDynamicValueChanged, error)
	hooks       []func(types.Log) (*bindings.DynamicsDynamicValueChanged, error)
	history     []IDynamicsParseDynamicValueChangedFuncCall
	mutex       sync.Mutex
}

// ParseDynamicValueChanged delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIDynamics) ParseDynamicValueChanged(v0 types.Log) (*bindings.DynamicsDynamicValueChanged, error) {
	r0, r1 := m.ParseDynamicValueChangedFunc.nextHook()(v0)
	m.ParseDynamicValueChangedFunc.appendCall(IDynamicsParseDynamicValueChangedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseDynamicValueChanged method of the parent MockIDynamics instance is
// invoked and the hook queue is empty.
func (f *IDynamicsParseDynamicValueChangedFunc) SetDefaultHook(hook func(types.Log) (*bindings.DynamicsDynamicValueChanged, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseDynamicValueChanged method of the parent MockIDynamics instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IDynamicsParseDynamicValueChangedFunc) PushHook(hook func(types.Log) (*bindings.DynamicsDynamicValueChanged, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsParseDynamicValueChangedFunc) SetDefaultReturn(r0 *bindings.DynamicsDynamicValueChanged, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.DynamicsDynamicValueChanged, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsParseDynamicValueChangedFunc) PushReturn(r0 *bindings.DynamicsDynamicValueChanged, r1 error) {
	f.PushHook(func(types.Log) (*bindings.DynamicsDynamicValueChanged, error) {
		return r0, r1
	})
}

func (f *IDynamicsParseDynamicValueChangedFunc) nextHook() func(types.Log) (*bindings.DynamicsDynamicValueChanged, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsParseDynamicValueChangedFunc) appendCall(r0 IDynamicsParseDynamicValueChangedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsParseDynamicValueChangedFuncCall
// objects describing the invocations of this function.
func (f *IDynamicsParseDynamicValueChangedFunc) History() []IDynamicsParseDynamicValueChangedFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsParseDynamicValueChangedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsParseDynamicValueChangedFuncCall is an object that describes an
// invocation of method ParseDynamicValueChanged on an instance of
// MockIDynamics.
type IDynamicsParseDynamicValueChangedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.DynamicsDynamicValueChanged
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsParseDynamicValueChangedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsParseDynamicValueChangedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsParseInitializedFunc describes the behavior when the
// ParseInitialized method of the parent MockIDynamics instance is invoked.
type IDynamicsParseInitializedFunc struct {
	defaultHook func(types.Log) (*bindings.DynamicsInitialized, error)
	hooks       []func(types.Log) (*bindings.DynamicsInitialized, error)
	history     []IDynamicsParseInitializedFuncCall
	mutex       sync.Mutex
}

// ParseInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIDynamics) ParseInitialized(v0 types.Log) (*bindings.DynamicsInitialized, error) {
	r0, r1 := m.ParseInitializedFunc.nextHook()(v0)
	m.ParseInitializedFunc.appendCall(IDynamicsParseInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseInitialized
// method of the parent MockIDynamics instance is invoked and the hook queue
// is empty.
func (f *IDynamicsParseInitializedFunc) SetDefaultHook(hook func(types.Log) (*bindings.DynamicsInitialized, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseInitialized method of the parent MockIDynamics instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IDynamicsParseInitializedFunc) PushHook(hook func(types.Log) (*bindings.DynamicsInitialized, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsParseInitializedFunc) SetDefaultReturn(r0 *bindings.DynamicsInitialized, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.DynamicsInitialized, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsParseInitializedFunc) PushReturn(r0 *bindings.DynamicsInitialized, r1 error) {
	f.PushHook(func(types.Log) (*bindings.DynamicsInitialized, error) {
		return r0, r1
	})
}

func (f *IDynamicsParseInitializedFunc) nextHook() func(types.Log) (*bindings.DynamicsInitialized, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsParseInitializedFunc) appendCall(r0 IDynamicsParseInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsParseInitializedFuncCall objects
// describing the invocations of this function.
func (f *IDynamicsParseInitializedFunc) History() []IDynamicsParseInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsParseInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsParseInitializedFuncCall is an object that describes an
// invocation of method ParseInitialized on an instance of MockIDynamics.
type IDynamicsParseInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.DynamicsInitialized
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsParseInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsParseInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsParseNewAliceNetNodeVersionAvailableFunc describes the behavior
// when the ParseNewAliceNetNodeVersionAvailable method of the parent
// MockIDynamics instance is invoked.
type IDynamicsParseNewAliceNetNodeVersionAvailableFunc struct {
	defaultHook func(types.Log) (*bindings.DynamicsNewAliceNetNodeVersionAvailable, error)
	hooks       []func(types.Log) (*bindings.DynamicsNewAliceNetNodeVersionAvailable, error)
	history     []IDynamicsParseNewAliceNetNodeVersionAvailableFuncCall
	mutex       sync.Mutex
}

// ParseNewAliceNetNodeVersionAvailable delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockIDynamics) ParseNewAliceNetNodeVersionAvailable(v0 types.Log) (*bindings.DynamicsNewAliceNetNodeVersionAvailable, error) {
	r0, r1 := m.ParseNewAliceNetNodeVersionAvailableFunc.nextHook()(v0)
	m.ParseNewAliceNetNodeVersionAvailableFunc.appendCall(IDynamicsParseNewAliceNetNodeVersionAvailableFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseNewAliceNetNodeVersionAvailable method of the parent MockIDynamics
// instance is invoked and the hook queue is empty.
func (f *IDynamicsParseNewAliceNetNodeVersionAvailableFunc) SetDefaultHook(hook func(types.Log) (*bindings.DynamicsNewAliceNetNodeVersionAvailable, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseNewAliceNetNodeVersionAvailable method of the parent MockIDynamics
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IDynamicsParseNewAliceNetNodeVersionAvailableFunc) PushHook(hook func(types.Log) (*bindings.DynamicsNewAliceNetNodeVersionAvailable, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsParseNewAliceNetNodeVersionAvailableFunc) SetDefaultReturn(r0 *bindings.DynamicsNewAliceNetNodeVersionAvailable, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.DynamicsNewAliceNetNodeVersionAvailable, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsParseNewAliceNetNodeVersionAvailableFunc) PushReturn(r0 *bindings.DynamicsNewAliceNetNodeVersionAvailable, r1 error) {
	f.PushHook(func(types.Log) (*bindings.DynamicsNewAliceNetNodeVersionAvailable, error) {
		return r0, r1
	})
}

func (f *IDynamicsParseNewAliceNetNodeVersionAvailableFunc) nextHook() func(types.Log) (*bindings.DynamicsNewAliceNetNodeVersionAvailable, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsParseNewAliceNetNodeVersionAvailableFunc) appendCall(r0 IDynamicsParseNewAliceNetNodeVersionAvailableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IDynamicsParseNewAliceNetNodeVersionAvailableFuncCall objects describing
// the invocations of this function.
func (f *IDynamicsParseNewAliceNetNodeVersionAvailableFunc) History() []IDynamicsParseNewAliceNetNodeVersionAvailableFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsParseNewAliceNetNodeVersionAvailableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsParseNewAliceNetNodeVersionAvailableFuncCall is an object that
// describes an invocation of method ParseNewAliceNetNodeVersionAvailable on
// an instance of MockIDynamics.
type IDynamicsParseNewAliceNetNodeVersionAvailableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.DynamicsNewAliceNetNodeVersionAvailable
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsParseNewAliceNetNodeVersionAvailableFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsParseNewAliceNetNodeVersionAvailableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsParseNewCanonicalAliceNetNodeVersionFunc describes the behavior
// when the ParseNewCanonicalAliceNetNodeVersion method of the parent
// MockIDynamics instance is invoked.
type IDynamicsParseNewCanonicalAliceNetNodeVersionFunc struct {
	defaultHook func(types.Log) (*bindings.DynamicsNewCanonicalAliceNetNodeVersion, error)
	hooks       []func(types.Log) (*bindings.DynamicsNewCanonicalAliceNetNodeVersion, error)
	history     []IDynamicsParseNewCanonicalAliceNetNodeVersionFuncCall
	mutex       sync.Mutex
}

// ParseNewCanonicalAliceNetNodeVersion delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockIDynamics) ParseNewCanonicalAliceNetNodeVersion(v0 types.Log) (*bindings.DynamicsNewCanonicalAliceNetNodeVersion, error) {
	r0, r1 := m.ParseNewCanonicalAliceNetNodeVersionFunc.nextHook()(v0)
	m.ParseNewCanonicalAliceNetNodeVersionFunc.appendCall(IDynamicsParseNewCanonicalAliceNetNodeVersionFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseNewCanonicalAliceNetNodeVersion method of the parent MockIDynamics
// instance is invoked and the hook queue is empty.
func (f *IDynamicsParseNewCanonicalAliceNetNodeVersionFunc) SetDefaultHook(hook func(types.Log) (*bindings.DynamicsNewCanonicalAliceNetNodeVersion, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseNewCanonicalAliceNetNodeVersion method of the parent MockIDynamics
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IDynamicsParseNewCanonicalAliceNetNodeVersionFunc) PushHook(hook func(types.Log) (*bindings.DynamicsNewCanonicalAliceNetNodeVersion, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsParseNewCanonicalAliceNetNodeVersionFunc) SetDefaultReturn(r0 *bindings.DynamicsNewCanonicalAliceNetNodeVersion, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.DynamicsNewCanonicalAliceNetNodeVersion, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsParseNewCanonicalAliceNetNodeVersionFunc) PushReturn(r0 *bindings.DynamicsNewCanonicalAliceNetNodeVersion, r1 error) {
	f.PushHook(func(types.Log) (*bindings.DynamicsNewCanonicalAliceNetNodeVersion, error) {
		return r0, r1
	})
}

func (f *IDynamicsParseNewCanonicalAliceNetNodeVersionFunc) nextHook() func(types.Log) (*bindings.DynamicsNewCanonicalAliceNetNodeVersion, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsParseNewCanonicalAliceNetNodeVersionFunc) appendCall(r0 IDynamicsParseNewCanonicalAliceNetNodeVersionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IDynamicsParseNewCanonicalAliceNetNodeVersionFuncCall objects describing
// the invocations of this function.
func (f *IDynamicsParseNewCanonicalAliceNetNodeVersionFunc) History() []IDynamicsParseNewCanonicalAliceNetNodeVersionFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsParseNewCanonicalAliceNetNodeVersionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsParseNewCanonicalAliceNetNodeVersionFuncCall is an object that
// describes an invocation of method ParseNewCanonicalAliceNetNodeVersion on
// an instance of MockIDynamics.
type IDynamicsParseNewCanonicalAliceNetNodeVersionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.DynamicsNewCanonicalAliceNetNodeVersion
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsParseNewCanonicalAliceNetNodeVersionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsParseNewCanonicalAliceNetNodeVersionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsSetConfigurationFunc describes the behavior when the
// SetConfiguration method of the parent MockIDynamics instance is invoked.
type IDynamicsSetConfigurationFunc struct {
	defaultHook func(*bind.TransactOpts, bindings.Configuration) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, bindings.Configuration) (*types.Transaction, error)
	history     []IDynamicsSetConfigurationFuncCall
	mutex       sync.Mutex
}

// SetConfiguration delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIDynamics) SetConfiguration(v0 *bind.TransactOpts, v1 bindings.Configuration) (*types.Transaction, error) {
	r0, r1 := m.SetConfigurationFunc.nextHook()(v0, v1)
	m.SetConfigurationFunc.appendCall(IDynamicsSetConfigurationFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetConfiguration
// method of the parent MockIDynamics instance is invoked and the hook queue
// is empty.
func (f *IDynamicsSetConfigurationFunc) SetDefaultHook(hook func(*bind.TransactOpts, bindings.Configuration) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetConfiguration method of the parent MockIDynamics instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IDynamicsSetConfigurationFunc) PushHook(hook func(*bind.TransactOpts, bindings.Configuration) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsSetConfigurationFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, bindings.Configuration) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsSetConfigurationFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, bindings.Configuration) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IDynamicsSetConfigurationFunc) nextHook() func(*bind.TransactOpts, bindings.Configuration) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsSetConfigurationFunc) appendCall(r0 IDynamicsSetConfigurationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsSetConfigurationFuncCall objects
// describing the invocations of this function.
func (f *IDynamicsSetConfigurationFunc) History() []IDynamicsSetConfigurationFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsSetConfigurationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsSetConfigurationFuncCall is an object that describes an
// invocation of method SetConfiguration on an instance of MockIDynamics.
type IDynamicsSetConfigurationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 bindings.Configuration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsSetConfigurationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsSetConfigurationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsUpdateAliceNetNodeVersionFunc describes the behavior when the
// UpdateAliceNetNodeVersion method of the parent MockIDynamics instance is
// invoked.
type IDynamicsUpdateAliceNetNodeVersionFunc struct {
	defaultHook func(*bind.TransactOpts, uint32, uint32, uint32, uint32, [32]byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint32, uint32, uint32, uint32, [32]byte) (*types.Transaction, error)
	history     []IDynamicsUpdateAliceNetNodeVersionFuncCall
	mutex       sync.Mutex
}

// UpdateAliceNetNodeVersion delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIDynamics) UpdateAliceNetNodeVersion(v0 *bind.TransactOpts, v1 uint32, v2 uint32, v3 uint32, v4 uint32, v5 [32]byte) (*types.Transaction, error) {
	r0, r1 := m.UpdateAliceNetNodeVersionFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.UpdateAliceNetNodeVersionFunc.appendCall(IDynamicsUpdateAliceNetNodeVersionFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UpdateAliceNetNodeVersion method of the parent MockIDynamics instance is
// invoked and the hook queue is empty.
func (f *IDynamicsUpdateAliceNetNodeVersionFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint32, uint32, uint32, uint32, [32]byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateAliceNetNodeVersion method of the parent MockIDynamics instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IDynamicsUpdateAliceNetNodeVersionFunc) PushHook(hook func(*bind.TransactOpts, uint32, uint32, uint32, uint32, [32]byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsUpdateAliceNetNodeVersionFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint32, uint32, uint32, uint32, [32]byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsUpdateAliceNetNodeVersionFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint32, uint32, uint32, uint32, [32]byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IDynamicsUpdateAliceNetNodeVersionFunc) nextHook() func(*bind.TransactOpts, uint32, uint32, uint32, uint32, [32]byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsUpdateAliceNetNodeVersionFunc) appendCall(r0 IDynamicsUpdateAliceNetNodeVersionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsUpdateAliceNetNodeVersionFuncCall
// objects describing the invocations of this function.
func (f *IDynamicsUpdateAliceNetNodeVersionFunc) History() []IDynamicsUpdateAliceNetNodeVersionFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsUpdateAliceNetNodeVersionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsUpdateAliceNetNodeVersionFuncCall is an object that describes an
// invocation of method UpdateAliceNetNodeVersion on an instance of
// MockIDynamics.
type IDynamicsUpdateAliceNetNodeVersionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 uint32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 uint32
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 uint32
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 [32]byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsUpdateAliceNetNodeVersionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsUpdateAliceNetNodeVersionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsUpdateHeadFunc describes the behavior when the UpdateHead method
// of the parent MockIDynamics instance is invoked.
type IDynamicsUpdateHeadFunc struct {
	defaultHook func(*bind.TransactOpts, uint32) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint32) (*types.Transaction, error)
	history     []IDynamicsUpdateHeadFuncCall
	mutex       sync.Mutex
}

// UpdateHead delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIDynamics) UpdateHead(v0 *bind.TransactOpts, v1 uint32) (*types.Transaction, error) {
	r0, r1 := m.UpdateHeadFunc.nextHook()(v0, v1)
	m.UpdateHeadFunc.appendCall(IDynamicsUpdateHeadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateHead method of
// the parent MockIDynamics instance is invoked and the hook queue is empty.
func (f *IDynamicsUpdateHeadFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint32) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateHead method of the parent MockIDynamics instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IDynamicsUpdateHeadFunc) PushHook(hook func(*bind.TransactOpts, uint32) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsUpdateHeadFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsUpdateHeadFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IDynamicsUpdateHeadFunc) nextHook() func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsUpdateHeadFunc) appendCall(r0 IDynamicsUpdateHeadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsUpdateHeadFuncCall objects
// describing the invocations of this function.
func (f *IDynamicsUpdateHeadFunc) History() []IDynamicsUpdateHeadFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsUpdateHeadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsUpdateHeadFuncCall is an object that describes an invocation of
// method UpdateHead on an instance of MockIDynamics.
type IDynamicsUpdateHeadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsUpdateHeadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsUpdateHeadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsWatchDeployedStorageContractFunc describes the behavior when the
// WatchDeployedStorageContract method of the parent MockIDynamics instance
// is invoked.
type IDynamicsWatchDeployedStorageContractFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.DynamicsDeployedStorageContract) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.DynamicsDeployedStorageContract) (event.Subscription, error)
	history     []IDynamicsWatchDeployedStorageContractFuncCall
	mutex       sync.Mutex
}

// WatchDeployedStorageContract delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIDynamics) WatchDeployedStorageContract(v0 *bind.WatchOpts, v1 chan<- *bindings.DynamicsDeployedStorageContract) (event.Subscription, error) {
	r0, r1 := m.WatchDeployedStorageContractFunc.nextHook()(v0, v1)
	m.WatchDeployedStorageContractFunc.appendCall(IDynamicsWatchDeployedStorageContractFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchDeployedStorageContract method of the parent MockIDynamics instance
// is invoked and the hook queue is empty.
func (f *IDynamicsWatchDeployedStorageContractFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.DynamicsDeployedStorageContract) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchDeployedStorageContract method of the parent MockIDynamics instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IDynamicsWatchDeployedStorageContractFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.DynamicsDeployedStorageContract) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsWatchDeployedStorageContractFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.DynamicsDeployedStorageContract) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsWatchDeployedStorageContractFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.DynamicsDeployedStorageContract) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IDynamicsWatchDeployedStorageContractFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.DynamicsDeployedStorageContract) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsWatchDeployedStorageContractFunc) appendCall(r0 IDynamicsWatchDeployedStorageContractFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IDynamicsWatchDeployedStorageContractFuncCall objects describing the
// invocations of this function.
func (f *IDynamicsWatchDeployedStorageContractFunc) History() []IDynamicsWatchDeployedStorageContractFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsWatchDeployedStorageContractFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsWatchDeployedStorageContractFuncCall is an object that describes
// an invocation of method WatchDeployedStorageContract on an instance of
// MockIDynamics.
type IDynamicsWatchDeployedStorageContractFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.DynamicsDeployedStorageContract
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsWatchDeployedStorageContractFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsWatchDeployedStorageContractFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsWatchDynamicValueChangedFunc describes the behavior when the
// WatchDynamicValueChanged method of the parent MockIDynamics instance is
// invoked.
type IDynamicsWatchDynamicValueChangedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.DynamicsDynamicValueChanged) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.DynamicsDynamicValueChanged) (event.Subscription, error)
	history     []IDynamicsWatchDynamicValueChangedFuncCall
	mutex       sync.Mutex
}

// WatchDynamicValueChanged delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIDynamics) WatchDynamicValueChanged(v0 *bind.WatchOpts, v1 chan<- *bindings.DynamicsDynamicValueChanged) (event.Subscription, error) {
	r0, r1 := m.WatchDynamicValueChangedFunc.nextHook()(v0, v1)
	m.WatchDynamicValueChangedFunc.appendCall(IDynamicsWatchDynamicValueChangedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchDynamicValueChanged method of the parent MockIDynamics instance is
// invoked and the hook queue is empty.
func (f *IDynamicsWatchDynamicValueChangedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.DynamicsDynamicValueChanged) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchDynamicValueChanged method of the parent MockIDynamics instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IDynamicsWatchDynamicValueChangedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.DynamicsDynamicValueChanged) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsWatchDynamicValueChangedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.DynamicsDynamicValueChanged) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsWatchDynamicValueChangedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.DynamicsDynamicValueChanged) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IDynamicsWatchDynamicValueChangedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.DynamicsDynamicValueChanged) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsWatchDynamicValueChangedFunc) appendCall(r0 IDynamicsWatchDynamicValueChangedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsWatchDynamicValueChangedFuncCall
// objects describing the invocations of this function.
func (f *IDynamicsWatchDynamicValueChangedFunc) History() []IDynamicsWatchDynamicValueChangedFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsWatchDynamicValueChangedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsWatchDynamicValueChangedFuncCall is an object that describes an
// invocation of method WatchDynamicValueChanged on an instance of
// MockIDynamics.
type IDynamicsWatchDynamicValueChangedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.DynamicsDynamicValueChanged
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsWatchDynamicValueChangedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsWatchDynamicValueChangedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsWatchInitializedFunc describes the behavior when the
// WatchInitialized method of the parent MockIDynamics instance is invoked.
type IDynamicsWatchInitializedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.DynamicsInitialized) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.DynamicsInitialized) (event.Subscription, error)
	history     []IDynamicsWatchInitializedFuncCall
	mutex       sync.Mutex
}

// WatchInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIDynamics) WatchInitialized(v0 *bind.WatchOpts, v1 chan<- *bindings.DynamicsInitialized) (event.Subscription, error) {
	r0, r1 := m.WatchInitializedFunc.nextHook()(v0, v1)
	m.WatchInitializedFunc.appendCall(IDynamicsWatchInitializedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchInitialized
// method of the parent MockIDynamics instance is invoked and the hook queue
// is empty.
func (f *IDynamicsWatchInitializedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.DynamicsInitialized) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchInitialized method of the parent MockIDynamics instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IDynamicsWatchInitializedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.DynamicsInitialized) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsWatchInitializedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.DynamicsInitialized) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsWatchInitializedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.DynamicsInitialized) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IDynamicsWatchInitializedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.DynamicsInitialized) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsWatchInitializedFunc) appendCall(r0 IDynamicsWatchInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDynamicsWatchInitializedFuncCall objects
// describing the invocations of this function.
func (f *IDynamicsWatchInitializedFunc) History() []IDynamicsWatchInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsWatchInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsWatchInitializedFuncCall is an object that describes an
// invocation of method WatchInitialized on an instance of MockIDynamics.
type IDynamicsWatchInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.DynamicsInitialized
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsWatchInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsWatchInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsWatchNewAliceNetNodeVersionAvailableFunc describes the behavior
// when the WatchNewAliceNetNodeVersionAvailable method of the parent
// MockIDynamics instance is invoked.
type IDynamicsWatchNewAliceNetNodeVersionAvailableFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.DynamicsNewAliceNetNodeVersionAvailable) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.DynamicsNewAliceNetNodeVersionAvailable) (event.Subscription, error)
	history     []IDynamicsWatchNewAliceNetNodeVersionAvailableFuncCall
	mutex       sync.Mutex
}

// WatchNewAliceNetNodeVersionAvailable delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockIDynamics) WatchNewAliceNetNodeVersionAvailable(v0 *bind.WatchOpts, v1 chan<- *bindings.DynamicsNewAliceNetNodeVersionAvailable) (event.Subscription, error) {
	r0, r1 := m.WatchNewAliceNetNodeVersionAvailableFunc.nextHook()(v0, v1)
	m.WatchNewAliceNetNodeVersionAvailableFunc.appendCall(IDynamicsWatchNewAliceNetNodeVersionAvailableFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchNewAliceNetNodeVersionAvailable method of the parent MockIDynamics
// instance is invoked and the hook queue is empty.
func (f *IDynamicsWatchNewAliceNetNodeVersionAvailableFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.DynamicsNewAliceNetNodeVersionAvailable) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchNewAliceNetNodeVersionAvailable method of the parent MockIDynamics
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IDynamicsWatchNewAliceNetNodeVersionAvailableFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.DynamicsNewAliceNetNodeVersionAvailable) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsWatchNewAliceNetNodeVersionAvailableFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.DynamicsNewAliceNetNodeVersionAvailable) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsWatchNewAliceNetNodeVersionAvailableFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.DynamicsNewAliceNetNodeVersionAvailable) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IDynamicsWatchNewAliceNetNodeVersionAvailableFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.DynamicsNewAliceNetNodeVersionAvailable) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsWatchNewAliceNetNodeVersionAvailableFunc) appendCall(r0 IDynamicsWatchNewAliceNetNodeVersionAvailableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IDynamicsWatchNewAliceNetNodeVersionAvailableFuncCall objects describing
// the invocations of this function.
func (f *IDynamicsWatchNewAliceNetNodeVersionAvailableFunc) History() []IDynamicsWatchNewAliceNetNodeVersionAvailableFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsWatchNewAliceNetNodeVersionAvailableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsWatchNewAliceNetNodeVersionAvailableFuncCall is an object that
// describes an invocation of method WatchNewAliceNetNodeVersionAvailable on
// an instance of MockIDynamics.
type IDynamicsWatchNewAliceNetNodeVersionAvailableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.DynamicsNewAliceNetNodeVersionAvailable
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsWatchNewAliceNetNodeVersionAvailableFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsWatchNewAliceNetNodeVersionAvailableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDynamicsWatchNewCanonicalAliceNetNodeVersionFunc describes the behavior
// when the WatchNewCanonicalAliceNetNodeVersion method of the parent
// MockIDynamics instance is invoked.
type IDynamicsWatchNewCanonicalAliceNetNodeVersionFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.DynamicsNewCanonicalAliceNetNodeVersion) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.DynamicsNewCanonicalAliceNetNodeVersion) (event.Subscription, error)
	history     []IDynamicsWatchNewCanonicalAliceNetNodeVersionFuncCall
	mutex       sync.Mutex
}

// WatchNewCanonicalAliceNetNodeVersion delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockIDynamics) WatchNewCanonicalAliceNetNodeVersion(v0 *bind.WatchOpts, v1 chan<- *bindings.DynamicsNewCanonicalAliceNetNodeVersion) (event.Subscription, error) {
	r0, r1 := m.WatchNewCanonicalAliceNetNodeVersionFunc.nextHook()(v0, v1)
	m.WatchNewCanonicalAliceNetNodeVersionFunc.appendCall(IDynamicsWatchNewCanonicalAliceNetNodeVersionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchNewCanonicalAliceNetNodeVersion method of the parent MockIDynamics
// instance is invoked and the hook queue is empty.
func (f *IDynamicsWatchNewCanonicalAliceNetNodeVersionFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.DynamicsNewCanonicalAliceNetNodeVersion) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchNewCanonicalAliceNetNodeVersion method of the parent MockIDynamics
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IDynamicsWatchNewCanonicalAliceNetNodeVersionFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.DynamicsNewCanonicalAliceNetNodeVersion) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IDynamicsWatchNewCanonicalAliceNetNodeVersionFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.DynamicsNewCanonicalAliceNetNodeVersion) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IDynamicsWatchNewCanonicalAliceNetNodeVersionFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.DynamicsNewCanonicalAliceNetNodeVersion) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IDynamicsWatchNewCanonicalAliceNetNodeVersionFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.DynamicsNewCanonicalAliceNetNodeVersion) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDynamicsWatchNewCanonicalAliceNetNodeVersionFunc) appendCall(r0 IDynamicsWatchNewCanonicalAliceNetNodeVersionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IDynamicsWatchNewCanonicalAliceNetNodeVersionFuncCall objects describing
// the invocations of this function.
func (f *IDynamicsWatchNewCanonicalAliceNetNodeVersionFunc) History() []IDynamicsWatchNewCanonicalAliceNetNodeVersionFuncCall {
	f.mutex.Lock()
	history := make([]IDynamicsWatchNewCanonicalAliceNetNodeVersionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDynamicsWatchNewCanonicalAliceNetNodeVersionFuncCall is an object that
// describes an invocation of method WatchNewCanonicalAliceNetNodeVersion on
// an instance of MockIDynamics.
type IDynamicsWatchNewCanonicalAliceNetNodeVersionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.DynamicsNewCanonicalAliceNetNodeVersion
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDynamicsWatchNewCanonicalAliceNetNodeVersionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDynamicsWatchNewCanonicalAliceNetNodeVersionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockIETHDKG is a mock implementation of the IETHDKG interface (from the
// package github.com/alicenet/alicenet/bridge/bindings) used for unit
// testing.
type MockIETHDKG struct {
	// AccuseParticipantDidNotDistributeSharesFunc is an instance of a mock
	// function object controlling the behavior of the method
	// AccuseParticipantDidNotDistributeShares.
	AccuseParticipantDidNotDistributeSharesFunc *IETHDKGAccuseParticipantDidNotDistributeSharesFunc
	// AccuseParticipantDidNotSubmitGPKJFunc is an instance of a mock
	// function object controlling the behavior of the method
	// AccuseParticipantDidNotSubmitGPKJ.
	AccuseParticipantDidNotSubmitGPKJFunc *IETHDKGAccuseParticipantDidNotSubmitGPKJFunc
	// AccuseParticipantDidNotSubmitKeySharesFunc is an instance of a mock
	// function object controlling the behavior of the method
	// AccuseParticipantDidNotSubmitKeyShares.
	AccuseParticipantDidNotSubmitKeySharesFunc *IETHDKGAccuseParticipantDidNotSubmitKeySharesFunc
	// AccuseParticipantDistributedBadSharesFunc is an instance of a mock
	// function object controlling the behavior of the method
	// AccuseParticipantDistributedBadShares.
	AccuseParticipantDistributedBadSharesFunc *IETHDKGAccuseParticipantDistributedBadSharesFunc
	// AccuseParticipantNotRegisteredFunc is an instance of a mock function
	// object controlling the behavior of the method
	// AccuseParticipantNotRegistered.
	AccuseParticipantNotRegisteredFunc *IETHDKGAccuseParticipantNotRegisteredFunc
	// AccuseParticipantSubmittedBadGPKJFunc is an instance of a mock
	// function object controlling the behavior of the method
	// AccuseParticipantSubmittedBadGPKJ.
	AccuseParticipantSubmittedBadGPKJFunc *IETHDKGAccuseParticipantSubmittedBadGPKJFunc
	// CompleteFunc is an instance of a mock function object controlling the
	// behavior of the method Complete.
	CompleteFunc *IETHDKGCompleteFunc
	// DistributeSharesFunc is an instance of a mock function object
	// controlling the behavior of the method DistributeShares.
	DistributeSharesFunc *IETHDKGDistributeSharesFunc
	// FilterAddressRegisteredFunc is an instance of a mock function object
	// controlling the behavior of the method FilterAddressRegistered.
	FilterAddressRegisteredFunc *IETHDKGFilterAddressRegisteredFunc
	// FilterGPKJSubmissionCompleteFunc is an instance of a mock function
	// object controlling the behavior of the method
	// FilterGPKJSubmissionComplete.
	FilterGPKJSubmissionCompleteFunc *IETHDKGFilterGPKJSubmissionCompleteFunc
	// FilterInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method FilterInitialized.
	FilterInitializedFunc *IETHDKGFilterInitializedFunc
	// FilterKeyShareSubmissionCompleteFunc is an instance of a mock
	// function object controlling the behavior of the method
	// FilterKeyShareSubmissionComplete.
	FilterKeyShareSubmissionCompleteFunc *IETHDKGFilterKeyShareSubmissionCompleteFunc
	// FilterKeyShareSubmittedFunc is an instance of a mock function object
	// controlling the behavior of the method FilterKeyShareSubmitted.
	FilterKeyShareSubmittedFunc *IETHDKGFilterKeyShareSubmittedFunc
	// FilterMPKSetFunc is an instance of a mock function object controlling
	// the behavior of the method FilterMPKSet.
	FilterMPKSetFunc *IETHDKGFilterMPKSetFunc
	// FilterRegistrationCompleteFunc is an instance of a mock function
	// object controlling the behavior of the method
	// FilterRegistrationComplete.
	FilterRegistrationCompleteFunc *IETHDKGFilterRegistrationCompleteFunc
	// FilterRegistrationOpenedFunc is an instance of a mock function object
	// controlling the behavior of the method FilterRegistrationOpened.
	FilterRegistrationOpenedFunc *IETHDKGFilterRegistrationOpenedFunc
	// FilterShareDistributionCompleteFunc is an instance of a mock function
	// object controlling the behavior of the method
	// FilterShareDistributionComplete.
	FilterShareDistributionCompleteFunc *IETHDKGFilterShareDistributionCompleteFunc
	// FilterSharesDistributedFunc is an instance of a mock function object
	// controlling the behavior of the method FilterSharesDistributed.
	FilterSharesDistributedFunc *IETHDKGFilterSharesDistributedFunc
	// FilterValidatorMemberAddedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// FilterValidatorMemberAdded.
	FilterValidatorMemberAddedFunc *IETHDKGFilterValidatorMemberAddedFunc
	// FilterValidatorSetCompletedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// FilterValidatorSetCompleted.
	FilterValidatorSetCompletedFunc *IETHDKGFilterValidatorSetCompletedFunc
	// GetBadParticipantsFunc is an instance of a mock function object
	// controlling the behavior of the method GetBadParticipants.
	GetBadParticipantsFunc *IETHDKGGetBadParticipantsFunc
	// GetConfirmationLengthFunc is an instance of a mock function object
	// controlling the behavior of the method GetConfirmationLength.
	GetConfirmationLengthFunc *IETHDKGGetConfirmationLengthFunc
	// GetETHDKGPhaseFunc is an instance of a mock function object
	// controlling the behavior of the method GetETHDKGPhase.
	GetETHDKGPhaseFunc *IETHDKGGetETHDKGPhaseFunc
	// GetLastRoundParticipantIndexFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetLastRoundParticipantIndex.
	GetLastRoundParticipantIndexFunc *IETHDKGGetLastRoundParticipantIndexFunc
	// GetMasterPublicKeyFunc is an instance of a mock function object
	// controlling the behavior of the method GetMasterPublicKey.
	GetMasterPublicKeyFunc *IETHDKGGetMasterPublicKeyFunc
	// GetMasterPublicKeyHashFunc is an instance of a mock function object
	// controlling the behavior of the method GetMasterPublicKeyHash.
	GetMasterPublicKeyHashFunc *IETHDKGGetMasterPublicKeyHashFunc
	// GetMetamorphicContractAddressFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetMetamorphicContractAddress.
	GetMetamorphicContractAddressFunc *IETHDKGGetMetamorphicContractAddressFunc
	// GetMinValidatorsFunc is an instance of a mock function object
	// controlling the behavior of the method GetMinValidators.
	GetMinValidatorsFunc *IETHDKGGetMinValidatorsFunc
	// GetNonceFunc is an instance of a mock function object controlling the
	// behavior of the method GetNonce.
	GetNonceFunc *IETHDKGGetNonceFunc
	// GetNumParticipantsFunc is an instance of a mock function object
	// controlling the behavior of the method GetNumParticipants.
	GetNumParticipantsFunc *IETHDKGGetNumParticipantsFunc
	// GetParticipantInternalStateFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetParticipantInternalState.
	GetParticipantInternalStateFunc *IETHDKGGetParticipantInternalStateFunc
	// GetParticipantsInternalStateFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetParticipantsInternalState.
	GetParticipantsInternalStateFunc *IETHDKGGetParticipantsInternalStateFunc
	// GetPhaseLengthFunc is an instance of a mock function object
	// controlling the behavior of the method GetPhaseLength.
	GetPhaseLengthFunc *IETHDKGGetPhaseLengthFunc
	// GetPhaseStartBlockFunc is an instance of a mock function object
	// controlling the behavior of the method GetPhaseStartBlock.
	GetPhaseStartBlockFunc *IETHDKGGetPhaseStartBlockFunc
	// InitializeFunc is an instance of a mock function object controlling
	// the behavior of the method Initialize.
	InitializeFunc *IETHDKGInitializeFunc
	// InitializeETHDKGFunc is an instance of a mock function object
	// controlling the behavior of the method InitializeETHDKG.
	InitializeETHDKGFunc *IETHDKGInitializeETHDKGFunc
	// IsETHDKGCompletedFunc is an instance of a mock function object
	// controlling the behavior of the method IsETHDKGCompleted.
	IsETHDKGCompletedFunc *IETHDKGIsETHDKGCompletedFunc
	// IsETHDKGHaltedFunc is an instance of a mock function object
	// controlling the behavior of the method IsETHDKGHalted.
	IsETHDKGHaltedFunc *IETHDKGIsETHDKGHaltedFunc
	// IsETHDKGRunningFunc is an instance of a mock function object
	// controlling the behavior of the method IsETHDKGRunning.
	IsETHDKGRunningFunc *IETHDKGIsETHDKGRunningFunc
	// IsMasterPublicKeySetFunc is an instance of a mock function object
	// controlling the behavior of the method IsMasterPublicKeySet.
	IsMasterPublicKeySetFunc *IETHDKGIsMasterPublicKeySetFunc
	// IsValidMasterPublicKeyFunc is an instance of a mock function object
	// controlling the behavior of the method IsValidMasterPublicKey.
	IsValidMasterPublicKeyFunc *IETHDKGIsValidMasterPublicKeyFunc
	// MigrateValidatorsFunc is an instance of a mock function object
	// controlling the behavior of the method MigrateValidators.
	MigrateValidatorsFunc *IETHDKGMigrateValidatorsFunc
	// ParseAddressRegisteredFunc is an instance of a mock function object
	// controlling the behavior of the method ParseAddressRegistered.
	ParseAddressRegisteredFunc *IETHDKGParseAddressRegisteredFunc
	// ParseGPKJSubmissionCompleteFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ParseGPKJSubmissionComplete.
	ParseGPKJSubmissionCompleteFunc *IETHDKGParseGPKJSubmissionCompleteFunc
	// ParseInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseInitialized.
	ParseInitializedFunc *IETHDKGParseInitializedFunc
	// ParseKeyShareSubmissionCompleteFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ParseKeyShareSubmissionComplete.
	ParseKeyShareSubmissionCompleteFunc *IETHDKGParseKeyShareSubmissionCompleteFunc
	// ParseKeyShareSubmittedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseKeyShareSubmitted.
	ParseKeyShareSubmittedFunc *IETHDKGParseKeyShareSubmittedFunc
	// ParseMPKSetFunc is an instance of a mock function object controlling
	// the behavior of the method ParseMPKSet.
	ParseMPKSetFunc *IETHDKGParseMPKSetFunc
	// ParseRegistrationCompleteFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ParseRegistrationComplete.
	ParseRegistrationCompleteFunc *IETHDKGParseRegistrationCompleteFunc
	// ParseRegistrationOpenedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseRegistrationOpened.
	ParseRegistrationOpenedFunc *IETHDKGParseRegistrationOpenedFunc
	// ParseShareDistributionCompleteFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ParseShareDistributionComplete.
	ParseShareDistributionCompleteFunc *IETHDKGParseShareDistributionCompleteFunc
	// ParseSharesDistributedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseSharesDistributed.
	ParseSharesDistributedFunc *IETHDKGParseSharesDistributedFunc
	// ParseValidatorMemberAddedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ParseValidatorMemberAdded.
	ParseValidatorMemberAddedFunc *IETHDKGParseValidatorMemberAddedFunc
	// ParseValidatorSetCompletedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ParseValidatorSetCompleted.
	ParseValidatorSetCompletedFunc *IETHDKGParseValidatorSetCompletedFunc
	// RegisterFunc is an instance of a mock function object controlling the
	// behavior of the method Register.
	RegisterFunc *IETHDKGRegisterFunc
	// SetConfirmationLengthFunc is an instance of a mock function object
	// controlling the behavior of the method SetConfirmationLength.
	SetConfirmationLengthFunc *IETHDKGSetConfirmationLengthFunc
	// SetCustomAliceNetHeightFunc is an instance of a mock function object
	// controlling the behavior of the method SetCustomAliceNetHeight.
	SetCustomAliceNetHeightFunc *IETHDKGSetCustomAliceNetHeightFunc
	// SetPhaseLengthFunc is an instance of a mock function object
	// controlling the behavior of the method SetPhaseLength.
	SetPhaseLengthFunc *IETHDKGSetPhaseLengthFunc
	// SubmitGPKJFunc is an instance of a mock function object controlling
	// the behavior of the method SubmitGPKJ.
	SubmitGPKJFunc *IETHDKGSubmitGPKJFunc
	// SubmitKeyShareFunc is an instance of a mock function object
	// controlling the behavior of the method SubmitKeyShare.
	SubmitKeyShareFunc *IETHDKGSubmitKeyShareFunc
	// SubmitMasterPublicKeyFunc is an instance of a mock function object
	// controlling the behavior of the method SubmitMasterPublicKey.
	SubmitMasterPublicKeyFunc *IETHDKGSubmitMasterPublicKeyFunc
	// WatchAddressRegisteredFunc is an instance of a mock function object
	// controlling the behavior of the method WatchAddressRegistered.
	WatchAddressRegisteredFunc *IETHDKGWatchAddressRegisteredFunc
	// WatchGPKJSubmissionCompleteFunc is an instance of a mock function
	// object controlling the behavior of the method
	// WatchGPKJSubmissionComplete.
	WatchGPKJSubmissionCompleteFunc *IETHDKGWatchGPKJSubmissionCompleteFunc
	// WatchInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchInitialized.
	WatchInitializedFunc *IETHDKGWatchInitializedFunc
	// WatchKeyShareSubmissionCompleteFunc is an instance of a mock function
	// object controlling the behavior of the method
	// WatchKeyShareSubmissionComplete.
	WatchKeyShareSubmissionCompleteFunc *IETHDKGWatchKeyShareSubmissionCompleteFunc
	// WatchKeyShareSubmittedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchKeyShareSubmitted.
	WatchKeyShareSubmittedFunc *IETHDKGWatchKeyShareSubmittedFunc
	// WatchMPKSetFunc is an instance of a mock function object controlling
	// the behavior of the method WatchMPKSet.
	WatchMPKSetFunc *IETHDKGWatchMPKSetFunc
	// WatchRegistrationCompleteFunc is an instance of a mock function
	// object controlling the behavior of the method
	// WatchRegistrationComplete.
	WatchRegistrationCompleteFunc *IETHDKGWatchRegistrationCompleteFunc
	// WatchRegistrationOpenedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchRegistrationOpened.
	WatchRegistrationOpenedFunc *IETHDKGWatchRegistrationOpenedFunc
	// WatchShareDistributionCompleteFunc is an instance of a mock function
	// object controlling the behavior of the method
	// WatchShareDistributionComplete.
	WatchShareDistributionCompleteFunc *IETHDKGWatchShareDistributionCompleteFunc
	// WatchSharesDistributedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchSharesDistributed.
	WatchSharesDistributedFunc *IETHDKGWatchSharesDistributedFunc
	// WatchValidatorMemberAddedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// WatchValidatorMemberAdded.
	WatchValidatorMemberAddedFunc *IETHDKGWatchValidatorMemberAddedFunc
	// WatchValidatorSetCompletedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// WatchValidatorSetCompleted.
	WatchValidatorSetCompletedFunc *IETHDKGWatchValidatorSetCompletedFunc
}

// NewMockIETHDKG creates a new mock of the IETHDKG interface. All methods
// return zero values for all results, unless overwritten.
func NewMockIETHDKG() *MockIETHDKG {
	return &MockIETHDKG{
		AccuseParticipantDidNotDistributeSharesFunc: &IETHDKGAccuseParticipantDidNotDistributeSharesFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		AccuseParticipantDidNotSubmitGPKJFunc: &IETHDKGAccuseParticipantDidNotSubmitGPKJFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		AccuseParticipantDidNotSubmitKeySharesFunc: &IETHDKGAccuseParticipantDidNotSubmitKeySharesFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		AccuseParticipantDistributedBadSharesFunc: &IETHDKGAccuseParticipantDistributedBadSharesFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, []*big.Int, [][2]*big.Int, [2]*big.Int, [2]*big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		AccuseParticipantNotRegisteredFunc: &IETHDKGAccuseParticipantNotRegisteredFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		AccuseParticipantSubmittedBadGPKJFunc: &IETHDKGAccuseParticipantSubmittedBadGPKJFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address, [][32]byte, [][][2]*big.Int, common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CompleteFunc: &IETHDKGCompleteFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DistributeSharesFunc: &IETHDKGDistributeSharesFunc{
			defaultHook: func(*bind.TransactOpts, []*big.Int, [][2]*big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		FilterAddressRegisteredFunc: &IETHDKGFilterAddressRegisteredFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ETHDKGAddressRegisteredIterator, r1 error) {
				return
			},
		},
		FilterGPKJSubmissionCompleteFunc: &IETHDKGFilterGPKJSubmissionCompleteFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ETHDKGGPKJSubmissionCompleteIterator, r1 error) {
				return
			},
		},
		FilterInitializedFunc: &IETHDKGFilterInitializedFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ETHDKGInitializedIterator, r1 error) {
				return
			},
		},
		FilterKeyShareSubmissionCompleteFunc: &IETHDKGFilterKeyShareSubmissionCompleteFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ETHDKGKeyShareSubmissionCompleteIterator, r1 error) {
				return
			},
		},
		FilterKeyShareSubmittedFunc: &IETHDKGFilterKeyShareSubmittedFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ETHDKGKeyShareSubmittedIterator, r1 error) {
				return
			},
		},
		FilterMPKSetFunc: &IETHDKGFilterMPKSetFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ETHDKGMPKSetIterator, r1 error) {
				return
			},
		},
		FilterRegistrationCompleteFunc: &IETHDKGFilterRegistrationCompleteFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ETHDKGRegistrationCompleteIterator, r1 error) {
				return
			},
		},
		FilterRegistrationOpenedFunc: &IETHDKGFilterRegistrationOpenedFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ETHDKGRegistrationOpenedIterator, r1 error) {
				return
			},
		},
		FilterShareDistributionCompleteFunc: &IETHDKGFilterShareDistributionCompleteFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ETHDKGShareDistributionCompleteIterator, r1 error) {
				return
			},
		},
		FilterSharesDistributedFunc: &IETHDKGFilterSharesDistributedFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ETHDKGSharesDistributedIterator, r1 error) {
				return
			},
		},
		FilterValidatorMemberAddedFunc: &IETHDKGFilterValidatorMemberAddedFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ETHDKGValidatorMemberAddedIterator, r1 error) {
				return
			},
		},
		FilterValidatorSetCompletedFunc: &IETHDKGFilterValidatorSetCompletedFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ETHDKGValidatorSetCompletedIterator, r1 error) {
				return
			},
		},
		GetBadParticipantsFunc: &IETHDKGGetBadParticipantsFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetConfirmationLengthFunc: &IETHDKGGetConfirmationLengthFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetETHDKGPhaseFunc: &IETHDKGGetETHDKGPhaseFunc{
			defaultHook: func(*bind.CallOpts) (r0 uint8, r1 error) {
				return
			},
		},
		GetLastRoundParticipantIndexFunc: &IETHDKGGetLastRoundParticipantIndexFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetMasterPublicKeyFunc: &IETHDKGGetMasterPublicKeyFunc{
			defaultHook: func(*bind.CallOpts) (r0 [4]*big.Int, r1 error) {
				return
			},
		},
		GetMasterPublicKeyHashFunc: &IETHDKGGetMasterPublicKeyHashFunc{
			defaultHook: func(*bind.CallOpts) (r0 [32]byte, r1 error) {
				return
			},
		},
		GetMetamorphicContractAddressFunc: &IETHDKGGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (r0 common.Address, r1 error) {
				return
			},
		},
		GetMinValidatorsFunc: &IETHDKGGetMinValidatorsFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetNonceFunc: &IETHDKGGetNonceFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetNumParticipantsFunc: &IETHDKGGetNumParticipantsFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetParticipantInternalStateFunc: &IETHDKGGetParticipantInternalStateFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (r0 bindings.Participant, r1 error) {
				return
			},
		},
		GetParticipantsInternalStateFunc: &IETHDKGGetParticipantsInternalStateFunc{
			defaultHook: func(*bind.CallOpts, []common.Address) (r0 []bindings.Participant, r1 error) {
				return
			},
		},
		GetPhaseLengthFunc: &IETHDKGGetPhaseLengthFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetPhaseStartBlockFunc: &IETHDKGGetPhaseStartBlockFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		InitializeFunc: &IETHDKGInitializeFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		InitializeETHDKGFunc: &IETHDKGInitializeETHDKGFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		IsETHDKGCompletedFunc: &IETHDKGIsETHDKGCompletedFunc{
			defaultHook: func(*bind.CallOpts) (r0 bool, r1 error) {
				return
			},
		},
		IsETHDKGHaltedFunc: &IETHDKGIsETHDKGHaltedFunc{
			defaultHook: func(*bind.CallOpts) (r0 bool, r1 error) {
				return
			},
		},
		IsETHDKGRunningFunc: &IETHDKGIsETHDKGRunningFunc{
			defaultHook: func(*bind.CallOpts) (r0 bool, r1 error) {
				return
			},
		},
		IsMasterPublicKeySetFunc: &IETHDKGIsMasterPublicKeySetFunc{
			defaultHook: func(*bind.CallOpts) (r0 bool, r1 error) {
				return
			},
		},
		IsValidMasterPublicKeyFunc: &IETHDKGIsValidMasterPublicKeyFunc{
			defaultHook: func(*bind.CallOpts, [32]byte) (r0 bool, r1 error) {
				return
			},
		},
		MigrateValidatorsFunc: &IETHDKGMigrateValidatorsFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address, []*big.Int, [][4]*big.Int, uint8, *big.Int, *big.Int, *big.Int, [4]*big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		ParseAddressRegisteredFunc: &IETHDKGParseAddressRegisteredFunc{
			defaultHook: func(types.Log) (r0 *bindings.ETHDKGAddressRegistered, r1 error) {
				return
			},
		},
		ParseGPKJSubmissionCompleteFunc: &IETHDKGParseGPKJSubmissionCompleteFunc{
			defaultHook: func(types.Log) (r0 *bindings.ETHDKGGPKJSubmissionComplete, r1 error) {
				return
			},
		},
		ParseInitializedFunc: &IETHDKGParseInitializedFunc{
			defaultHook: func(types.Log) (r0 *bindings.ETHDKGInitialized, r1 error) {
				return
			},
		},
		ParseKeyShareSubmissionCompleteFunc: &IETHDKGParseKeyShareSubmissionCompleteFunc{
			defaultHook: func(types.Log) (r0 *bindings.ETHDKGKeyShareSubmissionComplete, r1 error) {
				return
			},
		},
		ParseKeyShareSubmittedFunc: &IETHDKGParseKeyShareSubmittedFunc{
			defaultHook: func(types.Log) (r0 *bindings.ETHDKGKeyShareSubmitted, r1 error) {
				return
			},
		},
		ParseMPKSetFunc: &IETHDKGParseMPKSetFunc{
			defaultHook: func(types.Log) (r0 *bindings.ETHDKGMPKSet, r1 error) {
				return
			},
		},
		ParseRegistrationCompleteFunc: &IETHDKGParseRegistrationCompleteFunc{
			defaultHook: func(types.Log) (r0 *bindings.ETHDKGRegistrationComplete, r1 error) {
				return
			},
		},
		ParseRegistrationOpenedFunc: &IETHDKGParseRegistrationOpenedFunc{
			defaultHook: func(types.Log) (r0 *bindings.ETHDKGRegistrationOpened, r1 error) {
				return
			},
		},
		ParseShareDistributionCompleteFunc: &IETHDKGParseShareDistributionCompleteFunc{
			defaultHook: func(types.Log) (r0 *bindings.ETHDKGShareDistributionComplete, r1 error) {
				return
			},
		},
		ParseSharesDistributedFunc: &IETHDKGParseSharesDistributedFunc{
			defaultHook: func(types.Log) (r0 *bindings.ETHDKGSharesDistributed, r1 error) {
				return
			},
		},
		ParseValidatorMemberAddedFunc: &IETHDKGParseValidatorMemberAddedFunc{
			defaultHook: func(types.Log) (r0 *bindings.ETHDKGValidatorMemberAdded, r1 error) {
				return
			},
		},
		ParseValidatorSetCompletedFunc: &IETHDKGParseValidatorSetCompletedFunc{
			defaultHook: func(types.Log) (r0 *bindings.ETHDKGValidatorSetCompleted, r1 error) {
				return
			},
		},
		RegisterFunc: &IETHDKGRegisterFunc{
			defaultHook: func(*bind.TransactOpts, [2]*big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SetConfirmationLengthFunc: &IETHDKGSetConfirmationLengthFunc{
			defaultHook: func(*bind.TransactOpts, uint16) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SetCustomAliceNetHeightFunc: &IETHDKGSetCustomAliceNetHeightFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SetPhaseLengthFunc: &IETHDKGSetPhaseLengthFunc{
			defaultHook: func(*bind.TransactOpts, uint16) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SubmitGPKJFunc: &IETHDKGSubmitGPKJFunc{
			defaultHook: func(*bind.TransactOpts, [4]*big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SubmitKeyShareFunc: &IETHDKGSubmitKeyShareFunc{
			defaultHook: func(*bind.TransactOpts, [2]*big.Int, [2]*big.Int, [4]*big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SubmitMasterPublicKeyFunc: &IETHDKGSubmitMasterPublicKeyFunc{
			defaultHook: func(*bind.TransactOpts, [4]*big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		WatchAddressRegisteredFunc: &IETHDKGWatchAddressRegisteredFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGAddressRegistered) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchGPKJSubmissionCompleteFunc: &IETHDKGWatchGPKJSubmissionCompleteFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGGPKJSubmissionComplete) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchInitializedFunc: &IETHDKGWatchInitializedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGInitialized) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchKeyShareSubmissionCompleteFunc: &IETHDKGWatchKeyShareSubmissionCompleteFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmissionComplete) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchKeyShareSubmittedFunc: &IETHDKGWatchKeyShareSubmittedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmitted) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchMPKSetFunc: &IETHDKGWatchMPKSetFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGMPKSet) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchRegistrationCompleteFunc: &IETHDKGWatchRegistrationCompleteFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationComplete) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchRegistrationOpenedFunc: &IETHDKGWatchRegistrationOpenedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationOpened) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchShareDistributionCompleteFunc: &IETHDKGWatchShareDistributionCompleteFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGShareDistributionComplete) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchSharesDistributedFunc: &IETHDKGWatchSharesDistributedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGSharesDistributed) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchValidatorMemberAddedFunc: &IETHDKGWatchValidatorMemberAddedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorMemberAdded) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchValidatorSetCompletedFunc: &IETHDKGWatchValidatorSetCompletedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorSetCompleted) (r0 event.Subscription, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockIETHDKG creates a new mock of the IETHDKG interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockIETHDKG() *MockIETHDKG {
	return &MockIETHDKG{
		AccuseParticipantDidNotDistributeSharesFunc: &IETHDKGAccuseParticipantDidNotDistributeSharesFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.AccuseParticipantDidNotDistributeShares")
			},
		},
		AccuseParticipantDidNotSubmitGPKJFunc: &IETHDKGAccuseParticipantDidNotSubmitGPKJFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.AccuseParticipantDidNotSubmitGPKJ")
			},
		},
		AccuseParticipantDidNotSubmitKeySharesFunc: &IETHDKGAccuseParticipantDidNotSubmitKeySharesFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.AccuseParticipantDidNotSubmitKeyShares")
			},
		},
		AccuseParticipantDistributedBadSharesFunc: &IETHDKGAccuseParticipantDistributedBadSharesFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, []*big.Int, [][2]*big.Int, [2]*big.Int, [2]*big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.AccuseParticipantDistributedBadShares")
			},
		},
		AccuseParticipantNotRegisteredFunc: &IETHDKGAccuseParticipantNotRegisteredFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.AccuseParticipantNotRegistered")
			},
		},
		AccuseParticipantSubmittedBadGPKJFunc: &IETHDKGAccuseParticipantSubmittedBadGPKJFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address, [][32]byte, [][][2]*big.Int, common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.AccuseParticipantSubmittedBadGPKJ")
			},
		},
		CompleteFunc: &IETHDKGCompleteFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.Complete")
			},
		},
		DistributeSharesFunc: &IETHDKGDistributeSharesFunc{
			defaultHook: func(*bind.TransactOpts, []*big.Int, [][2]*big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.DistributeShares")
			},
		},
		FilterAddressRegisteredFunc: &IETHDKGFilterAddressRegisteredFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ETHDKGAddressRegisteredIterator, error) {
				panic("unexpected invocation of MockIETHDKG.FilterAddressRegistered")
			},
		},
		FilterGPKJSubmissionCompleteFunc: &IETHDKGFilterGPKJSubmissionCompleteFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ETHDKGGPKJSubmissionCompleteIterator, error) {
				panic("unexpected invocation of MockIETHDKG.FilterGPKJSubmissionComplete")
			},
		},
		FilterInitializedFunc: &IETHDKGFilterInitializedFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ETHDKGInitializedIterator, error) {
				panic("unexpected invocation of MockIETHDKG.FilterInitialized")
			},
		},
		FilterKeyShareSubmissionCompleteFunc: &IETHDKGFilterKeyShareSubmissionCompleteFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmissionCompleteIterator, error) {
				panic("unexpected invocation of MockIETHDKG.FilterKeyShareSubmissionComplete")
			},
		},
		FilterKeyShareSubmittedFunc: &IETHDKGFilterKeyShareSubmittedFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmittedIterator, error) {
				panic("unexpected invocation of MockIETHDKG.FilterKeyShareSubmitted")
			},
		},
		FilterMPKSetFunc: &IETHDKGFilterMPKSetFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ETHDKGMPKSetIterator, error) {
				panic("unexpected invocation of MockIETHDKG.FilterMPKSet")
			},
		},
		FilterRegistrationCompleteFunc: &IETHDKGFilterRegistrationCompleteFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationCompleteIterator, error) {
				panic("unexpected invocation of MockIETHDKG.FilterRegistrationComplete")
			},
		},
		FilterRegistrationOpenedFunc: &IETHDKGFilterRegistrationOpenedFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationOpenedIterator, error) {
				panic("unexpected invocation of MockIETHDKG.FilterRegistrationOpened")
			},
		},
		FilterShareDistributionCompleteFunc: &IETHDKGFilterShareDistributionCompleteFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ETHDKGShareDistributionCompleteIterator, error) {
				panic("unexpected invocation of MockIETHDKG.FilterShareDistributionComplete")
			},
		},
		FilterSharesDistributedFunc: &IETHDKGFilterSharesDistributedFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ETHDKGSharesDistributedIterator, error) {
				panic("unexpected invocation of MockIETHDKG.FilterSharesDistributed")
			},
		},
		FilterValidatorMemberAddedFunc: &IETHDKGFilterValidatorMemberAddedFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ETHDKGValidatorMemberAddedIterator, error) {
				panic("unexpected invocation of MockIETHDKG.FilterValidatorMemberAdded")
			},
		},
		FilterValidatorSetCompletedFunc: &IETHDKGFilterValidatorSetCompletedFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ETHDKGValidatorSetCompletedIterator, error) {
				panic("unexpected invocation of MockIETHDKG.FilterValidatorSetCompleted")
			},
		},
		GetBadParticipantsFunc: &IETHDKGGetBadParticipantsFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIETHDKG.GetBadParticipants")
			},
		},
		GetConfirmationLengthFunc: &IETHDKGGetConfirmationLengthFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIETHDKG.GetConfirmationLength")
			},
		},
		GetETHDKGPhaseFunc: &IETHDKGGetETHDKGPhaseFunc{
			defaultHook: func(*bind.CallOpts) (uint8, error) {
				panic("unexpected invocation of MockIETHDKG.GetETHDKGPhase")
			},
		},
		GetLastRoundParticipantIndexFunc: &IETHDKGGetLastRoundParticipantIndexFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (*big.Int, error) {
				panic("unexpected invocation of MockIETHDKG.GetLastRoundParticipantIndex")
			},
		},
		GetMasterPublicKeyFunc: &IETHDKGGetMasterPublicKeyFunc{
			defaultHook: func(*bind.CallOpts) ([4]*big.Int, error) {
				panic("unexpected invocation of MockIETHDKG.GetMasterPublicKey")
			},
		},
		GetMasterPublicKeyHashFunc: &IETHDKGGetMasterPublicKeyHashFunc{
			defaultHook: func(*bind.CallOpts) ([32]byte, error) {
				panic("unexpected invocation of MockIETHDKG.GetMasterPublicKeyHash")
			},
		},
		GetMetamorphicContractAddressFunc: &IETHDKGGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
				panic("unexpected invocation of MockIETHDKG.GetMetamorphicContractAddress")
			},
		},
		GetMinValidatorsFunc: &IETHDKGGetMinValidatorsFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIETHDKG.GetMinValidators")
			},
		},
		GetNonceFunc: &IETHDKGGetNonceFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIETHDKG.GetNonce")
			},
		},
		GetNumParticipantsFunc: &IETHDKGGetNumParticipantsFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIETHDKG.GetNumParticipants")
			},
		},
		GetParticipantInternalStateFunc: &IETHDKGGetParticipantInternalStateFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (bindings.Participant, error) {
				panic("unexpected invocation of MockIETHDKG.GetParticipantInternalState")
			},
		},
		GetParticipantsInternalStateFunc: &IETHDKGGetParticipantsInternalStateFunc{
			defaultHook: func(*bind.CallOpts, []common.Address) ([]bindings.Participant, error) {
				panic("unexpected invocation of MockIETHDKG.GetParticipantsInternalState")
			},
		},
		GetPhaseLengthFunc: &IETHDKGGetPhaseLengthFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIETHDKG.GetPhaseLength")
			},
		},
		GetPhaseStartBlockFunc: &IETHDKGGetPhaseStartBlockFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIETHDKG.GetPhaseStartBlock")
			},
		},
		InitializeFunc: &IETHDKGInitializeFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.Initialize")
			},
		},
		InitializeETHDKGFunc: &IETHDKGInitializeETHDKGFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.InitializeETHDKG")
			},
		},
		IsETHDKGCompletedFunc: &IETHDKGIsETHDKGCompletedFunc{
			defaultHook: func(*bind.CallOpts) (bool, error) {
				panic("unexpected invocation of MockIETHDKG.IsETHDKGCompleted")
			},
		},
		IsETHDKGHaltedFunc: &IETHDKGIsETHDKGHaltedFunc{
			defaultHook: func(*bind.CallOpts) (bool, error) {
				panic("unexpected invocation of MockIETHDKG.IsETHDKGHalted")
			},
		},
		IsETHDKGRunningFunc: &IETHDKGIsETHDKGRunningFunc{
			defaultHook: func(*bind.CallOpts) (bool, error) {
				panic("unexpected invocation of MockIETHDKG.IsETHDKGRunning")
			},
		},
		IsMasterPublicKeySetFunc: &IETHDKGIsMasterPublicKeySetFunc{
			defaultHook: func(*bind.CallOpts) (bool, error) {
				panic("unexpected invocation of MockIETHDKG.IsMasterPublicKeySet")
			},
		},
		IsValidMasterPublicKeyFunc: &IETHDKGIsValidMasterPublicKeyFunc{
			defaultHook: func(*bind.CallOpts, [32]byte) (bool, error) {
				panic("unexpected invocation of MockIETHDKG.IsValidMasterPublicKey")
			},
		},
		MigrateValidatorsFunc: &IETHDKGMigrateValidatorsFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address, []*big.Int, [][4]*big.Int, uint8, *big.Int, *big.Int, *big.Int, [4]*big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.MigrateValidators")
			},
		},
		ParseAddressRegisteredFunc: &IETHDKGParseAddressRegisteredFunc{
			defaultHook: func(types.Log) (*bindings.ETHDKGAddressRegistered, error) {
				panic("unexpected invocation of MockIETHDKG.ParseAddressRegistered")
			},
		},
		ParseGPKJSubmissionCompleteFunc: &IETHDKGParseGPKJSubmissionCompleteFunc{
			defaultHook: func(types.Log) (*bindings.ETHDKGGPKJSubmissionComplete, error) {
				panic("unexpected invocation of MockIETHDKG.ParseGPKJSubmissionComplete")
			},
		},
		ParseInitializedFunc: &IETHDKGParseInitializedFunc{
			defaultHook: func(types.Log) (*bindings.ETHDKGInitialized, error) {
				panic("unexpected invocation of MockIETHDKG.ParseInitialized")
			},
		},
		ParseKeyShareSubmissionCompleteFunc: &IETHDKGParseKeyShareSubmissionCompleteFunc{
			defaultHook: func(types.Log) (*bindings.ETHDKGKeyShareSubmissionComplete, error) {
				panic("unexpected invocation of MockIETHDKG.ParseKeyShareSubmissionComplete")
			},
		},
		ParseKeyShareSubmittedFunc: &IETHDKGParseKeyShareSubmittedFunc{
			defaultHook: func(types.Log) (*bindings.ETHDKGKeyShareSubmitted, error) {
				panic("unexpected invocation of MockIETHDKG.ParseKeyShareSubmitted")
			},
		},
		ParseMPKSetFunc: &IETHDKGParseMPKSetFunc{
			defaultHook: func(types.Log) (*bindings.ETHDKGMPKSet, error) {
				panic("unexpected invocation of MockIETHDKG.ParseMPKSet")
			},
		},
		ParseRegistrationCompleteFunc: &IETHDKGParseRegistrationCompleteFunc{
			defaultHook: func(types.Log) (*bindings.ETHDKGRegistrationComplete, error) {
				panic("unexpected invocation of MockIETHDKG.ParseRegistrationComplete")
			},
		},
		ParseRegistrationOpenedFunc: &IETHDKGParseRegistrationOpenedFunc{
			defaultHook: func(types.Log) (*bindings.ETHDKGRegistrationOpened, error) {
				panic("unexpected invocation of MockIETHDKG.ParseRegistrationOpened")
			},
		},
		ParseShareDistributionCompleteFunc: &IETHDKGParseShareDistributionCompleteFunc{
			defaultHook: func(types.Log) (*bindings.ETHDKGShareDistributionComplete, error) {
				panic("unexpected invocation of MockIETHDKG.ParseShareDistributionComplete")
			},
		},
		ParseSharesDistributedFunc: &IETHDKGParseSharesDistributedFunc{
			defaultHook: func(types.Log) (*bindings.ETHDKGSharesDistributed, error) {
				panic("unexpected invocation of MockIETHDKG.ParseSharesDistributed")
			},
		},
		ParseValidatorMemberAddedFunc: &IETHDKGParseValidatorMemberAddedFunc{
			defaultHook: func(types.Log) (*bindings.ETHDKGValidatorMemberAdded, error) {
				panic("unexpected invocation of MockIETHDKG.ParseValidatorMemberAdded")
			},
		},
		ParseValidatorSetCompletedFunc: &IETHDKGParseValidatorSetCompletedFunc{
			defaultHook: func(types.Log) (*bindings.ETHDKGValidatorSetCompleted, error) {
				panic("unexpected invocation of MockIETHDKG.ParseValidatorSetCompleted")
			},
		},
		RegisterFunc: &IETHDKGRegisterFunc{
			defaultHook: func(*bind.TransactOpts, [2]*big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.Register")
			},
		},
		SetConfirmationLengthFunc: &IETHDKGSetConfirmationLengthFunc{
			defaultHook: func(*bind.TransactOpts, uint16) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.SetConfirmationLength")
			},
		},
		SetCustomAliceNetHeightFunc: &IETHDKGSetCustomAliceNetHeightFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.SetCustomAliceNetHeight")
			},
		},
		SetPhaseLengthFunc: &IETHDKGSetPhaseLengthFunc{
			defaultHook: func(*bind.TransactOpts, uint16) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.SetPhaseLength")
			},
		},
		SubmitGPKJFunc: &IETHDKGSubmitGPKJFunc{
			defaultHook: func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.SubmitGPKJ")
			},
		},
		SubmitKeyShareFunc: &IETHDKGSubmitKeyShareFunc{
			defaultHook: func(*bind.TransactOpts, [2]*big.Int, [2]*big.Int, [4]*big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.SubmitKeyShare")
			},
		},
		SubmitMasterPublicKeyFunc: &IETHDKGSubmitMasterPublicKeyFunc{
			defaultHook: func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIETHDKG.SubmitMasterPublicKey")
			},
		},
		WatchAddressRegisteredFunc: &IETHDKGWatchAddressRegisteredFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGAddressRegistered) (event.Subscription, error) {
				panic("unexpected invocation of MockIETHDKG.WatchAddressRegistered")
			},
		},
		WatchGPKJSubmissionCompleteFunc: &IETHDKGWatchGPKJSubmissionCompleteFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGGPKJSubmissionComplete) (event.Subscription, error) {
				panic("unexpected invocation of MockIETHDKG.WatchGPKJSubmissionComplete")
			},
		},
		WatchInitializedFunc: &IETHDKGWatchInitializedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGInitialized) (event.Subscription, error) {
				panic("unexpected invocation of MockIETHDKG.WatchInitialized")
			},
		},
		WatchKeyShareSubmissionCompleteFunc: &IETHDKGWatchKeyShareSubmissionCompleteFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmissionComplete) (event.Subscription, error) {
				panic("unexpected invocation of MockIETHDKG.WatchKeyShareSubmissionComplete")
			},
		},
		WatchKeyShareSubmittedFunc: &IETHDKGWatchKeyShareSubmittedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmitted) (event.Subscription, error) {
				panic("unexpected invocation of MockIETHDKG.WatchKeyShareSubmitted")
			},
		},
		WatchMPKSetFunc: &IETHDKGWatchMPKSetFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGMPKSet) (event.Subscription, error) {
				panic("unexpected invocation of MockIETHDKG.WatchMPKSet")
			},
		},
		WatchRegistrationCompleteFunc: &IETHDKGWatchRegistrationCompleteFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationComplete) (event.Subscription, error) {
				panic("unexpected invocation of MockIETHDKG.WatchRegistrationComplete")
			},
		},
		WatchRegistrationOpenedFunc: &IETHDKGWatchRegistrationOpenedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationOpened) (event.Subscription, error) {
				panic("unexpected invocation of MockIETHDKG.WatchRegistrationOpened")
			},
		},
		WatchShareDistributionCompleteFunc: &IETHDKGWatchShareDistributionCompleteFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGShareDistributionComplete) (event.Subscription, error) {
				panic("unexpected invocation of MockIETHDKG.WatchShareDistributionComplete")
			},
		},
		WatchSharesDistributedFunc: &IETHDKGWatchSharesDistributedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGSharesDistributed) (event.Subscription, error) {
				panic("unexpected invocation of MockIETHDKG.WatchSharesDistributed")
			},
		},
		WatchValidatorMemberAddedFunc: &IETHDKGWatchValidatorMemberAddedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorMemberAdded) (event.Subscription, error) {
				panic("unexpected invocation of MockIETHDKG.WatchValidatorMemberAdded")
			},
		},
		WatchValidatorSetCompletedFunc: &IETHDKGWatchValidatorSetCompletedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorSetCompleted) (event.Subscription, error) {
				panic("unexpected invocation of MockIETHDKG.WatchValidatorSetCompleted")
			},
		},
	}
}

// NewMockIETHDKGFrom creates a new mock of the MockIETHDKG interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockIETHDKGFrom(i bindings.IETHDKG) *MockIETHDKG {
	return &MockIETHDKG{
		AccuseParticipantDidNotDistributeSharesFunc: &IETHDKGAccuseParticipantDidNotDistributeSharesFunc{
			defaultHook: i.AccuseParticipantDidNotDistributeShares,
		},
		AccuseParticipantDidNotSubmitGPKJFunc: &IETHDKGAccuseParticipantDidNotSubmitGPKJFunc{
			defaultHook: i.AccuseParticipantDidNotSubmitGPKJ,
		},
		AccuseParticipantDidNotSubmitKeySharesFunc: &IETHDKGAccuseParticipantDidNotSubmitKeySharesFunc{
			defaultHook: i.AccuseParticipantDidNotSubmitKeyShares,
		},
		AccuseParticipantDistributedBadSharesFunc: &IETHDKGAccuseParticipantDistributedBadSharesFunc{
			defaultHook: i.AccuseParticipantDistributedBadShares,
		},
		AccuseParticipantNotRegisteredFunc: &IETHDKGAccuseParticipantNotRegisteredFunc{
			defaultHook: i.AccuseParticipantNotRegistered,
		},
		AccuseParticipantSubmittedBadGPKJFunc: &IETHDKGAccuseParticipantSubmittedBadGPKJFunc{
			defaultHook: i.AccuseParticipantSubmittedBadGPKJ,
		},
		CompleteFunc: &IETHDKGCompleteFunc{
			defaultHook: i.Complete,
		},
		DistributeSharesFunc: &IETHDKGDistributeSharesFunc{
			defaultHook: i.DistributeShares,
		},
		FilterAddressRegisteredFunc: &IETHDKGFilterAddressRegisteredFunc{
			defaultHook: i.FilterAddressRegistered,
		},
		FilterGPKJSubmissionCompleteFunc: &IETHDKGFilterGPKJSubmissionCompleteFunc{
			defaultHook: i.FilterGPKJSubmissionComplete,
		},
		FilterInitializedFunc: &IETHDKGFilterInitializedFunc{
			defaultHook: i.FilterInitialized,
		},
		FilterKeyShareSubmissionCompleteFunc: &IETHDKGFilterKeyShareSubmissionCompleteFunc{
			defaultHook: i.FilterKeyShareSubmissionComplete,
		},
		FilterKeyShareSubmittedFunc: &IETHDKGFilterKeyShareSubmittedFunc{
			defaultHook: i.FilterKeyShareSubmitted,
		},
		FilterMPKSetFunc: &IETHDKGFilterMPKSetFunc{
			defaultHook: i.FilterMPKSet,
		},
		FilterRegistrationCompleteFunc: &IETHDKGFilterRegistrationCompleteFunc{
			defaultHook: i.FilterRegistrationComplete,
		},
		FilterRegistrationOpenedFunc: &IETHDKGFilterRegistrationOpenedFunc{
			defaultHook: i.FilterRegistrationOpened,
		},
		FilterShareDistributionCompleteFunc: &IETHDKGFilterShareDistributionCompleteFunc{
			defaultHook: i.FilterShareDistributionComplete,
		},
		FilterSharesDistributedFunc: &IETHDKGFilterSharesDistributedFunc{
			defaultHook: i.FilterSharesDistributed,
		},
		FilterValidatorMemberAddedFunc: &IETHDKGFilterValidatorMemberAddedFunc{
			defaultHook: i.FilterValidatorMemberAdded,
		},
		FilterValidatorSetCompletedFunc: &IETHDKGFilterValidatorSetCompletedFunc{
			defaultHook: i.FilterValidatorSetCompleted,
		},
		GetBadParticipantsFunc: &IETHDKGGetBadParticipantsFunc{
			defaultHook: i.GetBadParticipants,
		},
		GetConfirmationLengthFunc: &IETHDKGGetConfirmationLengthFunc{
			defaultHook: i.GetConfirmationLength,
		},
		GetETHDKGPhaseFunc: &IETHDKGGetETHDKGPhaseFunc{
			defaultHook: i.GetETHDKGPhase,
		},
		GetLastRoundParticipantIndexFunc: &IETHDKGGetLastRoundParticipantIndexFunc{
			defaultHook: i.GetLastRoundParticipantIndex,
		},
		GetMasterPublicKeyFunc: &IETHDKGGetMasterPublicKeyFunc{
			defaultHook: i.GetMasterPublicKey,
		},
		GetMasterPublicKeyHashFunc: &IETHDKGGetMasterPublicKeyHashFunc{
			defaultHook: i.GetMasterPublicKeyHash,
		},
		GetMetamorphicContractAddressFunc: &IETHDKGGetMetamorphicContractAddressFunc{
			defaultHook: i.GetMetamorphicContractAddress,
		},
		GetMinValidatorsFunc: &IETHDKGGetMinValidatorsFunc{
			defaultHook: i.GetMinValidators,
		},
		GetNonceFunc: &IETHDKGGetNonceFunc{
			defaultHook: i.GetNonce,
		},
		GetNumParticipantsFunc: &IETHDKGGetNumParticipantsFunc{
			defaultHook: i.GetNumParticipants,
		},
		GetParticipantInternalStateFunc: &IETHDKGGetParticipantInternalStateFunc{
			defaultHook: i.GetParticipantInternalState,
		},
		GetParticipantsInternalStateFunc: &IETHDKGGetParticipantsInternalStateFunc{
			defaultHook: i.GetParticipantsInternalState,
		},
		GetPhaseLengthFunc: &IETHDKGGetPhaseLengthFunc{
			defaultHook: i.GetPhaseLength,
		},
		GetPhaseStartBlockFunc: &IETHDKGGetPhaseStartBlockFunc{
			defaultHook: i.GetPhaseStartBlock,
		},
		InitializeFunc: &IETHDKGInitializeFunc{
			defaultHook: i.Initialize,
		},
		InitializeETHDKGFunc: &IETHDKGInitializeETHDKGFunc{
			defaultHook: i.InitializeETHDKG,
		},
		IsETHDKGCompletedFunc: &IETHDKGIsETHDKGCompletedFunc{
			defaultHook: i.IsETHDKGCompleted,
		},
		IsETHDKGHaltedFunc: &IETHDKGIsETHDKGHaltedFunc{
			defaultHook: i.IsETHDKGHalted,
		},
		IsETHDKGRunningFunc: &IETHDKGIsETHDKGRunningFunc{
			defaultHook: i.IsETHDKGRunning,
		},
		IsMasterPublicKeySetFunc: &IETHDKGIsMasterPublicKeySetFunc{
			defaultHook: i.IsMasterPublicKeySet,
		},
		IsValidMasterPublicKeyFunc: &IETHDKGIsValidMasterPublicKeyFunc{
			defaultHook: i.IsValidMasterPublicKey,
		},
		MigrateValidatorsFunc: &IETHDKGMigrateValidatorsFunc{
			defaultHook: i.MigrateValidators,
		},
		ParseAddressRegisteredFunc: &IETHDKGParseAddressRegisteredFunc{
			defaultHook: i.ParseAddressRegistered,
		},
		ParseGPKJSubmissionCompleteFunc: &IETHDKGParseGPKJSubmissionCompleteFunc{
			defaultHook: i.ParseGPKJSubmissionComplete,
		},
		ParseInitializedFunc: &IETHDKGParseInitializedFunc{
			defaultHook: i.ParseInitialized,
		},
		ParseKeyShareSubmissionCompleteFunc: &IETHDKGParseKeyShareSubmissionCompleteFunc{
			defaultHook: i.ParseKeyShareSubmissionComplete,
		},
		ParseKeyShareSubmittedFunc: &IETHDKGParseKeyShareSubmittedFunc{
			defaultHook: i.ParseKeyShareSubmitted,
		},
		ParseMPKSetFunc: &IETHDKGParseMPKSetFunc{
			defaultHook: i.ParseMPKSet,
		},
		ParseRegistrationCompleteFunc: &IETHDKGParseRegistrationCompleteFunc{
			defaultHook: i.ParseRegistrationComplete,
		},
		ParseRegistrationOpenedFunc: &IETHDKGParseRegistrationOpenedFunc{
			defaultHook: i.ParseRegistrationOpened,
		},
		ParseShareDistributionCompleteFunc: &IETHDKGParseShareDistributionCompleteFunc{
			defaultHook: i.ParseShareDistributionComplete,
		},
		ParseSharesDistributedFunc: &IETHDKGParseSharesDistributedFunc{
			defaultHook: i.ParseSharesDistributed,
		},
		ParseValidatorMemberAddedFunc: &IETHDKGParseValidatorMemberAddedFunc{
			defaultHook: i.ParseValidatorMemberAdded,
		},
		ParseValidatorSetCompletedFunc: &IETHDKGParseValidatorSetCompletedFunc{
			defaultHook: i.ParseValidatorSetCompleted,
		},
		RegisterFunc: &IETHDKGRegisterFunc{
			defaultHook: i.Register,
		},
		SetConfirmationLengthFunc: &IETHDKGSetConfirmationLengthFunc{
			defaultHook: i.SetConfirmationLength,
		},
		SetCustomAliceNetHeightFunc: &IETHDKGSetCustomAliceNetHeightFunc{
			defaultHook: i.SetCustomAliceNetHeight,
		},
		SetPhaseLengthFunc: &IETHDKGSetPhaseLengthFunc{
			defaultHook: i.SetPhaseLength,
		},
		SubmitGPKJFunc: &IETHDKGSubmitGPKJFunc{
			defaultHook: i.SubmitGPKJ,
		},
		SubmitKeyShareFunc: &IETHDKGSubmitKeyShareFunc{
			defaultHook: i.SubmitKeyShare,
		},
		SubmitMasterPublicKeyFunc: &IETHDKGSubmitMasterPublicKeyFunc{
			defaultHook: i.SubmitMasterPublicKey,
		},
		WatchAddressRegisteredFunc: &IETHDKGWatchAddressRegisteredFunc{
			defaultHook: i.WatchAddressRegistered,
		},
		WatchGPKJSubmissionCompleteFunc: &IETHDKGWatchGPKJSubmissionCompleteFunc{
			defaultHook: i.WatchGPKJSubmissionComplete,
		},
		WatchInitializedFunc: &IETHDKGWatchInitializedFunc{
			defaultHook: i.WatchInitialized,
		},
		WatchKeyShareSubmissionCompleteFunc: &IETHDKGWatchKeyShareSubmissionCompleteFunc{
			defaultHook: i.WatchKeyShareSubmissionComplete,
		},
		WatchKeyShareSubmittedFunc: &IETHDKGWatchKeyShareSubmittedFunc{
			defaultHook: i.WatchKeyShareSubmitted,
		},
		WatchMPKSetFunc: &IETHDKGWatchMPKSetFunc{
			defaultHook: i.WatchMPKSet,
		},
		WatchRegistrationCompleteFunc: &IETHDKGWatchRegistrationCompleteFunc{
			defaultHook: i.WatchRegistrationComplete,
		},
		WatchRegistrationOpenedFunc: &IETHDKGWatchRegistrationOpenedFunc{
			defaultHook: i.WatchRegistrationOpened,
		},
		WatchShareDistributionCompleteFunc: &IETHDKGWatchShareDistributionCompleteFunc{
			defaultHook: i.WatchShareDistributionComplete,
		},
		WatchSharesDistributedFunc: &IETHDKGWatchSharesDistributedFunc{
			defaultHook: i.WatchSharesDistributed,
		},
		WatchValidatorMemberAddedFunc: &IETHDKGWatchValidatorMemberAddedFunc{
			defaultHook: i.WatchValidatorMemberAdded,
		},
		WatchValidatorSetCompletedFunc: &IETHDKGWatchValidatorSetCompletedFunc{
			defaultHook: i.WatchValidatorSetCompleted,
		},
	}
}

// IETHDKGAccuseParticipantDidNotDistributeSharesFunc describes the behavior
// when the AccuseParticipantDidNotDistributeShares method of the parent
// MockIETHDKG instance is invoked.
type IETHDKGAccuseParticipantDidNotDistributeSharesFunc struct {
	defaultHook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)
	history     []IETHDKGAccuseParticipantDidNotDistributeSharesFuncCall
	mutex       sync.Mutex
}

// AccuseParticipantDidNotDistributeShares delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockIETHDKG) AccuseParticipantDidNotDistributeShares(v0 *bind.TransactOpts, v1 []common.Address) (*types.Transaction, error) {
	r0, r1 := m.AccuseParticipantDidNotDistributeSharesFunc.nextHook()(v0, v1)
	m.AccuseParticipantDidNotDistributeSharesFunc.appendCall(IETHDKGAccuseParticipantDidNotDistributeSharesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AccuseParticipantDidNotDistributeShares method of the parent MockIETHDKG
// instance is invoked and the hook queue is empty.
func (f *IETHDKGAccuseParticipantDidNotDistributeSharesFunc) SetDefaultHook(hook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccuseParticipantDidNotDistributeShares method of the parent MockIETHDKG
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IETHDKGAccuseParticipantDidNotDistributeSharesFunc) PushHook(hook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGAccuseParticipantDidNotDistributeSharesFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGAccuseParticipantDidNotDistributeSharesFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGAccuseParticipantDidNotDistributeSharesFunc) nextHook() func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGAccuseParticipantDidNotDistributeSharesFunc) appendCall(r0 IETHDKGAccuseParticipantDidNotDistributeSharesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IETHDKGAccuseParticipantDidNotDistributeSharesFuncCall objects describing
// the invocations of this function.
func (f *IETHDKGAccuseParticipantDidNotDistributeSharesFunc) History() []IETHDKGAccuseParticipantDidNotDistributeSharesFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGAccuseParticipantDidNotDistributeSharesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGAccuseParticipantDidNotDistributeSharesFuncCall is an object that
// describes an invocation of method AccuseParticipantDidNotDistributeShares
// on an instance of MockIETHDKG.
type IETHDKGAccuseParticipantDidNotDistributeSharesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGAccuseParticipantDidNotDistributeSharesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGAccuseParticipantDidNotDistributeSharesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGAccuseParticipantDidNotSubmitGPKJFunc describes the behavior when
// the AccuseParticipantDidNotSubmitGPKJ method of the parent MockIETHDKG
// instance is invoked.
type IETHDKGAccuseParticipantDidNotSubmitGPKJFunc struct {
	defaultHook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)
	history     []IETHDKGAccuseParticipantDidNotSubmitGPKJFuncCall
	mutex       sync.Mutex
}

// AccuseParticipantDidNotSubmitGPKJ delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) AccuseParticipantDidNotSubmitGPKJ(v0 *bind.TransactOpts, v1 []common.Address) (*types.Transaction, error) {
	r0, r1 := m.AccuseParticipantDidNotSubmitGPKJFunc.nextHook()(v0, v1)
	m.AccuseParticipantDidNotSubmitGPKJFunc.appendCall(IETHDKGAccuseParticipantDidNotSubmitGPKJFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AccuseParticipantDidNotSubmitGPKJ method of the parent MockIETHDKG
// instance is invoked and the hook queue is empty.
func (f *IETHDKGAccuseParticipantDidNotSubmitGPKJFunc) SetDefaultHook(hook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccuseParticipantDidNotSubmitGPKJ method of the parent MockIETHDKG
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IETHDKGAccuseParticipantDidNotSubmitGPKJFunc) PushHook(hook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGAccuseParticipantDidNotSubmitGPKJFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGAccuseParticipantDidNotSubmitGPKJFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGAccuseParticipantDidNotSubmitGPKJFunc) nextHook() func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGAccuseParticipantDidNotSubmitGPKJFunc) appendCall(r0 IETHDKGAccuseParticipantDidNotSubmitGPKJFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IETHDKGAccuseParticipantDidNotSubmitGPKJFuncCall objects describing the
// invocations of this function.
func (f *IETHDKGAccuseParticipantDidNotSubmitGPKJFunc) History() []IETHDKGAccuseParticipantDidNotSubmitGPKJFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGAccuseParticipantDidNotSubmitGPKJFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGAccuseParticipantDidNotSubmitGPKJFuncCall is an object that
// describes an invocation of method AccuseParticipantDidNotSubmitGPKJ on an
// instance of MockIETHDKG.
type IETHDKGAccuseParticipantDidNotSubmitGPKJFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGAccuseParticipantDidNotSubmitGPKJFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGAccuseParticipantDidNotSubmitGPKJFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGAccuseParticipantDidNotSubmitKeySharesFunc describes the behavior
// when the AccuseParticipantDidNotSubmitKeyShares method of the parent
// MockIETHDKG instance is invoked.
type IETHDKGAccuseParticipantDidNotSubmitKeySharesFunc struct {
	defaultHook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)
	history     []IETHDKGAccuseParticipantDidNotSubmitKeySharesFuncCall
	mutex       sync.Mutex
}

// AccuseParticipantDidNotSubmitKeyShares delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockIETHDKG) AccuseParticipantDidNotSubmitKeyShares(v0 *bind.TransactOpts, v1 []common.Address) (*types.Transaction, error) {
	r0, r1 := m.AccuseParticipantDidNotSubmitKeySharesFunc.nextHook()(v0, v1)
	m.AccuseParticipantDidNotSubmitKeySharesFunc.appendCall(IETHDKGAccuseParticipantDidNotSubmitKeySharesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AccuseParticipantDidNotSubmitKeyShares method of the parent MockIETHDKG
// instance is invoked and the hook queue is empty.
func (f *IETHDKGAccuseParticipantDidNotSubmitKeySharesFunc) SetDefaultHook(hook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccuseParticipantDidNotSubmitKeyShares method of the parent MockIETHDKG
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IETHDKGAccuseParticipantDidNotSubmitKeySharesFunc) PushHook(hook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGAccuseParticipantDidNotSubmitKeySharesFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGAccuseParticipantDidNotSubmitKeySharesFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGAccuseParticipantDidNotSubmitKeySharesFunc) nextHook() func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGAccuseParticipantDidNotSubmitKeySharesFunc) appendCall(r0 IETHDKGAccuseParticipantDidNotSubmitKeySharesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IETHDKGAccuseParticipantDidNotSubmitKeySharesFuncCall objects describing
// the invocations of this function.
func (f *IETHDKGAccuseParticipantDidNotSubmitKeySharesFunc) History() []IETHDKGAccuseParticipantDidNotSubmitKeySharesFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGAccuseParticipantDidNotSubmitKeySharesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGAccuseParticipantDidNotSubmitKeySharesFuncCall is an object that
// describes an invocation of method AccuseParticipantDidNotSubmitKeyShares
// on an instance of MockIETHDKG.
type IETHDKGAccuseParticipantDidNotSubmitKeySharesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGAccuseParticipantDidNotSubmitKeySharesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGAccuseParticipantDidNotSubmitKeySharesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGAccuseParticipantDistributedBadSharesFunc describes the behavior
// when the AccuseParticipantDistributedBadShares method of the parent
// MockIETHDKG instance is invoked.
type IETHDKGAccuseParticipantDistributedBadSharesFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, []*big.Int, [][2]*big.Int, [2]*big.Int, [2]*big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, []*big.Int, [][2]*big.Int, [2]*big.Int, [2]*big.Int) (*types.Transaction, error)
	history     []IETHDKGAccuseParticipantDistributedBadSharesFuncCall
	mutex       sync.Mutex
}

// AccuseParticipantDistributedBadShares delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockIETHDKG) AccuseParticipantDistributedBadShares(v0 *bind.TransactOpts, v1 common.Address, v2 []*big.Int, v3 [][2]*big.Int, v4 [2]*big.Int, v5 [2]*big.Int) (*types.Transaction, error) {
	r0, r1 := m.AccuseParticipantDistributedBadSharesFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.AccuseParticipantDistributedBadSharesFunc.appendCall(IETHDKGAccuseParticipantDistributedBadSharesFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AccuseParticipantDistributedBadShares method of the parent MockIETHDKG
// instance is invoked and the hook queue is empty.
func (f *IETHDKGAccuseParticipantDistributedBadSharesFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, []*big.Int, [][2]*big.Int, [2]*big.Int, [2]*big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccuseParticipantDistributedBadShares method of the parent MockIETHDKG
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IETHDKGAccuseParticipantDistributedBadSharesFunc) PushHook(hook func(*bind.TransactOpts, common.Address, []*big.Int, [][2]*big.Int, [2]*big.Int, [2]*big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGAccuseParticipantDistributedBadSharesFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, []*big.Int, [][2]*big.Int, [2]*big.Int, [2]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGAccuseParticipantDistributedBadSharesFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, []*big.Int, [][2]*big.Int, [2]*big.Int, [2]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGAccuseParticipantDistributedBadSharesFunc) nextHook() func(*bind.TransactOpts, common.Address, []*big.Int, [][2]*big.Int, [2]*big.Int, [2]*big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGAccuseParticipantDistributedBadSharesFunc) appendCall(r0 IETHDKGAccuseParticipantDistributedBadSharesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IETHDKGAccuseParticipantDistributedBadSharesFuncCall objects describing
// the invocations of this function.
func (f *IETHDKGAccuseParticipantDistributedBadSharesFunc) History() []IETHDKGAccuseParticipantDistributedBadSharesFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGAccuseParticipantDistributedBadSharesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGAccuseParticipantDistributedBadSharesFuncCall is an object that
// describes an invocation of method AccuseParticipantDistributedBadShares
// on an instance of MockIETHDKG.
type IETHDKGAccuseParticipantDistributedBadSharesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 [][2]*big.Int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 [2]*big.Int
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 [2]*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGAccuseParticipantDistributedBadSharesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGAccuseParticipantDistributedBadSharesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGAccuseParticipantNotRegisteredFunc describes the behavior when the
// AccuseParticipantNotRegistered method of the parent MockIETHDKG instance
// is invoked.
type IETHDKGAccuseParticipantNotRegisteredFunc struct {
	defaultHook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)
	history     []IETHDKGAccuseParticipantNotRegisteredFuncCall
	mutex       sync.Mutex
}

// AccuseParticipantNotRegistered delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) AccuseParticipantNotRegistered(v0 *bind.TransactOpts, v1 []common.Address) (*types.Transaction, error) {
	r0, r1 := m.AccuseParticipantNotRegisteredFunc.nextHook()(v0, v1)
	m.AccuseParticipantNotRegisteredFunc.appendCall(IETHDKGAccuseParticipantNotRegisteredFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AccuseParticipantNotRegistered method of the parent MockIETHDKG instance
// is invoked and the hook queue is empty.
func (f *IETHDKGAccuseParticipantNotRegisteredFunc) SetDefaultHook(hook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccuseParticipantNotRegistered method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGAccuseParticipantNotRegisteredFunc) PushHook(hook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGAccuseParticipantNotRegisteredFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGAccuseParticipantNotRegisteredFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGAccuseParticipantNotRegisteredFunc) nextHook() func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGAccuseParticipantNotRegisteredFunc) appendCall(r0 IETHDKGAccuseParticipantNotRegisteredFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IETHDKGAccuseParticipantNotRegisteredFuncCall objects describing the
// invocations of this function.
func (f *IETHDKGAccuseParticipantNotRegisteredFunc) History() []IETHDKGAccuseParticipantNotRegisteredFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGAccuseParticipantNotRegisteredFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGAccuseParticipantNotRegisteredFuncCall is an object that describes
// an invocation of method AccuseParticipantNotRegistered on an instance of
// MockIETHDKG.
type IETHDKGAccuseParticipantNotRegisteredFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGAccuseParticipantNotRegisteredFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGAccuseParticipantNotRegisteredFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGAccuseParticipantSubmittedBadGPKJFunc describes the behavior when
// the AccuseParticipantSubmittedBadGPKJ method of the parent MockIETHDKG
// instance is invoked.
type IETHDKGAccuseParticipantSubmittedBadGPKJFunc struct {
	defaultHook func(*bind.TransactOpts, []common.Address, [][32]byte, [][][2]*big.Int, common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []common.Address, [][32]byte, [][][2]*big.Int, common.Address) (*types.Transaction, error)
	history     []IETHDKGAccuseParticipantSubmittedBadGPKJFuncCall
	mutex       sync.Mutex
}

// AccuseParticipantSubmittedBadGPKJ delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) AccuseParticipantSubmittedBadGPKJ(v0 *bind.TransactOpts, v1 []common.Address, v2 [][32]byte, v3 [][][2]*big.Int, v4 common.Address) (*types.Transaction, error) {
	r0, r1 := m.AccuseParticipantSubmittedBadGPKJFunc.nextHook()(v0, v1, v2, v3, v4)
	m.AccuseParticipantSubmittedBadGPKJFunc.appendCall(IETHDKGAccuseParticipantSubmittedBadGPKJFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AccuseParticipantSubmittedBadGPKJ method of the parent MockIETHDKG
// instance is invoked and the hook queue is empty.
func (f *IETHDKGAccuseParticipantSubmittedBadGPKJFunc) SetDefaultHook(hook func(*bind.TransactOpts, []common.Address, [][32]byte, [][][2]*big.Int, common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccuseParticipantSubmittedBadGPKJ method of the parent MockIETHDKG
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IETHDKGAccuseParticipantSubmittedBadGPKJFunc) PushHook(hook func(*bind.TransactOpts, []common.Address, [][32]byte, [][][2]*big.Int, common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGAccuseParticipantSubmittedBadGPKJFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []common.Address, [][32]byte, [][][2]*big.Int, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGAccuseParticipantSubmittedBadGPKJFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []common.Address, [][32]byte, [][][2]*big.Int, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGAccuseParticipantSubmittedBadGPKJFunc) nextHook() func(*bind.TransactOpts, []common.Address, [][32]byte, [][][2]*big.Int, common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGAccuseParticipantSubmittedBadGPKJFunc) appendCall(r0 IETHDKGAccuseParticipantSubmittedBadGPKJFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IETHDKGAccuseParticipantSubmittedBadGPKJFuncCall objects describing the
// invocations of this function.
func (f *IETHDKGAccuseParticipantSubmittedBadGPKJFunc) History() []IETHDKGAccuseParticipantSubmittedBadGPKJFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGAccuseParticipantSubmittedBadGPKJFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGAccuseParticipantSubmittedBadGPKJFuncCall is an object that
// describes an invocation of method AccuseParticipantSubmittedBadGPKJ on an
// instance of MockIETHDKG.
type IETHDKGAccuseParticipantSubmittedBadGPKJFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 [][32]byte
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 [][][2]*big.Int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGAccuseParticipantSubmittedBadGPKJFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGAccuseParticipantSubmittedBadGPKJFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGCompleteFunc describes the behavior when the Complete method of
// the parent MockIETHDKG instance is invoked.
type IETHDKGCompleteFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IETHDKGCompleteFuncCall
	mutex       sync.Mutex
}

// Complete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIETHDKG) Complete(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.CompleteFunc.nextHook()(v0)
	m.CompleteFunc.appendCall(IETHDKGCompleteFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Complete method of
// the parent MockIETHDKG instance is invoked and the hook queue is empty.
func (f *IETHDKGCompleteFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Complete method of the parent MockIETHDKG instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IETHDKGCompleteFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGCompleteFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGCompleteFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGCompleteFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGCompleteFunc) appendCall(r0 IETHDKGCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGCompleteFuncCall objects describing
// the invocations of this function.
func (f *IETHDKGCompleteFunc) History() []IETHDKGCompleteFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGCompleteFuncCall is an object that describes an invocation of
// method Complete on an instance of MockIETHDKG.
type IETHDKGCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGDistributeSharesFunc describes the behavior when the
// DistributeShares method of the parent MockIETHDKG instance is invoked.
type IETHDKGDistributeSharesFunc struct {
	defaultHook func(*bind.TransactOpts, []*big.Int, [][2]*big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []*big.Int, [][2]*big.Int) (*types.Transaction, error)
	history     []IETHDKGDistributeSharesFuncCall
	mutex       sync.Mutex
}

// DistributeShares delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) DistributeShares(v0 *bind.TransactOpts, v1 []*big.Int, v2 [][2]*big.Int) (*types.Transaction, error) {
	r0, r1 := m.DistributeSharesFunc.nextHook()(v0, v1, v2)
	m.DistributeSharesFunc.appendCall(IETHDKGDistributeSharesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DistributeShares
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGDistributeSharesFunc) SetDefaultHook(hook func(*bind.TransactOpts, []*big.Int, [][2]*big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DistributeShares method of the parent MockIETHDKG instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IETHDKGDistributeSharesFunc) PushHook(hook func(*bind.TransactOpts, []*big.Int, [][2]*big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGDistributeSharesFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []*big.Int, [][2]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGDistributeSharesFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []*big.Int, [][2]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGDistributeSharesFunc) nextHook() func(*bind.TransactOpts, []*big.Int, [][2]*big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGDistributeSharesFunc) appendCall(r0 IETHDKGDistributeSharesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGDistributeSharesFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGDistributeSharesFunc) History() []IETHDKGDistributeSharesFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGDistributeSharesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGDistributeSharesFuncCall is an object that describes an invocation
// of method DistributeShares on an instance of MockIETHDKG.
type IETHDKGDistributeSharesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 [][2]*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGDistributeSharesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGDistributeSharesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGFilterAddressRegisteredFunc describes the behavior when the
// FilterAddressRegistered method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGFilterAddressRegisteredFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ETHDKGAddressRegisteredIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ETHDKGAddressRegisteredIterator, error)
	history     []IETHDKGFilterAddressRegisteredFuncCall
	mutex       sync.Mutex
}

// FilterAddressRegistered delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) FilterAddressRegistered(v0 *bind.FilterOpts) (*bindings.ETHDKGAddressRegisteredIterator, error) {
	r0, r1 := m.FilterAddressRegisteredFunc.nextHook()(v0)
	m.FilterAddressRegisteredFunc.appendCall(IETHDKGFilterAddressRegisteredFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterAddressRegistered method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGFilterAddressRegisteredFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGAddressRegisteredIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterAddressRegistered method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGFilterAddressRegisteredFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGAddressRegisteredIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGFilterAddressRegisteredFunc) SetDefaultReturn(r0 *bindings.ETHDKGAddressRegisteredIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ETHDKGAddressRegisteredIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGFilterAddressRegisteredFunc) PushReturn(r0 *bindings.ETHDKGAddressRegisteredIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ETHDKGAddressRegisteredIterator, error) {
		return r0, r1
	})
}

func (f *IETHDKGFilterAddressRegisteredFunc) nextHook() func(*bind.FilterOpts) (*bindings.ETHDKGAddressRegisteredIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGFilterAddressRegisteredFunc) appendCall(r0 IETHDKGFilterAddressRegisteredFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGFilterAddressRegisteredFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGFilterAddressRegisteredFunc) History() []IETHDKGFilterAddressRegisteredFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGFilterAddressRegisteredFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGFilterAddressRegisteredFuncCall is an object that describes an
// invocation of method FilterAddressRegistered on an instance of
// MockIETHDKG.
type IETHDKGFilterAddressRegisteredFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGAddressRegisteredIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGFilterAddressRegisteredFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGFilterAddressRegisteredFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGFilterGPKJSubmissionCompleteFunc describes the behavior when the
// FilterGPKJSubmissionComplete method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGFilterGPKJSubmissionCompleteFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ETHDKGGPKJSubmissionCompleteIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ETHDKGGPKJSubmissionCompleteIterator, error)
	history     []IETHDKGFilterGPKJSubmissionCompleteFuncCall
	mutex       sync.Mutex
}

// FilterGPKJSubmissionComplete delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) FilterGPKJSubmissionComplete(v0 *bind.FilterOpts) (*bindings.ETHDKGGPKJSubmissionCompleteIterator, error) {
	r0, r1 := m.FilterGPKJSubmissionCompleteFunc.nextHook()(v0)
	m.FilterGPKJSubmissionCompleteFunc.appendCall(IETHDKGFilterGPKJSubmissionCompleteFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterGPKJSubmissionComplete method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGFilterGPKJSubmissionCompleteFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGGPKJSubmissionCompleteIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterGPKJSubmissionComplete method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGFilterGPKJSubmissionCompleteFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGGPKJSubmissionCompleteIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGFilterGPKJSubmissionCompleteFunc) SetDefaultReturn(r0 *bindings.ETHDKGGPKJSubmissionCompleteIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ETHDKGGPKJSubmissionCompleteIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGFilterGPKJSubmissionCompleteFunc) PushReturn(r0 *bindings.ETHDKGGPKJSubmissionCompleteIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ETHDKGGPKJSubmissionCompleteIterator, error) {
		return r0, r1
	})
}

func (f *IETHDKGFilterGPKJSubmissionCompleteFunc) nextHook() func(*bind.FilterOpts) (*bindings.ETHDKGGPKJSubmissionCompleteIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGFilterGPKJSubmissionCompleteFunc) appendCall(r0 IETHDKGFilterGPKJSubmissionCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGFilterGPKJSubmissionCompleteFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGFilterGPKJSubmissionCompleteFunc) History() []IETHDKGFilterGPKJSubmissionCompleteFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGFilterGPKJSubmissionCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGFilterGPKJSubmissionCompleteFuncCall is an object that describes
// an invocation of method FilterGPKJSubmissionComplete on an instance of
// MockIETHDKG.
type IETHDKGFilterGPKJSubmissionCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGGPKJSubmissionCompleteIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGFilterGPKJSubmissionCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGFilterGPKJSubmissionCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGFilterInitializedFunc describes the behavior when the
// FilterInitialized method of the parent MockIETHDKG instance is invoked.
type IETHDKGFilterInitializedFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ETHDKGInitializedIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ETHDKGInitializedIterator, error)
	history     []IETHDKGFilterInitializedFuncCall
	mutex       sync.Mutex
}

// FilterInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) FilterInitialized(v0 *bind.FilterOpts) (*bindings.ETHDKGInitializedIterator, error) {
	r0, r1 := m.FilterInitializedFunc.nextHook()(v0)
	m.FilterInitializedFunc.appendCall(IETHDKGFilterInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterInitialized
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGFilterInitializedFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGInitializedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterInitialized method of the parent MockIETHDKG instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IETHDKGFilterInitializedFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGInitializedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGFilterInitializedFunc) SetDefaultReturn(r0 *bindings.ETHDKGInitializedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ETHDKGInitializedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGFilterInitializedFunc) PushReturn(r0 *bindings.ETHDKGInitializedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ETHDKGInitializedIterator, error) {
		return r0, r1
	})
}

func (f *IETHDKGFilterInitializedFunc) nextHook() func(*bind.FilterOpts) (*bindings.ETHDKGInitializedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGFilterInitializedFunc) appendCall(r0 IETHDKGFilterInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGFilterInitializedFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGFilterInitializedFunc) History() []IETHDKGFilterInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGFilterInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGFilterInitializedFuncCall is an object that describes an
// invocation of method FilterInitialized on an instance of MockIETHDKG.
type IETHDKGFilterInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGInitializedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGFilterInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGFilterInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGFilterKeyShareSubmissionCompleteFunc describes the behavior when
// the FilterKeyShareSubmissionComplete method of the parent MockIETHDKG
// instance is invoked.
type IETHDKGFilterKeyShareSubmissionCompleteFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmissionCompleteIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmissionCompleteIterator, error)
	history     []IETHDKGFilterKeyShareSubmissionCompleteFuncCall
	mutex       sync.Mutex
}

// FilterKeyShareSubmissionComplete delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) FilterKeyShareSubmissionComplete(v0 *bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmissionCompleteIterator, error) {
	r0, r1 := m.FilterKeyShareSubmissionCompleteFunc.nextHook()(v0)
	m.FilterKeyShareSubmissionCompleteFunc.appendCall(IETHDKGFilterKeyShareSubmissionCompleteFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterKeyShareSubmissionComplete method of the parent MockIETHDKG
// instance is invoked and the hook queue is empty.
func (f *IETHDKGFilterKeyShareSubmissionCompleteFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmissionCompleteIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterKeyShareSubmissionComplete method of the parent MockIETHDKG
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IETHDKGFilterKeyShareSubmissionCompleteFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmissionCompleteIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGFilterKeyShareSubmissionCompleteFunc) SetDefaultReturn(r0 *bindings.ETHDKGKeyShareSubmissionCompleteIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmissionCompleteIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGFilterKeyShareSubmissionCompleteFunc) PushReturn(r0 *bindings.ETHDKGKeyShareSubmissionCompleteIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmissionCompleteIterator, error) {
		return r0, r1
	})
}

func (f *IETHDKGFilterKeyShareSubmissionCompleteFunc) nextHook() func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmissionCompleteIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGFilterKeyShareSubmissionCompleteFunc) appendCall(r0 IETHDKGFilterKeyShareSubmissionCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IETHDKGFilterKeyShareSubmissionCompleteFuncCall objects describing the
// invocations of this function.
func (f *IETHDKGFilterKeyShareSubmissionCompleteFunc) History() []IETHDKGFilterKeyShareSubmissionCompleteFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGFilterKeyShareSubmissionCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGFilterKeyShareSubmissionCompleteFuncCall is an object that
// describes an invocation of method FilterKeyShareSubmissionComplete on an
// instance of MockIETHDKG.
type IETHDKGFilterKeyShareSubmissionCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGKeyShareSubmissionCompleteIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGFilterKeyShareSubmissionCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGFilterKeyShareSubmissionCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGFilterKeyShareSubmittedFunc describes the behavior when the
// FilterKeyShareSubmitted method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGFilterKeyShareSubmittedFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmittedIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmittedIterator, error)
	history     []IETHDKGFilterKeyShareSubmittedFuncCall
	mutex       sync.Mutex
}

// FilterKeyShareSubmitted delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) FilterKeyShareSubmitted(v0 *bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmittedIterator, error) {
	r0, r1 := m.FilterKeyShareSubmittedFunc.nextHook()(v0)
	m.FilterKeyShareSubmittedFunc.appendCall(IETHDKGFilterKeyShareSubmittedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterKeyShareSubmitted method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGFilterKeyShareSubmittedFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmittedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterKeyShareSubmitted method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGFilterKeyShareSubmittedFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmittedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGFilterKeyShareSubmittedFunc) SetDefaultReturn(r0 *bindings.ETHDKGKeyShareSubmittedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmittedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGFilterKeyShareSubmittedFunc) PushReturn(r0 *bindings.ETHDKGKeyShareSubmittedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmittedIterator, error) {
		return r0, r1
	})
}

func (f *IETHDKGFilterKeyShareSubmittedFunc) nextHook() func(*bind.FilterOpts) (*bindings.ETHDKGKeyShareSubmittedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGFilterKeyShareSubmittedFunc) appendCall(r0 IETHDKGFilterKeyShareSubmittedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGFilterKeyShareSubmittedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGFilterKeyShareSubmittedFunc) History() []IETHDKGFilterKeyShareSubmittedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGFilterKeyShareSubmittedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGFilterKeyShareSubmittedFuncCall is an object that describes an
// invocation of method FilterKeyShareSubmitted on an instance of
// MockIETHDKG.
type IETHDKGFilterKeyShareSubmittedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGKeyShareSubmittedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGFilterKeyShareSubmittedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGFilterKeyShareSubmittedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGFilterMPKSetFunc describes the behavior when the FilterMPKSet
// method of the parent MockIETHDKG instance is invoked.
type IETHDKGFilterMPKSetFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ETHDKGMPKSetIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ETHDKGMPKSetIterator, error)
	history     []IETHDKGFilterMPKSetFuncCall
	mutex       sync.Mutex
}

// FilterMPKSet delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIETHDKG) FilterMPKSet(v0 *bind.FilterOpts) (*bindings.ETHDKGMPKSetIterator, error) {
	r0, r1 := m.FilterMPKSetFunc.nextHook()(v0)
	m.FilterMPKSetFunc.appendCall(IETHDKGFilterMPKSetFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterMPKSet method
// of the parent MockIETHDKG instance is invoked and the hook queue is
// empty.
func (f *IETHDKGFilterMPKSetFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGMPKSetIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterMPKSet method of the parent MockIETHDKG instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IETHDKGFilterMPKSetFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGMPKSetIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGFilterMPKSetFunc) SetDefaultReturn(r0 *bindings.ETHDKGMPKSetIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ETHDKGMPKSetIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGFilterMPKSetFunc) PushReturn(r0 *bindings.ETHDKGMPKSetIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ETHDKGMPKSetIterator, error) {
		return r0, r1
	})
}

func (f *IETHDKGFilterMPKSetFunc) nextHook() func(*bind.FilterOpts) (*bindings.ETHDKGMPKSetIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGFilterMPKSetFunc) appendCall(r0 IETHDKGFilterMPKSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGFilterMPKSetFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGFilterMPKSetFunc) History() []IETHDKGFilterMPKSetFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGFilterMPKSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGFilterMPKSetFuncCall is an object that describes an invocation of
// method FilterMPKSet on an instance of MockIETHDKG.
type IETHDKGFilterMPKSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGMPKSetIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGFilterMPKSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGFilterMPKSetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGFilterRegistrationCompleteFunc describes the behavior when the
// FilterRegistrationComplete method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGFilterRegistrationCompleteFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationCompleteIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationCompleteIterator, error)
	history     []IETHDKGFilterRegistrationCompleteFuncCall
	mutex       sync.Mutex
}

// FilterRegistrationComplete delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) FilterRegistrationComplete(v0 *bind.FilterOpts) (*bindings.ETHDKGRegistrationCompleteIterator, error) {
	r0, r1 := m.FilterRegistrationCompleteFunc.nextHook()(v0)
	m.FilterRegistrationCompleteFunc.appendCall(IETHDKGFilterRegistrationCompleteFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterRegistrationComplete method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGFilterRegistrationCompleteFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationCompleteIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterRegistrationComplete method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGFilterRegistrationCompleteFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationCompleteIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGFilterRegistrationCompleteFunc) SetDefaultReturn(r0 *bindings.ETHDKGRegistrationCompleteIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationCompleteIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGFilterRegistrationCompleteFunc) PushReturn(r0 *bindings.ETHDKGRegistrationCompleteIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationCompleteIterator, error) {
		return r0, r1
	})
}

func (f *IETHDKGFilterRegistrationCompleteFunc) nextHook() func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationCompleteIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGFilterRegistrationCompleteFunc) appendCall(r0 IETHDKGFilterRegistrationCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGFilterRegistrationCompleteFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGFilterRegistrationCompleteFunc) History() []IETHDKGFilterRegistrationCompleteFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGFilterRegistrationCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGFilterRegistrationCompleteFuncCall is an object that describes an
// invocation of method FilterRegistrationComplete on an instance of
// MockIETHDKG.
type IETHDKGFilterRegistrationCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGRegistrationCompleteIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGFilterRegistrationCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGFilterRegistrationCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGFilterRegistrationOpenedFunc describes the behavior when the
// FilterRegistrationOpened method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGFilterRegistrationOpenedFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationOpenedIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationOpenedIterator, error)
	history     []IETHDKGFilterRegistrationOpenedFuncCall
	mutex       sync.Mutex
}

// FilterRegistrationOpened delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) FilterRegistrationOpened(v0 *bind.FilterOpts) (*bindings.ETHDKGRegistrationOpenedIterator, error) {
	r0, r1 := m.FilterRegistrationOpenedFunc.nextHook()(v0)
	m.FilterRegistrationOpenedFunc.appendCall(IETHDKGFilterRegistrationOpenedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterRegistrationOpened method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGFilterRegistrationOpenedFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationOpenedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterRegistrationOpened method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGFilterRegistrationOpenedFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationOpenedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGFilterRegistrationOpenedFunc) SetDefaultReturn(r0 *bindings.ETHDKGRegistrationOpenedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationOpenedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGFilterRegistrationOpenedFunc) PushReturn(r0 *bindings.ETHDKGRegistrationOpenedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationOpenedIterator, error) {
		return r0, r1
	})
}

func (f *IETHDKGFilterRegistrationOpenedFunc) nextHook() func(*bind.FilterOpts) (*bindings.ETHDKGRegistrationOpenedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGFilterRegistrationOpenedFunc) appendCall(r0 IETHDKGFilterRegistrationOpenedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGFilterRegistrationOpenedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGFilterRegistrationOpenedFunc) History() []IETHDKGFilterRegistrationOpenedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGFilterRegistrationOpenedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGFilterRegistrationOpenedFuncCall is an object that describes an
// invocation of method FilterRegistrationOpened on an instance of
// MockIETHDKG.
type IETHDKGFilterRegistrationOpenedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGRegistrationOpenedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGFilterRegistrationOpenedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGFilterRegistrationOpenedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGFilterShareDistributionCompleteFunc describes the behavior when
// the FilterShareDistributionComplete method of the parent MockIETHDKG
// instance is invoked.
type IETHDKGFilterShareDistributionCompleteFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ETHDKGShareDistributionCompleteIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ETHDKGShareDistributionCompleteIterator, error)
	history     []IETHDKGFilterShareDistributionCompleteFuncCall
	mutex       sync.Mutex
}

// FilterShareDistributionComplete delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) FilterShareDistributionComplete(v0 *bind.FilterOpts) (*bindings.ETHDKGShareDistributionCompleteIterator, error) {
	r0, r1 := m.FilterShareDistributionCompleteFunc.nextHook()(v0)
	m.FilterShareDistributionCompleteFunc.appendCall(IETHDKGFilterShareDistributionCompleteFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterShareDistributionComplete method of the parent MockIETHDKG instance
// is invoked and the hook queue is empty.
func (f *IETHDKGFilterShareDistributionCompleteFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGShareDistributionCompleteIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterShareDistributionComplete method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGFilterShareDistributionCompleteFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGShareDistributionCompleteIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGFilterShareDistributionCompleteFunc) SetDefaultReturn(r0 *bindings.ETHDKGShareDistributionCompleteIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ETHDKGShareDistributionCompleteIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGFilterShareDistributionCompleteFunc) PushReturn(r0 *bindings.ETHDKGShareDistributionCompleteIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ETHDKGShareDistributionCompleteIterator, error) {
		return r0, r1
	})
}

func (f *IETHDKGFilterShareDistributionCompleteFunc) nextHook() func(*bind.FilterOpts) (*bindings.ETHDKGShareDistributionCompleteIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGFilterShareDistributionCompleteFunc) appendCall(r0 IETHDKGFilterShareDistributionCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IETHDKGFilterShareDistributionCompleteFuncCall objects describing the
// invocations of this function.
func (f *IETHDKGFilterShareDistributionCompleteFunc) History() []IETHDKGFilterShareDistributionCompleteFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGFilterShareDistributionCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGFilterShareDistributionCompleteFuncCall is an object that
// describes an invocation of method FilterShareDistributionComplete on an
// instance of MockIETHDKG.
type IETHDKGFilterShareDistributionCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGShareDistributionCompleteIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGFilterShareDistributionCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGFilterShareDistributionCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGFilterSharesDistributedFunc describes the behavior when the
// FilterSharesDistributed method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGFilterSharesDistributedFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ETHDKGSharesDistributedIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ETHDKGSharesDistributedIterator, error)
	history     []IETHDKGFilterSharesDistributedFuncCall
	mutex       sync.Mutex
}

// FilterSharesDistributed delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) FilterSharesDistributed(v0 *bind.FilterOpts) (*bindings.ETHDKGSharesDistributedIterator, error) {
	r0, r1 := m.FilterSharesDistributedFunc.nextHook()(v0)
	m.FilterSharesDistributedFunc.appendCall(IETHDKGFilterSharesDistributedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterSharesDistributed method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGFilterSharesDistributedFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGSharesDistributedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterSharesDistributed method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGFilterSharesDistributedFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGSharesDistributedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGFilterSharesDistributedFunc) SetDefaultReturn(r0 *bindings.ETHDKGSharesDistributedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ETHDKGSharesDistributedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGFilterSharesDistributedFunc) PushReturn(r0 *bindings.ETHDKGSharesDistributedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ETHDKGSharesDistributedIterator, error) {
		return r0, r1
	})
}

func (f *IETHDKGFilterSharesDistributedFunc) nextHook() func(*bind.FilterOpts) (*bindings.ETHDKGSharesDistributedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGFilterSharesDistributedFunc) appendCall(r0 IETHDKGFilterSharesDistributedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGFilterSharesDistributedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGFilterSharesDistributedFunc) History() []IETHDKGFilterSharesDistributedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGFilterSharesDistributedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGFilterSharesDistributedFuncCall is an object that describes an
// invocation of method FilterSharesDistributed on an instance of
// MockIETHDKG.
type IETHDKGFilterSharesDistributedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGSharesDistributedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGFilterSharesDistributedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGFilterSharesDistributedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGFilterValidatorMemberAddedFunc describes the behavior when the
// FilterValidatorMemberAdded method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGFilterValidatorMemberAddedFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ETHDKGValidatorMemberAddedIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ETHDKGValidatorMemberAddedIterator, error)
	history     []IETHDKGFilterValidatorMemberAddedFuncCall
	mutex       sync.Mutex
}

// FilterValidatorMemberAdded delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) FilterValidatorMemberAdded(v0 *bind.FilterOpts) (*bindings.ETHDKGValidatorMemberAddedIterator, error) {
	r0, r1 := m.FilterValidatorMemberAddedFunc.nextHook()(v0)
	m.FilterValidatorMemberAddedFunc.appendCall(IETHDKGFilterValidatorMemberAddedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterValidatorMemberAdded method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGFilterValidatorMemberAddedFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGValidatorMemberAddedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterValidatorMemberAdded method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGFilterValidatorMemberAddedFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGValidatorMemberAddedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGFilterValidatorMemberAddedFunc) SetDefaultReturn(r0 *bindings.ETHDKGValidatorMemberAddedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ETHDKGValidatorMemberAddedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGFilterValidatorMemberAddedFunc) PushReturn(r0 *bindings.ETHDKGValidatorMemberAddedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ETHDKGValidatorMemberAddedIterator, error) {
		return r0, r1
	})
}

func (f *IETHDKGFilterValidatorMemberAddedFunc) nextHook() func(*bind.FilterOpts) (*bindings.ETHDKGValidatorMemberAddedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGFilterValidatorMemberAddedFunc) appendCall(r0 IETHDKGFilterValidatorMemberAddedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGFilterValidatorMemberAddedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGFilterValidatorMemberAddedFunc) History() []IETHDKGFilterValidatorMemberAddedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGFilterValidatorMemberAddedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGFilterValidatorMemberAddedFuncCall is an object that describes an
// invocation of method FilterValidatorMemberAdded on an instance of
// MockIETHDKG.
type IETHDKGFilterValidatorMemberAddedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGValidatorMemberAddedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGFilterValidatorMemberAddedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGFilterValidatorMemberAddedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGFilterValidatorSetCompletedFunc describes the behavior when the
// FilterValidatorSetCompleted method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGFilterValidatorSetCompletedFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ETHDKGValidatorSetCompletedIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ETHDKGValidatorSetCompletedIterator, error)
	history     []IETHDKGFilterValidatorSetCompletedFuncCall
	mutex       sync.Mutex
}

// FilterValidatorSetCompleted delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) FilterValidatorSetCompleted(v0 *bind.FilterOpts) (*bindings.ETHDKGValidatorSetCompletedIterator, error) {
	r0, r1 := m.FilterValidatorSetCompletedFunc.nextHook()(v0)
	m.FilterValidatorSetCompletedFunc.appendCall(IETHDKGFilterValidatorSetCompletedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterValidatorSetCompleted method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGFilterValidatorSetCompletedFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGValidatorSetCompletedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterValidatorSetCompleted method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGFilterValidatorSetCompletedFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ETHDKGValidatorSetCompletedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGFilterValidatorSetCompletedFunc) SetDefaultReturn(r0 *bindings.ETHDKGValidatorSetCompletedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ETHDKGValidatorSetCompletedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGFilterValidatorSetCompletedFunc) PushReturn(r0 *bindings.ETHDKGValidatorSetCompletedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ETHDKGValidatorSetCompletedIterator, error) {
		return r0, r1
	})
}

func (f *IETHDKGFilterValidatorSetCompletedFunc) nextHook() func(*bind.FilterOpts) (*bindings.ETHDKGValidatorSetCompletedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGFilterValidatorSetCompletedFunc) appendCall(r0 IETHDKGFilterValidatorSetCompletedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGFilterValidatorSetCompletedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGFilterValidatorSetCompletedFunc) History() []IETHDKGFilterValidatorSetCompletedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGFilterValidatorSetCompletedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGFilterValidatorSetCompletedFuncCall is an object that describes an
// invocation of method FilterValidatorSetCompleted on an instance of
// MockIETHDKG.
type IETHDKGFilterValidatorSetCompletedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGValidatorSetCompletedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGFilterValidatorSetCompletedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGFilterValidatorSetCompletedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetBadParticipantsFunc describes the behavior when the
// GetBadParticipants method of the parent MockIETHDKG instance is invoked.
type IETHDKGGetBadParticipantsFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IETHDKGGetBadParticipantsFuncCall
	mutex       sync.Mutex
}

// GetBadParticipants delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) GetBadParticipants(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetBadParticipantsFunc.nextHook()(v0)
	m.GetBadParticipantsFunc.appendCall(IETHDKGGetBadParticipantsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetBadParticipants
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGGetBadParticipantsFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBadParticipants method of the parent MockIETHDKG instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IETHDKGGetBadParticipantsFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetBadParticipantsFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetBadParticipantsFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetBadParticipantsFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetBadParticipantsFunc) appendCall(r0 IETHDKGGetBadParticipantsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGGetBadParticipantsFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGGetBadParticipantsFunc) History() []IETHDKGGetBadParticipantsFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetBadParticipantsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetBadParticipantsFuncCall is an object that describes an
// invocation of method GetBadParticipants on an instance of MockIETHDKG.
type IETHDKGGetBadParticipantsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetBadParticipantsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetBadParticipantsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetConfirmationLengthFunc describes the behavior when the
// GetConfirmationLength method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGGetConfirmationLengthFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IETHDKGGetConfirmationLengthFuncCall
	mutex       sync.Mutex
}

// GetConfirmationLength delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) GetConfirmationLength(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetConfirmationLengthFunc.nextHook()(v0)
	m.GetConfirmationLengthFunc.appendCall(IETHDKGGetConfirmationLengthFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetConfirmationLength method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGGetConfirmationLengthFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetConfirmationLength method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGGetConfirmationLengthFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetConfirmationLengthFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetConfirmationLengthFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetConfirmationLengthFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetConfirmationLengthFunc) appendCall(r0 IETHDKGGetConfirmationLengthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGGetConfirmationLengthFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGGetConfirmationLengthFunc) History() []IETHDKGGetConfirmationLengthFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetConfirmationLengthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetConfirmationLengthFuncCall is an object that describes an
// invocation of method GetConfirmationLength on an instance of MockIETHDKG.
type IETHDKGGetConfirmationLengthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetConfirmationLengthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetConfirmationLengthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetETHDKGPhaseFunc describes the behavior when the GetETHDKGPhase
// method of the parent MockIETHDKG instance is invoked.
type IETHDKGGetETHDKGPhaseFunc struct {
	defaultHook func(*bind.CallOpts) (uint8, error)
	hooks       []func(*bind.CallOpts) (uint8, error)
	history     []IETHDKGGetETHDKGPhaseFuncCall
	mutex       sync.Mutex
}

// GetETHDKGPhase delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) GetETHDKGPhase(v0 *bind.CallOpts) (uint8, error) {
	r0, r1 := m.GetETHDKGPhaseFunc.nextHook()(v0)
	m.GetETHDKGPhaseFunc.appendCall(IETHDKGGetETHDKGPhaseFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetETHDKGPhase
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGGetETHDKGPhaseFunc) SetDefaultHook(hook func(*bind.CallOpts) (uint8, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetETHDKGPhase method of the parent MockIETHDKG instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IETHDKGGetETHDKGPhaseFunc) PushHook(hook func(*bind.CallOpts) (uint8, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetETHDKGPhaseFunc) SetDefaultReturn(r0 uint8, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (uint8, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetETHDKGPhaseFunc) PushReturn(r0 uint8, r1 error) {
	f.PushHook(func(*bind.CallOpts) (uint8, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetETHDKGPhaseFunc) nextHook() func(*bind.CallOpts) (uint8, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetETHDKGPhaseFunc) appendCall(r0 IETHDKGGetETHDKGPhaseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGGetETHDKGPhaseFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGGetETHDKGPhaseFunc) History() []IETHDKGGetETHDKGPhaseFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetETHDKGPhaseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetETHDKGPhaseFuncCall is an object that describes an invocation
// of method GetETHDKGPhase on an instance of MockIETHDKG.
type IETHDKGGetETHDKGPhaseFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint8
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetETHDKGPhaseFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetETHDKGPhaseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetLastRoundParticipantIndexFunc describes the behavior when the
// GetLastRoundParticipantIndex method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGGetLastRoundParticipantIndexFunc struct {
	defaultHook func(*bind.CallOpts, common.Address) (*big.Int, error)
	hooks       []func(*bind.CallOpts, common.Address) (*big.Int, error)
	history     []IETHDKGGetLastRoundParticipantIndexFuncCall
	mutex       sync.Mutex
}

// GetLastRoundParticipantIndex delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) GetLastRoundParticipantIndex(v0 *bind.CallOpts, v1 common.Address) (*big.Int, error) {
	r0, r1 := m.GetLastRoundParticipantIndexFunc.nextHook()(v0, v1)
	m.GetLastRoundParticipantIndexFunc.appendCall(IETHDKGGetLastRoundParticipantIndexFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLastRoundParticipantIndex method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGGetLastRoundParticipantIndexFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLastRoundParticipantIndex method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGGetLastRoundParticipantIndexFunc) PushHook(hook func(*bind.CallOpts, common.Address) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetLastRoundParticipantIndexFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetLastRoundParticipantIndexFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetLastRoundParticipantIndexFunc) nextHook() func(*bind.CallOpts, common.Address) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetLastRoundParticipantIndexFunc) appendCall(r0 IETHDKGGetLastRoundParticipantIndexFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGGetLastRoundParticipantIndexFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGGetLastRoundParticipantIndexFunc) History() []IETHDKGGetLastRoundParticipantIndexFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetLastRoundParticipantIndexFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetLastRoundParticipantIndexFuncCall is an object that describes
// an invocation of method GetLastRoundParticipantIndex on an instance of
// MockIETHDKG.
type IETHDKGGetLastRoundParticipantIndexFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetLastRoundParticipantIndexFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetLastRoundParticipantIndexFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetMasterPublicKeyFunc describes the behavior when the
// GetMasterPublicKey method of the parent MockIETHDKG instance is invoked.
type IETHDKGGetMasterPublicKeyFunc struct {
	defaultHook func(*bind.CallOpts) ([4]*big.Int, error)
	hooks       []func(*bind.CallOpts) ([4]*big.Int, error)
	history     []IETHDKGGetMasterPublicKeyFuncCall
	mutex       sync.Mutex
}

// GetMasterPublicKey delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) GetMasterPublicKey(v0 *bind.CallOpts) ([4]*big.Int, error) {
	r0, r1 := m.GetMasterPublicKeyFunc.nextHook()(v0)
	m.GetMasterPublicKeyFunc.appendCall(IETHDKGGetMasterPublicKeyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetMasterPublicKey
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGGetMasterPublicKeyFunc) SetDefaultHook(hook func(*bind.CallOpts) ([4]*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMasterPublicKey method of the parent MockIETHDKG instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IETHDKGGetMasterPublicKeyFunc) PushHook(hook func(*bind.CallOpts) ([4]*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetMasterPublicKeyFunc) SetDefaultReturn(r0 [4]*big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) ([4]*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetMasterPublicKeyFunc) PushReturn(r0 [4]*big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) ([4]*big.Int, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetMasterPublicKeyFunc) nextHook() func(*bind.CallOpts) ([4]*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetMasterPublicKeyFunc) appendCall(r0 IETHDKGGetMasterPublicKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGGetMasterPublicKeyFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGGetMasterPublicKeyFunc) History() []IETHDKGGetMasterPublicKeyFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetMasterPublicKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetMasterPublicKeyFuncCall is an object that describes an
// invocation of method GetMasterPublicKey on an instance of MockIETHDKG.
type IETHDKGGetMasterPublicKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 [4]*big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetMasterPublicKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetMasterPublicKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetMasterPublicKeyHashFunc describes the behavior when the
// GetMasterPublicKeyHash method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGGetMasterPublicKeyHashFunc struct {
	defaultHook func(*bind.CallOpts) ([32]byte, error)
	hooks       []func(*bind.CallOpts) ([32]byte, error)
	history     []IETHDKGGetMasterPublicKeyHashFuncCall
	mutex       sync.Mutex
}

// GetMasterPublicKeyHash delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) GetMasterPublicKeyHash(v0 *bind.CallOpts) ([32]byte, error) {
	r0, r1 := m.GetMasterPublicKeyHashFunc.nextHook()(v0)
	m.GetMasterPublicKeyHashFunc.appendCall(IETHDKGGetMasterPublicKeyHashFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMasterPublicKeyHash method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGGetMasterPublicKeyHashFunc) SetDefaultHook(hook func(*bind.CallOpts) ([32]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMasterPublicKeyHash method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGGetMasterPublicKeyHashFunc) PushHook(hook func(*bind.CallOpts) ([32]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetMasterPublicKeyHashFunc) SetDefaultReturn(r0 [32]byte, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) ([32]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetMasterPublicKeyHashFunc) PushReturn(r0 [32]byte, r1 error) {
	f.PushHook(func(*bind.CallOpts) ([32]byte, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetMasterPublicKeyHashFunc) nextHook() func(*bind.CallOpts) ([32]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetMasterPublicKeyHashFunc) appendCall(r0 IETHDKGGetMasterPublicKeyHashFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGGetMasterPublicKeyHashFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGGetMasterPublicKeyHashFunc) History() []IETHDKGGetMasterPublicKeyHashFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetMasterPublicKeyHashFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetMasterPublicKeyHashFuncCall is an object that describes an
// invocation of method GetMasterPublicKeyHash on an instance of
// MockIETHDKG.
type IETHDKGGetMasterPublicKeyHashFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 [32]byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetMasterPublicKeyHashFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetMasterPublicKeyHashFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetMetamorphicContractAddressFunc describes the behavior when the
// GetMetamorphicContractAddress method of the parent MockIETHDKG instance
// is invoked.
type IETHDKGGetMetamorphicContractAddressFunc struct {
	defaultHook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	hooks       []func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	history     []IETHDKGGetMetamorphicContractAddressFuncCall
	mutex       sync.Mutex
}

// GetMetamorphicContractAddress delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) GetMetamorphicContractAddress(v0 *bind.CallOpts, v1 [32]byte, v2 common.Address) (common.Address, error) {
	r0, r1 := m.GetMetamorphicContractAddressFunc.nextHook()(v0, v1, v2)
	m.GetMetamorphicContractAddressFunc.appendCall(IETHDKGGetMetamorphicContractAddressFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMetamorphicContractAddress method of the parent MockIETHDKG instance
// is invoked and the hook queue is empty.
func (f *IETHDKGGetMetamorphicContractAddressFunc) SetDefaultHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMetamorphicContractAddress method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGGetMetamorphicContractAddressFunc) PushHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetMetamorphicContractAddressFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetMetamorphicContractAddressFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetMetamorphicContractAddressFunc) nextHook() func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetMetamorphicContractAddressFunc) appendCall(r0 IETHDKGGetMetamorphicContractAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IETHDKGGetMetamorphicContractAddressFuncCall objects describing the
// invocations of this function.
func (f *IETHDKGGetMetamorphicContractAddressFunc) History() []IETHDKGGetMetamorphicContractAddressFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetMetamorphicContractAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetMetamorphicContractAddressFuncCall is an object that describes
// an invocation of method GetMetamorphicContractAddress on an instance of
// MockIETHDKG.
type IETHDKGGetMetamorphicContractAddressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetMetamorphicContractAddressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetMetamorphicContractAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetMinValidatorsFunc describes the behavior when the
// GetMinValidators method of the parent MockIETHDKG instance is invoked.
type IETHDKGGetMinValidatorsFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IETHDKGGetMinValidatorsFuncCall
	mutex       sync.Mutex
}

// GetMinValidators delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) GetMinValidators(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetMinValidatorsFunc.nextHook()(v0)
	m.GetMinValidatorsFunc.appendCall(IETHDKGGetMinValidatorsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetMinValidators
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGGetMinValidatorsFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMinValidators method of the parent MockIETHDKG instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IETHDKGGetMinValidatorsFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetMinValidatorsFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetMinValidatorsFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetMinValidatorsFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetMinValidatorsFunc) appendCall(r0 IETHDKGGetMinValidatorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGGetMinValidatorsFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGGetMinValidatorsFunc) History() []IETHDKGGetMinValidatorsFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetMinValidatorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetMinValidatorsFuncCall is an object that describes an invocation
// of method GetMinValidators on an instance of MockIETHDKG.
type IETHDKGGetMinValidatorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetMinValidatorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetMinValidatorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetNonceFunc describes the behavior when the GetNonce method of
// the parent MockIETHDKG instance is invoked.
type IETHDKGGetNonceFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IETHDKGGetNonceFuncCall
	mutex       sync.Mutex
}

// GetNonce delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIETHDKG) GetNonce(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetNonceFunc.nextHook()(v0)
	m.GetNonceFunc.appendCall(IETHDKGGetNonceFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetNonce method of
// the parent MockIETHDKG instance is invoked and the hook queue is empty.
func (f *IETHDKGGetNonceFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetNonce method of the parent MockIETHDKG instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IETHDKGGetNonceFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetNonceFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetNonceFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetNonceFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetNonceFunc) appendCall(r0 IETHDKGGetNonceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGGetNonceFuncCall objects describing
// the invocations of this function.
func (f *IETHDKGGetNonceFunc) History() []IETHDKGGetNonceFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetNonceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetNonceFuncCall is an object that describes an invocation of
// method GetNonce on an instance of MockIETHDKG.
type IETHDKGGetNonceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetNonceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetNonceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetNumParticipantsFunc describes the behavior when the
// GetNumParticipants method of the parent MockIETHDKG instance is invoked.
type IETHDKGGetNumParticipantsFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IETHDKGGetNumParticipantsFuncCall
	mutex       sync.Mutex
}

// GetNumParticipants delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) GetNumParticipants(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetNumParticipantsFunc.nextHook()(v0)
	m.GetNumParticipantsFunc.appendCall(IETHDKGGetNumParticipantsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetNumParticipants
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGGetNumParticipantsFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetNumParticipants method of the parent MockIETHDKG instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IETHDKGGetNumParticipantsFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetNumParticipantsFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetNumParticipantsFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetNumParticipantsFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetNumParticipantsFunc) appendCall(r0 IETHDKGGetNumParticipantsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGGetNumParticipantsFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGGetNumParticipantsFunc) History() []IETHDKGGetNumParticipantsFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetNumParticipantsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetNumParticipantsFuncCall is an object that describes an
// invocation of method GetNumParticipants on an instance of MockIETHDKG.
type IETHDKGGetNumParticipantsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetNumParticipantsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetNumParticipantsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetParticipantInternalStateFunc describes the behavior when the
// GetParticipantInternalState method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGGetParticipantInternalStateFunc struct {
	defaultHook func(*bind.CallOpts, common.Address) (bindings.Participant, error)
	hooks       []func(*bind.CallOpts, common.Address) (bindings.Participant, error)
	history     []IETHDKGGetParticipantInternalStateFuncCall
	mutex       sync.Mutex
}

// GetParticipantInternalState delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) GetParticipantInternalState(v0 *bind.CallOpts, v1 common.Address) (bindings.Participant, error) {
	r0, r1 := m.GetParticipantInternalStateFunc.nextHook()(v0, v1)
	m.GetParticipantInternalStateFunc.appendCall(IETHDKGGetParticipantInternalStateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetParticipantInternalState method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGGetParticipantInternalStateFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address) (bindings.Participant, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetParticipantInternalState method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGGetParticipantInternalStateFunc) PushHook(hook func(*bind.CallOpts, common.Address) (bindings.Participant, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetParticipantInternalStateFunc) SetDefaultReturn(r0 bindings.Participant, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address) (bindings.Participant, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetParticipantInternalStateFunc) PushReturn(r0 bindings.Participant, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address) (bindings.Participant, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetParticipantInternalStateFunc) nextHook() func(*bind.CallOpts, common.Address) (bindings.Participant, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetParticipantInternalStateFunc) appendCall(r0 IETHDKGGetParticipantInternalStateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGGetParticipantInternalStateFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGGetParticipantInternalStateFunc) History() []IETHDKGGetParticipantInternalStateFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetParticipantInternalStateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetParticipantInternalStateFuncCall is an object that describes an
// invocation of method GetParticipantInternalState on an instance of
// MockIETHDKG.
type IETHDKGGetParticipantInternalStateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.Participant
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetParticipantInternalStateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetParticipantInternalStateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetParticipantsInternalStateFunc describes the behavior when the
// GetParticipantsInternalState method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGGetParticipantsInternalStateFunc struct {
	defaultHook func(*bind.CallOpts, []common.Address) ([]bindings.Participant, error)
	hooks       []func(*bind.CallOpts, []common.Address) ([]bindings.Participant, error)
	history     []IETHDKGGetParticipantsInternalStateFuncCall
	mutex       sync.Mutex
}

// GetParticipantsInternalState delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) GetParticipantsInternalState(v0 *bind.CallOpts, v1 []common.Address) ([]bindings.Participant, error) {
	r0, r1 := m.GetParticipantsInternalStateFunc.nextHook()(v0, v1)
	m.GetParticipantsInternalStateFunc.appendCall(IETHDKGGetParticipantsInternalStateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetParticipantsInternalState method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGGetParticipantsInternalStateFunc) SetDefaultHook(hook func(*bind.CallOpts, []common.Address) ([]bindings.Participant, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetParticipantsInternalState method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGGetParticipantsInternalStateFunc) PushHook(hook func(*bind.CallOpts, []common.Address) ([]bindings.Participant, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetParticipantsInternalStateFunc) SetDefaultReturn(r0 []bindings.Participant, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, []common.Address) ([]bindings.Participant, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetParticipantsInternalStateFunc) PushReturn(r0 []bindings.Participant, r1 error) {
	f.PushHook(func(*bind.CallOpts, []common.Address) ([]bindings.Participant, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetParticipantsInternalStateFunc) nextHook() func(*bind.CallOpts, []common.Address) ([]bindings.Participant, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetParticipantsInternalStateFunc) appendCall(r0 IETHDKGGetParticipantsInternalStateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGGetParticipantsInternalStateFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGGetParticipantsInternalStateFunc) History() []IETHDKGGetParticipantsInternalStateFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetParticipantsInternalStateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetParticipantsInternalStateFuncCall is an object that describes
// an invocation of method GetParticipantsInternalState on an instance of
// MockIETHDKG.
type IETHDKGGetParticipantsInternalStateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []bindings.Participant
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetParticipantsInternalStateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetParticipantsInternalStateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetPhaseLengthFunc describes the behavior when the GetPhaseLength
// method of the parent MockIETHDKG instance is invoked.
type IETHDKGGetPhaseLengthFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IETHDKGGetPhaseLengthFuncCall
	mutex       sync.Mutex
}

// GetPhaseLength delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) GetPhaseLength(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetPhaseLengthFunc.nextHook()(v0)
	m.GetPhaseLengthFunc.appendCall(IETHDKGGetPhaseLengthFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPhaseLength
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGGetPhaseLengthFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPhaseLength method of the parent MockIETHDKG instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IETHDKGGetPhaseLengthFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetPhaseLengthFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetPhaseLengthFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetPhaseLengthFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetPhaseLengthFunc) appendCall(r0 IETHDKGGetPhaseLengthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGGetPhaseLengthFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGGetPhaseLengthFunc) History() []IETHDKGGetPhaseLengthFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetPhaseLengthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetPhaseLengthFuncCall is an object that describes an invocation
// of method GetPhaseLength on an instance of MockIETHDKG.
type IETHDKGGetPhaseLengthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetPhaseLengthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetPhaseLengthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGGetPhaseStartBlockFunc describes the behavior when the
// GetPhaseStartBlock method of the parent MockIETHDKG instance is invoked.
type IETHDKGGetPhaseStartBlockFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IETHDKGGetPhaseStartBlockFuncCall
	mutex       sync.Mutex
}

// GetPhaseStartBlock delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) GetPhaseStartBlock(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetPhaseStartBlockFunc.nextHook()(v0)
	m.GetPhaseStartBlockFunc.appendCall(IETHDKGGetPhaseStartBlockFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPhaseStartBlock
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGGetPhaseStartBlockFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPhaseStartBlock method of the parent MockIETHDKG instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IETHDKGGetPhaseStartBlockFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGGetPhaseStartBlockFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGGetPhaseStartBlockFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IETHDKGGetPhaseStartBlockFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGGetPhaseStartBlockFunc) appendCall(r0 IETHDKGGetPhaseStartBlockFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGGetPhaseStartBlockFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGGetPhaseStartBlockFunc) History() []IETHDKGGetPhaseStartBlockFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGGetPhaseStartBlockFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGGetPhaseStartBlockFuncCall is an object that describes an
// invocation of method GetPhaseStartBlock on an instance of MockIETHDKG.
type IETHDKGGetPhaseStartBlockFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGGetPhaseStartBlockFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGGetPhaseStartBlockFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGInitializeFunc describes the behavior when the Initialize method
// of the parent MockIETHDKG instance is invoked.
type IETHDKGInitializeFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)
	history     []IETHDKGInitializeFuncCall
	mutex       sync.Mutex
}

// Initialize delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIETHDKG) Initialize(v0 *bind.TransactOpts, v1 *big.Int, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.InitializeFunc.nextHook()(v0, v1, v2)
	m.InitializeFunc.appendCall(IETHDKGInitializeFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Initialize method of
// the parent MockIETHDKG instance is invoked and the hook queue is empty.
func (f *IETHDKGInitializeFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Initialize method of the parent MockIETHDKG instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IETHDKGInitializeFunc) PushHook(hook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGInitializeFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGInitializeFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGInitializeFunc) nextHook() func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGInitializeFunc) appendCall(r0 IETHDKGInitializeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGInitializeFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGInitializeFunc) History() []IETHDKGInitializeFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGInitializeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGInitializeFuncCall is an object that describes an invocation of
// method Initialize on an instance of MockIETHDKG.
type IETHDKGInitializeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGInitializeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGInitializeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGInitializeETHDKGFunc describes the behavior when the
// InitializeETHDKG method of the parent MockIETHDKG instance is invoked.
type IETHDKGInitializeETHDKGFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IETHDKGInitializeETHDKGFuncCall
	mutex       sync.Mutex
}

// InitializeETHDKG delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) InitializeETHDKG(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.InitializeETHDKGFunc.nextHook()(v0)
	m.InitializeETHDKGFunc.appendCall(IETHDKGInitializeETHDKGFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the InitializeETHDKG
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGInitializeETHDKGFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InitializeETHDKG method of the parent MockIETHDKG instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IETHDKGInitializeETHDKGFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGInitializeETHDKGFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGInitializeETHDKGFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGInitializeETHDKGFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGInitializeETHDKGFunc) appendCall(r0 IETHDKGInitializeETHDKGFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGInitializeETHDKGFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGInitializeETHDKGFunc) History() []IETHDKGInitializeETHDKGFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGInitializeETHDKGFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGInitializeETHDKGFuncCall is an object that describes an invocation
// of method InitializeETHDKG on an instance of MockIETHDKG.
type IETHDKGInitializeETHDKGFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGInitializeETHDKGFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGInitializeETHDKGFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGIsETHDKGCompletedFunc describes the behavior when the
// IsETHDKGCompleted method of the parent MockIETHDKG instance is invoked.
type IETHDKGIsETHDKGCompletedFunc struct {
	defaultHook func(*bind.CallOpts) (bool, error)
	hooks       []func(*bind.CallOpts) (bool, error)
	history     []IETHDKGIsETHDKGCompletedFuncCall
	mutex       sync.Mutex
}

// IsETHDKGCompleted delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) IsETHDKGCompleted(v0 *bind.CallOpts) (bool, error) {
	r0, r1 := m.IsETHDKGCompletedFunc.nextHook()(v0)
	m.IsETHDKGCompletedFunc.appendCall(IETHDKGIsETHDKGCompletedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsETHDKGCompleted
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGIsETHDKGCompletedFunc) SetDefaultHook(hook func(*bind.CallOpts) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsETHDKGCompleted method of the parent MockIETHDKG instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IETHDKGIsETHDKGCompletedFunc) PushHook(hook func(*bind.CallOpts) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGIsETHDKGCompletedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGIsETHDKGCompletedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

func (f *IETHDKGIsETHDKGCompletedFunc) nextHook() func(*bind.CallOpts) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGIsETHDKGCompletedFunc) appendCall(r0 IETHDKGIsETHDKGCompletedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGIsETHDKGCompletedFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGIsETHDKGCompletedFunc) History() []IETHDKGIsETHDKGCompletedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGIsETHDKGCompletedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGIsETHDKGCompletedFuncCall is an object that describes an
// invocation of method IsETHDKGCompleted on an instance of MockIETHDKG.
type IETHDKGIsETHDKGCompletedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGIsETHDKGCompletedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGIsETHDKGCompletedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGIsETHDKGHaltedFunc describes the behavior when the IsETHDKGHalted
// method of the parent MockIETHDKG instance is invoked.
type IETHDKGIsETHDKGHaltedFunc struct {
	defaultHook func(*bind.CallOpts) (bool, error)
	hooks       []func(*bind.CallOpts) (bool, error)
	history     []IETHDKGIsETHDKGHaltedFuncCall
	mutex       sync.Mutex
}

// IsETHDKGHalted delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) IsETHDKGHalted(v0 *bind.CallOpts) (bool, error) {
	r0, r1 := m.IsETHDKGHaltedFunc.nextHook()(v0)
	m.IsETHDKGHaltedFunc.appendCall(IETHDKGIsETHDKGHaltedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsETHDKGHalted
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGIsETHDKGHaltedFunc) SetDefaultHook(hook func(*bind.CallOpts) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsETHDKGHalted method of the parent MockIETHDKG instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IETHDKGIsETHDKGHaltedFunc) PushHook(hook func(*bind.CallOpts) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGIsETHDKGHaltedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGIsETHDKGHaltedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

func (f *IETHDKGIsETHDKGHaltedFunc) nextHook() func(*bind.CallOpts) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGIsETHDKGHaltedFunc) appendCall(r0 IETHDKGIsETHDKGHaltedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGIsETHDKGHaltedFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGIsETHDKGHaltedFunc) History() []IETHDKGIsETHDKGHaltedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGIsETHDKGHaltedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGIsETHDKGHaltedFuncCall is an object that describes an invocation
// of method IsETHDKGHalted on an instance of MockIETHDKG.
type IETHDKGIsETHDKGHaltedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGIsETHDKGHaltedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGIsETHDKGHaltedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGIsETHDKGRunningFunc describes the behavior when the
// IsETHDKGRunning method of the parent MockIETHDKG instance is invoked.
type IETHDKGIsETHDKGRunningFunc struct {
	defaultHook func(*bind.CallOpts) (bool, error)
	hooks       []func(*bind.CallOpts) (bool, error)
	history     []IETHDKGIsETHDKGRunningFuncCall
	mutex       sync.Mutex
}

// IsETHDKGRunning delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) IsETHDKGRunning(v0 *bind.CallOpts) (bool, error) {
	r0, r1 := m.IsETHDKGRunningFunc.nextHook()(v0)
	m.IsETHDKGRunningFunc.appendCall(IETHDKGIsETHDKGRunningFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsETHDKGRunning
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGIsETHDKGRunningFunc) SetDefaultHook(hook func(*bind.CallOpts) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsETHDKGRunning method of the parent MockIETHDKG instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IETHDKGIsETHDKGRunningFunc) PushHook(hook func(*bind.CallOpts) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGIsETHDKGRunningFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGIsETHDKGRunningFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

func (f *IETHDKGIsETHDKGRunningFunc) nextHook() func(*bind.CallOpts) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGIsETHDKGRunningFunc) appendCall(r0 IETHDKGIsETHDKGRunningFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGIsETHDKGRunningFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGIsETHDKGRunningFunc) History() []IETHDKGIsETHDKGRunningFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGIsETHDKGRunningFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGIsETHDKGRunningFuncCall is an object that describes an invocation
// of method IsETHDKGRunning on an instance of MockIETHDKG.
type IETHDKGIsETHDKGRunningFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGIsETHDKGRunningFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGIsETHDKGRunningFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGIsMasterPublicKeySetFunc describes the behavior when the
// IsMasterPublicKeySet method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGIsMasterPublicKeySetFunc struct {
	defaultHook func(*bind.CallOpts) (bool, error)
	hooks       []func(*bind.CallOpts) (bool, error)
	history     []IETHDKGIsMasterPublicKeySetFuncCall
	mutex       sync.Mutex
}

// IsMasterPublicKeySet delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) IsMasterPublicKeySet(v0 *bind.CallOpts) (bool, error) {
	r0, r1 := m.IsMasterPublicKeySetFunc.nextHook()(v0)
	m.IsMasterPublicKeySetFunc.appendCall(IETHDKGIsMasterPublicKeySetFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsMasterPublicKeySet
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGIsMasterPublicKeySetFunc) SetDefaultHook(hook func(*bind.CallOpts) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsMasterPublicKeySet method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGIsMasterPublicKeySetFunc) PushHook(hook func(*bind.CallOpts) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGIsMasterPublicKeySetFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGIsMasterPublicKeySetFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

func (f *IETHDKGIsMasterPublicKeySetFunc) nextHook() func(*bind.CallOpts) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGIsMasterPublicKeySetFunc) appendCall(r0 IETHDKGIsMasterPublicKeySetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGIsMasterPublicKeySetFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGIsMasterPublicKeySetFunc) History() []IETHDKGIsMasterPublicKeySetFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGIsMasterPublicKeySetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGIsMasterPublicKeySetFuncCall is an object that describes an
// invocation of method IsMasterPublicKeySet on an instance of MockIETHDKG.
type IETHDKGIsMasterPublicKeySetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGIsMasterPublicKeySetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGIsMasterPublicKeySetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGIsValidMasterPublicKeyFunc describes the behavior when the
// IsValidMasterPublicKey method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGIsValidMasterPublicKeyFunc struct {
	defaultHook func(*bind.CallOpts, [32]byte) (bool, error)
	hooks       []func(*bind.CallOpts, [32]byte) (bool, error)
	history     []IETHDKGIsValidMasterPublicKeyFuncCall
	mutex       sync.Mutex
}

// IsValidMasterPublicKey delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) IsValidMasterPublicKey(v0 *bind.CallOpts, v1 [32]byte) (bool, error) {
	r0, r1 := m.IsValidMasterPublicKeyFunc.nextHook()(v0, v1)
	m.IsValidMasterPublicKeyFunc.appendCall(IETHDKGIsValidMasterPublicKeyFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// IsValidMasterPublicKey method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGIsValidMasterPublicKeyFunc) SetDefaultHook(hook func(*bind.CallOpts, [32]byte) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsValidMasterPublicKey method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGIsValidMasterPublicKeyFunc) PushHook(hook func(*bind.CallOpts, [32]byte) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGIsValidMasterPublicKeyFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, [32]byte) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGIsValidMasterPublicKeyFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts, [32]byte) (bool, error) {
		return r0, r1
	})
}

func (f *IETHDKGIsValidMasterPublicKeyFunc) nextHook() func(*bind.CallOpts, [32]byte) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGIsValidMasterPublicKeyFunc) appendCall(r0 IETHDKGIsValidMasterPublicKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGIsValidMasterPublicKeyFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGIsValidMasterPublicKeyFunc) History() []IETHDKGIsValidMasterPublicKeyFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGIsValidMasterPublicKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGIsValidMasterPublicKeyFuncCall is an object that describes an
// invocation of method IsValidMasterPublicKey on an instance of
// MockIETHDKG.
type IETHDKGIsValidMasterPublicKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGIsValidMasterPublicKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGIsValidMasterPublicKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGMigrateValidatorsFunc describes the behavior when the
// MigrateValidators method of the parent MockIETHDKG instance is invoked.
type IETHDKGMigrateValidatorsFunc struct {
	defaultHook func(*bind.TransactOpts, []common.Address, []*big.Int, [][4]*big.Int, uint8, *big.Int, *big.Int, *big.Int, [4]*big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []common.Address, []*big.Int, [][4]*big.Int, uint8, *big.Int, *big.Int, *big.Int, [4]*big.Int) (*types.Transaction, error)
	history     []IETHDKGMigrateValidatorsFuncCall
	mutex       sync.Mutex
}

// MigrateValidators delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) MigrateValidators(v0 *bind.TransactOpts, v1 []common.Address, v2 []*big.Int, v3 [][4]*big.Int, v4 uint8, v5 *big.Int, v6 *big.Int, v7 *big.Int, v8 [4]*big.Int) (*types.Transaction, error) {
	r0, r1 := m.MigrateValidatorsFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6, v7, v8)
	m.MigrateValidatorsFunc.appendCall(IETHDKGMigrateValidatorsFuncCall{v0, v1, v2, v3, v4, v5, v6, v7, v8, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MigrateValidators
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGMigrateValidatorsFunc) SetDefaultHook(hook func(*bind.TransactOpts, []common.Address, []*big.Int, [][4]*big.Int, uint8, *big.Int, *big.Int, *big.Int, [4]*big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MigrateValidators method of the parent MockIETHDKG instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IETHDKGMigrateValidatorsFunc) PushHook(hook func(*bind.TransactOpts, []common.Address, []*big.Int, [][4]*big.Int, uint8, *big.Int, *big.Int, *big.Int, [4]*big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGMigrateValidatorsFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []common.Address, []*big.Int, [][4]*big.Int, uint8, *big.Int, *big.Int, *big.Int, [4]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGMigrateValidatorsFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []common.Address, []*big.Int, [][4]*big.Int, uint8, *big.Int, *big.Int, *big.Int, [4]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGMigrateValidatorsFunc) nextHook() func(*bind.TransactOpts, []common.Address, []*big.Int, [][4]*big.Int, uint8, *big.Int, *big.Int, *big.Int, [4]*big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGMigrateValidatorsFunc) appendCall(r0 IETHDKGMigrateValidatorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGMigrateValidatorsFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGMigrateValidatorsFunc) History() []IETHDKGMigrateValidatorsFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGMigrateValidatorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGMigrateValidatorsFuncCall is an object that describes an
// invocation of method MigrateValidators on an instance of MockIETHDKG.
type IETHDKGMigrateValidatorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 [][4]*big.Int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 uint8
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 *big.Int
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 *big.Int
	// Arg7 is the value of the 8th argument passed to this method
	// invocation.
	Arg7 *big.Int
	// Arg8 is the value of the 9th argument passed to this method
	// invocation.
	Arg8 [4]*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGMigrateValidatorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6, c.Arg7, c.Arg8}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGMigrateValidatorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGParseAddressRegisteredFunc describes the behavior when the
// ParseAddressRegistered method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGParseAddressRegisteredFunc struct {
	defaultHook func(types.Log) (*bindings.ETHDKGAddressRegistered, error)
	hooks       []func(types.Log) (*bindings.ETHDKGAddressRegistered, error)
	history     []IETHDKGParseAddressRegisteredFuncCall
	mutex       sync.Mutex
}

// ParseAddressRegistered delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) ParseAddressRegistered(v0 types.Log) (*bindings.ETHDKGAddressRegistered, error) {
	r0, r1 := m.ParseAddressRegisteredFunc.nextHook()(v0)
	m.ParseAddressRegisteredFunc.appendCall(IETHDKGParseAddressRegisteredFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseAddressRegistered method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGParseAddressRegisteredFunc) SetDefaultHook(hook func(types.Log) (*bindings.ETHDKGAddressRegistered, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseAddressRegistered method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGParseAddressRegisteredFunc) PushHook(hook func(types.Log) (*bindings.ETHDKGAddressRegistered, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGParseAddressRegisteredFunc) SetDefaultReturn(r0 *bindings.ETHDKGAddressRegistered, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ETHDKGAddressRegistered, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGParseAddressRegisteredFunc) PushReturn(r0 *bindings.ETHDKGAddressRegistered, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ETHDKGAddressRegistered, error) {
		return r0, r1
	})
}

func (f *IETHDKGParseAddressRegisteredFunc) nextHook() func(types.Log) (*bindings.ETHDKGAddressRegistered, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGParseAddressRegisteredFunc) appendCall(r0 IETHDKGParseAddressRegisteredFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGParseAddressRegisteredFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGParseAddressRegisteredFunc) History() []IETHDKGParseAddressRegisteredFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGParseAddressRegisteredFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGParseAddressRegisteredFuncCall is an object that describes an
// invocation of method ParseAddressRegistered on an instance of
// MockIETHDKG.
type IETHDKGParseAddressRegisteredFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGAddressRegistered
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGParseAddressRegisteredFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGParseAddressRegisteredFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGParseGPKJSubmissionCompleteFunc describes the behavior when the
// ParseGPKJSubmissionComplete method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGParseGPKJSubmissionCompleteFunc struct {
	defaultHook func(types.Log) (*bindings.ETHDKGGPKJSubmissionComplete, error)
	hooks       []func(types.Log) (*bindings.ETHDKGGPKJSubmissionComplete, error)
	history     []IETHDKGParseGPKJSubmissionCompleteFuncCall
	mutex       sync.Mutex
}

// ParseGPKJSubmissionComplete delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) ParseGPKJSubmissionComplete(v0 types.Log) (*bindings.ETHDKGGPKJSubmissionComplete, error) {
	r0, r1 := m.ParseGPKJSubmissionCompleteFunc.nextHook()(v0)
	m.ParseGPKJSubmissionCompleteFunc.appendCall(IETHDKGParseGPKJSubmissionCompleteFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseGPKJSubmissionComplete method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGParseGPKJSubmissionCompleteFunc) SetDefaultHook(hook func(types.Log) (*bindings.ETHDKGGPKJSubmissionComplete, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseGPKJSubmissionComplete method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGParseGPKJSubmissionCompleteFunc) PushHook(hook func(types.Log) (*bindings.ETHDKGGPKJSubmissionComplete, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGParseGPKJSubmissionCompleteFunc) SetDefaultReturn(r0 *bindings.ETHDKGGPKJSubmissionComplete, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ETHDKGGPKJSubmissionComplete, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGParseGPKJSubmissionCompleteFunc) PushReturn(r0 *bindings.ETHDKGGPKJSubmissionComplete, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ETHDKGGPKJSubmissionComplete, error) {
		return r0, r1
	})
}

func (f *IETHDKGParseGPKJSubmissionCompleteFunc) nextHook() func(types.Log) (*bindings.ETHDKGGPKJSubmissionComplete, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGParseGPKJSubmissionCompleteFunc) appendCall(r0 IETHDKGParseGPKJSubmissionCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGParseGPKJSubmissionCompleteFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGParseGPKJSubmissionCompleteFunc) History() []IETHDKGParseGPKJSubmissionCompleteFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGParseGPKJSubmissionCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGParseGPKJSubmissionCompleteFuncCall is an object that describes an
// invocation of method ParseGPKJSubmissionComplete on an instance of
// MockIETHDKG.
type IETHDKGParseGPKJSubmissionCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGGPKJSubmissionComplete
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGParseGPKJSubmissionCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGParseGPKJSubmissionCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGParseInitializedFunc describes the behavior when the
// ParseInitialized method of the parent MockIETHDKG instance is invoked.
type IETHDKGParseInitializedFunc struct {
	defaultHook func(types.Log) (*bindings.ETHDKGInitialized, error)
	hooks       []func(types.Log) (*bindings.ETHDKGInitialized, error)
	history     []IETHDKGParseInitializedFuncCall
	mutex       sync.Mutex
}

// ParseInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) ParseInitialized(v0 types.Log) (*bindings.ETHDKGInitialized, error) {
	r0, r1 := m.ParseInitializedFunc.nextHook()(v0)
	m.ParseInitializedFunc.appendCall(IETHDKGParseInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseInitialized
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGParseInitializedFunc) SetDefaultHook(hook func(types.Log) (*bindings.ETHDKGInitialized, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseInitialized method of the parent MockIETHDKG instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IETHDKGParseInitializedFunc) PushHook(hook func(types.Log) (*bindings.ETHDKGInitialized, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGParseInitializedFunc) SetDefaultReturn(r0 *bindings.ETHDKGInitialized, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ETHDKGInitialized, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGParseInitializedFunc) PushReturn(r0 *bindings.ETHDKGInitialized, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ETHDKGInitialized, error) {
		return r0, r1
	})
}

func (f *IETHDKGParseInitializedFunc) nextHook() func(types.Log) (*bindings.ETHDKGInitialized, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGParseInitializedFunc) appendCall(r0 IETHDKGParseInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGParseInitializedFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGParseInitializedFunc) History() []IETHDKGParseInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGParseInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGParseInitializedFuncCall is an object that describes an invocation
// of method ParseInitialized on an instance of MockIETHDKG.
type IETHDKGParseInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGInitialized
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGParseInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGParseInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGParseKeyShareSubmissionCompleteFunc describes the behavior when
// the ParseKeyShareSubmissionComplete method of the parent MockIETHDKG
// instance is invoked.
type IETHDKGParseKeyShareSubmissionCompleteFunc struct {
	defaultHook func(types.Log) (*bindings.ETHDKGKeyShareSubmissionComplete, error)
	hooks       []func(types.Log) (*bindings.ETHDKGKeyShareSubmissionComplete, error)
	history     []IETHDKGParseKeyShareSubmissionCompleteFuncCall
	mutex       sync.Mutex
}

// ParseKeyShareSubmissionComplete delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) ParseKeyShareSubmissionComplete(v0 types.Log) (*bindings.ETHDKGKeyShareSubmissionComplete, error) {
	r0, r1 := m.ParseKeyShareSubmissionCompleteFunc.nextHook()(v0)
	m.ParseKeyShareSubmissionCompleteFunc.appendCall(IETHDKGParseKeyShareSubmissionCompleteFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseKeyShareSubmissionComplete method of the parent MockIETHDKG instance
// is invoked and the hook queue is empty.
func (f *IETHDKGParseKeyShareSubmissionCompleteFunc) SetDefaultHook(hook func(types.Log) (*bindings.ETHDKGKeyShareSubmissionComplete, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseKeyShareSubmissionComplete method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGParseKeyShareSubmissionCompleteFunc) PushHook(hook func(types.Log) (*bindings.ETHDKGKeyShareSubmissionComplete, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGParseKeyShareSubmissionCompleteFunc) SetDefaultReturn(r0 *bindings.ETHDKGKeyShareSubmissionComplete, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ETHDKGKeyShareSubmissionComplete, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGParseKeyShareSubmissionCompleteFunc) PushReturn(r0 *bindings.ETHDKGKeyShareSubmissionComplete, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ETHDKGKeyShareSubmissionComplete, error) {
		return r0, r1
	})
}

func (f *IETHDKGParseKeyShareSubmissionCompleteFunc) nextHook() func(types.Log) (*bindings.ETHDKGKeyShareSubmissionComplete, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGParseKeyShareSubmissionCompleteFunc) appendCall(r0 IETHDKGParseKeyShareSubmissionCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IETHDKGParseKeyShareSubmissionCompleteFuncCall objects describing the
// invocations of this function.
func (f *IETHDKGParseKeyShareSubmissionCompleteFunc) History() []IETHDKGParseKeyShareSubmissionCompleteFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGParseKeyShareSubmissionCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGParseKeyShareSubmissionCompleteFuncCall is an object that
// describes an invocation of method ParseKeyShareSubmissionComplete on an
// instance of MockIETHDKG.
type IETHDKGParseKeyShareSubmissionCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGKeyShareSubmissionComplete
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGParseKeyShareSubmissionCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGParseKeyShareSubmissionCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGParseKeyShareSubmittedFunc describes the behavior when the
// ParseKeyShareSubmitted method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGParseKeyShareSubmittedFunc struct {
	defaultHook func(types.Log) (*bindings.ETHDKGKeyShareSubmitted, error)
	hooks       []func(types.Log) (*bindings.ETHDKGKeyShareSubmitted, error)
	history     []IETHDKGParseKeyShareSubmittedFuncCall
	mutex       sync.Mutex
}

// ParseKeyShareSubmitted delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) ParseKeyShareSubmitted(v0 types.Log) (*bindings.ETHDKGKeyShareSubmitted, error) {
	r0, r1 := m.ParseKeyShareSubmittedFunc.nextHook()(v0)
	m.ParseKeyShareSubmittedFunc.appendCall(IETHDKGParseKeyShareSubmittedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseKeyShareSubmitted method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGParseKeyShareSubmittedFunc) SetDefaultHook(hook func(types.Log) (*bindings.ETHDKGKeyShareSubmitted, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseKeyShareSubmitted method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGParseKeyShareSubmittedFunc) PushHook(hook func(types.Log) (*bindings.ETHDKGKeyShareSubmitted, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGParseKeyShareSubmittedFunc) SetDefaultReturn(r0 *bindings.ETHDKGKeyShareSubmitted, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ETHDKGKeyShareSubmitted, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGParseKeyShareSubmittedFunc) PushReturn(r0 *bindings.ETHDKGKeyShareSubmitted, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ETHDKGKeyShareSubmitted, error) {
		return r0, r1
	})
}

func (f *IETHDKGParseKeyShareSubmittedFunc) nextHook() func(types.Log) (*bindings.ETHDKGKeyShareSubmitted, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGParseKeyShareSubmittedFunc) appendCall(r0 IETHDKGParseKeyShareSubmittedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGParseKeyShareSubmittedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGParseKeyShareSubmittedFunc) History() []IETHDKGParseKeyShareSubmittedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGParseKeyShareSubmittedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGParseKeyShareSubmittedFuncCall is an object that describes an
// invocation of method ParseKeyShareSubmitted on an instance of
// MockIETHDKG.
type IETHDKGParseKeyShareSubmittedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGKeyShareSubmitted
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGParseKeyShareSubmittedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGParseKeyShareSubmittedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGParseMPKSetFunc describes the behavior when the ParseMPKSet method
// of the parent MockIETHDKG instance is invoked.
type IETHDKGParseMPKSetFunc struct {
	defaultHook func(types.Log) (*bindings.ETHDKGMPKSet, error)
	hooks       []func(types.Log) (*bindings.ETHDKGMPKSet, error)
	history     []IETHDKGParseMPKSetFuncCall
	mutex       sync.Mutex
}

// ParseMPKSet delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIETHDKG) ParseMPKSet(v0 types.Log) (*bindings.ETHDKGMPKSet, error) {
	r0, r1 := m.ParseMPKSetFunc.nextHook()(v0)
	m.ParseMPKSetFunc.appendCall(IETHDKGParseMPKSetFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseMPKSet method
// of the parent MockIETHDKG instance is invoked and the hook queue is
// empty.
func (f *IETHDKGParseMPKSetFunc) SetDefaultHook(hook func(types.Log) (*bindings.ETHDKGMPKSet, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseMPKSet method of the parent MockIETHDKG instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IETHDKGParseMPKSetFunc) PushHook(hook func(types.Log) (*bindings.ETHDKGMPKSet, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGParseMPKSetFunc) SetDefaultReturn(r0 *bindings.ETHDKGMPKSet, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ETHDKGMPKSet, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGParseMPKSetFunc) PushReturn(r0 *bindings.ETHDKGMPKSet, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ETHDKGMPKSet, error) {
		return r0, r1
	})
}

func (f *IETHDKGParseMPKSetFunc) nextHook() func(types.Log) (*bindings.ETHDKGMPKSet, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGParseMPKSetFunc) appendCall(r0 IETHDKGParseMPKSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGParseMPKSetFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGParseMPKSetFunc) History() []IETHDKGParseMPKSetFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGParseMPKSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGParseMPKSetFuncCall is an object that describes an invocation of
// method ParseMPKSet on an instance of MockIETHDKG.
type IETHDKGParseMPKSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGMPKSet
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGParseMPKSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGParseMPKSetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGParseRegistrationCompleteFunc describes the behavior when the
// ParseRegistrationComplete method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGParseRegistrationCompleteFunc struct {
	defaultHook func(types.Log) (*bindings.ETHDKGRegistrationComplete, error)
	hooks       []func(types.Log) (*bindings.ETHDKGRegistrationComplete, error)
	history     []IETHDKGParseRegistrationCompleteFuncCall
	mutex       sync.Mutex
}

// ParseRegistrationComplete delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) ParseRegistrationComplete(v0 types.Log) (*bindings.ETHDKGRegistrationComplete, error) {
	r0, r1 := m.ParseRegistrationCompleteFunc.nextHook()(v0)
	m.ParseRegistrationCompleteFunc.appendCall(IETHDKGParseRegistrationCompleteFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseRegistrationComplete method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGParseRegistrationCompleteFunc) SetDefaultHook(hook func(types.Log) (*bindings.ETHDKGRegistrationComplete, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseRegistrationComplete method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGParseRegistrationCompleteFunc) PushHook(hook func(types.Log) (*bindings.ETHDKGRegistrationComplete, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGParseRegistrationCompleteFunc) SetDefaultReturn(r0 *bindings.ETHDKGRegistrationComplete, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ETHDKGRegistrationComplete, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGParseRegistrationCompleteFunc) PushReturn(r0 *bindings.ETHDKGRegistrationComplete, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ETHDKGRegistrationComplete, error) {
		return r0, r1
	})
}

func (f *IETHDKGParseRegistrationCompleteFunc) nextHook() func(types.Log) (*bindings.ETHDKGRegistrationComplete, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGParseRegistrationCompleteFunc) appendCall(r0 IETHDKGParseRegistrationCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGParseRegistrationCompleteFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGParseRegistrationCompleteFunc) History() []IETHDKGParseRegistrationCompleteFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGParseRegistrationCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGParseRegistrationCompleteFuncCall is an object that describes an
// invocation of method ParseRegistrationComplete on an instance of
// MockIETHDKG.
type IETHDKGParseRegistrationCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGRegistrationComplete
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGParseRegistrationCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGParseRegistrationCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGParseRegistrationOpenedFunc describes the behavior when the
// ParseRegistrationOpened method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGParseRegistrationOpenedFunc struct {
	defaultHook func(types.Log) (*bindings.ETHDKGRegistrationOpened, error)
	hooks       []func(types.Log) (*bindings.ETHDKGRegistrationOpened, error)
	history     []IETHDKGParseRegistrationOpenedFuncCall
	mutex       sync.Mutex
}

// ParseRegistrationOpened delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) ParseRegistrationOpened(v0 types.Log) (*bindings.ETHDKGRegistrationOpened, error) {
	r0, r1 := m.ParseRegistrationOpenedFunc.nextHook()(v0)
	m.ParseRegistrationOpenedFunc.appendCall(IETHDKGParseRegistrationOpenedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseRegistrationOpened method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGParseRegistrationOpenedFunc) SetDefaultHook(hook func(types.Log) (*bindings.ETHDKGRegistrationOpened, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseRegistrationOpened method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGParseRegistrationOpenedFunc) PushHook(hook func(types.Log) (*bindings.ETHDKGRegistrationOpened, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGParseRegistrationOpenedFunc) SetDefaultReturn(r0 *bindings.ETHDKGRegistrationOpened, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ETHDKGRegistrationOpened, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGParseRegistrationOpenedFunc) PushReturn(r0 *bindings.ETHDKGRegistrationOpened, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ETHDKGRegistrationOpened, error) {
		return r0, r1
	})
}

func (f *IETHDKGParseRegistrationOpenedFunc) nextHook() func(types.Log) (*bindings.ETHDKGRegistrationOpened, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGParseRegistrationOpenedFunc) appendCall(r0 IETHDKGParseRegistrationOpenedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGParseRegistrationOpenedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGParseRegistrationOpenedFunc) History() []IETHDKGParseRegistrationOpenedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGParseRegistrationOpenedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGParseRegistrationOpenedFuncCall is an object that describes an
// invocation of method ParseRegistrationOpened on an instance of
// MockIETHDKG.
type IETHDKGParseRegistrationOpenedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGRegistrationOpened
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGParseRegistrationOpenedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGParseRegistrationOpenedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGParseShareDistributionCompleteFunc describes the behavior when the
// ParseShareDistributionComplete method of the parent MockIETHDKG instance
// is invoked.
type IETHDKGParseShareDistributionCompleteFunc struct {
	defaultHook func(types.Log) (*bindings.ETHDKGShareDistributionComplete, error)
	hooks       []func(types.Log) (*bindings.ETHDKGShareDistributionComplete, error)
	history     []IETHDKGParseShareDistributionCompleteFuncCall
	mutex       sync.Mutex
}

// ParseShareDistributionComplete delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) ParseShareDistributionComplete(v0 types.Log) (*bindings.ETHDKGShareDistributionComplete, error) {
	r0, r1 := m.ParseShareDistributionCompleteFunc.nextHook()(v0)
	m.ParseShareDistributionCompleteFunc.appendCall(IETHDKGParseShareDistributionCompleteFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseShareDistributionComplete method of the parent MockIETHDKG instance
// is invoked and the hook queue is empty.
func (f *IETHDKGParseShareDistributionCompleteFunc) SetDefaultHook(hook func(types.Log) (*bindings.ETHDKGShareDistributionComplete, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseShareDistributionComplete method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGParseShareDistributionCompleteFunc) PushHook(hook func(types.Log) (*bindings.ETHDKGShareDistributionComplete, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGParseShareDistributionCompleteFunc) SetDefaultReturn(r0 *bindings.ETHDKGShareDistributionComplete, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ETHDKGShareDistributionComplete, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGParseShareDistributionCompleteFunc) PushReturn(r0 *bindings.ETHDKGShareDistributionComplete, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ETHDKGShareDistributionComplete, error) {
		return r0, r1
	})
}

func (f *IETHDKGParseShareDistributionCompleteFunc) nextHook() func(types.Log) (*bindings.ETHDKGShareDistributionComplete, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGParseShareDistributionCompleteFunc) appendCall(r0 IETHDKGParseShareDistributionCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IETHDKGParseShareDistributionCompleteFuncCall objects describing the
// invocations of this function.
func (f *IETHDKGParseShareDistributionCompleteFunc) History() []IETHDKGParseShareDistributionCompleteFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGParseShareDistributionCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGParseShareDistributionCompleteFuncCall is an object that describes
// an invocation of method ParseShareDistributionComplete on an instance of
// MockIETHDKG.
type IETHDKGParseShareDistributionCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGShareDistributionComplete
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGParseShareDistributionCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGParseShareDistributionCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGParseSharesDistributedFunc describes the behavior when the
// ParseSharesDistributed method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGParseSharesDistributedFunc struct {
	defaultHook func(types.Log) (*bindings.ETHDKGSharesDistributed, error)
	hooks       []func(types.Log) (*bindings.ETHDKGSharesDistributed, error)
	history     []IETHDKGParseSharesDistributedFuncCall
	mutex       sync.Mutex
}

// ParseSharesDistributed delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) ParseSharesDistributed(v0 types.Log) (*bindings.ETHDKGSharesDistributed, error) {
	r0, r1 := m.ParseSharesDistributedFunc.nextHook()(v0)
	m.ParseSharesDistributedFunc.appendCall(IETHDKGParseSharesDistributedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseSharesDistributed method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGParseSharesDistributedFunc) SetDefaultHook(hook func(types.Log) (*bindings.ETHDKGSharesDistributed, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseSharesDistributed method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGParseSharesDistributedFunc) PushHook(hook func(types.Log) (*bindings.ETHDKGSharesDistributed, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGParseSharesDistributedFunc) SetDefaultReturn(r0 *bindings.ETHDKGSharesDistributed, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ETHDKGSharesDistributed, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGParseSharesDistributedFunc) PushReturn(r0 *bindings.ETHDKGSharesDistributed, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ETHDKGSharesDistributed, error) {
		return r0, r1
	})
}

func (f *IETHDKGParseSharesDistributedFunc) nextHook() func(types.Log) (*bindings.ETHDKGSharesDistributed, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGParseSharesDistributedFunc) appendCall(r0 IETHDKGParseSharesDistributedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGParseSharesDistributedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGParseSharesDistributedFunc) History() []IETHDKGParseSharesDistributedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGParseSharesDistributedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGParseSharesDistributedFuncCall is an object that describes an
// invocation of method ParseSharesDistributed on an instance of
// MockIETHDKG.
type IETHDKGParseSharesDistributedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGSharesDistributed
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGParseSharesDistributedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGParseSharesDistributedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGParseValidatorMemberAddedFunc describes the behavior when the
// ParseValidatorMemberAdded method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGParseValidatorMemberAddedFunc struct {
	defaultHook func(types.Log) (*bindings.ETHDKGValidatorMemberAdded, error)
	hooks       []func(types.Log) (*bindings.ETHDKGValidatorMemberAdded, error)
	history     []IETHDKGParseValidatorMemberAddedFuncCall
	mutex       sync.Mutex
}

// ParseValidatorMemberAdded delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) ParseValidatorMemberAdded(v0 types.Log) (*bindings.ETHDKGValidatorMemberAdded, error) {
	r0, r1 := m.ParseValidatorMemberAddedFunc.nextHook()(v0)
	m.ParseValidatorMemberAddedFunc.appendCall(IETHDKGParseValidatorMemberAddedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseValidatorMemberAdded method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGParseValidatorMemberAddedFunc) SetDefaultHook(hook func(types.Log) (*bindings.ETHDKGValidatorMemberAdded, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseValidatorMemberAdded method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGParseValidatorMemberAddedFunc) PushHook(hook func(types.Log) (*bindings.ETHDKGValidatorMemberAdded, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGParseValidatorMemberAddedFunc) SetDefaultReturn(r0 *bindings.ETHDKGValidatorMemberAdded, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ETHDKGValidatorMemberAdded, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGParseValidatorMemberAddedFunc) PushReturn(r0 *bindings.ETHDKGValidatorMemberAdded, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ETHDKGValidatorMemberAdded, error) {
		return r0, r1
	})
}

func (f *IETHDKGParseValidatorMemberAddedFunc) nextHook() func(types.Log) (*bindings.ETHDKGValidatorMemberAdded, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGParseValidatorMemberAddedFunc) appendCall(r0 IETHDKGParseValidatorMemberAddedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGParseValidatorMemberAddedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGParseValidatorMemberAddedFunc) History() []IETHDKGParseValidatorMemberAddedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGParseValidatorMemberAddedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGParseValidatorMemberAddedFuncCall is an object that describes an
// invocation of method ParseValidatorMemberAdded on an instance of
// MockIETHDKG.
type IETHDKGParseValidatorMemberAddedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGValidatorMemberAdded
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGParseValidatorMemberAddedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGParseValidatorMemberAddedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGParseValidatorSetCompletedFunc describes the behavior when the
// ParseValidatorSetCompleted method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGParseValidatorSetCompletedFunc struct {
	defaultHook func(types.Log) (*bindings.ETHDKGValidatorSetCompleted, error)
	hooks       []func(types.Log) (*bindings.ETHDKGValidatorSetCompleted, error)
	history     []IETHDKGParseValidatorSetCompletedFuncCall
	mutex       sync.Mutex
}

// ParseValidatorSetCompleted delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) ParseValidatorSetCompleted(v0 types.Log) (*bindings.ETHDKGValidatorSetCompleted, error) {
	r0, r1 := m.ParseValidatorSetCompletedFunc.nextHook()(v0)
	m.ParseValidatorSetCompletedFunc.appendCall(IETHDKGParseValidatorSetCompletedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseValidatorSetCompleted method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGParseValidatorSetCompletedFunc) SetDefaultHook(hook func(types.Log) (*bindings.ETHDKGValidatorSetCompleted, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseValidatorSetCompleted method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGParseValidatorSetCompletedFunc) PushHook(hook func(types.Log) (*bindings.ETHDKGValidatorSetCompleted, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGParseValidatorSetCompletedFunc) SetDefaultReturn(r0 *bindings.ETHDKGValidatorSetCompleted, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ETHDKGValidatorSetCompleted, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGParseValidatorSetCompletedFunc) PushReturn(r0 *bindings.ETHDKGValidatorSetCompleted, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ETHDKGValidatorSetCompleted, error) {
		return r0, r1
	})
}

func (f *IETHDKGParseValidatorSetCompletedFunc) nextHook() func(types.Log) (*bindings.ETHDKGValidatorSetCompleted, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGParseValidatorSetCompletedFunc) appendCall(r0 IETHDKGParseValidatorSetCompletedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGParseValidatorSetCompletedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGParseValidatorSetCompletedFunc) History() []IETHDKGParseValidatorSetCompletedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGParseValidatorSetCompletedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGParseValidatorSetCompletedFuncCall is an object that describes an
// invocation of method ParseValidatorSetCompleted on an instance of
// MockIETHDKG.
type IETHDKGParseValidatorSetCompletedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ETHDKGValidatorSetCompleted
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGParseValidatorSetCompletedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGParseValidatorSetCompletedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGRegisterFunc describes the behavior when the Register method of
// the parent MockIETHDKG instance is invoked.
type IETHDKGRegisterFunc struct {
	defaultHook func(*bind.TransactOpts, [2]*big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, [2]*big.Int) (*types.Transaction, error)
	history     []IETHDKGRegisterFuncCall
	mutex       sync.Mutex
}

// Register delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIETHDKG) Register(v0 *bind.TransactOpts, v1 [2]*big.Int) (*types.Transaction, error) {
	r0, r1 := m.RegisterFunc.nextHook()(v0, v1)
	m.RegisterFunc.appendCall(IETHDKGRegisterFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Register method of
// the parent MockIETHDKG instance is invoked and the hook queue is empty.
func (f *IETHDKGRegisterFunc) SetDefaultHook(hook func(*bind.TransactOpts, [2]*big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Register method of the parent MockIETHDKG instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IETHDKGRegisterFunc) PushHook(hook func(*bind.TransactOpts, [2]*big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGRegisterFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, [2]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGRegisterFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, [2]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGRegisterFunc) nextHook() func(*bind.TransactOpts, [2]*big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGRegisterFunc) appendCall(r0 IETHDKGRegisterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGRegisterFuncCall objects describing
// the invocations of this function.
func (f *IETHDKGRegisterFunc) History() []IETHDKGRegisterFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGRegisterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGRegisterFuncCall is an object that describes an invocation of
// method Register on an instance of MockIETHDKG.
type IETHDKGRegisterFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [2]*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGRegisterFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGRegisterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGSetConfirmationLengthFunc describes the behavior when the
// SetConfirmationLength method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGSetConfirmationLengthFunc struct {
	defaultHook func(*bind.TransactOpts, uint16) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint16) (*types.Transaction, error)
	history     []IETHDKGSetConfirmationLengthFuncCall
	mutex       sync.Mutex
}

// SetConfirmationLength delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) SetConfirmationLength(v0 *bind.TransactOpts, v1 uint16) (*types.Transaction, error) {
	r0, r1 := m.SetConfirmationLengthFunc.nextHook()(v0, v1)
	m.SetConfirmationLengthFunc.appendCall(IETHDKGSetConfirmationLengthFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SetConfirmationLength method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGSetConfirmationLengthFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint16) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetConfirmationLength method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGSetConfirmationLengthFunc) PushHook(hook func(*bind.TransactOpts, uint16) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGSetConfirmationLengthFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint16) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGSetConfirmationLengthFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint16) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGSetConfirmationLengthFunc) nextHook() func(*bind.TransactOpts, uint16) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGSetConfirmationLengthFunc) appendCall(r0 IETHDKGSetConfirmationLengthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGSetConfirmationLengthFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGSetConfirmationLengthFunc) History() []IETHDKGSetConfirmationLengthFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGSetConfirmationLengthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGSetConfirmationLengthFuncCall is an object that describes an
// invocation of method SetConfirmationLength on an instance of MockIETHDKG.
type IETHDKGSetConfirmationLengthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint16
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGSetConfirmationLengthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGSetConfirmationLengthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGSetCustomAliceNetHeightFunc describes the behavior when the
// SetCustomAliceNetHeight method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGSetCustomAliceNetHeightFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IETHDKGSetCustomAliceNetHeightFuncCall
	mutex       sync.Mutex
}

// SetCustomAliceNetHeight delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) SetCustomAliceNetHeight(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.SetCustomAliceNetHeightFunc.nextHook()(v0, v1)
	m.SetCustomAliceNetHeightFunc.appendCall(IETHDKGSetCustomAliceNetHeightFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SetCustomAliceNetHeight method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGSetCustomAliceNetHeightFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetCustomAliceNetHeight method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGSetCustomAliceNetHeightFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGSetCustomAliceNetHeightFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGSetCustomAliceNetHeightFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGSetCustomAliceNetHeightFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGSetCustomAliceNetHeightFunc) appendCall(r0 IETHDKGSetCustomAliceNetHeightFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGSetCustomAliceNetHeightFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGSetCustomAliceNetHeightFunc) History() []IETHDKGSetCustomAliceNetHeightFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGSetCustomAliceNetHeightFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGSetCustomAliceNetHeightFuncCall is an object that describes an
// invocation of method SetCustomAliceNetHeight on an instance of
// MockIETHDKG.
type IETHDKGSetCustomAliceNetHeightFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGSetCustomAliceNetHeightFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGSetCustomAliceNetHeightFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGSetPhaseLengthFunc describes the behavior when the SetPhaseLength
// method of the parent MockIETHDKG instance is invoked.
type IETHDKGSetPhaseLengthFunc struct {
	defaultHook func(*bind.TransactOpts, uint16) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint16) (*types.Transaction, error)
	history     []IETHDKGSetPhaseLengthFuncCall
	mutex       sync.Mutex
}

// SetPhaseLength delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) SetPhaseLength(v0 *bind.TransactOpts, v1 uint16) (*types.Transaction, error) {
	r0, r1 := m.SetPhaseLengthFunc.nextHook()(v0, v1)
	m.SetPhaseLengthFunc.appendCall(IETHDKGSetPhaseLengthFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetPhaseLength
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGSetPhaseLengthFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint16) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetPhaseLength method of the parent MockIETHDKG instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IETHDKGSetPhaseLengthFunc) PushHook(hook func(*bind.TransactOpts, uint16) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGSetPhaseLengthFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint16) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGSetPhaseLengthFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint16) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGSetPhaseLengthFunc) nextHook() func(*bind.TransactOpts, uint16) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGSetPhaseLengthFunc) appendCall(r0 IETHDKGSetPhaseLengthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGSetPhaseLengthFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGSetPhaseLengthFunc) History() []IETHDKGSetPhaseLengthFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGSetPhaseLengthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGSetPhaseLengthFuncCall is an object that describes an invocation
// of method SetPhaseLength on an instance of MockIETHDKG.
type IETHDKGSetPhaseLengthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint16
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGSetPhaseLengthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGSetPhaseLengthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGSubmitGPKJFunc describes the behavior when the SubmitGPKJ method
// of the parent MockIETHDKG instance is invoked.
type IETHDKGSubmitGPKJFunc struct {
	defaultHook func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error)
	history     []IETHDKGSubmitGPKJFuncCall
	mutex       sync.Mutex
}

// SubmitGPKJ delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIETHDKG) SubmitGPKJ(v0 *bind.TransactOpts, v1 [4]*big.Int) (*types.Transaction, error) {
	r0, r1 := m.SubmitGPKJFunc.nextHook()(v0, v1)
	m.SubmitGPKJFunc.appendCall(IETHDKGSubmitGPKJFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SubmitGPKJ method of
// the parent MockIETHDKG instance is invoked and the hook queue is empty.
func (f *IETHDKGSubmitGPKJFunc) SetDefaultHook(hook func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SubmitGPKJ method of the parent MockIETHDKG instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IETHDKGSubmitGPKJFunc) PushHook(hook func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGSubmitGPKJFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGSubmitGPKJFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGSubmitGPKJFunc) nextHook() func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGSubmitGPKJFunc) appendCall(r0 IETHDKGSubmitGPKJFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGSubmitGPKJFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGSubmitGPKJFunc) History() []IETHDKGSubmitGPKJFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGSubmitGPKJFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGSubmitGPKJFuncCall is an object that describes an invocation of
// method SubmitGPKJ on an instance of MockIETHDKG.
type IETHDKGSubmitGPKJFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [4]*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGSubmitGPKJFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGSubmitGPKJFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGSubmitKeyShareFunc describes the behavior when the SubmitKeyShare
// method of the parent MockIETHDKG instance is invoked.
type IETHDKGSubmitKeyShareFunc struct {
	defaultHook func(*bind.TransactOpts, [2]*big.Int, [2]*big.Int, [4]*big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, [2]*big.Int, [2]*big.Int, [4]*big.Int) (*types.Transaction, error)
	history     []IETHDKGSubmitKeyShareFuncCall
	mutex       sync.Mutex
}

// SubmitKeyShare delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) SubmitKeyShare(v0 *bind.TransactOpts, v1 [2]*big.Int, v2 [2]*big.Int, v3 [4]*big.Int) (*types.Transaction, error) {
	r0, r1 := m.SubmitKeyShareFunc.nextHook()(v0, v1, v2, v3)
	m.SubmitKeyShareFunc.appendCall(IETHDKGSubmitKeyShareFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SubmitKeyShare
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGSubmitKeyShareFunc) SetDefaultHook(hook func(*bind.TransactOpts, [2]*big.Int, [2]*big.Int, [4]*big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SubmitKeyShare method of the parent MockIETHDKG instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IETHDKGSubmitKeyShareFunc) PushHook(hook func(*bind.TransactOpts, [2]*big.Int, [2]*big.Int, [4]*big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGSubmitKeyShareFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, [2]*big.Int, [2]*big.Int, [4]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGSubmitKeyShareFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, [2]*big.Int, [2]*big.Int, [4]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGSubmitKeyShareFunc) nextHook() func(*bind.TransactOpts, [2]*big.Int, [2]*big.Int, [4]*big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGSubmitKeyShareFunc) appendCall(r0 IETHDKGSubmitKeyShareFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGSubmitKeyShareFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGSubmitKeyShareFunc) History() []IETHDKGSubmitKeyShareFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGSubmitKeyShareFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGSubmitKeyShareFuncCall is an object that describes an invocation
// of method SubmitKeyShare on an instance of MockIETHDKG.
type IETHDKGSubmitKeyShareFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [2]*big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 [2]*big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 [4]*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGSubmitKeyShareFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGSubmitKeyShareFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGSubmitMasterPublicKeyFunc describes the behavior when the
// SubmitMasterPublicKey method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGSubmitMasterPublicKeyFunc struct {
	defaultHook func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error)
	history     []IETHDKGSubmitMasterPublicKeyFuncCall
	mutex       sync.Mutex
}

// SubmitMasterPublicKey delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) SubmitMasterPublicKey(v0 *bind.TransactOpts, v1 [4]*big.Int) (*types.Transaction, error) {
	r0, r1 := m.SubmitMasterPublicKeyFunc.nextHook()(v0, v1)
	m.SubmitMasterPublicKeyFunc.appendCall(IETHDKGSubmitMasterPublicKeyFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SubmitMasterPublicKey method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGSubmitMasterPublicKeyFunc) SetDefaultHook(hook func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SubmitMasterPublicKey method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGSubmitMasterPublicKeyFunc) PushHook(hook func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGSubmitMasterPublicKeyFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGSubmitMasterPublicKeyFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IETHDKGSubmitMasterPublicKeyFunc) nextHook() func(*bind.TransactOpts, [4]*big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGSubmitMasterPublicKeyFunc) appendCall(r0 IETHDKGSubmitMasterPublicKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGSubmitMasterPublicKeyFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGSubmitMasterPublicKeyFunc) History() []IETHDKGSubmitMasterPublicKeyFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGSubmitMasterPublicKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGSubmitMasterPublicKeyFuncCall is an object that describes an
// invocation of method SubmitMasterPublicKey on an instance of MockIETHDKG.
type IETHDKGSubmitMasterPublicKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [4]*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGSubmitMasterPublicKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGSubmitMasterPublicKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGWatchAddressRegisteredFunc describes the behavior when the
// WatchAddressRegistered method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGWatchAddressRegisteredFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ETHDKGAddressRegistered) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ETHDKGAddressRegistered) (event.Subscription, error)
	history     []IETHDKGWatchAddressRegisteredFuncCall
	mutex       sync.Mutex
}

// WatchAddressRegistered delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) WatchAddressRegistered(v0 *bind.WatchOpts, v1 chan<- *bindings.ETHDKGAddressRegistered) (event.Subscription, error) {
	r0, r1 := m.WatchAddressRegisteredFunc.nextHook()(v0, v1)
	m.WatchAddressRegisteredFunc.appendCall(IETHDKGWatchAddressRegisteredFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchAddressRegistered method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGWatchAddressRegisteredFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGAddressRegistered) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchAddressRegistered method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGWatchAddressRegisteredFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGAddressRegistered) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGWatchAddressRegisteredFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGAddressRegistered) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGWatchAddressRegisteredFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGAddressRegistered) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IETHDKGWatchAddressRegisteredFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ETHDKGAddressRegistered) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGWatchAddressRegisteredFunc) appendCall(r0 IETHDKGWatchAddressRegisteredFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGWatchAddressRegisteredFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGWatchAddressRegisteredFunc) History() []IETHDKGWatchAddressRegisteredFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGWatchAddressRegisteredFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGWatchAddressRegisteredFuncCall is an object that describes an
// invocation of method WatchAddressRegistered on an instance of
// MockIETHDKG.
type IETHDKGWatchAddressRegisteredFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ETHDKGAddressRegistered
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGWatchAddressRegisteredFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGWatchAddressRegisteredFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGWatchGPKJSubmissionCompleteFunc describes the behavior when the
// WatchGPKJSubmissionComplete method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGWatchGPKJSubmissionCompleteFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ETHDKGGPKJSubmissionComplete) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ETHDKGGPKJSubmissionComplete) (event.Subscription, error)
	history     []IETHDKGWatchGPKJSubmissionCompleteFuncCall
	mutex       sync.Mutex
}

// WatchGPKJSubmissionComplete delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) WatchGPKJSubmissionComplete(v0 *bind.WatchOpts, v1 chan<- *bindings.ETHDKGGPKJSubmissionComplete) (event.Subscription, error) {
	r0, r1 := m.WatchGPKJSubmissionCompleteFunc.nextHook()(v0, v1)
	m.WatchGPKJSubmissionCompleteFunc.appendCall(IETHDKGWatchGPKJSubmissionCompleteFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchGPKJSubmissionComplete method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGWatchGPKJSubmissionCompleteFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGGPKJSubmissionComplete) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchGPKJSubmissionComplete method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGWatchGPKJSubmissionCompleteFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGGPKJSubmissionComplete) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGWatchGPKJSubmissionCompleteFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGGPKJSubmissionComplete) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGWatchGPKJSubmissionCompleteFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGGPKJSubmissionComplete) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IETHDKGWatchGPKJSubmissionCompleteFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ETHDKGGPKJSubmissionComplete) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGWatchGPKJSubmissionCompleteFunc) appendCall(r0 IETHDKGWatchGPKJSubmissionCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGWatchGPKJSubmissionCompleteFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGWatchGPKJSubmissionCompleteFunc) History() []IETHDKGWatchGPKJSubmissionCompleteFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGWatchGPKJSubmissionCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGWatchGPKJSubmissionCompleteFuncCall is an object that describes an
// invocation of method WatchGPKJSubmissionComplete on an instance of
// MockIETHDKG.
type IETHDKGWatchGPKJSubmissionCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ETHDKGGPKJSubmissionComplete
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGWatchGPKJSubmissionCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGWatchGPKJSubmissionCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGWatchInitializedFunc describes the behavior when the
// WatchInitialized method of the parent MockIETHDKG instance is invoked.
type IETHDKGWatchInitializedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ETHDKGInitialized) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ETHDKGInitialized) (event.Subscription, error)
	history     []IETHDKGWatchInitializedFuncCall
	mutex       sync.Mutex
}

// WatchInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIETHDKG) WatchInitialized(v0 *bind.WatchOpts, v1 chan<- *bindings.ETHDKGInitialized) (event.Subscription, error) {
	r0, r1 := m.WatchInitializedFunc.nextHook()(v0, v1)
	m.WatchInitializedFunc.appendCall(IETHDKGWatchInitializedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchInitialized
// method of the parent MockIETHDKG instance is invoked and the hook queue
// is empty.
func (f *IETHDKGWatchInitializedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGInitialized) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchInitialized method of the parent MockIETHDKG instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IETHDKGWatchInitializedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGInitialized) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGWatchInitializedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGInitialized) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGWatchInitializedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGInitialized) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IETHDKGWatchInitializedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ETHDKGInitialized) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGWatchInitializedFunc) appendCall(r0 IETHDKGWatchInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGWatchInitializedFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGWatchInitializedFunc) History() []IETHDKGWatchInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGWatchInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGWatchInitializedFuncCall is an object that describes an invocation
// of method WatchInitialized on an instance of MockIETHDKG.
type IETHDKGWatchInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ETHDKGInitialized
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGWatchInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGWatchInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGWatchKeyShareSubmissionCompleteFunc describes the behavior when
// the WatchKeyShareSubmissionComplete method of the parent MockIETHDKG
// instance is invoked.
type IETHDKGWatchKeyShareSubmissionCompleteFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmissionComplete) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmissionComplete) (event.Subscription, error)
	history     []IETHDKGWatchKeyShareSubmissionCompleteFuncCall
	mutex       sync.Mutex
}

// WatchKeyShareSubmissionComplete delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) WatchKeyShareSubmissionComplete(v0 *bind.WatchOpts, v1 chan<- *bindings.ETHDKGKeyShareSubmissionComplete) (event.Subscription, error) {
	r0, r1 := m.WatchKeyShareSubmissionCompleteFunc.nextHook()(v0, v1)
	m.WatchKeyShareSubmissionCompleteFunc.appendCall(IETHDKGWatchKeyShareSubmissionCompleteFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchKeyShareSubmissionComplete method of the parent MockIETHDKG instance
// is invoked and the hook queue is empty.
func (f *IETHDKGWatchKeyShareSubmissionCompleteFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmissionComplete) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchKeyShareSubmissionComplete method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGWatchKeyShareSubmissionCompleteFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmissionComplete) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGWatchKeyShareSubmissionCompleteFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmissionComplete) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGWatchKeyShareSubmissionCompleteFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmissionComplete) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IETHDKGWatchKeyShareSubmissionCompleteFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmissionComplete) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGWatchKeyShareSubmissionCompleteFunc) appendCall(r0 IETHDKGWatchKeyShareSubmissionCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IETHDKGWatchKeyShareSubmissionCompleteFuncCall objects describing the
// invocations of this function.
func (f *IETHDKGWatchKeyShareSubmissionCompleteFunc) History() []IETHDKGWatchKeyShareSubmissionCompleteFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGWatchKeyShareSubmissionCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGWatchKeyShareSubmissionCompleteFuncCall is an object that
// describes an invocation of method WatchKeyShareSubmissionComplete on an
// instance of MockIETHDKG.
type IETHDKGWatchKeyShareSubmissionCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ETHDKGKeyShareSubmissionComplete
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGWatchKeyShareSubmissionCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGWatchKeyShareSubmissionCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGWatchKeyShareSubmittedFunc describes the behavior when the
// WatchKeyShareSubmitted method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGWatchKeyShareSubmittedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmitted) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmitted) (event.Subscription, error)
	history     []IETHDKGWatchKeyShareSubmittedFuncCall
	mutex       sync.Mutex
}

// WatchKeyShareSubmitted delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) WatchKeyShareSubmitted(v0 *bind.WatchOpts, v1 chan<- *bindings.ETHDKGKeyShareSubmitted) (event.Subscription, error) {
	r0, r1 := m.WatchKeyShareSubmittedFunc.nextHook()(v0, v1)
	m.WatchKeyShareSubmittedFunc.appendCall(IETHDKGWatchKeyShareSubmittedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchKeyShareSubmitted method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGWatchKeyShareSubmittedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmitted) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchKeyShareSubmitted method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGWatchKeyShareSubmittedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmitted) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGWatchKeyShareSubmittedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmitted) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGWatchKeyShareSubmittedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmitted) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IETHDKGWatchKeyShareSubmittedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ETHDKGKeyShareSubmitted) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGWatchKeyShareSubmittedFunc) appendCall(r0 IETHDKGWatchKeyShareSubmittedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGWatchKeyShareSubmittedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGWatchKeyShareSubmittedFunc) History() []IETHDKGWatchKeyShareSubmittedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGWatchKeyShareSubmittedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGWatchKeyShareSubmittedFuncCall is an object that describes an
// invocation of method WatchKeyShareSubmitted on an instance of
// MockIETHDKG.
type IETHDKGWatchKeyShareSubmittedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ETHDKGKeyShareSubmitted
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGWatchKeyShareSubmittedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGWatchKeyShareSubmittedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGWatchMPKSetFunc describes the behavior when the WatchMPKSet method
// of the parent MockIETHDKG instance is invoked.
type IETHDKGWatchMPKSetFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ETHDKGMPKSet) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ETHDKGMPKSet) (event.Subscription, error)
	history     []IETHDKGWatchMPKSetFuncCall
	mutex       sync.Mutex
}

// WatchMPKSet delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIETHDKG) WatchMPKSet(v0 *bind.WatchOpts, v1 chan<- *bindings.ETHDKGMPKSet) (event.Subscription, error) {
	r0, r1 := m.WatchMPKSetFunc.nextHook()(v0, v1)
	m.WatchMPKSetFunc.appendCall(IETHDKGWatchMPKSetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchMPKSet method
// of the parent MockIETHDKG instance is invoked and the hook queue is
// empty.
func (f *IETHDKGWatchMPKSetFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGMPKSet) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchMPKSet method of the parent MockIETHDKG instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IETHDKGWatchMPKSetFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGMPKSet) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGWatchMPKSetFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGMPKSet) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGWatchMPKSetFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGMPKSet) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IETHDKGWatchMPKSetFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ETHDKGMPKSet) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGWatchMPKSetFunc) appendCall(r0 IETHDKGWatchMPKSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGWatchMPKSetFuncCall objects
// describing the invocations of this function.
func (f *IETHDKGWatchMPKSetFunc) History() []IETHDKGWatchMPKSetFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGWatchMPKSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGWatchMPKSetFuncCall is an object that describes an invocation of
// method WatchMPKSet on an instance of MockIETHDKG.
type IETHDKGWatchMPKSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ETHDKGMPKSet
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGWatchMPKSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGWatchMPKSetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGWatchRegistrationCompleteFunc describes the behavior when the
// WatchRegistrationComplete method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGWatchRegistrationCompleteFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationComplete) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationComplete) (event.Subscription, error)
	history     []IETHDKGWatchRegistrationCompleteFuncCall
	mutex       sync.Mutex
}

// WatchRegistrationComplete delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) WatchRegistrationComplete(v0 *bind.WatchOpts, v1 chan<- *bindings.ETHDKGRegistrationComplete) (event.Subscription, error) {
	r0, r1 := m.WatchRegistrationCompleteFunc.nextHook()(v0, v1)
	m.WatchRegistrationCompleteFunc.appendCall(IETHDKGWatchRegistrationCompleteFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchRegistrationComplete method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGWatchRegistrationCompleteFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationComplete) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchRegistrationComplete method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGWatchRegistrationCompleteFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationComplete) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGWatchRegistrationCompleteFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationComplete) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGWatchRegistrationCompleteFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationComplete) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IETHDKGWatchRegistrationCompleteFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationComplete) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGWatchRegistrationCompleteFunc) appendCall(r0 IETHDKGWatchRegistrationCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGWatchRegistrationCompleteFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGWatchRegistrationCompleteFunc) History() []IETHDKGWatchRegistrationCompleteFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGWatchRegistrationCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGWatchRegistrationCompleteFuncCall is an object that describes an
// invocation of method WatchRegistrationComplete on an instance of
// MockIETHDKG.
type IETHDKGWatchRegistrationCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ETHDKGRegistrationComplete
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGWatchRegistrationCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGWatchRegistrationCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGWatchRegistrationOpenedFunc describes the behavior when the
// WatchRegistrationOpened method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGWatchRegistrationOpenedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationOpened) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationOpened) (event.Subscription, error)
	history     []IETHDKGWatchRegistrationOpenedFuncCall
	mutex       sync.Mutex
}

// WatchRegistrationOpened delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) WatchRegistrationOpened(v0 *bind.WatchOpts, v1 chan<- *bindings.ETHDKGRegistrationOpened) (event.Subscription, error) {
	r0, r1 := m.WatchRegistrationOpenedFunc.nextHook()(v0, v1)
	m.WatchRegistrationOpenedFunc.appendCall(IETHDKGWatchRegistrationOpenedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchRegistrationOpened method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGWatchRegistrationOpenedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationOpened) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchRegistrationOpened method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGWatchRegistrationOpenedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationOpened) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGWatchRegistrationOpenedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationOpened) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGWatchRegistrationOpenedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationOpened) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IETHDKGWatchRegistrationOpenedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ETHDKGRegistrationOpened) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGWatchRegistrationOpenedFunc) appendCall(r0 IETHDKGWatchRegistrationOpenedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGWatchRegistrationOpenedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGWatchRegistrationOpenedFunc) History() []IETHDKGWatchRegistrationOpenedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGWatchRegistrationOpenedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGWatchRegistrationOpenedFuncCall is an object that describes an
// invocation of method WatchRegistrationOpened on an instance of
// MockIETHDKG.
type IETHDKGWatchRegistrationOpenedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ETHDKGRegistrationOpened
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGWatchRegistrationOpenedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGWatchRegistrationOpenedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGWatchShareDistributionCompleteFunc describes the behavior when the
// WatchShareDistributionComplete method of the parent MockIETHDKG instance
// is invoked.
type IETHDKGWatchShareDistributionCompleteFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ETHDKGShareDistributionComplete) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ETHDKGShareDistributionComplete) (event.Subscription, error)
	history     []IETHDKGWatchShareDistributionCompleteFuncCall
	mutex       sync.Mutex
}

// WatchShareDistributionComplete delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) WatchShareDistributionComplete(v0 *bind.WatchOpts, v1 chan<- *bindings.ETHDKGShareDistributionComplete) (event.Subscription, error) {
	r0, r1 := m.WatchShareDistributionCompleteFunc.nextHook()(v0, v1)
	m.WatchShareDistributionCompleteFunc.appendCall(IETHDKGWatchShareDistributionCompleteFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchShareDistributionComplete method of the parent MockIETHDKG instance
// is invoked and the hook queue is empty.
func (f *IETHDKGWatchShareDistributionCompleteFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGShareDistributionComplete) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchShareDistributionComplete method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGWatchShareDistributionCompleteFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGShareDistributionComplete) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGWatchShareDistributionCompleteFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGShareDistributionComplete) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGWatchShareDistributionCompleteFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGShareDistributionComplete) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IETHDKGWatchShareDistributionCompleteFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ETHDKGShareDistributionComplete) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGWatchShareDistributionCompleteFunc) appendCall(r0 IETHDKGWatchShareDistributionCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IETHDKGWatchShareDistributionCompleteFuncCall objects describing the
// invocations of this function.
func (f *IETHDKGWatchShareDistributionCompleteFunc) History() []IETHDKGWatchShareDistributionCompleteFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGWatchShareDistributionCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGWatchShareDistributionCompleteFuncCall is an object that describes
// an invocation of method WatchShareDistributionComplete on an instance of
// MockIETHDKG.
type IETHDKGWatchShareDistributionCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ETHDKGShareDistributionComplete
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGWatchShareDistributionCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGWatchShareDistributionCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGWatchSharesDistributedFunc describes the behavior when the
// WatchSharesDistributed method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGWatchSharesDistributedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ETHDKGSharesDistributed) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ETHDKGSharesDistributed) (event.Subscription, error)
	history     []IETHDKGWatchSharesDistributedFuncCall
	mutex       sync.Mutex
}

// WatchSharesDistributed delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) WatchSharesDistributed(v0 *bind.WatchOpts, v1 chan<- *bindings.ETHDKGSharesDistributed) (event.Subscription, error) {
	r0, r1 := m.WatchSharesDistributedFunc.nextHook()(v0, v1)
	m.WatchSharesDistributedFunc.appendCall(IETHDKGWatchSharesDistributedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchSharesDistributed method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGWatchSharesDistributedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGSharesDistributed) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchSharesDistributed method of the parent MockIETHDKG instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IETHDKGWatchSharesDistributedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGSharesDistributed) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGWatchSharesDistributedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGSharesDistributed) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGWatchSharesDistributedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGSharesDistributed) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IETHDKGWatchSharesDistributedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ETHDKGSharesDistributed) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGWatchSharesDistributedFunc) appendCall(r0 IETHDKGWatchSharesDistributedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGWatchSharesDistributedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGWatchSharesDistributedFunc) History() []IETHDKGWatchSharesDistributedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGWatchSharesDistributedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGWatchSharesDistributedFuncCall is an object that describes an
// invocation of method WatchSharesDistributed on an instance of
// MockIETHDKG.
type IETHDKGWatchSharesDistributedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ETHDKGSharesDistributed
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGWatchSharesDistributedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGWatchSharesDistributedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGWatchValidatorMemberAddedFunc describes the behavior when the
// WatchValidatorMemberAdded method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGWatchValidatorMemberAddedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorMemberAdded) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorMemberAdded) (event.Subscription, error)
	history     []IETHDKGWatchValidatorMemberAddedFuncCall
	mutex       sync.Mutex
}

// WatchValidatorMemberAdded delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) WatchValidatorMemberAdded(v0 *bind.WatchOpts, v1 chan<- *bindings.ETHDKGValidatorMemberAdded) (event.Subscription, error) {
	r0, r1 := m.WatchValidatorMemberAddedFunc.nextHook()(v0, v1)
	m.WatchValidatorMemberAddedFunc.appendCall(IETHDKGWatchValidatorMemberAddedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchValidatorMemberAdded method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGWatchValidatorMemberAddedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorMemberAdded) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchValidatorMemberAdded method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGWatchValidatorMemberAddedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorMemberAdded) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGWatchValidatorMemberAddedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorMemberAdded) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGWatchValidatorMemberAddedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorMemberAdded) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IETHDKGWatchValidatorMemberAddedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorMemberAdded) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGWatchValidatorMemberAddedFunc) appendCall(r0 IETHDKGWatchValidatorMemberAddedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGWatchValidatorMemberAddedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGWatchValidatorMemberAddedFunc) History() []IETHDKGWatchValidatorMemberAddedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGWatchValidatorMemberAddedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGWatchValidatorMemberAddedFuncCall is an object that describes an
// invocation of method WatchValidatorMemberAdded on an instance of
// MockIETHDKG.
type IETHDKGWatchValidatorMemberAddedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ETHDKGValidatorMemberAdded
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGWatchValidatorMemberAddedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGWatchValidatorMemberAddedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IETHDKGWatchValidatorSetCompletedFunc describes the behavior when the
// WatchValidatorSetCompleted method of the parent MockIETHDKG instance is
// invoked.
type IETHDKGWatchValidatorSetCompletedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorSetCompleted) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorSetCompleted) (event.Subscription, error)
	history     []IETHDKGWatchValidatorSetCompletedFuncCall
	mutex       sync.Mutex
}

// WatchValidatorSetCompleted delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIETHDKG) WatchValidatorSetCompleted(v0 *bind.WatchOpts, v1 chan<- *bindings.ETHDKGValidatorSetCompleted) (event.Subscription, error) {
	r0, r1 := m.WatchValidatorSetCompletedFunc.nextHook()(v0, v1)
	m.WatchValidatorSetCompletedFunc.appendCall(IETHDKGWatchValidatorSetCompletedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchValidatorSetCompleted method of the parent MockIETHDKG instance is
// invoked and the hook queue is empty.
func (f *IETHDKGWatchValidatorSetCompletedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorSetCompleted) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchValidatorSetCompleted method of the parent MockIETHDKG instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IETHDKGWatchValidatorSetCompletedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorSetCompleted) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IETHDKGWatchValidatorSetCompletedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorSetCompleted) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IETHDKGWatchValidatorSetCompletedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorSetCompleted) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IETHDKGWatchValidatorSetCompletedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ETHDKGValidatorSetCompleted) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IETHDKGWatchValidatorSetCompletedFunc) appendCall(r0 IETHDKGWatchValidatorSetCompletedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IETHDKGWatchValidatorSetCompletedFuncCall
// objects describing the invocations of this function.
func (f *IETHDKGWatchValidatorSetCompletedFunc) History() []IETHDKGWatchValidatorSetCompletedFuncCall {
	f.mutex.Lock()
	history := make([]IETHDKGWatchValidatorSetCompletedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IETHDKGWatchValidatorSetCompletedFuncCall is an object that describes an
// invocation of method WatchValidatorSetCompleted on an instance of
// MockIETHDKG.
type IETHDKGWatchValidatorSetCompletedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ETHDKGValidatorSetCompleted
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IETHDKGWatchValidatorSetCompletedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IETHDKGWatchValidatorSetCompletedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockIGovernance is a mock implementation of the IGovernance interface
// (from the package github.com/alicenet/alicenet/bridge/bindings) used for
// unit testing.
type MockIGovernance struct {
	// FilterSnapshotTakenFunc is an instance of a mock function object
	// controlling the behavior of the method FilterSnapshotTaken.
	FilterSnapshotTakenFunc *IGovernanceFilterSnapshotTakenFunc
	// FilterValueUpdatedFunc is an instance of a mock function object
	// controlling the behavior of the method FilterValueUpdated.
	FilterValueUpdatedFunc *IGovernanceFilterValueUpdatedFunc
	// ParseSnapshotTakenFunc is an instance of a mock function object
	// controlling the behavior of the method ParseSnapshotTaken.
	ParseSnapshotTakenFunc *IGovernanceParseSnapshotTakenFunc
	// ParseValueUpdatedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseValueUpdated.
	ParseValueUpdatedFunc *IGovernanceParseValueUpdatedFunc
	// UpdateValueFunc is an instance of a mock function object controlling
	// the behavior of the method UpdateValue.
	UpdateValueFunc *IGovernanceUpdateValueFunc
	// WatchSnapshotTakenFunc is an instance of a mock function object
	// controlling the behavior of the method WatchSnapshotTaken.
	WatchSnapshotTakenFunc *IGovernanceWatchSnapshotTakenFunc
	// WatchValueUpdatedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchValueUpdated.
	WatchValueUpdatedFunc *IGovernanceWatchValueUpdatedFunc
}

// NewMockIGovernance creates a new mock of the IGovernance interface. All
// methods return zero values for all results, unless overwritten.
func NewMockIGovernance() *MockIGovernance {
	return &MockIGovernance{
		FilterSnapshotTakenFunc: &IGovernanceFilterSnapshotTakenFunc{
			defaultHook: func(*bind.FilterOpts, []*big.Int, []common.Address) (r0 *bindings.GovernanceSnapshotTakenIterator, r1 error) {
				return
			},
		},
		FilterValueUpdatedFunc: &IGovernanceFilterValueUpdatedFunc{
			defaultHook: func(*bind.FilterOpts, []*big.Int, []*big.Int, [][32]byte) (r0 *bindings.GovernanceValueUpdatedIterator, r1 error) {
				return
			},
		},
		ParseSnapshotTakenFunc: &IGovernanceParseSnapshotTakenFunc{
			defaultHook: func(types.Log) (r0 *bindings.GovernanceSnapshotTaken, r1 error) {
				return
			},
		},
		ParseValueUpdatedFunc: &IGovernanceParseValueUpdatedFunc{
			defaultHook: func(types.Log) (r0 *bindings.GovernanceValueUpdated, r1 error) {
				return
			},
		},
		UpdateValueFunc: &IGovernanceUpdateValueFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int, [32]byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		WatchSnapshotTakenFunc: &IGovernanceWatchSnapshotTakenFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.GovernanceSnapshotTaken, []*big.Int, []common.Address) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchValueUpdatedFunc: &IGovernanceWatchValueUpdatedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.GovernanceValueUpdated, []*big.Int, []*big.Int, [][32]byte) (r0 event.Subscription, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockIGovernance creates a new mock of the IGovernance interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockIGovernance() *MockIGovernance {
	return &MockIGovernance{
		FilterSnapshotTakenFunc: &IGovernanceFilterSnapshotTakenFunc{
			defaultHook: func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.GovernanceSnapshotTakenIterator, error) {
				panic("unexpected invocation of MockIGovernance.FilterSnapshotTaken")
			},
		},
		FilterValueUpdatedFunc: &IGovernanceFilterValueUpdatedFunc{
			defaultHook: func(*bind.FilterOpts, []*big.Int, []*big.Int, [][32]byte) (*bindings.GovernanceValueUpdatedIterator, error) {
				panic("unexpected invocation of MockIGovernance.FilterValueUpdated")
			},
		},
		ParseSnapshotTakenFunc: &IGovernanceParseSnapshotTakenFunc{
			defaultHook: func(types.Log) (*bindings.GovernanceSnapshotTaken, error) {
				panic("unexpected invocation of MockIGovernance.ParseSnapshotTaken")
			},
		},
		ParseValueUpdatedFunc: &IGovernanceParseValueUpdatedFunc{
			defaultHook: func(types.Log) (*bindings.GovernanceValueUpdated, error) {
				panic("unexpected invocation of MockIGovernance.ParseValueUpdated")
			},
		},
		UpdateValueFunc: &IGovernanceUpdateValueFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int, [32]byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIGovernance.UpdateValue")
			},
		},
		WatchSnapshotTakenFunc: &IGovernanceWatchSnapshotTakenFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.GovernanceSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error) {
				panic("unexpected invocation of MockIGovernance.WatchSnapshotTaken")
			},
		},
		WatchValueUpdatedFunc: &IGovernanceWatchValueUpdatedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.GovernanceValueUpdated, []*big.Int, []*big.Int, [][32]byte) (event.Subscription, error) {
				panic("unexpected invocation of MockIGovernance.WatchValueUpdated")
			},
		},
	}
}

// NewMockIGovernanceFrom creates a new mock of the MockIGovernance
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockIGovernanceFrom(i bindings.IGovernance) *MockIGovernance {
	return &MockIGovernance{
		FilterSnapshotTakenFunc: &IGovernanceFilterSnapshotTakenFunc{
			defaultHook: i.FilterSnapshotTaken,
		},
		FilterValueUpdatedFunc: &IGovernanceFilterValueUpdatedFunc{
			defaultHook: i.FilterValueUpdated,
		},
		ParseSnapshotTakenFunc: &IGovernanceParseSnapshotTakenFunc{
			defaultHook: i.ParseSnapshotTaken,
		},
		ParseValueUpdatedFunc: &IGovernanceParseValueUpdatedFunc{
			defaultHook: i.ParseValueUpdated,
		},
		UpdateValueFunc: &IGovernanceUpdateValueFunc{
			defaultHook: i.UpdateValue,
		},
		WatchSnapshotTakenFunc: &IGovernanceWatchSnapshotTakenFunc{
			defaultHook: i.WatchSnapshotTaken,
		},
		WatchValueUpdatedFunc: &IGovernanceWatchValueUpdatedFunc{
			defaultHook: i.WatchValueUpdated,
		},
	}
}

// IGovernanceFilterSnapshotTakenFunc describes the behavior when the
// FilterSnapshotTaken method of the parent MockIGovernance instance is
// invoked.
type IGovernanceFilterSnapshotTakenFunc struct {
	defaultHook func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.GovernanceSnapshotTakenIterator, error)
	hooks       []func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.GovernanceSnapshotTakenIterator, error)
	history     []IGovernanceFilterSnapshotTakenFuncCall
	mutex       sync.Mutex
}

// FilterSnapshotTaken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIGovernance) FilterSnapshotTaken(v0 *bind.FilterOpts, v1 []*big.Int, v2 []common.Address) (*bindings.GovernanceSnapshotTakenIterator, error) {
	r0, r1 := m.FilterSnapshotTakenFunc.nextHook()(v0, v1, v2)
	m.FilterSnapshotTakenFunc.appendCall(IGovernanceFilterSnapshotTakenFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterSnapshotTaken
// method of the parent MockIGovernance instance is invoked and the hook
// queue is empty.
func (f *IGovernanceFilterSnapshotTakenFunc) SetDefaultHook(hook func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.GovernanceSnapshotTakenIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterSnapshotTaken method of the parent MockIGovernance instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IGovernanceFilterSnapshotTakenFunc) PushHook(hook func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.GovernanceSnapshotTakenIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IGovernanceFilterSnapshotTakenFunc) SetDefaultReturn(r0 *bindings.GovernanceSnapshotTakenIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.GovernanceSnapshotTakenIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IGovernanceFilterSnapshotTakenFunc) PushReturn(r0 *bindings.GovernanceSnapshotTakenIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.GovernanceSnapshotTakenIterator, error) {
		return r0, r1
	})
}

func (f *IGovernanceFilterSnapshotTakenFunc) nextHook() func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.GovernanceSnapshotTakenIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IGovernanceFilterSnapshotTakenFunc) appendCall(r0 IGovernanceFilterSnapshotTakenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IGovernanceFilterSnapshotTakenFuncCall
// objects describing the invocations of this function.
func (f *IGovernanceFilterSnapshotTakenFunc) History() []IGovernanceFilterSnapshotTakenFuncCall {
	f.mutex.Lock()
	history := make([]IGovernanceFilterSnapshotTakenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IGovernanceFilterSnapshotTakenFuncCall is an object that describes an
// invocation of method FilterSnapshotTaken on an instance of
// MockIGovernance.
type IGovernanceFilterSnapshotTakenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.GovernanceSnapshotTakenIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IGovernanceFilterSnapshotTakenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IGovernanceFilterSnapshotTakenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IGovernanceFilterValueUpdatedFunc describes the behavior when the
// FilterValueUpdated method of the parent MockIGovernance instance is
// invoked.
type IGovernanceFilterValueUpdatedFunc struct {
	defaultHook func(*bind.FilterOpts, []*big.Int, []*big.Int, [][32]byte) (*bindings.GovernanceValueUpdatedIterator, error)
	hooks       []func(*bind.FilterOpts, []*big.Int, []*big.Int, [][32]byte) (*bindings.GovernanceValueUpdatedIterator, error)
	history     []IGovernanceFilterValueUpdatedFuncCall
	mutex       sync.Mutex
}

// FilterValueUpdated delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIGovernance) FilterValueUpdated(v0 *bind.FilterOpts, v1 []*big.Int, v2 []*big.Int, v3 [][32]byte) (*bindings.GovernanceValueUpdatedIterator, error) {
	r0, r1 := m.FilterValueUpdatedFunc.nextHook()(v0, v1, v2, v3)
	m.FilterValueUpdatedFunc.appendCall(IGovernanceFilterValueUpdatedFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterValueUpdated
// method of the parent MockIGovernance instance is invoked and the hook
// queue is empty.
func (f *IGovernanceFilterValueUpdatedFunc) SetDefaultHook(hook func(*bind.FilterOpts, []*big.Int, []*big.Int, [][32]byte) (*bindings.GovernanceValueUpdatedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterValueUpdated method of the parent MockIGovernance instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IGovernanceFilterValueUpdatedFunc) PushHook(hook func(*bind.FilterOpts, []*big.Int, []*big.Int, [][32]byte) (*bindings.GovernanceValueUpdatedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IGovernanceFilterValueUpdatedFunc) SetDefaultReturn(r0 *bindings.GovernanceValueUpdatedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []*big.Int, []*big.Int, [][32]byte) (*bindings.GovernanceValueUpdatedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IGovernanceFilterValueUpdatedFunc) PushReturn(r0 *bindings.GovernanceValueUpdatedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []*big.Int, []*big.Int, [][32]byte) (*bindings.GovernanceValueUpdatedIterator, error) {
		return r0, r1
	})
}

func (f *IGovernanceFilterValueUpdatedFunc) nextHook() func(*bind.FilterOpts, []*big.Int, []*big.Int, [][32]byte) (*bindings.GovernanceValueUpdatedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IGovernanceFilterValueUpdatedFunc) appendCall(r0 IGovernanceFilterValueUpdatedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IGovernanceFilterValueUpdatedFuncCall
// objects describing the invocations of this function.
func (f *IGovernanceFilterValueUpdatedFunc) History() []IGovernanceFilterValueUpdatedFuncCall {
	f.mutex.Lock()
	history := make([]IGovernanceFilterValueUpdatedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IGovernanceFilterValueUpdatedFuncCall is an object that describes an
// invocation of method FilterValueUpdated on an instance of
// MockIGovernance.
type IGovernanceFilterValueUpdatedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 [][32]byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.GovernanceValueUpdatedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IGovernanceFilterValueUpdatedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IGovernanceFilterValueUpdatedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IGovernanceParseSnapshotTakenFunc describes the behavior when the
// ParseSnapshotTaken method of the parent MockIGovernance instance is
// invoked.
type IGovernanceParseSnapshotTakenFunc struct {
	defaultHook func(types.Log) (*bindings.GovernanceSnapshotTaken, error)
	hooks       []func(types.Log) (*bindings.GovernanceSnapshotTaken, error)
	history     []IGovernanceParseSnapshotTakenFuncCall
	mutex       sync.Mutex
}

// ParseSnapshotTaken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIGovernance) ParseSnapshotTaken(v0 types.Log) (*bindings.GovernanceSnapshotTaken, error) {
	r0, r1 := m.ParseSnapshotTakenFunc.nextHook()(v0)
	m.ParseSnapshotTakenFunc.appendCall(IGovernanceParseSnapshotTakenFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseSnapshotTaken
// method of the parent MockIGovernance instance is invoked and the hook
// queue is empty.
func (f *IGovernanceParseSnapshotTakenFunc) SetDefaultHook(hook func(types.Log) (*bindings.GovernanceSnapshotTaken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseSnapshotTaken method of the parent MockIGovernance instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IGovernanceParseSnapshotTakenFunc) PushHook(hook func(types.Log) (*bindings.GovernanceSnapshotTaken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IGovernanceParseSnapshotTakenFunc) SetDefaultReturn(r0 *bindings.GovernanceSnapshotTaken, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.GovernanceSnapshotTaken, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IGovernanceParseSnapshotTakenFunc) PushReturn(r0 *bindings.GovernanceSnapshotTaken, r1 error) {
	f.PushHook(func(types.Log) (*bindings.GovernanceSnapshotTaken, error) {
		return r0, r1
	})
}

func (f *IGovernanceParseSnapshotTakenFunc) nextHook() func(types.Log) (*bindings.GovernanceSnapshotTaken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IGovernanceParseSnapshotTakenFunc) appendCall(r0 IGovernanceParseSnapshotTakenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IGovernanceParseSnapshotTakenFuncCall
// objects describing the invocations of this function.
func (f *IGovernanceParseSnapshotTakenFunc) History() []IGovernanceParseSnapshotTakenFuncCall {
	f.mutex.Lock()
	history := make([]IGovernanceParseSnapshotTakenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IGovernanceParseSnapshotTakenFuncCall is an object that describes an
// invocation of method ParseSnapshotTaken on an instance of
// MockIGovernance.
type IGovernanceParseSnapshotTakenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.GovernanceSnapshotTaken
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IGovernanceParseSnapshotTakenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IGovernanceParseSnapshotTakenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IGovernanceParseValueUpdatedFunc describes the behavior when the
// ParseValueUpdated method of the parent MockIGovernance instance is
// invoked.
type IGovernanceParseValueUpdatedFunc struct {
	defaultHook func(types.Log) (*bindings.GovernanceValueUpdated, error)
	hooks       []func(types.Log) (*bindings.GovernanceValueUpdated, error)
	history     []IGovernanceParseValueUpdatedFuncCall
	mutex       sync.Mutex
}

// ParseValueUpdated delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIGovernance) ParseValueUpdated(v0 types.Log) (*bindings.GovernanceValueUpdated, error) {
	r0, r1 := m.ParseValueUpdatedFunc.nextHook()(v0)
	m.ParseValueUpdatedFunc.appendCall(IGovernanceParseValueUpdatedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseValueUpdated
// method of the parent MockIGovernance instance is invoked and the hook
// queue is empty.
func (f *IGovernanceParseValueUpdatedFunc) SetDefaultHook(hook func(types.Log) (*bindings.GovernanceValueUpdated, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseValueUpdated method of the parent MockIGovernance instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IGovernanceParseValueUpdatedFunc) PushHook(hook func(types.Log) (*bindings.GovernanceValueUpdated, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IGovernanceParseValueUpdatedFunc) SetDefaultReturn(r0 *bindings.GovernanceValueUpdated, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.GovernanceValueUpdated, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IGovernanceParseValueUpdatedFunc) PushReturn(r0 *bindings.GovernanceValueUpdated, r1 error) {
	f.PushHook(func(types.Log) (*bindings.GovernanceValueUpdated, error) {
		return r0, r1
	})
}

func (f *IGovernanceParseValueUpdatedFunc) nextHook() func(types.Log) (*bindings.GovernanceValueUpdated, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IGovernanceParseValueUpdatedFunc) appendCall(r0 IGovernanceParseValueUpdatedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IGovernanceParseValueUpdatedFuncCall
// objects describing the invocations of this function.
func (f *IGovernanceParseValueUpdatedFunc) History() []IGovernanceParseValueUpdatedFuncCall {
	f.mutex.Lock()
	history := make([]IGovernanceParseValueUpdatedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IGovernanceParseValueUpdatedFuncCall is an object that describes an
// invocation of method ParseValueUpdated on an instance of MockIGovernance.
type IGovernanceParseValueUpdatedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.GovernanceValueUpdated
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IGovernanceParseValueUpdatedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IGovernanceParseValueUpdatedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IGovernanceUpdateValueFunc describes the behavior when the UpdateValue
// method of the parent MockIGovernance instance is invoked.
type IGovernanceUpdateValueFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int, *big.Int, [32]byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int, *big.Int, [32]byte) (*types.Transaction, error)
	history     []IGovernanceUpdateValueFuncCall
	mutex       sync.Mutex
}

// UpdateValue delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIGovernance) UpdateValue(v0 *bind.TransactOpts, v1 *big.Int, v2 *big.Int, v3 [32]byte) (*types.Transaction, error) {
	r0, r1 := m.UpdateValueFunc.nextHook()(v0, v1, v2, v3)
	m.UpdateValueFunc.appendCall(IGovernanceUpdateValueFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateValue method
// of the parent MockIGovernance instance is invoked and the hook queue is
// empty.
func (f *IGovernanceUpdateValueFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int, *big.Int, [32]byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateValue method of the parent MockIGovernance instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IGovernanceUpdateValueFunc) PushHook(hook func(*bind.TransactOpts, *big.Int, *big.Int, [32]byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IGovernanceUpdateValueFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int, *big.Int, [32]byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IGovernanceUpdateValueFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int, *big.Int, [32]byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IGovernanceUpdateValueFunc) nextHook() func(*bind.TransactOpts, *big.Int, *big.Int, [32]byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IGovernanceUpdateValueFunc) appendCall(r0 IGovernanceUpdateValueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IGovernanceUpdateValueFuncCall objects
// describing the invocations of this function.
func (f *IGovernanceUpdateValueFunc) History() []IGovernanceUpdateValueFuncCall {
	f.mutex.Lock()
	history := make([]IGovernanceUpdateValueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IGovernanceUpdateValueFuncCall is an object that describes an invocation
// of method UpdateValue on an instance of MockIGovernance.
type IGovernanceUpdateValueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 [32]byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IGovernanceUpdateValueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IGovernanceUpdateValueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IGovernanceWatchSnapshotTakenFunc describes the behavior when the
// WatchSnapshotTaken method of the parent MockIGovernance instance is
// invoked.
type IGovernanceWatchSnapshotTakenFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.GovernanceSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.GovernanceSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error)
	history     []IGovernanceWatchSnapshotTakenFuncCall
	mutex       sync.Mutex
}

// WatchSnapshotTaken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIGovernance) WatchSnapshotTaken(v0 *bind.WatchOpts, v1 chan<- *bindings.GovernanceSnapshotTaken, v2 []*big.Int, v3 []common.Address) (event.Subscription, error) {
	r0, r1 := m.WatchSnapshotTakenFunc.nextHook()(v0, v1, v2, v3)
	m.WatchSnapshotTakenFunc.appendCall(IGovernanceWatchSnapshotTakenFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchSnapshotTaken
// method of the parent MockIGovernance instance is invoked and the hook
// queue is empty.
func (f *IGovernanceWatchSnapshotTakenFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.GovernanceSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchSnapshotTaken method of the parent MockIGovernance instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IGovernanceWatchSnapshotTakenFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.GovernanceSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IGovernanceWatchSnapshotTakenFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.GovernanceSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IGovernanceWatchSnapshotTakenFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.GovernanceSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IGovernanceWatchSnapshotTakenFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.GovernanceSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IGovernanceWatchSnapshotTakenFunc) appendCall(r0 IGovernanceWatchSnapshotTakenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IGovernanceWatchSnapshotTakenFuncCall
// objects describing the invocations of this function.
func (f *IGovernanceWatchSnapshotTakenFunc) History() []IGovernanceWatchSnapshotTakenFuncCall {
	f.mutex.Lock()
	history := make([]IGovernanceWatchSnapshotTakenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IGovernanceWatchSnapshotTakenFuncCall is an object that describes an
// invocation of method WatchSnapshotTaken on an instance of
// MockIGovernance.
type IGovernanceWatchSnapshotTakenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.GovernanceSnapshotTaken
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IGovernanceWatchSnapshotTakenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IGovernanceWatchSnapshotTakenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IGovernanceWatchValueUpdatedFunc describes the behavior when the
// WatchValueUpdated method of the parent MockIGovernance instance is
// invoked.
type IGovernanceWatchValueUpdatedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.GovernanceValueUpdated, []*big.Int, []*big.Int, [][32]byte) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.GovernanceValueUpdated, []*big.Int, []*big.Int, [][32]byte) (event.Subscription, error)
	history     []IGovernanceWatchValueUpdatedFuncCall
	mutex       sync.Mutex
}

// WatchValueUpdated delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIGovernance) WatchValueUpdated(v0 *bind.WatchOpts, v1 chan<- *bindings.GovernanceValueUpdated, v2 []*big.Int, v3 []*big.Int, v4 [][32]byte) (event.Subscription, error) {
	r0, r1 := m.WatchValueUpdatedFunc.nextHook()(v0, v1, v2, v3, v4)
	m.WatchValueUpdatedFunc.appendCall(IGovernanceWatchValueUpdatedFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchValueUpdated
// method of the parent MockIGovernance instance is invoked and the hook
// queue is empty.
func (f *IGovernanceWatchValueUpdatedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.GovernanceValueUpdated, []*big.Int, []*big.Int, [][32]byte) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchValueUpdated method of the parent MockIGovernance instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IGovernanceWatchValueUpdatedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.GovernanceValueUpdated, []*big.Int, []*big.Int, [][32]byte) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IGovernanceWatchValueUpdatedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.GovernanceValueUpdated, []*big.Int, []*big.Int, [][32]byte) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IGovernanceWatchValueUpdatedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.GovernanceValueUpdated, []*big.Int, []*big.Int, [][32]byte) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IGovernanceWatchValueUpdatedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.GovernanceValueUpdated, []*big.Int, []*big.Int, [][32]byte) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IGovernanceWatchValueUpdatedFunc) appendCall(r0 IGovernanceWatchValueUpdatedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IGovernanceWatchValueUpdatedFuncCall
// objects describing the invocations of this function.
func (f *IGovernanceWatchValueUpdatedFunc) History() []IGovernanceWatchValueUpdatedFuncCall {
	f.mutex.Lock()
	history := make([]IGovernanceWatchValueUpdatedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IGovernanceWatchValueUpdatedFuncCall is an object that describes an
// invocation of method WatchValueUpdated on an instance of MockIGovernance.
type IGovernanceWatchValueUpdatedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.GovernanceValueUpdated
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []*big.Int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 [][32]byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IGovernanceWatchValueUpdatedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IGovernanceWatchValueUpdatedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockIPublicStaking is a mock implementation of the IPublicStaking
// interface (from the package github.com/alicenet/alicenet/bridge/bindings)
// used for unit testing.
type MockIPublicStaking struct {
	// ApproveFunc is an instance of a mock function object controlling the
	// behavior of the method Approve.
	ApproveFunc *IPublicStakingApproveFunc
	// BalanceOfFunc is an instance of a mock function object controlling
	// the behavior of the method BalanceOf.
	BalanceOfFunc *IPublicStakingBalanceOfFunc
	// BurnFunc is an instance of a mock function object controlling the
	// behavior of the method Burn.
	BurnFunc *IPublicStakingBurnFunc
	// BurnToFunc is an instance of a mock function object controlling the
	// behavior of the method BurnTo.
	BurnToFunc *IPublicStakingBurnToFunc
	// CircuitBreakerStateFunc is an instance of a mock function object
	// controlling the behavior of the method CircuitBreakerState.
	CircuitBreakerStateFunc *IPublicStakingCircuitBreakerStateFunc
	// CollectAllProfitsFunc is an instance of a mock function object
	// controlling the behavior of the method CollectAllProfits.
	CollectAllProfitsFunc *IPublicStakingCollectAllProfitsFunc
	// CollectAllProfitsToFunc is an instance of a mock function object
	// controlling the behavior of the method CollectAllProfitsTo.
	CollectAllProfitsToFunc *IPublicStakingCollectAllProfitsToFunc
	// CollectEthFunc is an instance of a mock function object controlling
	// the behavior of the method CollectEth.
	CollectEthFunc *IPublicStakingCollectEthFunc
	// CollectEthToFunc is an instance of a mock function object controlling
	// the behavior of the method CollectEthTo.
	CollectEthToFunc *IPublicStakingCollectEthToFunc
	// CollectTokenFunc is an instance of a mock function object controlling
	// the behavior of the method CollectToken.
	CollectTokenFunc *IPublicStakingCollectTokenFunc
	// CollectTokenToFunc is an instance of a mock function object
	// controlling the behavior of the method CollectTokenTo.
	CollectTokenToFunc *IPublicStakingCollectTokenToFunc
	// DepositEthFunc is an instance of a mock function object controlling
	// the behavior of the method DepositEth.
	DepositEthFunc *IPublicStakingDepositEthFunc
	// DepositTokenFunc is an instance of a mock function object controlling
	// the behavior of the method DepositToken.
	DepositTokenFunc *IPublicStakingDepositTokenFunc
	// EstimateAllProfitsFunc is an instance of a mock function object
	// controlling the behavior of the method EstimateAllProfits.
	EstimateAllProfitsFunc *IPublicStakingEstimateAllProfitsFunc
	// EstimateEthCollectionFunc is an instance of a mock function object
	// controlling the behavior of the method EstimateEthCollection.
	EstimateEthCollectionFunc *IPublicStakingEstimateEthCollectionFunc
	// EstimateExcessEthFunc is an instance of a mock function object
	// controlling the behavior of the method EstimateExcessEth.
	EstimateExcessEthFunc *IPublicStakingEstimateExcessEthFunc
	// EstimateExcessTokenFunc is an instance of a mock function object
	// controlling the behavior of the method EstimateExcessToken.
	EstimateExcessTokenFunc *IPublicStakingEstimateExcessTokenFunc
	// EstimateTokenCollectionFunc is an instance of a mock function object
	// controlling the behavior of the method EstimateTokenCollection.
	EstimateTokenCollectionFunc *IPublicStakingEstimateTokenCollectionFunc
	// FilterApprovalFunc is an instance of a mock function object
	// controlling the behavior of the method FilterApproval.
	FilterApprovalFunc *IPublicStakingFilterApprovalFunc
	// FilterApprovalForAllFunc is an instance of a mock function object
	// controlling the behavior of the method FilterApprovalForAll.
	FilterApprovalForAllFunc *IPublicStakingFilterApprovalForAllFunc
	// FilterInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method FilterInitialized.
	FilterInitializedFunc *IPublicStakingFilterInitializedFunc
	// FilterTransferFunc is an instance of a mock function object
	// controlling the behavior of the method FilterTransfer.
	FilterTransferFunc *IPublicStakingFilterTransferFunc
	// GetAccumulatorScaleFactorFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetAccumulatorScaleFactor.
	GetAccumulatorScaleFactorFunc *IPublicStakingGetAccumulatorScaleFactorFunc
	// GetApprovedFunc is an instance of a mock function object controlling
	// the behavior of the method GetApproved.
	GetApprovedFunc *IPublicStakingGetApprovedFunc
	// GetEthAccumulatorFunc is an instance of a mock function object
	// controlling the behavior of the method GetEthAccumulator.
	GetEthAccumulatorFunc *IPublicStakingGetEthAccumulatorFunc
	// GetLatestMintedPositionIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetLatestMintedPositionID.
	GetLatestMintedPositionIDFunc *IPublicStakingGetLatestMintedPositionIDFunc
	// GetMaxGovernanceLockFunc is an instance of a mock function object
	// controlling the behavior of the method GetMaxGovernanceLock.
	GetMaxGovernanceLockFunc *IPublicStakingGetMaxGovernanceLockFunc
	// GetMaxMintLockFunc is an instance of a mock function object
	// controlling the behavior of the method GetMaxMintLock.
	GetMaxMintLockFunc *IPublicStakingGetMaxMintLockFunc
	// GetMetamorphicContractAddressFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetMetamorphicContractAddress.
	GetMetamorphicContractAddressFunc *IPublicStakingGetMetamorphicContractAddressFunc
	// GetPositionFunc is an instance of a mock function object controlling
	// the behavior of the method GetPosition.
	GetPositionFunc *IPublicStakingGetPositionFunc
	// GetTokenAccumulatorFunc is an instance of a mock function object
	// controlling the behavior of the method GetTokenAccumulator.
	GetTokenAccumulatorFunc *IPublicStakingGetTokenAccumulatorFunc
	// GetTotalReserveALCAFunc is an instance of a mock function object
	// controlling the behavior of the method GetTotalReserveALCA.
	GetTotalReserveALCAFunc *IPublicStakingGetTotalReserveALCAFunc
	// GetTotalReserveEthFunc is an instance of a mock function object
	// controlling the behavior of the method GetTotalReserveEth.
	GetTotalReserveEthFunc *IPublicStakingGetTotalReserveEthFunc
	// GetTotalSharesFunc is an instance of a mock function object
	// controlling the behavior of the method GetTotalShares.
	GetTotalSharesFunc *IPublicStakingGetTotalSharesFunc
	// InitializeFunc is an instance of a mock function object controlling
	// the behavior of the method Initialize.
	InitializeFunc *IPublicStakingInitializeFunc
	// IsApprovedForAllFunc is an instance of a mock function object
	// controlling the behavior of the method IsApprovedForAll.
	IsApprovedForAllFunc *IPublicStakingIsApprovedForAllFunc
	// LockOwnPositionFunc is an instance of a mock function object
	// controlling the behavior of the method LockOwnPosition.
	LockOwnPositionFunc *IPublicStakingLockOwnPositionFunc
	// LockPositionFunc is an instance of a mock function object controlling
	// the behavior of the method LockPosition.
	LockPositionFunc *IPublicStakingLockPositionFunc
	// LockWithdrawFunc is an instance of a mock function object controlling
	// the behavior of the method LockWithdraw.
	LockWithdrawFunc *IPublicStakingLockWithdrawFunc
	// MintFunc is an instance of a mock function object controlling the
	// behavior of the method Mint.
	MintFunc *IPublicStakingMintFunc
	// MintToFunc is an instance of a mock function object controlling the
	// behavior of the method MintTo.
	MintToFunc *IPublicStakingMintToFunc
	// NameFunc is an instance of a mock function object controlling the
	// behavior of the method Name.
	NameFunc *IPublicStakingNameFunc
	// OwnerOfFunc is an instance of a mock function object controlling the
	// behavior of the method OwnerOf.
	OwnerOfFunc *IPublicStakingOwnerOfFunc
	// ParseApprovalFunc is an instance of a mock function object
	// controlling the behavior of the method ParseApproval.
	ParseApprovalFunc *IPublicStakingParseApprovalFunc
	// ParseApprovalForAllFunc is an instance of a mock function object
	// controlling the behavior of the method ParseApprovalForAll.
	ParseApprovalForAllFunc *IPublicStakingParseApprovalForAllFunc
	// ParseInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseInitialized.
	ParseInitializedFunc *IPublicStakingParseInitializedFunc
	// ParseTransferFunc is an instance of a mock function object
	// controlling the behavior of the method ParseTransfer.
	ParseTransferFunc *IPublicStakingParseTransferFunc
	// SafeTransferFromFunc is an instance of a mock function object
	// controlling the behavior of the method SafeTransferFrom.
	SafeTransferFromFunc *IPublicStakingSafeTransferFromFunc
	// SafeTransferFrom0Func is an instance of a mock function object
	// controlling the behavior of the method SafeTransferFrom0.
	SafeTransferFrom0Func *IPublicStakingSafeTransferFrom0Func
	// SetApprovalForAllFunc is an instance of a mock function object
	// controlling the behavior of the method SetApprovalForAll.
	SetApprovalForAllFunc *IPublicStakingSetApprovalForAllFunc
	// SkimExcessEthFunc is an instance of a mock function object
	// controlling the behavior of the method SkimExcessEth.
	SkimExcessEthFunc *IPublicStakingSkimExcessEthFunc
	// SkimExcessTokenFunc is an instance of a mock function object
	// controlling the behavior of the method SkimExcessToken.
	SkimExcessTokenFunc *IPublicStakingSkimExcessTokenFunc
	// SupportsInterfaceFunc is an instance of a mock function object
	// controlling the behavior of the method SupportsInterface.
	SupportsInterfaceFunc *IPublicStakingSupportsInterfaceFunc
	// SymbolFunc is an instance of a mock function object controlling the
	// behavior of the method Symbol.
	SymbolFunc *IPublicStakingSymbolFunc
	// TokenByIndexFunc is an instance of a mock function object controlling
	// the behavior of the method TokenByIndex.
	TokenByIndexFunc *IPublicStakingTokenByIndexFunc
	// TokenOfOwnerByIndexFunc is an instance of a mock function object
	// controlling the behavior of the method TokenOfOwnerByIndex.
	TokenOfOwnerByIndexFunc *IPublicStakingTokenOfOwnerByIndexFunc
	// TokenURIFunc is an instance of a mock function object controlling the
	// behavior of the method TokenURI.
	TokenURIFunc *IPublicStakingTokenURIFunc
	// TotalSupplyFunc is an instance of a mock function object controlling
	// the behavior of the method TotalSupply.
	TotalSupplyFunc *IPublicStakingTotalSupplyFunc
	// TransferFromFunc is an instance of a mock function object controlling
	// the behavior of the method TransferFrom.
	TransferFromFunc *IPublicStakingTransferFromFunc
	// TripCBFunc is an instance of a mock function object controlling the
	// behavior of the method TripCB.
	TripCBFunc *IPublicStakingTripCBFunc
	// WatchApprovalFunc is an instance of a mock function object
	// controlling the behavior of the method WatchApproval.
	WatchApprovalFunc *IPublicStakingWatchApprovalFunc
	// WatchApprovalForAllFunc is an instance of a mock function object
	// controlling the behavior of the method WatchApprovalForAll.
	WatchApprovalForAllFunc *IPublicStakingWatchApprovalForAllFunc
	// WatchInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchInitialized.
	WatchInitializedFunc *IPublicStakingWatchInitializedFunc
	// WatchTransferFunc is an instance of a mock function object
	// controlling the behavior of the method WatchTransfer.
	WatchTransferFunc *IPublicStakingWatchTransferFunc
}

// NewMockIPublicStaking creates a new mock of the IPublicStaking interface.
// All methods return zero values for all results, unless overwritten.
func NewMockIPublicStaking() *MockIPublicStaking {
	return &MockIPublicStaking{
		ApproveFunc: &IPublicStakingApproveFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		BalanceOfFunc: &IPublicStakingBalanceOfFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (r0 *big.Int, r1 error) {
				return
			},
		},
		BurnFunc: &IPublicStakingBurnFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		BurnToFunc: &IPublicStakingBurnToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CircuitBreakerStateFunc: &IPublicStakingCircuitBreakerStateFunc{
			defaultHook: func(*bind.CallOpts) (r0 bool, r1 error) {
				return
			},
		},
		CollectAllProfitsFunc: &IPublicStakingCollectAllProfitsFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CollectAllProfitsToFunc: &IPublicStakingCollectAllProfitsToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CollectEthFunc: &IPublicStakingCollectEthFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CollectEthToFunc: &IPublicStakingCollectEthToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CollectTokenFunc: &IPublicStakingCollectTokenFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CollectTokenToFunc: &IPublicStakingCollectTokenToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DepositEthFunc: &IPublicStakingDepositEthFunc{
			defaultHook: func(*bind.TransactOpts, uint8) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DepositTokenFunc: &IPublicStakingDepositTokenFunc{
			defaultHook: func(*bind.TransactOpts, uint8, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		EstimateAllProfitsFunc: &IPublicStakingEstimateAllProfitsFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 struct {
				PayoutEth   *big.Int
				PayoutToken *big.Int
			}, r1 error) {
				return
			},
		},
		EstimateEthCollectionFunc: &IPublicStakingEstimateEthCollectionFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		EstimateExcessEthFunc: &IPublicStakingEstimateExcessEthFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		EstimateExcessTokenFunc: &IPublicStakingEstimateExcessTokenFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		EstimateTokenCollectionFunc: &IPublicStakingEstimateTokenCollectionFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		FilterApprovalFunc: &IPublicStakingFilterApprovalFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (r0 *bindings.PublicStakingApprovalIterator, r1 error) {
				return
			},
		},
		FilterApprovalForAllFunc: &IPublicStakingFilterApprovalForAllFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address) (r0 *bindings.PublicStakingApprovalForAllIterator, r1 error) {
				return
			},
		},
		FilterInitializedFunc: &IPublicStakingFilterInitializedFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.PublicStakingInitializedIterator, r1 error) {
				return
			},
		},
		FilterTransferFunc: &IPublicStakingFilterTransferFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (r0 *bindings.PublicStakingTransferIterator, r1 error) {
				return
			},
		},
		GetAccumulatorScaleFactorFunc: &IPublicStakingGetAccumulatorScaleFactorFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetApprovedFunc: &IPublicStakingGetApprovedFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 common.Address, r1 error) {
				return
			},
		},
		GetEthAccumulatorFunc: &IPublicStakingGetEthAccumulatorFunc{
			defaultHook: func(*bind.CallOpts) (r0 struct {
				Accumulator *big.Int
				Slush       *big.Int
			}, r1 error) {
				return
			},
		},
		GetLatestMintedPositionIDFunc: &IPublicStakingGetLatestMintedPositionIDFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetMaxGovernanceLockFunc: &IPublicStakingGetMaxGovernanceLockFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetMaxMintLockFunc: &IPublicStakingGetMaxMintLockFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetMetamorphicContractAddressFunc: &IPublicStakingGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (r0 common.Address, r1 error) {
				return
			},
		},
		GetPositionFunc: &IPublicStakingGetPositionFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 struct {
				Shares            *big.Int
				FreeAfter         *big.Int
				WithdrawFreeAfter *big.Int
				AccumulatorEth    *big.Int
				AccumulatorToken  *big.Int
			}, r1 error) {
				return
			},
		},
		GetTokenAccumulatorFunc: &IPublicStakingGetTokenAccumulatorFunc{
			defaultHook: func(*bind.CallOpts) (r0 struct {
				Accumulator *big.Int
				Slush       *big.Int
			}, r1 error) {
				return
			},
		},
		GetTotalReserveALCAFunc: &IPublicStakingGetTotalReserveALCAFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetTotalReserveEthFunc: &IPublicStakingGetTotalReserveEthFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetTotalSharesFunc: &IPublicStakingGetTotalSharesFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		InitializeFunc: &IPublicStakingInitializeFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		IsApprovedForAllFunc: &IPublicStakingIsApprovedForAllFunc{
			defaultHook: func(*bind.CallOpts, common.Address, common.Address) (r0 bool, r1 error) {
				return
			},
		},
		LockOwnPositionFunc: &IPublicStakingLockOwnPositionFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		LockPositionFunc: &IPublicStakingLockPositionFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		LockWithdrawFunc: &IPublicStakingLockWithdrawFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		MintFunc: &IPublicStakingMintFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		MintToFunc: &IPublicStakingMintToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		NameFunc: &IPublicStakingNameFunc{
			defaultHook: func(*bind.CallOpts) (r0 string, r1 error) {
				return
			},
		},
		OwnerOfFunc: &IPublicStakingOwnerOfFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 common.Address, r1 error) {
				return
			},
		},
		ParseApprovalFunc: &IPublicStakingParseApprovalFunc{
			defaultHook: func(types.Log) (r0 *bindings.PublicStakingApproval, r1 error) {
				return
			},
		},
		ParseApprovalForAllFunc: &IPublicStakingParseApprovalForAllFunc{
			defaultHook: func(types.Log) (r0 *bindings.PublicStakingApprovalForAll, r1 error) {
				return
			},
		},
		ParseInitializedFunc: &IPublicStakingParseInitializedFunc{
			defaultHook: func(types.Log) (r0 *bindings.PublicStakingInitialized, r1 error) {
				return
			},
		},
		ParseTransferFunc: &IPublicStakingParseTransferFunc{
			defaultHook: func(types.Log) (r0 *bindings.PublicStakingTransfer, r1 error) {
				return
			},
		},
		SafeTransferFromFunc: &IPublicStakingSafeTransferFromFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SafeTransferFrom0Func: &IPublicStakingSafeTransferFrom0Func{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SetApprovalForAllFunc: &IPublicStakingSetApprovalForAllFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, bool) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SkimExcessEthFunc: &IPublicStakingSkimExcessEthFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SkimExcessTokenFunc: &IPublicStakingSkimExcessTokenFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SupportsInterfaceFunc: &IPublicStakingSupportsInterfaceFunc{
			defaultHook: func(*bind.CallOpts, [4]byte) (r0 bool, r1 error) {
				return
			},
		},
		SymbolFunc: &IPublicStakingSymbolFunc{
			defaultHook: func(*bind.CallOpts) (r0 string, r1 error) {
				return
			},
		},
		TokenByIndexFunc: &IPublicStakingTokenByIndexFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		TokenOfOwnerByIndexFunc: &IPublicStakingTokenOfOwnerByIndexFunc{
			defaultHook: func(*bind.CallOpts, common.Address, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		TokenURIFunc: &IPublicStakingTokenURIFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 string, r1 error) {
				return
			},
		},
		TotalSupplyFunc: &IPublicStakingTotalSupplyFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		TransferFromFunc: &IPublicStakingTransferFromFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		TripCBFunc: &IPublicStakingTripCBFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		WatchApprovalFunc: &IPublicStakingWatchApprovalFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.PublicStakingApproval, []common.Address, []common.Address, []*big.Int) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchApprovalForAllFunc: &IPublicStakingWatchApprovalForAllFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.PublicStakingApprovalForAll, []common.Address, []common.Address) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchInitializedFunc: &IPublicStakingWatchInitializedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.PublicStakingInitialized) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchTransferFunc: &IPublicStakingWatchTransferFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.PublicStakingTransfer, []common.Address, []common.Address, []*big.Int) (r0 event.Subscription, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockIPublicStaking creates a new mock of the IPublicStaking
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockIPublicStaking() *MockIPublicStaking {
	return &MockIPublicStaking{
		ApproveFunc: &IPublicStakingApproveFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.Approve")
			},
		},
		BalanceOfFunc: &IPublicStakingBalanceOfFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.BalanceOf")
			},
		},
		BurnFunc: &IPublicStakingBurnFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.Burn")
			},
		},
		BurnToFunc: &IPublicStakingBurnToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.BurnTo")
			},
		},
		CircuitBreakerStateFunc: &IPublicStakingCircuitBreakerStateFunc{
			defaultHook: func(*bind.CallOpts) (bool, error) {
				panic("unexpected invocation of MockIPublicStaking.CircuitBreakerState")
			},
		},
		CollectAllProfitsFunc: &IPublicStakingCollectAllProfitsFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.CollectAllProfits")
			},
		},
		CollectAllProfitsToFunc: &IPublicStakingCollectAllProfitsToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.CollectAllProfitsTo")
			},
		},
		CollectEthFunc: &IPublicStakingCollectEthFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.CollectEth")
			},
		},
		CollectEthToFunc: &IPublicStakingCollectEthToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.CollectEthTo")
			},
		},
		CollectTokenFunc: &IPublicStakingCollectTokenFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.CollectToken")
			},
		},
		CollectTokenToFunc: &IPublicStakingCollectTokenToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.CollectTokenTo")
			},
		},
		DepositEthFunc: &IPublicStakingDepositEthFunc{
			defaultHook: func(*bind.TransactOpts, uint8) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.DepositEth")
			},
		},
		DepositTokenFunc: &IPublicStakingDepositTokenFunc{
			defaultHook: func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.DepositToken")
			},
		},
		EstimateAllProfitsFunc: &IPublicStakingEstimateAllProfitsFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (struct {
				PayoutEth   *big.Int
				PayoutToken *big.Int
			}, error) {
				panic("unexpected invocation of MockIPublicStaking.EstimateAllProfits")
			},
		},
		EstimateEthCollectionFunc: &IPublicStakingEstimateEthCollectionFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.EstimateEthCollection")
			},
		},
		EstimateExcessEthFunc: &IPublicStakingEstimateExcessEthFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.EstimateExcessEth")
			},
		},
		EstimateExcessTokenFunc: &IPublicStakingEstimateExcessTokenFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.EstimateExcessToken")
			},
		},
		EstimateTokenCollectionFunc: &IPublicStakingEstimateTokenCollectionFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.EstimateTokenCollection")
			},
		},
		FilterApprovalFunc: &IPublicStakingFilterApprovalFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingApprovalIterator, error) {
				panic("unexpected invocation of MockIPublicStaking.FilterApproval")
			},
		},
		FilterApprovalForAllFunc: &IPublicStakingFilterApprovalForAllFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.PublicStakingApprovalForAllIterator, error) {
				panic("unexpected invocation of MockIPublicStaking.FilterApprovalForAll")
			},
		},
		FilterInitializedFunc: &IPublicStakingFilterInitializedFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.PublicStakingInitializedIterator, error) {
				panic("unexpected invocation of MockIPublicStaking.FilterInitialized")
			},
		},
		FilterTransferFunc: &IPublicStakingFilterTransferFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingTransferIterator, error) {
				panic("unexpected invocation of MockIPublicStaking.FilterTransfer")
			},
		},
		GetAccumulatorScaleFactorFunc: &IPublicStakingGetAccumulatorScaleFactorFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.GetAccumulatorScaleFactor")
			},
		},
		GetApprovedFunc: &IPublicStakingGetApprovedFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (common.Address, error) {
				panic("unexpected invocation of MockIPublicStaking.GetApproved")
			},
		},
		GetEthAccumulatorFunc: &IPublicStakingGetEthAccumulatorFunc{
			defaultHook: func(*bind.CallOpts) (struct {
				Accumulator *big.Int
				Slush       *big.Int
			}, error) {
				panic("unexpected invocation of MockIPublicStaking.GetEthAccumulator")
			},
		},
		GetLatestMintedPositionIDFunc: &IPublicStakingGetLatestMintedPositionIDFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.GetLatestMintedPositionID")
			},
		},
		GetMaxGovernanceLockFunc: &IPublicStakingGetMaxGovernanceLockFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.GetMaxGovernanceLock")
			},
		},
		GetMaxMintLockFunc: &IPublicStakingGetMaxMintLockFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.GetMaxMintLock")
			},
		},
		GetMetamorphicContractAddressFunc: &IPublicStakingGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
				panic("unexpected invocation of MockIPublicStaking.GetMetamorphicContractAddress")
			},
		},
		GetPositionFunc: &IPublicStakingGetPositionFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (struct {
				Shares            *big.Int
				FreeAfter         *big.Int
				WithdrawFreeAfter *big.Int
				AccumulatorEth    *big.Int
				AccumulatorToken  *big.Int
			}, error) {
				panic("unexpected invocation of MockIPublicStaking.GetPosition")
			},
		},
		GetTokenAccumulatorFunc: &IPublicStakingGetTokenAccumulatorFunc{
			defaultHook: func(*bind.CallOpts) (struct {
				Accumulator *big.Int
				Slush       *big.Int
			}, error) {
				panic("unexpected invocation of MockIPublicStaking.GetTokenAccumulator")
			},
		},
		GetTotalReserveALCAFunc: &IPublicStakingGetTotalReserveALCAFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.GetTotalReserveALCA")
			},
		},
		GetTotalReserveEthFunc: &IPublicStakingGetTotalReserveEthFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.GetTotalReserveEth")
			},
		},
		GetTotalSharesFunc: &IPublicStakingGetTotalSharesFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.GetTotalShares")
			},
		},
		InitializeFunc: &IPublicStakingInitializeFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.Initialize")
			},
		},
		IsApprovedForAllFunc: &IPublicStakingIsApprovedForAllFunc{
			defaultHook: func(*bind.CallOpts, common.Address, common.Address) (bool, error) {
				panic("unexpected invocation of MockIPublicStaking.IsApprovedForAll")
			},
		},
		LockOwnPositionFunc: &IPublicStakingLockOwnPositionFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.LockOwnPosition")
			},
		},
		LockPositionFunc: &IPublicStakingLockPositionFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.LockPosition")
			},
		},
		LockWithdrawFunc: &IPublicStakingLockWithdrawFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.LockWithdraw")
			},
		},
		MintFunc: &IPublicStakingMintFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.Mint")
			},
		},
		MintToFunc: &IPublicStakingMintToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.MintTo")
			},
		},
		NameFunc: &IPublicStakingNameFunc{
			defaultHook: func(*bind.CallOpts) (string, error) {
				panic("unexpected invocation of MockIPublicStaking.Name")
			},
		},
		OwnerOfFunc: &IPublicStakingOwnerOfFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (common.Address, error) {
				panic("unexpected invocation of MockIPublicStaking.OwnerOf")
			},
		},
		ParseApprovalFunc: &IPublicStakingParseApprovalFunc{
			defaultHook: func(types.Log) (*bindings.PublicStakingApproval, error) {
				panic("unexpected invocation of MockIPublicStaking.ParseApproval")
			},
		},
		ParseApprovalForAllFunc: &IPublicStakingParseApprovalForAllFunc{
			defaultHook: func(types.Log) (*bindings.PublicStakingApprovalForAll, error) {
				panic("unexpected invocation of MockIPublicStaking.ParseApprovalForAll")
			},
		},
		ParseInitializedFunc: &IPublicStakingParseInitializedFunc{
			defaultHook: func(types.Log) (*bindings.PublicStakingInitialized, error) {
				panic("unexpected invocation of MockIPublicStaking.ParseInitialized")
			},
		},
		ParseTransferFunc: &IPublicStakingParseTransferFunc{
			defaultHook: func(types.Log) (*bindings.PublicStakingTransfer, error) {
				panic("unexpected invocation of MockIPublicStaking.ParseTransfer")
			},
		},
		SafeTransferFromFunc: &IPublicStakingSafeTransferFromFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.SafeTransferFrom")
			},
		},
		SafeTransferFrom0Func: &IPublicStakingSafeTransferFrom0Func{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.SafeTransferFrom0")
			},
		},
		SetApprovalForAllFunc: &IPublicStakingSetApprovalForAllFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.SetApprovalForAll")
			},
		},
		SkimExcessEthFunc: &IPublicStakingSkimExcessEthFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.SkimExcessEth")
			},
		},
		SkimExcessTokenFunc: &IPublicStakingSkimExcessTokenFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.SkimExcessToken")
			},
		},
		SupportsInterfaceFunc: &IPublicStakingSupportsInterfaceFunc{
			defaultHook: func(*bind.CallOpts, [4]byte) (bool, error) {
				panic("unexpected invocation of MockIPublicStaking.SupportsInterface")
			},
		},
		SymbolFunc: &IPublicStakingSymbolFunc{
			defaultHook: func(*bind.CallOpts) (string, error) {
				panic("unexpected invocation of MockIPublicStaking.Symbol")
			},
		},
		TokenByIndexFunc: &IPublicStakingTokenByIndexFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.TokenByIndex")
			},
		},
		TokenOfOwnerByIndexFunc: &IPublicStakingTokenOfOwnerByIndexFunc{
			defaultHook: func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.TokenOfOwnerByIndex")
			},
		},
		TokenURIFunc: &IPublicStakingTokenURIFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (string, error) {
				panic("unexpected invocation of MockIPublicStaking.TokenURI")
			},
		},
		TotalSupplyFunc: &IPublicStakingTotalSupplyFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIPublicStaking.TotalSupply")
			},
		},
		TransferFromFunc: &IPublicStakingTransferFromFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.TransferFrom")
			},
		},
		TripCBFunc: &IPublicStakingTripCBFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIPublicStaking.TripCB")
			},
		},
		WatchApprovalFunc: &IPublicStakingWatchApprovalFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.PublicStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
				panic("unexpected invocation of MockIPublicStaking.WatchApproval")
			},
		},
		WatchApprovalForAllFunc: &IPublicStakingWatchApprovalForAllFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.PublicStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error) {
				panic("unexpected invocation of MockIPublicStaking.WatchApprovalForAll")
			},
		},
		WatchInitializedFunc: &IPublicStakingWatchInitializedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.PublicStakingInitialized) (event.Subscription, error) {
				panic("unexpected invocation of MockIPublicStaking.WatchInitialized")
			},
		},
		WatchTransferFunc: &IPublicStakingWatchTransferFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.PublicStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
				panic("unexpected invocation of MockIPublicStaking.WatchTransfer")
			},
		},
	}
}

// NewMockIPublicStakingFrom creates a new mock of the MockIPublicStaking
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockIPublicStakingFrom(i bindings.IPublicStaking) *MockIPublicStaking {
	return &MockIPublicStaking{
		ApproveFunc: &IPublicStakingApproveFunc{
			defaultHook: i.Approve,
		},
		BalanceOfFunc: &IPublicStakingBalanceOfFunc{
			defaultHook: i.BalanceOf,
		},
		BurnFunc: &IPublicStakingBurnFunc{
			defaultHook: i.Burn,
		},
		BurnToFunc: &IPublicStakingBurnToFunc{
			defaultHook: i.BurnTo,
		},
		CircuitBreakerStateFunc: &IPublicStakingCircuitBreakerStateFunc{
			defaultHook: i.CircuitBreakerState,
		},
		CollectAllProfitsFunc: &IPublicStakingCollectAllProfitsFunc{
			defaultHook: i.CollectAllProfits,
		},
		CollectAllProfitsToFunc: &IPublicStakingCollectAllProfitsToFunc{
			defaultHook: i.CollectAllProfitsTo,
		},
		CollectEthFunc: &IPublicStakingCollectEthFunc{
			defaultHook: i.CollectEth,
		},
		CollectEthToFunc: &IPublicStakingCollectEthToFunc{
			defaultHook: i.CollectEthTo,
		},
		CollectTokenFunc: &IPublicStakingCollectTokenFunc{
			defaultHook: i.CollectToken,
		},
		CollectTokenToFunc: &IPublicStakingCollectTokenToFunc{
			defaultHook: i.CollectTokenTo,
		},
		DepositEthFunc: &IPublicStakingDepositEthFunc{
			defaultHook: i.DepositEth,
		},
		DepositTokenFunc: &IPublicStakingDepositTokenFunc{
			defaultHook: i.DepositToken,
		},
		EstimateAllProfitsFunc: &IPublicStakingEstimateAllProfitsFunc{
			defaultHook: i.EstimateAllProfits,
		},
		EstimateEthCollectionFunc: &IPublicStakingEstimateEthCollectionFunc{
			defaultHook: i.EstimateEthCollection,
		},
		EstimateExcessEthFunc: &IPublicStakingEstimateExcessEthFunc{
			defaultHook: i.EstimateExcessEth,
		},
		EstimateExcessTokenFunc: &IPublicStakingEstimateExcessTokenFunc{
			defaultHook: i.EstimateExcessToken,
		},
		EstimateTokenCollectionFunc: &IPublicStakingEstimateTokenCollectionFunc{
			defaultHook: i.EstimateTokenCollection,
		},
		FilterApprovalFunc: &IPublicStakingFilterApprovalFunc{
			defaultHook: i.FilterApproval,
		},
		FilterApprovalForAllFunc: &IPublicStakingFilterApprovalForAllFunc{
			defaultHook: i.FilterApprovalForAll,
		},
		FilterInitializedFunc: &IPublicStakingFilterInitializedFunc{
			defaultHook: i.FilterInitialized,
		},
		FilterTransferFunc: &IPublicStakingFilterTransferFunc{
			defaultHook: i.FilterTransfer,
		},
		GetAccumulatorScaleFactorFunc: &IPublicStakingGetAccumulatorScaleFactorFunc{
			defaultHook: i.GetAccumulatorScaleFactor,
		},
		GetApprovedFunc: &IPublicStakingGetApprovedFunc{
			defaultHook: i.GetApproved,
		},
		GetEthAccumulatorFunc: &IPublicStakingGetEthAccumulatorFunc{
			defaultHook: i.GetEthAccumulator,
		},
		GetLatestMintedPositionIDFunc: &IPublicStakingGetLatestMintedPositionIDFunc{
			defaultHook: i.GetLatestMintedPositionID,
		},
		GetMaxGovernanceLockFunc: &IPublicStakingGetMaxGovernanceLockFunc{
			defaultHook: i.GetMaxGovernanceLock,
		},
		GetMaxMintLockFunc: &IPublicStakingGetMaxMintLockFunc{
			defaultHook: i.GetMaxMintLock,
		},
		GetMetamorphicContractAddressFunc: &IPublicStakingGetMetamorphicContractAddressFunc{
			defaultHook: i.GetMetamorphicContractAddress,
		},
		GetPositionFunc: &IPublicStakingGetPositionFunc{
			defaultHook: i.GetPosition,
		},
		GetTokenAccumulatorFunc: &IPublicStakingGetTokenAccumulatorFunc{
			defaultHook: i.GetTokenAccumulator,
		},
		GetTotalReserveALCAFunc: &IPublicStakingGetTotalReserveALCAFunc{
			defaultHook: i.GetTotalReserveALCA,
		},
		GetTotalReserveEthFunc: &IPublicStakingGetTotalReserveEthFunc{
			defaultHook: i.GetTotalReserveEth,
		},
		GetTotalSharesFunc: &IPublicStakingGetTotalSharesFunc{
			defaultHook: i.GetTotalShares,
		},
		InitializeFunc: &IPublicStakingInitializeFunc{
			defaultHook: i.Initialize,
		},
		IsApprovedForAllFunc: &IPublicStakingIsApprovedForAllFunc{
			defaultHook: i.IsApprovedForAll,
		},
		LockOwnPositionFunc: &IPublicStakingLockOwnPositionFunc{
			defaultHook: i.LockOwnPosition,
		},
		LockPositionFunc: &IPublicStakingLockPositionFunc{
			defaultHook: i.LockPosition,
		},
		LockWithdrawFunc: &IPublicStakingLockWithdrawFunc{
			defaultHook: i.LockWithdraw,
		},
		MintFunc: &IPublicStakingMintFunc{
			defaultHook: i.Mint,
		},
		MintToFunc: &IPublicStakingMintToFunc{
			defaultHook: i.MintTo,
		},
		NameFunc: &IPublicStakingNameFunc{
			defaultHook: i.Name,
		},
		OwnerOfFunc: &IPublicStakingOwnerOfFunc{
			defaultHook: i.OwnerOf,
		},
		ParseApprovalFunc: &IPublicStakingParseApprovalFunc{
			defaultHook: i.ParseApproval,
		},
		ParseApprovalForAllFunc: &IPublicStakingParseApprovalForAllFunc{
			defaultHook: i.ParseApprovalForAll,
		},
		ParseInitializedFunc: &IPublicStakingParseInitializedFunc{
			defaultHook: i.ParseInitialized,
		},
		ParseTransferFunc: &IPublicStakingParseTransferFunc{
			defaultHook: i.ParseTransfer,
		},
		SafeTransferFromFunc: &IPublicStakingSafeTransferFromFunc{
			defaultHook: i.SafeTransferFrom,
		},
		SafeTransferFrom0Func: &IPublicStakingSafeTransferFrom0Func{
			defaultHook: i.SafeTransferFrom0,
		},
		SetApprovalForAllFunc: &IPublicStakingSetApprovalForAllFunc{
			defaultHook: i.SetApprovalForAll,
		},
		SkimExcessEthFunc: &IPublicStakingSkimExcessEthFunc{
			defaultHook: i.SkimExcessEth,
		},
		SkimExcessTokenFunc: &IPublicStakingSkimExcessTokenFunc{
			defaultHook: i.SkimExcessToken,
		},
		SupportsInterfaceFunc: &IPublicStakingSupportsInterfaceFunc{
			defaultHook: i.SupportsInterface,
		},
		SymbolFunc: &IPublicStakingSymbolFunc{
			defaultHook: i.Symbol,
		},
		TokenByIndexFunc: &IPublicStakingTokenByIndexFunc{
			defaultHook: i.TokenByIndex,
		},
		TokenOfOwnerByIndexFunc: &IPublicStakingTokenOfOwnerByIndexFunc{
			defaultHook: i.TokenOfOwnerByIndex,
		},
		TokenURIFunc: &IPublicStakingTokenURIFunc{
			defaultHook: i.TokenURI,
		},
		TotalSupplyFunc: &IPublicStakingTotalSupplyFunc{
			defaultHook: i.TotalSupply,
		},
		TransferFromFunc: &IPublicStakingTransferFromFunc{
			defaultHook: i.TransferFrom,
		},
		TripCBFunc: &IPublicStakingTripCBFunc{
			defaultHook: i.TripCB,
		},
		WatchApprovalFunc: &IPublicStakingWatchApprovalFunc{
			defaultHook: i.WatchApproval,
		},
		WatchApprovalForAllFunc: &IPublicStakingWatchApprovalForAllFunc{
			defaultHook: i.WatchApprovalForAll,
		},
		WatchInitializedFunc: &IPublicStakingWatchInitializedFunc{
			defaultHook: i.WatchInitialized,
		},
		WatchTransferFunc: &IPublicStakingWatchTransferFunc{
			defaultHook: i.WatchTransfer,
		},
	}
}

// IPublicStakingApproveFunc describes the behavior when the Approve method
// of the parent MockIPublicStaking instance is invoked.
type IPublicStakingApproveFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingApproveFuncCall
	mutex       sync.Mutex
}

// Approve delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIPublicStaking) Approve(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.ApproveFunc.nextHook()(v0, v1, v2)
	m.ApproveFunc.appendCall(IPublicStakingApproveFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Approve method of
// the parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingApproveFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Approve method of the parent MockIPublicStaking instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IPublicStakingApproveFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingApproveFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingApproveFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingApproveFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingApproveFunc) appendCall(r0 IPublicStakingApproveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingApproveFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingApproveFunc) History() []IPublicStakingApproveFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingApproveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingApproveFuncCall is an object that describes an invocation
// of method Approve on an instance of MockIPublicStaking.
type IPublicStakingApproveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingApproveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingApproveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingBalanceOfFunc describes the behavior when the BalanceOf
// method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingBalanceOfFunc struct {
	defaultHook func(*bind.CallOpts, common.Address) (*big.Int, error)
	hooks       []func(*bind.CallOpts, common.Address) (*big.Int, error)
	history     []IPublicStakingBalanceOfFuncCall
	mutex       sync.Mutex
}

// BalanceOf delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIPublicStaking) BalanceOf(v0 *bind.CallOpts, v1 common.Address) (*big.Int, error) {
	r0, r1 := m.BalanceOfFunc.nextHook()(v0, v1)
	m.BalanceOfFunc.appendCall(IPublicStakingBalanceOfFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BalanceOf method of
// the parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingBalanceOfFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BalanceOf method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingBalanceOfFunc) PushHook(hook func(*bind.CallOpts, common.Address) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingBalanceOfFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingBalanceOfFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingBalanceOfFunc) nextHook() func(*bind.CallOpts, common.Address) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingBalanceOfFunc) appendCall(r0 IPublicStakingBalanceOfFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingBalanceOfFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingBalanceOfFunc) History() []IPublicStakingBalanceOfFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingBalanceOfFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingBalanceOfFuncCall is an object that describes an invocation
// of method BalanceOf on an instance of MockIPublicStaking.
type IPublicStakingBalanceOfFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingBalanceOfFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingBalanceOfFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingBurnFunc describes the behavior when the Burn method of the
// parent MockIPublicStaking instance is invoked.
type IPublicStakingBurnFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingBurnFuncCall
	mutex       sync.Mutex
}

// Burn delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIPublicStaking) Burn(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.BurnFunc.nextHook()(v0, v1)
	m.BurnFunc.appendCall(IPublicStakingBurnFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Burn method of the
// parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingBurnFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Burn method of the parent MockIPublicStaking instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IPublicStakingBurnFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingBurnFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingBurnFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingBurnFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingBurnFunc) appendCall(r0 IPublicStakingBurnFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingBurnFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingBurnFunc) History() []IPublicStakingBurnFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingBurnFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingBurnFuncCall is an object that describes an invocation of
// method Burn on an instance of MockIPublicStaking.
type IPublicStakingBurnFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingBurnFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingBurnFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingBurnToFunc describes the behavior when the BurnTo method of
// the parent MockIPublicStaking instance is invoked.
type IPublicStakingBurnToFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingBurnToFuncCall
	mutex       sync.Mutex
}

// BurnTo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIPublicStaking) BurnTo(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.BurnToFunc.nextHook()(v0, v1, v2)
	m.BurnToFunc.appendCall(IPublicStakingBurnToFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BurnTo method of the
// parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingBurnToFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BurnTo method of the parent MockIPublicStaking instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IPublicStakingBurnToFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingBurnToFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingBurnToFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingBurnToFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingBurnToFunc) appendCall(r0 IPublicStakingBurnToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingBurnToFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingBurnToFunc) History() []IPublicStakingBurnToFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingBurnToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingBurnToFuncCall is an object that describes an invocation of
// method BurnTo on an instance of MockIPublicStaking.
type IPublicStakingBurnToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingBurnToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingBurnToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingCircuitBreakerStateFunc describes the behavior when the
// CircuitBreakerState method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingCircuitBreakerStateFunc struct {
	defaultHook func(*bind.CallOpts) (bool, error)
	hooks       []func(*bind.CallOpts) (bool, error)
	history     []IPublicStakingCircuitBreakerStateFuncCall
	mutex       sync.Mutex
}

// CircuitBreakerState delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) CircuitBreakerState(v0 *bind.CallOpts) (bool, error) {
	r0, r1 := m.CircuitBreakerStateFunc.nextHook()(v0)
	m.CircuitBreakerStateFunc.appendCall(IPublicStakingCircuitBreakerStateFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CircuitBreakerState
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingCircuitBreakerStateFunc) SetDefaultHook(hook func(*bind.CallOpts) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CircuitBreakerState method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingCircuitBreakerStateFunc) PushHook(hook func(*bind.CallOpts) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingCircuitBreakerStateFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingCircuitBreakerStateFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

func (f *IPublicStakingCircuitBreakerStateFunc) nextHook() func(*bind.CallOpts) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingCircuitBreakerStateFunc) appendCall(r0 IPublicStakingCircuitBreakerStateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingCircuitBreakerStateFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingCircuitBreakerStateFunc) History() []IPublicStakingCircuitBreakerStateFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingCircuitBreakerStateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingCircuitBreakerStateFuncCall is an object that describes an
// invocation of method CircuitBreakerState on an instance of
// MockIPublicStaking.
type IPublicStakingCircuitBreakerStateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingCircuitBreakerStateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingCircuitBreakerStateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingCollectAllProfitsFunc describes the behavior when the
// CollectAllProfits method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingCollectAllProfitsFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingCollectAllProfitsFuncCall
	mutex       sync.Mutex
}

// CollectAllProfits delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) CollectAllProfits(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.CollectAllProfitsFunc.nextHook()(v0, v1)
	m.CollectAllProfitsFunc.appendCall(IPublicStakingCollectAllProfitsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CollectAllProfits
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingCollectAllProfitsFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CollectAllProfits method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingCollectAllProfitsFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingCollectAllProfitsFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingCollectAllProfitsFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingCollectAllProfitsFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingCollectAllProfitsFunc) appendCall(r0 IPublicStakingCollectAllProfitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingCollectAllProfitsFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingCollectAllProfitsFunc) History() []IPublicStakingCollectAllProfitsFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingCollectAllProfitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingCollectAllProfitsFuncCall is an object that describes an
// invocation of method CollectAllProfits on an instance of
// MockIPublicStaking.
type IPublicStakingCollectAllProfitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingCollectAllProfitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingCollectAllProfitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingCollectAllProfitsToFunc describes the behavior when the
// CollectAllProfitsTo method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingCollectAllProfitsToFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingCollectAllProfitsToFuncCall
	mutex       sync.Mutex
}

// CollectAllProfitsTo delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) CollectAllProfitsTo(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.CollectAllProfitsToFunc.nextHook()(v0, v1, v2)
	m.CollectAllProfitsToFunc.appendCall(IPublicStakingCollectAllProfitsToFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CollectAllProfitsTo
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingCollectAllProfitsToFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CollectAllProfitsTo method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingCollectAllProfitsToFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingCollectAllProfitsToFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingCollectAllProfitsToFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingCollectAllProfitsToFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingCollectAllProfitsToFunc) appendCall(r0 IPublicStakingCollectAllProfitsToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingCollectAllProfitsToFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingCollectAllProfitsToFunc) History() []IPublicStakingCollectAllProfitsToFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingCollectAllProfitsToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingCollectAllProfitsToFuncCall is an object that describes an
// invocation of method CollectAllProfitsTo on an instance of
// MockIPublicStaking.
type IPublicStakingCollectAllProfitsToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingCollectAllProfitsToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingCollectAllProfitsToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingCollectEthFunc describes the behavior when the CollectEth
// method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingCollectEthFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingCollectEthFuncCall
	mutex       sync.Mutex
}

// CollectEth delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) CollectEth(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.CollectEthFunc.nextHook()(v0, v1)
	m.CollectEthFunc.appendCall(IPublicStakingCollectEthFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CollectEth method of
// the parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingCollectEthFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CollectEth method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingCollectEthFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingCollectEthFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingCollectEthFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingCollectEthFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingCollectEthFunc) appendCall(r0 IPublicStakingCollectEthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingCollectEthFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingCollectEthFunc) History() []IPublicStakingCollectEthFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingCollectEthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingCollectEthFuncCall is an object that describes an
// invocation of method CollectEth on an instance of MockIPublicStaking.
type IPublicStakingCollectEthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingCollectEthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingCollectEthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingCollectEthToFunc describes the behavior when the
// CollectEthTo method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingCollectEthToFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingCollectEthToFuncCall
	mutex       sync.Mutex
}

// CollectEthTo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) CollectEthTo(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.CollectEthToFunc.nextHook()(v0, v1, v2)
	m.CollectEthToFunc.appendCall(IPublicStakingCollectEthToFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CollectEthTo method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingCollectEthToFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CollectEthTo method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingCollectEthToFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingCollectEthToFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingCollectEthToFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingCollectEthToFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingCollectEthToFunc) appendCall(r0 IPublicStakingCollectEthToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingCollectEthToFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingCollectEthToFunc) History() []IPublicStakingCollectEthToFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingCollectEthToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingCollectEthToFuncCall is an object that describes an
// invocation of method CollectEthTo on an instance of MockIPublicStaking.
type IPublicStakingCollectEthToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingCollectEthToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingCollectEthToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingCollectTokenFunc describes the behavior when the
// CollectToken method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingCollectTokenFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingCollectTokenFuncCall
	mutex       sync.Mutex
}

// CollectToken delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) CollectToken(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.CollectTokenFunc.nextHook()(v0, v1)
	m.CollectTokenFunc.appendCall(IPublicStakingCollectTokenFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CollectToken method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingCollectTokenFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CollectToken method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingCollectTokenFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingCollectTokenFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingCollectTokenFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingCollectTokenFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingCollectTokenFunc) appendCall(r0 IPublicStakingCollectTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingCollectTokenFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingCollectTokenFunc) History() []IPublicStakingCollectTokenFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingCollectTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingCollectTokenFuncCall is an object that describes an
// invocation of method CollectToken on an instance of MockIPublicStaking.
type IPublicStakingCollectTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingCollectTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingCollectTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingCollectTokenToFunc describes the behavior when the
// CollectTokenTo method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingCollectTokenToFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingCollectTokenToFuncCall
	mutex       sync.Mutex
}

// CollectTokenTo delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) CollectTokenTo(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.CollectTokenToFunc.nextHook()(v0, v1, v2)
	m.CollectTokenToFunc.appendCall(IPublicStakingCollectTokenToFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CollectTokenTo
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingCollectTokenToFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CollectTokenTo method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingCollectTokenToFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingCollectTokenToFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingCollectTokenToFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingCollectTokenToFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingCollectTokenToFunc) appendCall(r0 IPublicStakingCollectTokenToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingCollectTokenToFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingCollectTokenToFunc) History() []IPublicStakingCollectTokenToFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingCollectTokenToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingCollectTokenToFuncCall is an object that describes an
// invocation of method CollectTokenTo on an instance of MockIPublicStaking.
type IPublicStakingCollectTokenToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingCollectTokenToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingCollectTokenToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingDepositEthFunc describes the behavior when the DepositEth
// method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingDepositEthFunc struct {
	defaultHook func(*bind.TransactOpts, uint8) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint8) (*types.Transaction, error)
	history     []IPublicStakingDepositEthFuncCall
	mutex       sync.Mutex
}

// DepositEth delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) DepositEth(v0 *bind.TransactOpts, v1 uint8) (*types.Transaction, error) {
	r0, r1 := m.DepositEthFunc.nextHook()(v0, v1)
	m.DepositEthFunc.appendCall(IPublicStakingDepositEthFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DepositEth method of
// the parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingDepositEthFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint8) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DepositEth method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingDepositEthFunc) PushHook(hook func(*bind.TransactOpts, uint8) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingDepositEthFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint8) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingDepositEthFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint8) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingDepositEthFunc) nextHook() func(*bind.TransactOpts, uint8) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingDepositEthFunc) appendCall(r0 IPublicStakingDepositEthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingDepositEthFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingDepositEthFunc) History() []IPublicStakingDepositEthFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingDepositEthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingDepositEthFuncCall is an object that describes an
// invocation of method DepositEth on an instance of MockIPublicStaking.
type IPublicStakingDepositEthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint8
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingDepositEthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingDepositEthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingDepositTokenFunc describes the behavior when the
// DepositToken method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingDepositTokenFunc struct {
	defaultHook func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingDepositTokenFuncCall
	mutex       sync.Mutex
}

// DepositToken delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) DepositToken(v0 *bind.TransactOpts, v1 uint8, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.DepositTokenFunc.nextHook()(v0, v1, v2)
	m.DepositTokenFunc.appendCall(IPublicStakingDepositTokenFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DepositToken method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingDepositTokenFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DepositToken method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingDepositTokenFunc) PushHook(hook func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingDepositTokenFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingDepositTokenFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingDepositTokenFunc) nextHook() func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingDepositTokenFunc) appendCall(r0 IPublicStakingDepositTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingDepositTokenFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingDepositTokenFunc) History() []IPublicStakingDepositTokenFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingDepositTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingDepositTokenFuncCall is an object that describes an
// invocation of method DepositToken on an instance of MockIPublicStaking.
type IPublicStakingDepositTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint8
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingDepositTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingDepositTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingEstimateAllProfitsFunc describes the behavior when the
// EstimateAllProfits method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingEstimateAllProfitsFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (struct {
		PayoutEth   *big.Int
		PayoutToken *big.Int
	}, error)
	hooks []func(*bind.CallOpts, *big.Int) (struct {
		PayoutEth   *big.Int
		PayoutToken *big.Int
	}, error)
	history []IPublicStakingEstimateAllProfitsFuncCall
	mutex   sync.Mutex
}

// EstimateAllProfits delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) EstimateAllProfits(v0 *bind.CallOpts, v1 *big.Int) (struct {
	PayoutEth   *big.Int
	PayoutToken *big.Int
}, error) {
	r0, r1 := m.EstimateAllProfitsFunc.nextHook()(v0, v1)
	m.EstimateAllProfitsFunc.appendCall(IPublicStakingEstimateAllProfitsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the EstimateAllProfits
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingEstimateAllProfitsFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (struct {
	PayoutEth   *big.Int
	PayoutToken *big.Int
}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EstimateAllProfits method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingEstimateAllProfitsFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (struct {
	PayoutEth   *big.Int
	PayoutToken *big.Int
}, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingEstimateAllProfitsFunc) SetDefaultReturn(r0 struct {
	PayoutEth   *big.Int
	PayoutToken *big.Int
}, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (struct {
		PayoutEth   *big.Int
		PayoutToken *big.Int
	}, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingEstimateAllProfitsFunc) PushReturn(r0 struct {
	PayoutEth   *big.Int
	PayoutToken *big.Int
}, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (struct {
		PayoutEth   *big.Int
		PayoutToken *big.Int
	}, error) {
		return r0, r1
	})
}

func (f *IPublicStakingEstimateAllProfitsFunc) nextHook() func(*bind.CallOpts, *big.Int) (struct {
	PayoutEth   *big.Int
	PayoutToken *big.Int
}, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingEstimateAllProfitsFunc) appendCall(r0 IPublicStakingEstimateAllProfitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingEstimateAllProfitsFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingEstimateAllProfitsFunc) History() []IPublicStakingEstimateAllProfitsFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingEstimateAllProfitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingEstimateAllProfitsFuncCall is an object that describes an
// invocation of method EstimateAllProfits on an instance of
// MockIPublicStaking.
type IPublicStakingEstimateAllProfitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 struct {
		PayoutEth   *big.Int
		PayoutToken *big.Int
	}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingEstimateAllProfitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingEstimateAllProfitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingEstimateEthCollectionFunc describes the behavior when the
// EstimateEthCollection method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingEstimateEthCollectionFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []IPublicStakingEstimateEthCollectionFuncCall
	mutex       sync.Mutex
}

// EstimateEthCollection delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) EstimateEthCollection(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.EstimateEthCollectionFunc.nextHook()(v0, v1)
	m.EstimateEthCollectionFunc.appendCall(IPublicStakingEstimateEthCollectionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// EstimateEthCollection method of the parent MockIPublicStaking instance is
// invoked and the hook queue is empty.
func (f *IPublicStakingEstimateEthCollectionFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EstimateEthCollection method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingEstimateEthCollectionFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingEstimateEthCollectionFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingEstimateEthCollectionFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingEstimateEthCollectionFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingEstimateEthCollectionFunc) appendCall(r0 IPublicStakingEstimateEthCollectionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingEstimateEthCollectionFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingEstimateEthCollectionFunc) History() []IPublicStakingEstimateEthCollectionFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingEstimateEthCollectionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingEstimateEthCollectionFuncCall is an object that describes
// an invocation of method EstimateEthCollection on an instance of
// MockIPublicStaking.
type IPublicStakingEstimateEthCollectionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingEstimateEthCollectionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingEstimateEthCollectionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingEstimateExcessEthFunc describes the behavior when the
// EstimateExcessEth method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingEstimateExcessEthFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IPublicStakingEstimateExcessEthFuncCall
	mutex       sync.Mutex
}

// EstimateExcessEth delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) EstimateExcessEth(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.EstimateExcessEthFunc.nextHook()(v0)
	m.EstimateExcessEthFunc.appendCall(IPublicStakingEstimateExcessEthFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the EstimateExcessEth
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingEstimateExcessEthFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EstimateExcessEth method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingEstimateExcessEthFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingEstimateExcessEthFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingEstimateExcessEthFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingEstimateExcessEthFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingEstimateExcessEthFunc) appendCall(r0 IPublicStakingEstimateExcessEthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingEstimateExcessEthFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingEstimateExcessEthFunc) History() []IPublicStakingEstimateExcessEthFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingEstimateExcessEthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingEstimateExcessEthFuncCall is an object that describes an
// invocation of method EstimateExcessEth on an instance of
// MockIPublicStaking.
type IPublicStakingEstimateExcessEthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingEstimateExcessEthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingEstimateExcessEthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingEstimateExcessTokenFunc describes the behavior when the
// EstimateExcessToken method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingEstimateExcessTokenFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IPublicStakingEstimateExcessTokenFuncCall
	mutex       sync.Mutex
}

// EstimateExcessToken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) EstimateExcessToken(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.EstimateExcessTokenFunc.nextHook()(v0)
	m.EstimateExcessTokenFunc.appendCall(IPublicStakingEstimateExcessTokenFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the EstimateExcessToken
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingEstimateExcessTokenFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EstimateExcessToken method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingEstimateExcessTokenFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingEstimateExcessTokenFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingEstimateExcessTokenFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingEstimateExcessTokenFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingEstimateExcessTokenFunc) appendCall(r0 IPublicStakingEstimateExcessTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingEstimateExcessTokenFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingEstimateExcessTokenFunc) History() []IPublicStakingEstimateExcessTokenFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingEstimateExcessTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingEstimateExcessTokenFuncCall is an object that describes an
// invocation of method EstimateExcessToken on an instance of
// MockIPublicStaking.
type IPublicStakingEstimateExcessTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingEstimateExcessTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingEstimateExcessTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingEstimateTokenCollectionFunc describes the behavior when the
// EstimateTokenCollection method of the parent MockIPublicStaking instance
// is invoked.
type IPublicStakingEstimateTokenCollectionFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []IPublicStakingEstimateTokenCollectionFuncCall
	mutex       sync.Mutex
}

// EstimateTokenCollection delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) EstimateTokenCollection(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.EstimateTokenCollectionFunc.nextHook()(v0, v1)
	m.EstimateTokenCollectionFunc.appendCall(IPublicStakingEstimateTokenCollectionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// EstimateTokenCollection method of the parent MockIPublicStaking instance
// is invoked and the hook queue is empty.
func (f *IPublicStakingEstimateTokenCollectionFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EstimateTokenCollection method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingEstimateTokenCollectionFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingEstimateTokenCollectionFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingEstimateTokenCollectionFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingEstimateTokenCollectionFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingEstimateTokenCollectionFunc) appendCall(r0 IPublicStakingEstimateTokenCollectionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IPublicStakingEstimateTokenCollectionFuncCall objects describing the
// invocations of this function.
func (f *IPublicStakingEstimateTokenCollectionFunc) History() []IPublicStakingEstimateTokenCollectionFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingEstimateTokenCollectionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingEstimateTokenCollectionFuncCall is an object that describes
// an invocation of method EstimateTokenCollection on an instance of
// MockIPublicStaking.
type IPublicStakingEstimateTokenCollectionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingEstimateTokenCollectionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingEstimateTokenCollectionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingFilterApprovalFunc describes the behavior when the
// FilterApproval method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingFilterApprovalFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingApprovalIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingApprovalIterator, error)
	history     []IPublicStakingFilterApprovalFuncCall
	mutex       sync.Mutex
}

// FilterApproval delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) FilterApproval(v0 *bind.FilterOpts, v1 []common.Address, v2 []common.Address, v3 []*big.Int) (*bindings.PublicStakingApprovalIterator, error) {
	r0, r1 := m.FilterApprovalFunc.nextHook()(v0, v1, v2, v3)
	m.FilterApprovalFunc.appendCall(IPublicStakingFilterApprovalFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterApproval
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingFilterApprovalFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingApprovalIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterApproval method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingFilterApprovalFunc) PushHook(hook func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingApprovalIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingFilterApprovalFunc) SetDefaultReturn(r0 *bindings.PublicStakingApprovalIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingApprovalIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingFilterApprovalFunc) PushReturn(r0 *bindings.PublicStakingApprovalIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingApprovalIterator, error) {
		return r0, r1
	})
}

func (f *IPublicStakingFilterApprovalFunc) nextHook() func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingApprovalIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingFilterApprovalFunc) appendCall(r0 IPublicStakingFilterApprovalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingFilterApprovalFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingFilterApprovalFunc) History() []IPublicStakingFilterApprovalFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingFilterApprovalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingFilterApprovalFuncCall is an object that describes an
// invocation of method FilterApproval on an instance of MockIPublicStaking.
type IPublicStakingFilterApprovalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.PublicStakingApprovalIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingFilterApprovalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingFilterApprovalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingFilterApprovalForAllFunc describes the behavior when the
// FilterApprovalForAll method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingFilterApprovalForAllFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.PublicStakingApprovalForAllIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.PublicStakingApprovalForAllIterator, error)
	history     []IPublicStakingFilterApprovalForAllFuncCall
	mutex       sync.Mutex
}

// FilterApprovalForAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) FilterApprovalForAll(v0 *bind.FilterOpts, v1 []common.Address, v2 []common.Address) (*bindings.PublicStakingApprovalForAllIterator, error) {
	r0, r1 := m.FilterApprovalForAllFunc.nextHook()(v0, v1, v2)
	m.FilterApprovalForAllFunc.appendCall(IPublicStakingFilterApprovalForAllFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterApprovalForAll
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingFilterApprovalForAllFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.PublicStakingApprovalForAllIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterApprovalForAll method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingFilterApprovalForAllFunc) PushHook(hook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.PublicStakingApprovalForAllIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingFilterApprovalForAllFunc) SetDefaultReturn(r0 *bindings.PublicStakingApprovalForAllIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.PublicStakingApprovalForAllIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingFilterApprovalForAllFunc) PushReturn(r0 *bindings.PublicStakingApprovalForAllIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.PublicStakingApprovalForAllIterator, error) {
		return r0, r1
	})
}

func (f *IPublicStakingFilterApprovalForAllFunc) nextHook() func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.PublicStakingApprovalForAllIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingFilterApprovalForAllFunc) appendCall(r0 IPublicStakingFilterApprovalForAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingFilterApprovalForAllFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingFilterApprovalForAllFunc) History() []IPublicStakingFilterApprovalForAllFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingFilterApprovalForAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingFilterApprovalForAllFuncCall is an object that describes an
// invocation of method FilterApprovalForAll on an instance of
// MockIPublicStaking.
type IPublicStakingFilterApprovalForAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.PublicStakingApprovalForAllIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingFilterApprovalForAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingFilterApprovalForAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingFilterInitializedFunc describes the behavior when the
// FilterInitialized method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingFilterInitializedFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.PublicStakingInitializedIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.PublicStakingInitializedIterator, error)
	history     []IPublicStakingFilterInitializedFuncCall
	mutex       sync.Mutex
}

// FilterInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) FilterInitialized(v0 *bind.FilterOpts) (*bindings.PublicStakingInitializedIterator, error) {
	r0, r1 := m.FilterInitializedFunc.nextHook()(v0)
	m.FilterInitializedFunc.appendCall(IPublicStakingFilterInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterInitialized
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingFilterInitializedFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.PublicStakingInitializedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterInitialized method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingFilterInitializedFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.PublicStakingInitializedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingFilterInitializedFunc) SetDefaultReturn(r0 *bindings.PublicStakingInitializedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.PublicStakingInitializedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingFilterInitializedFunc) PushReturn(r0 *bindings.PublicStakingInitializedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.PublicStakingInitializedIterator, error) {
		return r0, r1
	})
}

func (f *IPublicStakingFilterInitializedFunc) nextHook() func(*bind.FilterOpts) (*bindings.PublicStakingInitializedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingFilterInitializedFunc) appendCall(r0 IPublicStakingFilterInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingFilterInitializedFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingFilterInitializedFunc) History() []IPublicStakingFilterInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingFilterInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingFilterInitializedFuncCall is an object that describes an
// invocation of method FilterInitialized on an instance of
// MockIPublicStaking.
type IPublicStakingFilterInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.PublicStakingInitializedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingFilterInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingFilterInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingFilterTransferFunc describes the behavior when the
// FilterTransfer method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingFilterTransferFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingTransferIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingTransferIterator, error)
	history     []IPublicStakingFilterTransferFuncCall
	mutex       sync.Mutex
}

// FilterTransfer delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) FilterTransfer(v0 *bind.FilterOpts, v1 []common.Address, v2 []common.Address, v3 []*big.Int) (*bindings.PublicStakingTransferIterator, error) {
	r0, r1 := m.FilterTransferFunc.nextHook()(v0, v1, v2, v3)
	m.FilterTransferFunc.appendCall(IPublicStakingFilterTransferFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterTransfer
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingFilterTransferFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingTransferIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterTransfer method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingFilterTransferFunc) PushHook(hook func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingTransferIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingFilterTransferFunc) SetDefaultReturn(r0 *bindings.PublicStakingTransferIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingTransferIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingFilterTransferFunc) PushReturn(r0 *bindings.PublicStakingTransferIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingTransferIterator, error) {
		return r0, r1
	})
}

func (f *IPublicStakingFilterTransferFunc) nextHook() func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.PublicStakingTransferIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingFilterTransferFunc) appendCall(r0 IPublicStakingFilterTransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingFilterTransferFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingFilterTransferFunc) History() []IPublicStakingFilterTransferFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingFilterTransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingFilterTransferFuncCall is an object that describes an
// invocation of method FilterTransfer on an instance of MockIPublicStaking.
type IPublicStakingFilterTransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.PublicStakingTransferIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingFilterTransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingFilterTransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingGetAccumulatorScaleFactorFunc describes the behavior when
// the GetAccumulatorScaleFactor method of the parent MockIPublicStaking
// instance is invoked.
type IPublicStakingGetAccumulatorScaleFactorFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IPublicStakingGetAccumulatorScaleFactorFuncCall
	mutex       sync.Mutex
}

// GetAccumulatorScaleFactor delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) GetAccumulatorScaleFactor(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetAccumulatorScaleFactorFunc.nextHook()(v0)
	m.GetAccumulatorScaleFactorFunc.appendCall(IPublicStakingGetAccumulatorScaleFactorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAccumulatorScaleFactor method of the parent MockIPublicStaking
// instance is invoked and the hook queue is empty.
func (f *IPublicStakingGetAccumulatorScaleFactorFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAccumulatorScaleFactor method of the parent MockIPublicStaking
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IPublicStakingGetAccumulatorScaleFactorFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingGetAccumulatorScaleFactorFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingGetAccumulatorScaleFactorFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingGetAccumulatorScaleFactorFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingGetAccumulatorScaleFactorFunc) appendCall(r0 IPublicStakingGetAccumulatorScaleFactorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IPublicStakingGetAccumulatorScaleFactorFuncCall objects describing the
// invocations of this function.
func (f *IPublicStakingGetAccumulatorScaleFactorFunc) History() []IPublicStakingGetAccumulatorScaleFactorFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingGetAccumulatorScaleFactorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingGetAccumulatorScaleFactorFuncCall is an object that
// describes an invocation of method GetAccumulatorScaleFactor on an
// instance of MockIPublicStaking.
type IPublicStakingGetAccumulatorScaleFactorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingGetAccumulatorScaleFactorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingGetAccumulatorScaleFactorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingGetApprovedFunc describes the behavior when the GetApproved
// method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingGetApprovedFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (common.Address, error)
	hooks       []func(*bind.CallOpts, *big.Int) (common.Address, error)
	history     []IPublicStakingGetApprovedFuncCall
	mutex       sync.Mutex
}

// GetApproved delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) GetApproved(v0 *bind.CallOpts, v1 *big.Int) (common.Address, error) {
	r0, r1 := m.GetApprovedFunc.nextHook()(v0, v1)
	m.GetApprovedFunc.appendCall(IPublicStakingGetApprovedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetApproved method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingGetApprovedFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetApproved method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingGetApprovedFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingGetApprovedFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingGetApprovedFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (common.Address, error) {
		return r0, r1
	})
}

func (f *IPublicStakingGetApprovedFunc) nextHook() func(*bind.CallOpts, *big.Int) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingGetApprovedFunc) appendCall(r0 IPublicStakingGetApprovedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingGetApprovedFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingGetApprovedFunc) History() []IPublicStakingGetApprovedFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingGetApprovedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingGetApprovedFuncCall is an object that describes an
// invocation of method GetApproved on an instance of MockIPublicStaking.
type IPublicStakingGetApprovedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingGetApprovedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingGetApprovedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingGetEthAccumulatorFunc describes the behavior when the
// GetEthAccumulator method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingGetEthAccumulatorFunc struct {
	defaultHook func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error)
	hooks []func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error)
	history []IPublicStakingGetEthAccumulatorFuncCall
	mutex   sync.Mutex
}

// GetEthAccumulator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) GetEthAccumulator(v0 *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	r0, r1 := m.GetEthAccumulatorFunc.nextHook()(v0)
	m.GetEthAccumulatorFunc.appendCall(IPublicStakingGetEthAccumulatorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetEthAccumulator
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingGetEthAccumulatorFunc) SetDefaultHook(hook func(*bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEthAccumulator method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingGetEthAccumulatorFunc) PushHook(hook func(*bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingGetEthAccumulatorFunc) SetDefaultReturn(r0 struct {
	Accumulator *big.Int
	Slush       *big.Int
}, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingGetEthAccumulatorFunc) PushReturn(r0 struct {
	Accumulator *big.Int
	Slush       *big.Int
}, r1 error) {
	f.PushHook(func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error) {
		return r0, r1
	})
}

func (f *IPublicStakingGetEthAccumulatorFunc) nextHook() func(*bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingGetEthAccumulatorFunc) appendCall(r0 IPublicStakingGetEthAccumulatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingGetEthAccumulatorFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingGetEthAccumulatorFunc) History() []IPublicStakingGetEthAccumulatorFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingGetEthAccumulatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingGetEthAccumulatorFuncCall is an object that describes an
// invocation of method GetEthAccumulator on an instance of
// MockIPublicStaking.
type IPublicStakingGetEthAccumulatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 struct {
		Accumulator *big.Int
		Slush       *big.Int
	}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingGetEthAccumulatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingGetEthAccumulatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingGetLatestMintedPositionIDFunc describes the behavior when
// the GetLatestMintedPositionID method of the parent MockIPublicStaking
// instance is invoked.
type IPublicStakingGetLatestMintedPositionIDFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IPublicStakingGetLatestMintedPositionIDFuncCall
	mutex       sync.Mutex
}

// GetLatestMintedPositionID delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) GetLatestMintedPositionID(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetLatestMintedPositionIDFunc.nextHook()(v0)
	m.GetLatestMintedPositionIDFunc.appendCall(IPublicStakingGetLatestMintedPositionIDFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLatestMintedPositionID method of the parent MockIPublicStaking
// instance is invoked and the hook queue is empty.
func (f *IPublicStakingGetLatestMintedPositionIDFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestMintedPositionID method of the parent MockIPublicStaking
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IPublicStakingGetLatestMintedPositionIDFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingGetLatestMintedPositionIDFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingGetLatestMintedPositionIDFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingGetLatestMintedPositionIDFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingGetLatestMintedPositionIDFunc) appendCall(r0 IPublicStakingGetLatestMintedPositionIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IPublicStakingGetLatestMintedPositionIDFuncCall objects describing the
// invocations of this function.
func (f *IPublicStakingGetLatestMintedPositionIDFunc) History() []IPublicStakingGetLatestMintedPositionIDFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingGetLatestMintedPositionIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingGetLatestMintedPositionIDFuncCall is an object that
// describes an invocation of method GetLatestMintedPositionID on an
// instance of MockIPublicStaking.
type IPublicStakingGetLatestMintedPositionIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingGetLatestMintedPositionIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingGetLatestMintedPositionIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingGetMaxGovernanceLockFunc describes the behavior when the
// GetMaxGovernanceLock method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingGetMaxGovernanceLockFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IPublicStakingGetMaxGovernanceLockFuncCall
	mutex       sync.Mutex
}

// GetMaxGovernanceLock delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) GetMaxGovernanceLock(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetMaxGovernanceLockFunc.nextHook()(v0)
	m.GetMaxGovernanceLockFunc.appendCall(IPublicStakingGetMaxGovernanceLockFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetMaxGovernanceLock
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingGetMaxGovernanceLockFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMaxGovernanceLock method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingGetMaxGovernanceLockFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingGetMaxGovernanceLockFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingGetMaxGovernanceLockFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingGetMaxGovernanceLockFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingGetMaxGovernanceLockFunc) appendCall(r0 IPublicStakingGetMaxGovernanceLockFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingGetMaxGovernanceLockFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingGetMaxGovernanceLockFunc) History() []IPublicStakingGetMaxGovernanceLockFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingGetMaxGovernanceLockFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingGetMaxGovernanceLockFuncCall is an object that describes an
// invocation of method GetMaxGovernanceLock on an instance of
// MockIPublicStaking.
type IPublicStakingGetMaxGovernanceLockFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingGetMaxGovernanceLockFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingGetMaxGovernanceLockFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingGetMaxMintLockFunc describes the behavior when the
// GetMaxMintLock method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingGetMaxMintLockFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IPublicStakingGetMaxMintLockFuncCall
	mutex       sync.Mutex
}

// GetMaxMintLock delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) GetMaxMintLock(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetMaxMintLockFunc.nextHook()(v0)
	m.GetMaxMintLockFunc.appendCall(IPublicStakingGetMaxMintLockFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetMaxMintLock
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingGetMaxMintLockFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMaxMintLock method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingGetMaxMintLockFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingGetMaxMintLockFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingGetMaxMintLockFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingGetMaxMintLockFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingGetMaxMintLockFunc) appendCall(r0 IPublicStakingGetMaxMintLockFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingGetMaxMintLockFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingGetMaxMintLockFunc) History() []IPublicStakingGetMaxMintLockFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingGetMaxMintLockFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingGetMaxMintLockFuncCall is an object that describes an
// invocation of method GetMaxMintLock on an instance of MockIPublicStaking.
type IPublicStakingGetMaxMintLockFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingGetMaxMintLockFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingGetMaxMintLockFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingGetMetamorphicContractAddressFunc describes the behavior
// when the GetMetamorphicContractAddress method of the parent
// MockIPublicStaking instance is invoked.
type IPublicStakingGetMetamorphicContractAddressFunc struct {
	defaultHook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	hooks       []func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	history     []IPublicStakingGetMetamorphicContractAddressFuncCall
	mutex       sync.Mutex
}

// GetMetamorphicContractAddress delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) GetMetamorphicContractAddress(v0 *bind.CallOpts, v1 [32]byte, v2 common.Address) (common.Address, error) {
	r0, r1 := m.GetMetamorphicContractAddressFunc.nextHook()(v0, v1, v2)
	m.GetMetamorphicContractAddressFunc.appendCall(IPublicStakingGetMetamorphicContractAddressFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMetamorphicContractAddress method of the parent MockIPublicStaking
// instance is invoked and the hook queue is empty.
func (f *IPublicStakingGetMetamorphicContractAddressFunc) SetDefaultHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMetamorphicContractAddress method of the parent MockIPublicStaking
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IPublicStakingGetMetamorphicContractAddressFunc) PushHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingGetMetamorphicContractAddressFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingGetMetamorphicContractAddressFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

func (f *IPublicStakingGetMetamorphicContractAddressFunc) nextHook() func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingGetMetamorphicContractAddressFunc) appendCall(r0 IPublicStakingGetMetamorphicContractAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IPublicStakingGetMetamorphicContractAddressFuncCall objects describing
// the invocations of this function.
func (f *IPublicStakingGetMetamorphicContractAddressFunc) History() []IPublicStakingGetMetamorphicContractAddressFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingGetMetamorphicContractAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingGetMetamorphicContractAddressFuncCall is an object that
// describes an invocation of method GetMetamorphicContractAddress on an
// instance of MockIPublicStaking.
type IPublicStakingGetMetamorphicContractAddressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingGetMetamorphicContractAddressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingGetMetamorphicContractAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingGetPositionFunc describes the behavior when the GetPosition
// method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingGetPositionFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	}, error)
	hooks []func(*bind.CallOpts, *big.Int) (struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	}, error)
	history []IPublicStakingGetPositionFuncCall
	mutex   sync.Mutex
}

// GetPosition delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) GetPosition(v0 *bind.CallOpts, v1 *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	r0, r1 := m.GetPositionFunc.nextHook()(v0, v1)
	m.GetPositionFunc.appendCall(IPublicStakingGetPositionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPosition method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingGetPositionFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPosition method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingGetPositionFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingGetPositionFunc) SetDefaultReturn(r0 struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	}, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingGetPositionFunc) PushReturn(r0 struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	}, error) {
		return r0, r1
	})
}

func (f *IPublicStakingGetPositionFunc) nextHook() func(*bind.CallOpts, *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingGetPositionFunc) appendCall(r0 IPublicStakingGetPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingGetPositionFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingGetPositionFunc) History() []IPublicStakingGetPositionFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingGetPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingGetPositionFuncCall is an object that describes an
// invocation of method GetPosition on an instance of MockIPublicStaking.
type IPublicStakingGetPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingGetPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingGetPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingGetTokenAccumulatorFunc describes the behavior when the
// GetTokenAccumulator method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingGetTokenAccumulatorFunc struct {
	defaultHook func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error)
	hooks []func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error)
	history []IPublicStakingGetTokenAccumulatorFuncCall
	mutex   sync.Mutex
}

// GetTokenAccumulator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) GetTokenAccumulator(v0 *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	r0, r1 := m.GetTokenAccumulatorFunc.nextHook()(v0)
	m.GetTokenAccumulatorFunc.appendCall(IPublicStakingGetTokenAccumulatorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTokenAccumulator
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingGetTokenAccumulatorFunc) SetDefaultHook(hook func(*bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTokenAccumulator method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingGetTokenAccumulatorFunc) PushHook(hook func(*bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingGetTokenAccumulatorFunc) SetDefaultReturn(r0 struct {
	Accumulator *big.Int
	Slush       *big.Int
}, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingGetTokenAccumulatorFunc) PushReturn(r0 struct {
	Accumulator *big.Int
	Slush       *big.Int
}, r1 error) {
	f.PushHook(func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error) {
		return r0, r1
	})
}

func (f *IPublicStakingGetTokenAccumulatorFunc) nextHook() func(*bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingGetTokenAccumulatorFunc) appendCall(r0 IPublicStakingGetTokenAccumulatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingGetTokenAccumulatorFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingGetTokenAccumulatorFunc) History() []IPublicStakingGetTokenAccumulatorFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingGetTokenAccumulatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingGetTokenAccumulatorFuncCall is an object that describes an
// invocation of method GetTokenAccumulator on an instance of
// MockIPublicStaking.
type IPublicStakingGetTokenAccumulatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 struct {
		Accumulator *big.Int
		Slush       *big.Int
	}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingGetTokenAccumulatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingGetTokenAccumulatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingGetTotalReserveALCAFunc describes the behavior when the
// GetTotalReserveALCA method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingGetTotalReserveALCAFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IPublicStakingGetTotalReserveALCAFuncCall
	mutex       sync.Mutex
}

// GetTotalReserveALCA delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) GetTotalReserveALCA(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetTotalReserveALCAFunc.nextHook()(v0)
	m.GetTotalReserveALCAFunc.appendCall(IPublicStakingGetTotalReserveALCAFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTotalReserveALCA
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingGetTotalReserveALCAFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTotalReserveALCA method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingGetTotalReserveALCAFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingGetTotalReserveALCAFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingGetTotalReserveALCAFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingGetTotalReserveALCAFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingGetTotalReserveALCAFunc) appendCall(r0 IPublicStakingGetTotalReserveALCAFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingGetTotalReserveALCAFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingGetTotalReserveALCAFunc) History() []IPublicStakingGetTotalReserveALCAFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingGetTotalReserveALCAFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingGetTotalReserveALCAFuncCall is an object that describes an
// invocation of method GetTotalReserveALCA on an instance of
// MockIPublicStaking.
type IPublicStakingGetTotalReserveALCAFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingGetTotalReserveALCAFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingGetTotalReserveALCAFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingGetTotalReserveEthFunc describes the behavior when the
// GetTotalReserveEth method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingGetTotalReserveEthFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IPublicStakingGetTotalReserveEthFuncCall
	mutex       sync.Mutex
}

// GetTotalReserveEth delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) GetTotalReserveEth(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetTotalReserveEthFunc.nextHook()(v0)
	m.GetTotalReserveEthFunc.appendCall(IPublicStakingGetTotalReserveEthFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTotalReserveEth
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingGetTotalReserveEthFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTotalReserveEth method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingGetTotalReserveEthFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingGetTotalReserveEthFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingGetTotalReserveEthFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingGetTotalReserveEthFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingGetTotalReserveEthFunc) appendCall(r0 IPublicStakingGetTotalReserveEthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingGetTotalReserveEthFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingGetTotalReserveEthFunc) History() []IPublicStakingGetTotalReserveEthFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingGetTotalReserveEthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingGetTotalReserveEthFuncCall is an object that describes an
// invocation of method GetTotalReserveEth on an instance of
// MockIPublicStaking.
type IPublicStakingGetTotalReserveEthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingGetTotalReserveEthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingGetTotalReserveEthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingGetTotalSharesFunc describes the behavior when the
// GetTotalShares method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingGetTotalSharesFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IPublicStakingGetTotalSharesFuncCall
	mutex       sync.Mutex
}

// GetTotalShares delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) GetTotalShares(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetTotalSharesFunc.nextHook()(v0)
	m.GetTotalSharesFunc.appendCall(IPublicStakingGetTotalSharesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTotalShares
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingGetTotalSharesFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTotalShares method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingGetTotalSharesFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingGetTotalSharesFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingGetTotalSharesFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingGetTotalSharesFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingGetTotalSharesFunc) appendCall(r0 IPublicStakingGetTotalSharesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingGetTotalSharesFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingGetTotalSharesFunc) History() []IPublicStakingGetTotalSharesFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingGetTotalSharesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingGetTotalSharesFuncCall is an object that describes an
// invocation of method GetTotalShares on an instance of MockIPublicStaking.
type IPublicStakingGetTotalSharesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingGetTotalSharesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingGetTotalSharesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingInitializeFunc describes the behavior when the Initialize
// method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingInitializeFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IPublicStakingInitializeFuncCall
	mutex       sync.Mutex
}

// Initialize delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) Initialize(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.InitializeFunc.nextHook()(v0)
	m.InitializeFunc.appendCall(IPublicStakingInitializeFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Initialize method of
// the parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingInitializeFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Initialize method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingInitializeFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingInitializeFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingInitializeFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingInitializeFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingInitializeFunc) appendCall(r0 IPublicStakingInitializeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingInitializeFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingInitializeFunc) History() []IPublicStakingInitializeFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingInitializeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingInitializeFuncCall is an object that describes an
// invocation of method Initialize on an instance of MockIPublicStaking.
type IPublicStakingInitializeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingInitializeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingInitializeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingIsApprovedForAllFunc describes the behavior when the
// IsApprovedForAll method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingIsApprovedForAllFunc struct {
	defaultHook func(*bind.CallOpts, common.Address, common.Address) (bool, error)
	hooks       []func(*bind.CallOpts, common.Address, common.Address) (bool, error)
	history     []IPublicStakingIsApprovedForAllFuncCall
	mutex       sync.Mutex
}

// IsApprovedForAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) IsApprovedForAll(v0 *bind.CallOpts, v1 common.Address, v2 common.Address) (bool, error) {
	r0, r1 := m.IsApprovedForAllFunc.nextHook()(v0, v1, v2)
	m.IsApprovedForAllFunc.appendCall(IPublicStakingIsApprovedForAllFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsApprovedForAll
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingIsApprovedForAllFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address, common.Address) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsApprovedForAll method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingIsApprovedForAllFunc) PushHook(hook func(*bind.CallOpts, common.Address, common.Address) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingIsApprovedForAllFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address, common.Address) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingIsApprovedForAllFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address, common.Address) (bool, error) {
		return r0, r1
	})
}

func (f *IPublicStakingIsApprovedForAllFunc) nextHook() func(*bind.CallOpts, common.Address, common.Address) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingIsApprovedForAllFunc) appendCall(r0 IPublicStakingIsApprovedForAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingIsApprovedForAllFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingIsApprovedForAllFunc) History() []IPublicStakingIsApprovedForAllFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingIsApprovedForAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingIsApprovedForAllFuncCall is an object that describes an
// invocation of method IsApprovedForAll on an instance of
// MockIPublicStaking.
type IPublicStakingIsApprovedForAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingIsApprovedForAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingIsApprovedForAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingLockOwnPositionFunc describes the behavior when the
// LockOwnPosition method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingLockOwnPositionFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingLockOwnPositionFuncCall
	mutex       sync.Mutex
}

// LockOwnPosition delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) LockOwnPosition(v0 *bind.TransactOpts, v1 *big.Int, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.LockOwnPositionFunc.nextHook()(v0, v1, v2)
	m.LockOwnPositionFunc.appendCall(IPublicStakingLockOwnPositionFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LockOwnPosition
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingLockOwnPositionFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LockOwnPosition method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingLockOwnPositionFunc) PushHook(hook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingLockOwnPositionFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingLockOwnPositionFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingLockOwnPositionFunc) nextHook() func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingLockOwnPositionFunc) appendCall(r0 IPublicStakingLockOwnPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingLockOwnPositionFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingLockOwnPositionFunc) History() []IPublicStakingLockOwnPositionFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingLockOwnPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingLockOwnPositionFuncCall is an object that describes an
// invocation of method LockOwnPosition on an instance of
// MockIPublicStaking.
type IPublicStakingLockOwnPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingLockOwnPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingLockOwnPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingLockPositionFunc describes the behavior when the
// LockPosition method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingLockPositionFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingLockPositionFuncCall
	mutex       sync.Mutex
}

// LockPosition delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) LockPosition(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.LockPositionFunc.nextHook()(v0, v1, v2, v3)
	m.LockPositionFunc.appendCall(IPublicStakingLockPositionFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LockPosition method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingLockPositionFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LockPosition method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingLockPositionFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingLockPositionFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingLockPositionFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingLockPositionFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingLockPositionFunc) appendCall(r0 IPublicStakingLockPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingLockPositionFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingLockPositionFunc) History() []IPublicStakingLockPositionFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingLockPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingLockPositionFuncCall is an object that describes an
// invocation of method LockPosition on an instance of MockIPublicStaking.
type IPublicStakingLockPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingLockPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingLockPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingLockWithdrawFunc describes the behavior when the
// LockWithdraw method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingLockWithdrawFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingLockWithdrawFuncCall
	mutex       sync.Mutex
}

// LockWithdraw delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) LockWithdraw(v0 *bind.TransactOpts, v1 *big.Int, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.LockWithdrawFunc.nextHook()(v0, v1, v2)
	m.LockWithdrawFunc.appendCall(IPublicStakingLockWithdrawFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LockWithdraw method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingLockWithdrawFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LockWithdraw method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingLockWithdrawFunc) PushHook(hook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingLockWithdrawFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingLockWithdrawFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingLockWithdrawFunc) nextHook() func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingLockWithdrawFunc) appendCall(r0 IPublicStakingLockWithdrawFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingLockWithdrawFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingLockWithdrawFunc) History() []IPublicStakingLockWithdrawFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingLockWithdrawFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingLockWithdrawFuncCall is an object that describes an
// invocation of method LockWithdraw on an instance of MockIPublicStaking.
type IPublicStakingLockWithdrawFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingLockWithdrawFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingLockWithdrawFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingMintFunc describes the behavior when the Mint method of the
// parent MockIPublicStaking instance is invoked.
type IPublicStakingMintFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingMintFuncCall
	mutex       sync.Mutex
}

// Mint delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIPublicStaking) Mint(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.MintFunc.nextHook()(v0, v1)
	m.MintFunc.appendCall(IPublicStakingMintFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Mint method of the
// parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingMintFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Mint method of the parent MockIPublicStaking instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IPublicStakingMintFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingMintFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingMintFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingMintFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingMintFunc) appendCall(r0 IPublicStakingMintFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingMintFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingMintFunc) History() []IPublicStakingMintFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingMintFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingMintFuncCall is an object that describes an invocation of
// method Mint on an instance of MockIPublicStaking.
type IPublicStakingMintFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingMintFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingMintFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingMintToFunc describes the behavior when the MintTo method of
// the parent MockIPublicStaking instance is invoked.
type IPublicStakingMintToFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingMintToFuncCall
	mutex       sync.Mutex
}

// MintTo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIPublicStaking) MintTo(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.MintToFunc.nextHook()(v0, v1, v2, v3)
	m.MintToFunc.appendCall(IPublicStakingMintToFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MintTo method of the
// parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingMintToFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MintTo method of the parent MockIPublicStaking instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IPublicStakingMintToFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingMintToFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingMintToFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingMintToFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingMintToFunc) appendCall(r0 IPublicStakingMintToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingMintToFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingMintToFunc) History() []IPublicStakingMintToFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingMintToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingMintToFuncCall is an object that describes an invocation of
// method MintTo on an instance of MockIPublicStaking.
type IPublicStakingMintToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingMintToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingMintToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingNameFunc describes the behavior when the Name method of the
// parent MockIPublicStaking instance is invoked.
type IPublicStakingNameFunc struct {
	defaultHook func(*bind.CallOpts) (string, error)
	hooks       []func(*bind.CallOpts) (string, error)
	history     []IPublicStakingNameFuncCall
	mutex       sync.Mutex
}

// Name delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIPublicStaking) Name(v0 *bind.CallOpts) (string, error) {
	r0, r1 := m.NameFunc.nextHook()(v0)
	m.NameFunc.appendCall(IPublicStakingNameFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Name method of the
// parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingNameFunc) SetDefaultHook(hook func(*bind.CallOpts) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Name method of the parent MockIPublicStaking instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IPublicStakingNameFunc) PushHook(hook func(*bind.CallOpts) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingNameFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingNameFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

func (f *IPublicStakingNameFunc) nextHook() func(*bind.CallOpts) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingNameFunc) appendCall(r0 IPublicStakingNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingNameFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingNameFunc) History() []IPublicStakingNameFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingNameFuncCall is an object that describes an invocation of
// method Name on an instance of MockIPublicStaking.
type IPublicStakingNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingOwnerOfFunc describes the behavior when the OwnerOf method
// of the parent MockIPublicStaking instance is invoked.
type IPublicStakingOwnerOfFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (common.Address, error)
	hooks       []func(*bind.CallOpts, *big.Int) (common.Address, error)
	history     []IPublicStakingOwnerOfFuncCall
	mutex       sync.Mutex
}

// OwnerOf delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIPublicStaking) OwnerOf(v0 *bind.CallOpts, v1 *big.Int) (common.Address, error) {
	r0, r1 := m.OwnerOfFunc.nextHook()(v0, v1)
	m.OwnerOfFunc.appendCall(IPublicStakingOwnerOfFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the OwnerOf method of
// the parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingOwnerOfFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OwnerOf method of the parent MockIPublicStaking instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IPublicStakingOwnerOfFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingOwnerOfFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingOwnerOfFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (common.Address, error) {
		return r0, r1
	})
}

func (f *IPublicStakingOwnerOfFunc) nextHook() func(*bind.CallOpts, *big.Int) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingOwnerOfFunc) appendCall(r0 IPublicStakingOwnerOfFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingOwnerOfFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingOwnerOfFunc) History() []IPublicStakingOwnerOfFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingOwnerOfFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingOwnerOfFuncCall is an object that describes an invocation
// of method OwnerOf on an instance of MockIPublicStaking.
type IPublicStakingOwnerOfFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingOwnerOfFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingOwnerOfFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingParseApprovalFunc describes the behavior when the
// ParseApproval method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingParseApprovalFunc struct {
	defaultHook func(types.Log) (*bindings.PublicStakingApproval, error)
	hooks       []func(types.Log) (*bindings.PublicStakingApproval, error)
	history     []IPublicStakingParseApprovalFuncCall
	mutex       sync.Mutex
}

// ParseApproval delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) ParseApproval(v0 types.Log) (*bindings.PublicStakingApproval, error) {
	r0, r1 := m.ParseApprovalFunc.nextHook()(v0)
	m.ParseApprovalFunc.appendCall(IPublicStakingParseApprovalFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseApproval method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingParseApprovalFunc) SetDefaultHook(hook func(types.Log) (*bindings.PublicStakingApproval, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseApproval method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingParseApprovalFunc) PushHook(hook func(types.Log) (*bindings.PublicStakingApproval, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingParseApprovalFunc) SetDefaultReturn(r0 *bindings.PublicStakingApproval, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.PublicStakingApproval, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingParseApprovalFunc) PushReturn(r0 *bindings.PublicStakingApproval, r1 error) {
	f.PushHook(func(types.Log) (*bindings.PublicStakingApproval, error) {
		return r0, r1
	})
}

func (f *IPublicStakingParseApprovalFunc) nextHook() func(types.Log) (*bindings.PublicStakingApproval, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingParseApprovalFunc) appendCall(r0 IPublicStakingParseApprovalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingParseApprovalFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingParseApprovalFunc) History() []IPublicStakingParseApprovalFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingParseApprovalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingParseApprovalFuncCall is an object that describes an
// invocation of method ParseApproval on an instance of MockIPublicStaking.
type IPublicStakingParseApprovalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.PublicStakingApproval
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingParseApprovalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingParseApprovalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingParseApprovalForAllFunc describes the behavior when the
// ParseApprovalForAll method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingParseApprovalForAllFunc struct {
	defaultHook func(types.Log) (*bindings.PublicStakingApprovalForAll, error)
	hooks       []func(types.Log) (*bindings.PublicStakingApprovalForAll, error)
	history     []IPublicStakingParseApprovalForAllFuncCall
	mutex       sync.Mutex
}

// ParseApprovalForAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) ParseApprovalForAll(v0 types.Log) (*bindings.PublicStakingApprovalForAll, error) {
	r0, r1 := m.ParseApprovalForAllFunc.nextHook()(v0)
	m.ParseApprovalForAllFunc.appendCall(IPublicStakingParseApprovalForAllFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseApprovalForAll
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingParseApprovalForAllFunc) SetDefaultHook(hook func(types.Log) (*bindings.PublicStakingApprovalForAll, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseApprovalForAll method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingParseApprovalForAllFunc) PushHook(hook func(types.Log) (*bindings.PublicStakingApprovalForAll, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingParseApprovalForAllFunc) SetDefaultReturn(r0 *bindings.PublicStakingApprovalForAll, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.PublicStakingApprovalForAll, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingParseApprovalForAllFunc) PushReturn(r0 *bindings.PublicStakingApprovalForAll, r1 error) {
	f.PushHook(func(types.Log) (*bindings.PublicStakingApprovalForAll, error) {
		return r0, r1
	})
}

func (f *IPublicStakingParseApprovalForAllFunc) nextHook() func(types.Log) (*bindings.PublicStakingApprovalForAll, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingParseApprovalForAllFunc) appendCall(r0 IPublicStakingParseApprovalForAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingParseApprovalForAllFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingParseApprovalForAllFunc) History() []IPublicStakingParseApprovalForAllFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingParseApprovalForAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingParseApprovalForAllFuncCall is an object that describes an
// invocation of method ParseApprovalForAll on an instance of
// MockIPublicStaking.
type IPublicStakingParseApprovalForAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.PublicStakingApprovalForAll
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingParseApprovalForAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingParseApprovalForAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingParseInitializedFunc describes the behavior when the
// ParseInitialized method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingParseInitializedFunc struct {
	defaultHook func(types.Log) (*bindings.PublicStakingInitialized, error)
	hooks       []func(types.Log) (*bindings.PublicStakingInitialized, error)
	history     []IPublicStakingParseInitializedFuncCall
	mutex       sync.Mutex
}

// ParseInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) ParseInitialized(v0 types.Log) (*bindings.PublicStakingInitialized, error) {
	r0, r1 := m.ParseInitializedFunc.nextHook()(v0)
	m.ParseInitializedFunc.appendCall(IPublicStakingParseInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseInitialized
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingParseInitializedFunc) SetDefaultHook(hook func(types.Log) (*bindings.PublicStakingInitialized, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseInitialized method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingParseInitializedFunc) PushHook(hook func(types.Log) (*bindings.PublicStakingInitialized, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingParseInitializedFunc) SetDefaultReturn(r0 *bindings.PublicStakingInitialized, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.PublicStakingInitialized, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingParseInitializedFunc) PushReturn(r0 *bindings.PublicStakingInitialized, r1 error) {
	f.PushHook(func(types.Log) (*bindings.PublicStakingInitialized, error) {
		return r0, r1
	})
}

func (f *IPublicStakingParseInitializedFunc) nextHook() func(types.Log) (*bindings.PublicStakingInitialized, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingParseInitializedFunc) appendCall(r0 IPublicStakingParseInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingParseInitializedFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingParseInitializedFunc) History() []IPublicStakingParseInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingParseInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingParseInitializedFuncCall is an object that describes an
// invocation of method ParseInitialized on an instance of
// MockIPublicStaking.
type IPublicStakingParseInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.PublicStakingInitialized
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingParseInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingParseInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingParseTransferFunc describes the behavior when the
// ParseTransfer method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingParseTransferFunc struct {
	defaultHook func(types.Log) (*bindings.PublicStakingTransfer, error)
	hooks       []func(types.Log) (*bindings.PublicStakingTransfer, error)
	history     []IPublicStakingParseTransferFuncCall
	mutex       sync.Mutex
}

// ParseTransfer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) ParseTransfer(v0 types.Log) (*bindings.PublicStakingTransfer, error) {
	r0, r1 := m.ParseTransferFunc.nextHook()(v0)
	m.ParseTransferFunc.appendCall(IPublicStakingParseTransferFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseTransfer method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingParseTransferFunc) SetDefaultHook(hook func(types.Log) (*bindings.PublicStakingTransfer, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseTransfer method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingParseTransferFunc) PushHook(hook func(types.Log) (*bindings.PublicStakingTransfer, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingParseTransferFunc) SetDefaultReturn(r0 *bindings.PublicStakingTransfer, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.PublicStakingTransfer, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingParseTransferFunc) PushReturn(r0 *bindings.PublicStakingTransfer, r1 error) {
	f.PushHook(func(types.Log) (*bindings.PublicStakingTransfer, error) {
		return r0, r1
	})
}

func (f *IPublicStakingParseTransferFunc) nextHook() func(types.Log) (*bindings.PublicStakingTransfer, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingParseTransferFunc) appendCall(r0 IPublicStakingParseTransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingParseTransferFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingParseTransferFunc) History() []IPublicStakingParseTransferFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingParseTransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingParseTransferFuncCall is an object that describes an
// invocation of method ParseTransfer on an instance of MockIPublicStaking.
type IPublicStakingParseTransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.PublicStakingTransfer
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingParseTransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingParseTransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingSafeTransferFromFunc describes the behavior when the
// SafeTransferFrom method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingSafeTransferFromFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingSafeTransferFromFuncCall
	mutex       sync.Mutex
}

// SafeTransferFrom delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) SafeTransferFrom(v0 *bind.TransactOpts, v1 common.Address, v2 common.Address, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.SafeTransferFromFunc.nextHook()(v0, v1, v2, v3)
	m.SafeTransferFromFunc.appendCall(IPublicStakingSafeTransferFromFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SafeTransferFrom
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingSafeTransferFromFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SafeTransferFrom method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingSafeTransferFromFunc) PushHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingSafeTransferFromFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingSafeTransferFromFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingSafeTransferFromFunc) nextHook() func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingSafeTransferFromFunc) appendCall(r0 IPublicStakingSafeTransferFromFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingSafeTransferFromFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingSafeTransferFromFunc) History() []IPublicStakingSafeTransferFromFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingSafeTransferFromFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingSafeTransferFromFuncCall is an object that describes an
// invocation of method SafeTransferFrom on an instance of
// MockIPublicStaking.
type IPublicStakingSafeTransferFromFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingSafeTransferFromFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingSafeTransferFromFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingSafeTransferFrom0Func describes the behavior when the
// SafeTransferFrom0 method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingSafeTransferFrom0Func struct {
	defaultHook func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error)
	history     []IPublicStakingSafeTransferFrom0FuncCall
	mutex       sync.Mutex
}

// SafeTransferFrom0 delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) SafeTransferFrom0(v0 *bind.TransactOpts, v1 common.Address, v2 common.Address, v3 *big.Int, v4 []byte) (*types.Transaction, error) {
	r0, r1 := m.SafeTransferFrom0Func.nextHook()(v0, v1, v2, v3, v4)
	m.SafeTransferFrom0Func.appendCall(IPublicStakingSafeTransferFrom0FuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SafeTransferFrom0
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingSafeTransferFrom0Func) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SafeTransferFrom0 method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingSafeTransferFrom0Func) PushHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingSafeTransferFrom0Func) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingSafeTransferFrom0Func) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingSafeTransferFrom0Func) nextHook() func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingSafeTransferFrom0Func) appendCall(r0 IPublicStakingSafeTransferFrom0FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingSafeTransferFrom0FuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingSafeTransferFrom0Func) History() []IPublicStakingSafeTransferFrom0FuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingSafeTransferFrom0FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingSafeTransferFrom0FuncCall is an object that describes an
// invocation of method SafeTransferFrom0 on an instance of
// MockIPublicStaking.
type IPublicStakingSafeTransferFrom0FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingSafeTransferFrom0FuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingSafeTransferFrom0FuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingSetApprovalForAllFunc describes the behavior when the
// SetApprovalForAll method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingSetApprovalForAllFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error)
	history     []IPublicStakingSetApprovalForAllFuncCall
	mutex       sync.Mutex
}

// SetApprovalForAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) SetApprovalForAll(v0 *bind.TransactOpts, v1 common.Address, v2 bool) (*types.Transaction, error) {
	r0, r1 := m.SetApprovalForAllFunc.nextHook()(v0, v1, v2)
	m.SetApprovalForAllFunc.appendCall(IPublicStakingSetApprovalForAllFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetApprovalForAll
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingSetApprovalForAllFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetApprovalForAll method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingSetApprovalForAllFunc) PushHook(hook func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingSetApprovalForAllFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingSetApprovalForAllFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingSetApprovalForAllFunc) nextHook() func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingSetApprovalForAllFunc) appendCall(r0 IPublicStakingSetApprovalForAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingSetApprovalForAllFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingSetApprovalForAllFunc) History() []IPublicStakingSetApprovalForAllFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingSetApprovalForAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingSetApprovalForAllFuncCall is an object that describes an
// invocation of method SetApprovalForAll on an instance of
// MockIPublicStaking.
type IPublicStakingSetApprovalForAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingSetApprovalForAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingSetApprovalForAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingSkimExcessEthFunc describes the behavior when the
// SkimExcessEth method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingSkimExcessEthFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	history     []IPublicStakingSkimExcessEthFuncCall
	mutex       sync.Mutex
}

// SkimExcessEth delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) SkimExcessEth(v0 *bind.TransactOpts, v1 common.Address) (*types.Transaction, error) {
	r0, r1 := m.SkimExcessEthFunc.nextHook()(v0, v1)
	m.SkimExcessEthFunc.appendCall(IPublicStakingSkimExcessEthFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SkimExcessEth method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingSkimExcessEthFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SkimExcessEth method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingSkimExcessEthFunc) PushHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingSkimExcessEthFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingSkimExcessEthFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingSkimExcessEthFunc) nextHook() func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingSkimExcessEthFunc) appendCall(r0 IPublicStakingSkimExcessEthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingSkimExcessEthFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingSkimExcessEthFunc) History() []IPublicStakingSkimExcessEthFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingSkimExcessEthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingSkimExcessEthFuncCall is an object that describes an
// invocation of method SkimExcessEth on an instance of MockIPublicStaking.
type IPublicStakingSkimExcessEthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingSkimExcessEthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingSkimExcessEthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingSkimExcessTokenFunc describes the behavior when the
// SkimExcessToken method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingSkimExcessTokenFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	history     []IPublicStakingSkimExcessTokenFuncCall
	mutex       sync.Mutex
}

// SkimExcessToken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) SkimExcessToken(v0 *bind.TransactOpts, v1 common.Address) (*types.Transaction, error) {
	r0, r1 := m.SkimExcessTokenFunc.nextHook()(v0, v1)
	m.SkimExcessTokenFunc.appendCall(IPublicStakingSkimExcessTokenFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SkimExcessToken
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingSkimExcessTokenFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SkimExcessToken method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingSkimExcessTokenFunc) PushHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingSkimExcessTokenFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingSkimExcessTokenFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingSkimExcessTokenFunc) nextHook() func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingSkimExcessTokenFunc) appendCall(r0 IPublicStakingSkimExcessTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingSkimExcessTokenFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingSkimExcessTokenFunc) History() []IPublicStakingSkimExcessTokenFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingSkimExcessTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingSkimExcessTokenFuncCall is an object that describes an
// invocation of method SkimExcessToken on an instance of
// MockIPublicStaking.
type IPublicStakingSkimExcessTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingSkimExcessTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingSkimExcessTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingSupportsInterfaceFunc describes the behavior when the
// SupportsInterface method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingSupportsInterfaceFunc struct {
	defaultHook func(*bind.CallOpts, [4]byte) (bool, error)
	hooks       []func(*bind.CallOpts, [4]byte) (bool, error)
	history     []IPublicStakingSupportsInterfaceFuncCall
	mutex       sync.Mutex
}

// SupportsInterface delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) SupportsInterface(v0 *bind.CallOpts, v1 [4]byte) (bool, error) {
	r0, r1 := m.SupportsInterfaceFunc.nextHook()(v0, v1)
	m.SupportsInterfaceFunc.appendCall(IPublicStakingSupportsInterfaceFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SupportsInterface
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingSupportsInterfaceFunc) SetDefaultHook(hook func(*bind.CallOpts, [4]byte) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SupportsInterface method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingSupportsInterfaceFunc) PushHook(hook func(*bind.CallOpts, [4]byte) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingSupportsInterfaceFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, [4]byte) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingSupportsInterfaceFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts, [4]byte) (bool, error) {
		return r0, r1
	})
}

func (f *IPublicStakingSupportsInterfaceFunc) nextHook() func(*bind.CallOpts, [4]byte) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingSupportsInterfaceFunc) appendCall(r0 IPublicStakingSupportsInterfaceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingSupportsInterfaceFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingSupportsInterfaceFunc) History() []IPublicStakingSupportsInterfaceFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingSupportsInterfaceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingSupportsInterfaceFuncCall is an object that describes an
// invocation of method SupportsInterface on an instance of
// MockIPublicStaking.
type IPublicStakingSupportsInterfaceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [4]byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingSupportsInterfaceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingSupportsInterfaceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingSymbolFunc describes the behavior when the Symbol method of
// the parent MockIPublicStaking instance is invoked.
type IPublicStakingSymbolFunc struct {
	defaultHook func(*bind.CallOpts) (string, error)
	hooks       []func(*bind.CallOpts) (string, error)
	history     []IPublicStakingSymbolFuncCall
	mutex       sync.Mutex
}

// Symbol delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIPublicStaking) Symbol(v0 *bind.CallOpts) (string, error) {
	r0, r1 := m.SymbolFunc.nextHook()(v0)
	m.SymbolFunc.appendCall(IPublicStakingSymbolFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Symbol method of the
// parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingSymbolFunc) SetDefaultHook(hook func(*bind.CallOpts) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Symbol method of the parent MockIPublicStaking instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IPublicStakingSymbolFunc) PushHook(hook func(*bind.CallOpts) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingSymbolFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingSymbolFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

func (f *IPublicStakingSymbolFunc) nextHook() func(*bind.CallOpts) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingSymbolFunc) appendCall(r0 IPublicStakingSymbolFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingSymbolFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingSymbolFunc) History() []IPublicStakingSymbolFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingSymbolFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingSymbolFuncCall is an object that describes an invocation of
// method Symbol on an instance of MockIPublicStaking.
type IPublicStakingSymbolFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingSymbolFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingSymbolFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingTokenByIndexFunc describes the behavior when the
// TokenByIndex method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingTokenByIndexFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []IPublicStakingTokenByIndexFuncCall
	mutex       sync.Mutex
}

// TokenByIndex delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) TokenByIndex(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.TokenByIndexFunc.nextHook()(v0, v1)
	m.TokenByIndexFunc.appendCall(IPublicStakingTokenByIndexFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TokenByIndex method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingTokenByIndexFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TokenByIndex method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingTokenByIndexFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingTokenByIndexFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingTokenByIndexFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingTokenByIndexFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingTokenByIndexFunc) appendCall(r0 IPublicStakingTokenByIndexFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingTokenByIndexFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingTokenByIndexFunc) History() []IPublicStakingTokenByIndexFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingTokenByIndexFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingTokenByIndexFuncCall is an object that describes an
// invocation of method TokenByIndex on an instance of MockIPublicStaking.
type IPublicStakingTokenByIndexFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingTokenByIndexFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingTokenByIndexFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingTokenOfOwnerByIndexFunc describes the behavior when the
// TokenOfOwnerByIndex method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingTokenOfOwnerByIndexFunc struct {
	defaultHook func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error)
	history     []IPublicStakingTokenOfOwnerByIndexFuncCall
	mutex       sync.Mutex
}

// TokenOfOwnerByIndex delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) TokenOfOwnerByIndex(v0 *bind.CallOpts, v1 common.Address, v2 *big.Int) (*big.Int, error) {
	r0, r1 := m.TokenOfOwnerByIndexFunc.nextHook()(v0, v1, v2)
	m.TokenOfOwnerByIndexFunc.appendCall(IPublicStakingTokenOfOwnerByIndexFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TokenOfOwnerByIndex
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingTokenOfOwnerByIndexFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TokenOfOwnerByIndex method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingTokenOfOwnerByIndexFunc) PushHook(hook func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingTokenOfOwnerByIndexFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingTokenOfOwnerByIndexFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingTokenOfOwnerByIndexFunc) nextHook() func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingTokenOfOwnerByIndexFunc) appendCall(r0 IPublicStakingTokenOfOwnerByIndexFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingTokenOfOwnerByIndexFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingTokenOfOwnerByIndexFunc) History() []IPublicStakingTokenOfOwnerByIndexFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingTokenOfOwnerByIndexFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingTokenOfOwnerByIndexFuncCall is an object that describes an
// invocation of method TokenOfOwnerByIndex on an instance of
// MockIPublicStaking.
type IPublicStakingTokenOfOwnerByIndexFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingTokenOfOwnerByIndexFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingTokenOfOwnerByIndexFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingTokenURIFunc describes the behavior when the TokenURI
// method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingTokenURIFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (string, error)
	hooks       []func(*bind.CallOpts, *big.Int) (string, error)
	history     []IPublicStakingTokenURIFuncCall
	mutex       sync.Mutex
}

// TokenURI delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIPublicStaking) TokenURI(v0 *bind.CallOpts, v1 *big.Int) (string, error) {
	r0, r1 := m.TokenURIFunc.nextHook()(v0, v1)
	m.TokenURIFunc.appendCall(IPublicStakingTokenURIFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TokenURI method of
// the parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingTokenURIFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TokenURI method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingTokenURIFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingTokenURIFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingTokenURIFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (string, error) {
		return r0, r1
	})
}

func (f *IPublicStakingTokenURIFunc) nextHook() func(*bind.CallOpts, *big.Int) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingTokenURIFunc) appendCall(r0 IPublicStakingTokenURIFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingTokenURIFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingTokenURIFunc) History() []IPublicStakingTokenURIFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingTokenURIFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingTokenURIFuncCall is an object that describes an invocation
// of method TokenURI on an instance of MockIPublicStaking.
type IPublicStakingTokenURIFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingTokenURIFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingTokenURIFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingTotalSupplyFunc describes the behavior when the TotalSupply
// method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingTotalSupplyFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IPublicStakingTotalSupplyFuncCall
	mutex       sync.Mutex
}

// TotalSupply delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) TotalSupply(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.TotalSupplyFunc.nextHook()(v0)
	m.TotalSupplyFunc.appendCall(IPublicStakingTotalSupplyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TotalSupply method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingTotalSupplyFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TotalSupply method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingTotalSupplyFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingTotalSupplyFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingTotalSupplyFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IPublicStakingTotalSupplyFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingTotalSupplyFunc) appendCall(r0 IPublicStakingTotalSupplyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingTotalSupplyFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingTotalSupplyFunc) History() []IPublicStakingTotalSupplyFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingTotalSupplyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingTotalSupplyFuncCall is an object that describes an
// invocation of method TotalSupply on an instance of MockIPublicStaking.
type IPublicStakingTotalSupplyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingTotalSupplyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingTotalSupplyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingTransferFromFunc describes the behavior when the
// TransferFrom method of the parent MockIPublicStaking instance is invoked.
type IPublicStakingTransferFromFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)
	history     []IPublicStakingTransferFromFuncCall
	mutex       sync.Mutex
}

// TransferFrom delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) TransferFrom(v0 *bind.TransactOpts, v1 common.Address, v2 common.Address, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.TransferFromFunc.nextHook()(v0, v1, v2, v3)
	m.TransferFromFunc.appendCall(IPublicStakingTransferFromFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TransferFrom method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingTransferFromFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransferFrom method of the parent MockIPublicStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IPublicStakingTransferFromFunc) PushHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingTransferFromFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingTransferFromFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingTransferFromFunc) nextHook() func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingTransferFromFunc) appendCall(r0 IPublicStakingTransferFromFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingTransferFromFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingTransferFromFunc) History() []IPublicStakingTransferFromFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingTransferFromFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingTransferFromFuncCall is an object that describes an
// invocation of method TransferFrom on an instance of MockIPublicStaking.
type IPublicStakingTransferFromFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingTransferFromFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingTransferFromFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingTripCBFunc describes the behavior when the TripCB method of
// the parent MockIPublicStaking instance is invoked.
type IPublicStakingTripCBFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IPublicStakingTripCBFuncCall
	mutex       sync.Mutex
}

// TripCB delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIPublicStaking) TripCB(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.TripCBFunc.nextHook()(v0)
	m.TripCBFunc.appendCall(IPublicStakingTripCBFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TripCB method of the
// parent MockIPublicStaking instance is invoked and the hook queue is
// empty.
func (f *IPublicStakingTripCBFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TripCB method of the parent MockIPublicStaking instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IPublicStakingTripCBFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingTripCBFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingTripCBFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IPublicStakingTripCBFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingTripCBFunc) appendCall(r0 IPublicStakingTripCBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingTripCBFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingTripCBFunc) History() []IPublicStakingTripCBFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingTripCBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingTripCBFuncCall is an object that describes an invocation of
// method TripCB on an instance of MockIPublicStaking.
type IPublicStakingTripCBFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingTripCBFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingTripCBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingWatchApprovalFunc describes the behavior when the
// WatchApproval method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingWatchApprovalFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.PublicStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.PublicStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)
	history     []IPublicStakingWatchApprovalFuncCall
	mutex       sync.Mutex
}

// WatchApproval delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) WatchApproval(v0 *bind.WatchOpts, v1 chan<- *bindings.PublicStakingApproval, v2 []common.Address, v3 []common.Address, v4 []*big.Int) (event.Subscription, error) {
	r0, r1 := m.WatchApprovalFunc.nextHook()(v0, v1, v2, v3, v4)
	m.WatchApprovalFunc.appendCall(IPublicStakingWatchApprovalFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchApproval method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingWatchApprovalFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.PublicStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchApproval method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingWatchApprovalFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.PublicStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingWatchApprovalFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.PublicStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingWatchApprovalFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.PublicStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IPublicStakingWatchApprovalFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.PublicStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingWatchApprovalFunc) appendCall(r0 IPublicStakingWatchApprovalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingWatchApprovalFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingWatchApprovalFunc) History() []IPublicStakingWatchApprovalFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingWatchApprovalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingWatchApprovalFuncCall is an object that describes an
// invocation of method WatchApproval on an instance of MockIPublicStaking.
type IPublicStakingWatchApprovalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.PublicStakingApproval
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 []*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingWatchApprovalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingWatchApprovalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingWatchApprovalForAllFunc describes the behavior when the
// WatchApprovalForAll method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingWatchApprovalForAllFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.PublicStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.PublicStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error)
	history     []IPublicStakingWatchApprovalForAllFuncCall
	mutex       sync.Mutex
}

// WatchApprovalForAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) WatchApprovalForAll(v0 *bind.WatchOpts, v1 chan<- *bindings.PublicStakingApprovalForAll, v2 []common.Address, v3 []common.Address) (event.Subscription, error) {
	r0, r1 := m.WatchApprovalForAllFunc.nextHook()(v0, v1, v2, v3)
	m.WatchApprovalForAllFunc.appendCall(IPublicStakingWatchApprovalForAllFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchApprovalForAll
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingWatchApprovalForAllFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.PublicStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchApprovalForAll method of the parent MockIPublicStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IPublicStakingWatchApprovalForAllFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.PublicStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingWatchApprovalForAllFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.PublicStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingWatchApprovalForAllFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.PublicStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IPublicStakingWatchApprovalForAllFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.PublicStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingWatchApprovalForAllFunc) appendCall(r0 IPublicStakingWatchApprovalForAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingWatchApprovalForAllFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingWatchApprovalForAllFunc) History() []IPublicStakingWatchApprovalForAllFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingWatchApprovalForAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingWatchApprovalForAllFuncCall is an object that describes an
// invocation of method WatchApprovalForAll on an instance of
// MockIPublicStaking.
type IPublicStakingWatchApprovalForAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.PublicStakingApprovalForAll
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingWatchApprovalForAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingWatchApprovalForAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingWatchInitializedFunc describes the behavior when the
// WatchInitialized method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingWatchInitializedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.PublicStakingInitialized) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.PublicStakingInitialized) (event.Subscription, error)
	history     []IPublicStakingWatchInitializedFuncCall
	mutex       sync.Mutex
}

// WatchInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIPublicStaking) WatchInitialized(v0 *bind.WatchOpts, v1 chan<- *bindings.PublicStakingInitialized) (event.Subscription, error) {
	r0, r1 := m.WatchInitializedFunc.nextHook()(v0, v1)
	m.WatchInitializedFunc.appendCall(IPublicStakingWatchInitializedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchInitialized
// method of the parent MockIPublicStaking instance is invoked and the hook
// queue is empty.
func (f *IPublicStakingWatchInitializedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.PublicStakingInitialized) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchInitialized method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingWatchInitializedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.PublicStakingInitialized) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingWatchInitializedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.PublicStakingInitialized) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingWatchInitializedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.PublicStakingInitialized) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IPublicStakingWatchInitializedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.PublicStakingInitialized) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingWatchInitializedFunc) appendCall(r0 IPublicStakingWatchInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingWatchInitializedFuncCall
// objects describing the invocations of this function.
func (f *IPublicStakingWatchInitializedFunc) History() []IPublicStakingWatchInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingWatchInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingWatchInitializedFuncCall is an object that describes an
// invocation of method WatchInitialized on an instance of
// MockIPublicStaking.
type IPublicStakingWatchInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.PublicStakingInitialized
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingWatchInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingWatchInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IPublicStakingWatchTransferFunc describes the behavior when the
// WatchTransfer method of the parent MockIPublicStaking instance is
// invoked.
type IPublicStakingWatchTransferFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.PublicStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.PublicStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)
	history     []IPublicStakingWatchTransferFuncCall
	mutex       sync.Mutex
}

// WatchTransfer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIPublicStaking) WatchTransfer(v0 *bind.WatchOpts, v1 chan<- *bindings.PublicStakingTransfer, v2 []common.Address, v3 []common.Address, v4 []*big.Int) (event.Subscription, error) {
	r0, r1 := m.WatchTransferFunc.nextHook()(v0, v1, v2, v3, v4)
	m.WatchTransferFunc.appendCall(IPublicStakingWatchTransferFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchTransfer method
// of the parent MockIPublicStaking instance is invoked and the hook queue
// is empty.
func (f *IPublicStakingWatchTransferFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.PublicStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchTransfer method of the parent MockIPublicStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IPublicStakingWatchTransferFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.PublicStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IPublicStakingWatchTransferFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.PublicStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IPublicStakingWatchTransferFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.PublicStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IPublicStakingWatchTransferFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.PublicStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IPublicStakingWatchTransferFunc) appendCall(r0 IPublicStakingWatchTransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IPublicStakingWatchTransferFuncCall objects
// describing the invocations of this function.
func (f *IPublicStakingWatchTransferFunc) History() []IPublicStakingWatchTransferFuncCall {
	f.mutex.Lock()
	history := make([]IPublicStakingWatchTransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IPublicStakingWatchTransferFuncCall is an object that describes an
// invocation of method WatchTransfer on an instance of MockIPublicStaking.
type IPublicStakingWatchTransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.PublicStakingTransfer
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 []*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IPublicStakingWatchTransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IPublicStakingWatchTransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockISnapshots is a mock implementation of the ISnapshots interface (from
// the package github.com/alicenet/alicenet/bridge/bindings) used for unit
// testing.
type MockISnapshots struct {
	// CheckBClaimsSignatureFunc is an instance of a mock function object
	// controlling the behavior of the method CheckBClaimsSignature.
	CheckBClaimsSignatureFunc *ISnapshotsCheckBClaimsSignatureFunc
	// FilterInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method FilterInitialized.
	FilterInitializedFunc *ISnapshotsFilterInitializedFunc
	// FilterSnapshotTakenFunc is an instance of a mock function object
	// controlling the behavior of the method FilterSnapshotTaken.
	FilterSnapshotTakenFunc *ISnapshotsFilterSnapshotTakenFunc
	// GetAliceNetHeightFromLatestSnapshotFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetAliceNetHeightFromLatestSnapshot.
	GetAliceNetHeightFromLatestSnapshotFunc *ISnapshotsGetAliceNetHeightFromLatestSnapshotFunc
	// GetAliceNetHeightFromSnapshotFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetAliceNetHeightFromSnapshot.
	GetAliceNetHeightFromSnapshotFunc *ISnapshotsGetAliceNetHeightFromSnapshotFunc
	// GetBlockClaimsFromLatestSnapshotFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetBlockClaimsFromLatestSnapshot.
	GetBlockClaimsFromLatestSnapshotFunc *ISnapshotsGetBlockClaimsFromLatestSnapshotFunc
	// GetBlockClaimsFromSnapshotFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetBlockClaimsFromSnapshot.
	GetBlockClaimsFromSnapshotFunc *ISnapshotsGetBlockClaimsFromSnapshotFunc
	// GetChainIdFunc is an instance of a mock function object controlling
	// the behavior of the method GetChainId.
	GetChainIdFunc *ISnapshotsGetChainIdFunc
	// GetChainIdFromLatestSnapshotFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetChainIdFromLatestSnapshot.
	GetChainIdFromLatestSnapshotFunc *ISnapshotsGetChainIdFromLatestSnapshotFunc
	// GetChainIdFromSnapshotFunc is an instance of a mock function object
	// controlling the behavior of the method GetChainIdFromSnapshot.
	GetChainIdFromSnapshotFunc *ISnapshotsGetChainIdFromSnapshotFunc
	// GetCommittedHeightFromLatestSnapshotFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetCommittedHeightFromLatestSnapshot.
	GetCommittedHeightFromLatestSnapshotFunc *ISnapshotsGetCommittedHeightFromLatestSnapshotFunc
	// GetCommittedHeightFromSnapshotFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetCommittedHeightFromSnapshot.
	GetCommittedHeightFromSnapshotFunc *ISnapshotsGetCommittedHeightFromSnapshotFunc
	// GetEpochFunc is an instance of a mock function object controlling the
	// behavior of the method GetEpoch.
	GetEpochFunc *ISnapshotsGetEpochFunc
	// GetEpochFromHeightFunc is an instance of a mock function object
	// controlling the behavior of the method GetEpochFromHeight.
	GetEpochFromHeightFunc *ISnapshotsGetEpochFromHeightFunc
	// GetEpochLengthFunc is an instance of a mock function object
	// controlling the behavior of the method GetEpochLength.
	GetEpochLengthFunc *ISnapshotsGetEpochLengthFunc
	// GetLatestSnapshotFunc is an instance of a mock function object
	// controlling the behavior of the method GetLatestSnapshot.
	GetLatestSnapshotFunc *ISnapshotsGetLatestSnapshotFunc
	// GetMetamorphicContractAddressFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetMetamorphicContractAddress.
	GetMetamorphicContractAddressFunc *ISnapshotsGetMetamorphicContractAddressFunc
	// GetMinimumIntervalBetweenSnapshotsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetMinimumIntervalBetweenSnapshots.
	GetMinimumIntervalBetweenSnapshotsFunc *ISnapshotsGetMinimumIntervalBetweenSnapshotsFunc
	// GetSnapshotFunc is an instance of a mock function object controlling
	// the behavior of the method GetSnapshot.
	GetSnapshotFunc *ISnapshotsGetSnapshotFunc
	// GetSnapshotDesperationDelayFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetSnapshotDesperationDelay.
	GetSnapshotDesperationDelayFunc *ISnapshotsGetSnapshotDesperationDelayFunc
	// GetSnapshotDesperationFactorFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetSnapshotDesperationFactor.
	GetSnapshotDesperationFactorFunc *ISnapshotsGetSnapshotDesperationFactorFunc
	// InitializeFunc is an instance of a mock function object controlling
	// the behavior of the method Initialize.
	InitializeFunc *ISnapshotsInitializeFunc
	// IsValidatorElectedToPerformSnapshotFunc is an instance of a mock
	// function object controlling the behavior of the method
	// IsValidatorElectedToPerformSnapshot.
	IsValidatorElectedToPerformSnapshotFunc *ISnapshotsIsValidatorElectedToPerformSnapshotFunc
	// MayValidatorSnapshotFunc is an instance of a mock function object
	// controlling the behavior of the method MayValidatorSnapshot.
	MayValidatorSnapshotFunc *ISnapshotsMayValidatorSnapshotFunc
	// MigrateSnapshotsFunc is an instance of a mock function object
	// controlling the behavior of the method MigrateSnapshots.
	MigrateSnapshotsFunc *ISnapshotsMigrateSnapshotsFunc
	// ParseInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseInitialized.
	ParseInitializedFunc *ISnapshotsParseInitializedFunc
	// ParseSnapshotTakenFunc is an instance of a mock function object
	// controlling the behavior of the method ParseSnapshotTaken.
	ParseSnapshotTakenFunc *ISnapshotsParseSnapshotTakenFunc
	// SetMinimumIntervalBetweenSnapshotsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// SetMinimumIntervalBetweenSnapshots.
	SetMinimumIntervalBetweenSnapshotsFunc *ISnapshotsSetMinimumIntervalBetweenSnapshotsFunc
	// SetSnapshotDesperationDelayFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SetSnapshotDesperationDelay.
	SetSnapshotDesperationDelayFunc *ISnapshotsSetSnapshotDesperationDelayFunc
	// SetSnapshotDesperationFactorFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SetSnapshotDesperationFactor.
	SetSnapshotDesperationFactorFunc *ISnapshotsSetSnapshotDesperationFactorFunc
	// SnapshotFunc is an instance of a mock function object controlling the
	// behavior of the method Snapshot.
	SnapshotFunc *ISnapshotsSnapshotFunc
	// WatchInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchInitialized.
	WatchInitializedFunc *ISnapshotsWatchInitializedFunc
	// WatchSnapshotTakenFunc is an instance of a mock function object
	// controlling the behavior of the method WatchSnapshotTaken.
	WatchSnapshotTakenFunc *ISnapshotsWatchSnapshotTakenFunc
}

// NewMockISnapshots creates a new mock of the ISnapshots interface. All
// methods return zero values for all results, unless overwritten.
func NewMockISnapshots() *MockISnapshots {
	return &MockISnapshots{
		CheckBClaimsSignatureFunc: &ISnapshotsCheckBClaimsSignatureFunc{
			defaultHook: func(*bind.CallOpts, []byte, []byte) (r0 bool, r1 error) {
				return
			},
		},
		FilterInitializedFunc: &ISnapshotsFilterInitializedFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.SnapshotsInitializedIterator, r1 error) {
				return
			},
		},
		FilterSnapshotTakenFunc: &ISnapshotsFilterSnapshotTakenFunc{
			defaultHook: func(*bind.FilterOpts, []*big.Int, []common.Address) (r0 *bindings.SnapshotsSnapshotTakenIterator, r1 error) {
				return
			},
		},
		GetAliceNetHeightFromLatestSnapshotFunc: &ISnapshotsGetAliceNetHeightFromLatestSnapshotFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetAliceNetHeightFromSnapshotFunc: &ISnapshotsGetAliceNetHeightFromSnapshotFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetBlockClaimsFromLatestSnapshotFunc: &ISnapshotsGetBlockClaimsFromLatestSnapshotFunc{
			defaultHook: func(*bind.CallOpts) (r0 bindings.BClaimsParserLibraryBClaims, r1 error) {
				return
			},
		},
		GetBlockClaimsFromSnapshotFunc: &ISnapshotsGetBlockClaimsFromSnapshotFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 bindings.BClaimsParserLibraryBClaims, r1 error) {
				return
			},
		},
		GetChainIdFunc: &ISnapshotsGetChainIdFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetChainIdFromLatestSnapshotFunc: &ISnapshotsGetChainIdFromLatestSnapshotFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetChainIdFromSnapshotFunc: &ISnapshotsGetChainIdFromSnapshotFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetCommittedHeightFromLatestSnapshotFunc: &ISnapshotsGetCommittedHeightFromLatestSnapshotFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetCommittedHeightFromSnapshotFunc: &ISnapshotsGetCommittedHeightFromSnapshotFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetEpochFunc: &ISnapshotsGetEpochFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetEpochFromHeightFunc: &ISnapshotsGetEpochFromHeightFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetEpochLengthFunc: &ISnapshotsGetEpochLengthFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetLatestSnapshotFunc: &ISnapshotsGetLatestSnapshotFunc{
			defaultHook: func(*bind.CallOpts) (r0 bindings.Snapshot, r1 error) {
				return
			},
		},
		GetMetamorphicContractAddressFunc: &ISnapshotsGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (r0 common.Address, r1 error) {
				return
			},
		},
		GetMinimumIntervalBetweenSnapshotsFunc: &ISnapshotsGetMinimumIntervalBetweenSnapshotsFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetSnapshotFunc: &ISnapshotsGetSnapshotFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 bindings.Snapshot, r1 error) {
				return
			},
		},
		GetSnapshotDesperationDelayFunc: &ISnapshotsGetSnapshotDesperationDelayFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetSnapshotDesperationFactorFunc: &ISnapshotsGetSnapshotDesperationFactorFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		InitializeFunc: &ISnapshotsInitializeFunc{
			defaultHook: func(*bind.TransactOpts, uint32, uint32) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		IsValidatorElectedToPerformSnapshotFunc: &ISnapshotsIsValidatorElectedToPerformSnapshotFunc{
			defaultHook: func(*bind.CallOpts, common.Address, *big.Int, [32]byte) (r0 bool, r1 error) {
				return
			},
		},
		MayValidatorSnapshotFunc: &ISnapshotsMayValidatorSnapshotFunc{
			defaultHook: func(*bind.CallOpts, *big.Int, *big.Int, *big.Int, [32]byte, *big.Int) (r0 bool, r1 error) {
				return
			},
		},
		MigrateSnapshotsFunc: &ISnapshotsMigrateSnapshotsFunc{
			defaultHook: func(*bind.TransactOpts, [][]byte, [][]byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		ParseInitializedFunc: &ISnapshotsParseInitializedFunc{
			defaultHook: func(types.Log) (r0 *bindings.SnapshotsInitialized, r1 error) {
				return
			},
		},
		ParseSnapshotTakenFunc: &ISnapshotsParseSnapshotTakenFunc{
			defaultHook: func(types.Log) (r0 *bindings.SnapshotsSnapshotTaken, r1 error) {
				return
			},
		},
		SetMinimumIntervalBetweenSnapshotsFunc: &ISnapshotsSetMinimumIntervalBetweenSnapshotsFunc{
			defaultHook: func(*bind.TransactOpts, uint32) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SetSnapshotDesperationDelayFunc: &ISnapshotsSetSnapshotDesperationDelayFunc{
			defaultHook: func(*bind.TransactOpts, uint32) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SetSnapshotDesperationFactorFunc: &ISnapshotsSetSnapshotDesperationFactorFunc{
			defaultHook: func(*bind.TransactOpts, uint32) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SnapshotFunc: &ISnapshotsSnapshotFunc{
			defaultHook: func(*bind.TransactOpts, []byte, []byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		WatchInitializedFunc: &ISnapshotsWatchInitializedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.SnapshotsInitialized) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchSnapshotTakenFunc: &ISnapshotsWatchSnapshotTakenFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.SnapshotsSnapshotTaken, []*big.Int, []common.Address) (r0 event.Subscription, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockISnapshots creates a new mock of the ISnapshots interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockISnapshots() *MockISnapshots {
	return &MockISnapshots{
		CheckBClaimsSignatureFunc: &ISnapshotsCheckBClaimsSignatureFunc{
			defaultHook: func(*bind.CallOpts, []byte, []byte) (bool, error) {
				panic("unexpected invocation of MockISnapshots.CheckBClaimsSignature")
			},
		},
		FilterInitializedFunc: &ISnapshotsFilterInitializedFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.SnapshotsInitializedIterator, error) {
				panic("unexpected invocation of MockISnapshots.FilterInitialized")
			},
		},
		FilterSnapshotTakenFunc: &ISnapshotsFilterSnapshotTakenFunc{
			defaultHook: func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.SnapshotsSnapshotTakenIterator, error) {
				panic("unexpected invocation of MockISnapshots.FilterSnapshotTaken")
			},
		},
		GetAliceNetHeightFromLatestSnapshotFunc: &ISnapshotsGetAliceNetHeightFromLatestSnapshotFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockISnapshots.GetAliceNetHeightFromLatestSnapshot")
			},
		},
		GetAliceNetHeightFromSnapshotFunc: &ISnapshotsGetAliceNetHeightFromSnapshotFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockISnapshots.GetAliceNetHeightFromSnapshot")
			},
		},
		GetBlockClaimsFromLatestSnapshotFunc: &ISnapshotsGetBlockClaimsFromLatestSnapshotFunc{
			defaultHook: func(*bind.CallOpts) (bindings.BClaimsParserLibraryBClaims, error) {
				panic("unexpected invocation of MockISnapshots.GetBlockClaimsFromLatestSnapshot")
			},
		},
		GetBlockClaimsFromSnapshotFunc: &ISnapshotsGetBlockClaimsFromSnapshotFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (bindings.BClaimsParserLibraryBClaims, error) {
				panic("unexpected invocation of MockISnapshots.GetBlockClaimsFromSnapshot")
			},
		},
		GetChainIdFunc: &ISnapshotsGetChainIdFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockISnapshots.GetChainId")
			},
		},
		GetChainIdFromLatestSnapshotFunc: &ISnapshotsGetChainIdFromLatestSnapshotFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockISnapshots.GetChainIdFromLatestSnapshot")
			},
		},
		GetChainIdFromSnapshotFunc: &ISnapshotsGetChainIdFromSnapshotFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockISnapshots.GetChainIdFromSnapshot")
			},
		},
		GetCommittedHeightFromLatestSnapshotFunc: &ISnapshotsGetCommittedHeightFromLatestSnapshotFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockISnapshots.GetCommittedHeightFromLatestSnapshot")
			},
		},
		GetCommittedHeightFromSnapshotFunc: &ISnapshotsGetCommittedHeightFromSnapshotFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockISnapshots.GetCommittedHeightFromSnapshot")
			},
		},
		GetEpochFunc: &ISnapshotsGetEpochFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockISnapshots.GetEpoch")
			},
		},
		GetEpochFromHeightFunc: &ISnapshotsGetEpochFromHeightFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockISnapshots.GetEpochFromHeight")
			},
		},
		GetEpochLengthFunc: &ISnapshotsGetEpochLengthFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockISnapshots.GetEpochLength")
			},
		},
		GetLatestSnapshotFunc: &ISnapshotsGetLatestSnapshotFunc{
			defaultHook: func(*bind.CallOpts) (bindings.Snapshot, error) {
				panic("unexpected invocation of MockISnapshots.GetLatestSnapshot")
			},
		},
		GetMetamorphicContractAddressFunc: &ISnapshotsGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
				panic("unexpected invocation of MockISnapshots.GetMetamorphicContractAddress")
			},
		},
		GetMinimumIntervalBetweenSnapshotsFunc: &ISnapshotsGetMinimumIntervalBetweenSnapshotsFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockISnapshots.GetMinimumIntervalBetweenSnapshots")
			},
		},
		GetSnapshotFunc: &ISnapshotsGetSnapshotFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (bindings.Snapshot, error) {
				panic("unexpected invocation of MockISnapshots.GetSnapshot")
			},
		},
		GetSnapshotDesperationDelayFunc: &ISnapshotsGetSnapshotDesperationDelayFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockISnapshots.GetSnapshotDesperationDelay")
			},
		},
		GetSnapshotDesperationFactorFunc: &ISnapshotsGetSnapshotDesperationFactorFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockISnapshots.GetSnapshotDesperationFactor")
			},
		},
		InitializeFunc: &ISnapshotsInitializeFunc{
			defaultHook: func(*bind.TransactOpts, uint32, uint32) (*types.Transaction, error) {
				panic("unexpected invocation of MockISnapshots.Initialize")
			},
		},
		IsValidatorElectedToPerformSnapshotFunc: &ISnapshotsIsValidatorElectedToPerformSnapshotFunc{
			defaultHook: func(*bind.CallOpts, common.Address, *big.Int, [32]byte) (bool, error) {
				panic("unexpected invocation of MockISnapshots.IsValidatorElectedToPerformSnapshot")
			},
		},
		MayValidatorSnapshotFunc: &ISnapshotsMayValidatorSnapshotFunc{
			defaultHook: func(*bind.CallOpts, *big.Int, *big.Int, *big.Int, [32]byte, *big.Int) (bool, error) {
				panic("unexpected invocation of MockISnapshots.MayValidatorSnapshot")
			},
		},
		MigrateSnapshotsFunc: &ISnapshotsMigrateSnapshotsFunc{
			defaultHook: func(*bind.TransactOpts, [][]byte, [][]byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockISnapshots.MigrateSnapshots")
			},
		},
		ParseInitializedFunc: &ISnapshotsParseInitializedFunc{
			defaultHook: func(types.Log) (*bindings.SnapshotsInitialized, error) {
				panic("unexpected invocation of MockISnapshots.ParseInitialized")
			},
		},
		ParseSnapshotTakenFunc: &ISnapshotsParseSnapshotTakenFunc{
			defaultHook: func(types.Log) (*bindings.SnapshotsSnapshotTaken, error) {
				panic("unexpected invocation of MockISnapshots.ParseSnapshotTaken")
			},
		},
		SetMinimumIntervalBetweenSnapshotsFunc: &ISnapshotsSetMinimumIntervalBetweenSnapshotsFunc{
			defaultHook: func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
				panic("unexpected invocation of MockISnapshots.SetMinimumIntervalBetweenSnapshots")
			},
		},
		SetSnapshotDesperationDelayFunc: &ISnapshotsSetSnapshotDesperationDelayFunc{
			defaultHook: func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
				panic("unexpected invocation of MockISnapshots.SetSnapshotDesperationDelay")
			},
		},
		SetSnapshotDesperationFactorFunc: &ISnapshotsSetSnapshotDesperationFactorFunc{
			defaultHook: func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
				panic("unexpected invocation of MockISnapshots.SetSnapshotDesperationFactor")
			},
		},
		SnapshotFunc: &ISnapshotsSnapshotFunc{
			defaultHook: func(*bind.TransactOpts, []byte, []byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockISnapshots.Snapshot")
			},
		},
		WatchInitializedFunc: &ISnapshotsWatchInitializedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.SnapshotsInitialized) (event.Subscription, error) {
				panic("unexpected invocation of MockISnapshots.WatchInitialized")
			},
		},
		WatchSnapshotTakenFunc: &ISnapshotsWatchSnapshotTakenFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.SnapshotsSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error) {
				panic("unexpected invocation of MockISnapshots.WatchSnapshotTaken")
			},
		},
	}
}

// NewMockISnapshotsFrom creates a new mock of the MockISnapshots interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockISnapshotsFrom(i bindings.ISnapshots) *MockISnapshots {
	return &MockISnapshots{
		CheckBClaimsSignatureFunc: &ISnapshotsCheckBClaimsSignatureFunc{
			defaultHook: i.CheckBClaimsSignature,
		},
		FilterInitializedFunc: &ISnapshotsFilterInitializedFunc{
			defaultHook: i.FilterInitialized,
		},
		FilterSnapshotTakenFunc: &ISnapshotsFilterSnapshotTakenFunc{
			defaultHook: i.FilterSnapshotTaken,
		},
		GetAliceNetHeightFromLatestSnapshotFunc: &ISnapshotsGetAliceNetHeightFromLatestSnapshotFunc{
			defaultHook: i.GetAliceNetHeightFromLatestSnapshot,
		},
		GetAliceNetHeightFromSnapshotFunc: &ISnapshotsGetAliceNetHeightFromSnapshotFunc{
			defaultHook: i.GetAliceNetHeightFromSnapshot,
		},
		GetBlockClaimsFromLatestSnapshotFunc: &ISnapshotsGetBlockClaimsFromLatestSnapshotFunc{
			defaultHook: i.GetBlockClaimsFromLatestSnapshot,
		},
		GetBlockClaimsFromSnapshotFunc: &ISnapshotsGetBlockClaimsFromSnapshotFunc{
			defaultHook: i.GetBlockClaimsFromSnapshot,
		},
		GetChainIdFunc: &ISnapshotsGetChainIdFunc{
			defaultHook: i.GetChainId,
		},
		GetChainIdFromLatestSnapshotFunc: &ISnapshotsGetChainIdFromLatestSnapshotFunc{
			defaultHook: i.GetChainIdFromLatestSnapshot,
		},
		GetChainIdFromSnapshotFunc: &ISnapshotsGetChainIdFromSnapshotFunc{
			defaultHook: i.GetChainIdFromSnapshot,
		},
		GetCommittedHeightFromLatestSnapshotFunc: &ISnapshotsGetCommittedHeightFromLatestSnapshotFunc{
			defaultHook: i.GetCommittedHeightFromLatestSnapshot,
		},
		GetCommittedHeightFromSnapshotFunc: &ISnapshotsGetCommittedHeightFromSnapshotFunc{
			defaultHook: i.GetCommittedHeightFromSnapshot,
		},
		GetEpochFunc: &ISnapshotsGetEpochFunc{
			defaultHook: i.GetEpoch,
		},
		GetEpochFromHeightFunc: &ISnapshotsGetEpochFromHeightFunc{
			defaultHook: i.GetEpochFromHeight,
		},
		GetEpochLengthFunc: &ISnapshotsGetEpochLengthFunc{
			defaultHook: i.GetEpochLength,
		},
		GetLatestSnapshotFunc: &ISnapshotsGetLatestSnapshotFunc{
			defaultHook: i.GetLatestSnapshot,
		},
		GetMetamorphicContractAddressFunc: &ISnapshotsGetMetamorphicContractAddressFunc{
			defaultHook: i.GetMetamorphicContractAddress,
		},
		GetMinimumIntervalBetweenSnapshotsFunc: &ISnapshotsGetMinimumIntervalBetweenSnapshotsFunc{
			defaultHook: i.GetMinimumIntervalBetweenSnapshots,
		},
		GetSnapshotFunc: &ISnapshotsGetSnapshotFunc{
			defaultHook: i.GetSnapshot,
		},
		GetSnapshotDesperationDelayFunc: &ISnapshotsGetSnapshotDesperationDelayFunc{
			defaultHook: i.GetSnapshotDesperationDelay,
		},
		GetSnapshotDesperationFactorFunc: &ISnapshotsGetSnapshotDesperationFactorFunc{
			defaultHook: i.GetSnapshotDesperationFactor,
		},
		InitializeFunc: &ISnapshotsInitializeFunc{
			defaultHook: i.Initialize,
		},
		IsValidatorElectedToPerformSnapshotFunc: &ISnapshotsIsValidatorElectedToPerformSnapshotFunc{
			defaultHook: i.IsValidatorElectedToPerformSnapshot,
		},
		MayValidatorSnapshotFunc: &ISnapshotsMayValidatorSnapshotFunc{
			defaultHook: i.MayValidatorSnapshot,
		},
		MigrateSnapshotsFunc: &ISnapshotsMigrateSnapshotsFunc{
			defaultHook: i.MigrateSnapshots,
		},
		ParseInitializedFunc: &ISnapshotsParseInitializedFunc{
			defaultHook: i.ParseInitialized,
		},
		ParseSnapshotTakenFunc: &ISnapshotsParseSnapshotTakenFunc{
			defaultHook: i.ParseSnapshotTaken,
		},
		SetMinimumIntervalBetweenSnapshotsFunc: &ISnapshotsSetMinimumIntervalBetweenSnapshotsFunc{
			defaultHook: i.SetMinimumIntervalBetweenSnapshots,
		},
		SetSnapshotDesperationDelayFunc: &ISnapshotsSetSnapshotDesperationDelayFunc{
			defaultHook: i.SetSnapshotDesperationDelay,
		},
		SetSnapshotDesperationFactorFunc: &ISnapshotsSetSnapshotDesperationFactorFunc{
			defaultHook: i.SetSnapshotDesperationFactor,
		},
		SnapshotFunc: &ISnapshotsSnapshotFunc{
			defaultHook: i.Snapshot,
		},
		WatchInitializedFunc: &ISnapshotsWatchInitializedFunc{
			defaultHook: i.WatchInitialized,
		},
		WatchSnapshotTakenFunc: &ISnapshotsWatchSnapshotTakenFunc{
			defaultHook: i.WatchSnapshotTaken,
		},
	}
}

// ISnapshotsCheckBClaimsSignatureFunc describes the behavior when the
// CheckBClaimsSignature method of the parent MockISnapshots instance is
// invoked.
type ISnapshotsCheckBClaimsSignatureFunc struct {
	defaultHook func(*bind.CallOpts, []byte, []byte) (bool, error)
	hooks       []func(*bind.CallOpts, []byte, []byte) (bool, error)
	history     []ISnapshotsCheckBClaimsSignatureFuncCall
	mutex       sync.Mutex
}

// CheckBClaimsSignature delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockISnapshots) CheckBClaimsSignature(v0 *bind.CallOpts, v1 []byte, v2 []byte) (bool, error) {
	r0, r1 := m.CheckBClaimsSignatureFunc.nextHook()(v0, v1, v2)
	m.CheckBClaimsSignatureFunc.appendCall(ISnapshotsCheckBClaimsSignatureFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CheckBClaimsSignature method of the parent MockISnapshots instance is
// invoked and the hook queue is empty.
func (f *ISnapshotsCheckBClaimsSignatureFunc) SetDefaultHook(hook func(*bind.CallOpts, []byte, []byte) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CheckBClaimsSignature method of the parent MockISnapshots instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ISnapshotsCheckBClaimsSignatureFunc) PushHook(hook func(*bind.CallOpts, []byte, []byte) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsCheckBClaimsSignatureFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, []byte, []byte) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsCheckBClaimsSignatureFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts, []byte, []byte) (bool, error) {
		return r0, r1
	})
}

func (f *ISnapshotsCheckBClaimsSignatureFunc) nextHook() func(*bind.CallOpts, []byte, []byte) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsCheckBClaimsSignatureFunc) appendCall(r0 ISnapshotsCheckBClaimsSignatureFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsCheckBClaimsSignatureFuncCall
// objects describing the invocations of this function.
func (f *ISnapshotsCheckBClaimsSignatureFunc) History() []ISnapshotsCheckBClaimsSignatureFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsCheckBClaimsSignatureFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsCheckBClaimsSignatureFuncCall is an object that describes an
// invocation of method CheckBClaimsSignature on an instance of
// MockISnapshots.
type ISnapshotsCheckBClaimsSignatureFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsCheckBClaimsSignatureFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsCheckBClaimsSignatureFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsFilterInitializedFunc describes the behavior when the
// FilterInitialized method of the parent MockISnapshots instance is
// invoked.
type ISnapshotsFilterInitializedFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.SnapshotsInitializedIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.SnapshotsInitializedIterator, error)
	history     []ISnapshotsFilterInitializedFuncCall
	mutex       sync.Mutex
}

// FilterInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockISnapshots) FilterInitialized(v0 *bind.FilterOpts) (*bindings.SnapshotsInitializedIterator, error) {
	r0, r1 := m.FilterInitializedFunc.nextHook()(v0)
	m.FilterInitializedFunc.appendCall(ISnapshotsFilterInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterInitialized
// method of the parent MockISnapshots instance is invoked and the hook
// queue is empty.
func (f *ISnapshotsFilterInitializedFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.SnapshotsInitializedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterInitialized method of the parent MockISnapshots instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ISnapshotsFilterInitializedFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.SnapshotsInitializedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsFilterInitializedFunc) SetDefaultReturn(r0 *bindings.SnapshotsInitializedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.SnapshotsInitializedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsFilterInitializedFunc) PushReturn(r0 *bindings.SnapshotsInitializedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.SnapshotsInitializedIterator, error) {
		return r0, r1
	})
}

func (f *ISnapshotsFilterInitializedFunc) nextHook() func(*bind.FilterOpts) (*bindings.SnapshotsInitializedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsFilterInitializedFunc) appendCall(r0 ISnapshotsFilterInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsFilterInitializedFuncCall objects
// describing the invocations of this function.
func (f *ISnapshotsFilterInitializedFunc) History() []ISnapshotsFilterInitializedFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsFilterInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsFilterInitializedFuncCall is an object that describes an
// invocation of method FilterInitialized on an instance of MockISnapshots.
type ISnapshotsFilterInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.SnapshotsInitializedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsFilterInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsFilterInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsFilterSnapshotTakenFunc describes the behavior when the
// FilterSnapshotTaken method of the parent MockISnapshots instance is
// invoked.
type ISnapshotsFilterSnapshotTakenFunc struct {
	defaultHook func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.SnapshotsSnapshotTakenIterator, error)
	hooks       []func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.SnapshotsSnapshotTakenIterator, error)
	history     []ISnapshotsFilterSnapshotTakenFuncCall
	mutex       sync.Mutex
}

// FilterSnapshotTaken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockISnapshots) FilterSnapshotTaken(v0 *bind.FilterOpts, v1 []*big.Int, v2 []common.Address) (*bindings.SnapshotsSnapshotTakenIterator, error) {
	r0, r1 := m.FilterSnapshotTakenFunc.nextHook()(v0, v1, v2)
	m.FilterSnapshotTakenFunc.appendCall(ISnapshotsFilterSnapshotTakenFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterSnapshotTaken
// method of the parent MockISnapshots instance is invoked and the hook
// queue is empty.
func (f *ISnapshotsFilterSnapshotTakenFunc) SetDefaultHook(hook func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.SnapshotsSnapshotTakenIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterSnapshotTaken method of the parent MockISnapshots instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ISnapshotsFilterSnapshotTakenFunc) PushHook(hook func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.SnapshotsSnapshotTakenIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsFilterSnapshotTakenFunc) SetDefaultReturn(r0 *bindings.SnapshotsSnapshotTakenIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.SnapshotsSnapshotTakenIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsFilterSnapshotTakenFunc) PushReturn(r0 *bindings.SnapshotsSnapshotTakenIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.SnapshotsSnapshotTakenIterator, error) {
		return r0, r1
	})
}

func (f *ISnapshotsFilterSnapshotTakenFunc) nextHook() func(*bind.FilterOpts, []*big.Int, []common.Address) (*bindings.SnapshotsSnapshotTakenIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsFilterSnapshotTakenFunc) appendCall(r0 ISnapshotsFilterSnapshotTakenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsFilterSnapshotTakenFuncCall
// objects describing the invocations of this function.
func (f *ISnapshotsFilterSnapshotTakenFunc) History() []ISnapshotsFilterSnapshotTakenFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsFilterSnapshotTakenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsFilterSnapshotTakenFuncCall is an object that describes an
// invocation of method FilterSnapshotTaken on an instance of
// MockISnapshots.
type ISnapshotsFilterSnapshotTakenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.SnapshotsSnapshotTakenIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsFilterSnapshotTakenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsFilterSnapshotTakenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetAliceNetHeightFromLatestSnapshotFunc describes the behavior
// when the GetAliceNetHeightFromLatestSnapshot method of the parent
// MockISnapshots instance is invoked.
type ISnapshotsGetAliceNetHeightFromLatestSnapshotFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []ISnapshotsGetAliceNetHeightFromLatestSnapshotFuncCall
	mutex       sync.Mutex
}

// GetAliceNetHeightFromLatestSnapshot delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockISnapshots) GetAliceNetHeightFromLatestSnapshot(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetAliceNetHeightFromLatestSnapshotFunc.nextHook()(v0)
	m.GetAliceNetHeightFromLatestSnapshotFunc.appendCall(ISnapshotsGetAliceNetHeightFromLatestSnapshotFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAliceNetHeightFromLatestSnapshot method of the parent MockISnapshots
// instance is invoked and the hook queue is empty.
func (f *ISnapshotsGetAliceNetHeightFromLatestSnapshotFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAliceNetHeightFromLatestSnapshot method of the parent MockISnapshots
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ISnapshotsGetAliceNetHeightFromLatestSnapshotFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetAliceNetHeightFromLatestSnapshotFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetAliceNetHeightFromLatestSnapshotFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetAliceNetHeightFromLatestSnapshotFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetAliceNetHeightFromLatestSnapshotFunc) appendCall(r0 ISnapshotsGetAliceNetHeightFromLatestSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsGetAliceNetHeightFromLatestSnapshotFuncCall objects describing
// the invocations of this function.
func (f *ISnapshotsGetAliceNetHeightFromLatestSnapshotFunc) History() []ISnapshotsGetAliceNetHeightFromLatestSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetAliceNetHeightFromLatestSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetAliceNetHeightFromLatestSnapshotFuncCall is an object that
// describes an invocation of method GetAliceNetHeightFromLatestSnapshot on
// an instance of MockISnapshots.
type ISnapshotsGetAliceNetHeightFromLatestSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetAliceNetHeightFromLatestSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetAliceNetHeightFromLatestSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetAliceNetHeightFromSnapshotFunc describes the behavior when
// the GetAliceNetHeightFromSnapshot method of the parent MockISnapshots
// instance is invoked.
type ISnapshotsGetAliceNetHeightFromSnapshotFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []ISnapshotsGetAliceNetHeightFromSnapshotFuncCall
	mutex       sync.Mutex
}

// GetAliceNetHeightFromSnapshot delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockISnapshots) GetAliceNetHeightFromSnapshot(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.GetAliceNetHeightFromSnapshotFunc.nextHook()(v0, v1)
	m.GetAliceNetHeightFromSnapshotFunc.appendCall(ISnapshotsGetAliceNetHeightFromSnapshotFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAliceNetHeightFromSnapshot method of the parent MockISnapshots
// instance is invoked and the hook queue is empty.
func (f *ISnapshotsGetAliceNetHeightFromSnapshotFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAliceNetHeightFromSnapshot method of the parent MockISnapshots
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ISnapshotsGetAliceNetHeightFromSnapshotFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetAliceNetHeightFromSnapshotFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetAliceNetHeightFromSnapshotFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetAliceNetHeightFromSnapshotFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetAliceNetHeightFromSnapshotFunc) appendCall(r0 ISnapshotsGetAliceNetHeightFromSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsGetAliceNetHeightFromSnapshotFuncCall objects describing the
// invocations of this function.
func (f *ISnapshotsGetAliceNetHeightFromSnapshotFunc) History() []ISnapshotsGetAliceNetHeightFromSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetAliceNetHeightFromSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetAliceNetHeightFromSnapshotFuncCall is an object that
// describes an invocation of method GetAliceNetHeightFromSnapshot on an
// instance of MockISnapshots.
type ISnapshotsGetAliceNetHeightFromSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetAliceNetHeightFromSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetAliceNetHeightFromSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetBlockClaimsFromLatestSnapshotFunc describes the behavior
// when the GetBlockClaimsFromLatestSnapshot method of the parent
// MockISnapshots instance is invoked.
type ISnapshotsGetBlockClaimsFromLatestSnapshotFunc struct {
	defaultHook func(*bind.CallOpts) (bindings.BClaimsParserLibraryBClaims, error)
	hooks       []func(*bind.CallOpts) (bindings.BClaimsParserLibraryBClaims, error)
	history     []ISnapshotsGetBlockClaimsFromLatestSnapshotFuncCall
	mutex       sync.Mutex
}

// GetBlockClaimsFromLatestSnapshot delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockISnapshots) GetBlockClaimsFromLatestSnapshot(v0 *bind.CallOpts) (bindings.BClaimsParserLibraryBClaims, error) {
	r0, r1 := m.GetBlockClaimsFromLatestSnapshotFunc.nextHook()(v0)
	m.GetBlockClaimsFromLatestSnapshotFunc.appendCall(ISnapshotsGetBlockClaimsFromLatestSnapshotFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetBlockClaimsFromLatestSnapshot method of the parent MockISnapshots
// instance is invoked and the hook queue is empty.
func (f *ISnapshotsGetBlockClaimsFromLatestSnapshotFunc) SetDefaultHook(hook func(*bind.CallOpts) (bindings.BClaimsParserLibraryBClaims, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBlockClaimsFromLatestSnapshot method of the parent MockISnapshots
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ISnapshotsGetBlockClaimsFromLatestSnapshotFunc) PushHook(hook func(*bind.CallOpts) (bindings.BClaimsParserLibraryBClaims, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetBlockClaimsFromLatestSnapshotFunc) SetDefaultReturn(r0 bindings.BClaimsParserLibraryBClaims, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (bindings.BClaimsParserLibraryBClaims, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetBlockClaimsFromLatestSnapshotFunc) PushReturn(r0 bindings.BClaimsParserLibraryBClaims, r1 error) {
	f.PushHook(func(*bind.CallOpts) (bindings.BClaimsParserLibraryBClaims, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetBlockClaimsFromLatestSnapshotFunc) nextHook() func(*bind.CallOpts) (bindings.BClaimsParserLibraryBClaims, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetBlockClaimsFromLatestSnapshotFunc) appendCall(r0 ISnapshotsGetBlockClaimsFromLatestSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsGetBlockClaimsFromLatestSnapshotFuncCall objects describing the
// invocations of this function.
func (f *ISnapshotsGetBlockClaimsFromLatestSnapshotFunc) History() []ISnapshotsGetBlockClaimsFromLatestSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetBlockClaimsFromLatestSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetBlockClaimsFromLatestSnapshotFuncCall is an object that
// describes an invocation of method GetBlockClaimsFromLatestSnapshot on an
// instance of MockISnapshots.
type ISnapshotsGetBlockClaimsFromLatestSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.BClaimsParserLibraryBClaims
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetBlockClaimsFromLatestSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetBlockClaimsFromLatestSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetBlockClaimsFromSnapshotFunc describes the behavior when the
// GetBlockClaimsFromSnapshot method of the parent MockISnapshots instance
// is invoked.
type ISnapshotsGetBlockClaimsFromSnapshotFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (bindings.BClaimsParserLibraryBClaims, error)
	hooks       []func(*bind.CallOpts, *big.Int) (bindings.BClaimsParserLibraryBClaims, error)
	history     []ISnapshotsGetBlockClaimsFromSnapshotFuncCall
	mutex       sync.Mutex
}

// GetBlockClaimsFromSnapshot delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockISnapshots) GetBlockClaimsFromSnapshot(v0 *bind.CallOpts, v1 *big.Int) (bindings.BClaimsParserLibraryBClaims, error) {
	r0, r1 := m.GetBlockClaimsFromSnapshotFunc.nextHook()(v0, v1)
	m.GetBlockClaimsFromSnapshotFunc.appendCall(ISnapshotsGetBlockClaimsFromSnapshotFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetBlockClaimsFromSnapshot method of the parent MockISnapshots instance
// is invoked and the hook queue is empty.
func (f *ISnapshotsGetBlockClaimsFromSnapshotFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (bindings.BClaimsParserLibraryBClaims, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBlockClaimsFromSnapshot method of the parent MockISnapshots instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ISnapshotsGetBlockClaimsFromSnapshotFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (bindings.BClaimsParserLibraryBClaims, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetBlockClaimsFromSnapshotFunc) SetDefaultReturn(r0 bindings.BClaimsParserLibraryBClaims, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (bindings.BClaimsParserLibraryBClaims, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetBlockClaimsFromSnapshotFunc) PushReturn(r0 bindings.BClaimsParserLibraryBClaims, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (bindings.BClaimsParserLibraryBClaims, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetBlockClaimsFromSnapshotFunc) nextHook() func(*bind.CallOpts, *big.Int) (bindings.BClaimsParserLibraryBClaims, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetBlockClaimsFromSnapshotFunc) appendCall(r0 ISnapshotsGetBlockClaimsFromSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsGetBlockClaimsFromSnapshotFuncCall objects describing the
// invocations of this function.
func (f *ISnapshotsGetBlockClaimsFromSnapshotFunc) History() []ISnapshotsGetBlockClaimsFromSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetBlockClaimsFromSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetBlockClaimsFromSnapshotFuncCall is an object that describes
// an invocation of method GetBlockClaimsFromSnapshot on an instance of
// MockISnapshots.
type ISnapshotsGetBlockClaimsFromSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.BClaimsParserLibraryBClaims
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetBlockClaimsFromSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetBlockClaimsFromSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetChainIdFunc describes the behavior when the GetChainId
// method of the parent MockISnapshots instance is invoked.
type ISnapshotsGetChainIdFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []ISnapshotsGetChainIdFuncCall
	mutex       sync.Mutex
}

// GetChainId delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockISnapshots) GetChainId(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetChainIdFunc.nextHook()(v0)
	m.GetChainIdFunc.appendCall(ISnapshotsGetChainIdFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetChainId method of
// the parent MockISnapshots instance is invoked and the hook queue is
// empty.
func (f *ISnapshotsGetChainIdFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetChainId method of the parent MockISnapshots instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ISnapshotsGetChainIdFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetChainIdFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetChainIdFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetChainIdFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetChainIdFunc) appendCall(r0 ISnapshotsGetChainIdFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsGetChainIdFuncCall objects
// describing the invocations of this function.
func (f *ISnapshotsGetChainIdFunc) History() []ISnapshotsGetChainIdFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetChainIdFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetChainIdFuncCall is an object that describes an invocation of
// method GetChainId on an instance of MockISnapshots.
type ISnapshotsGetChainIdFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetChainIdFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetChainIdFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetChainIdFromLatestSnapshotFunc describes the behavior when
// the GetChainIdFromLatestSnapshot method of the parent MockISnapshots
// instance is invoked.
type ISnapshotsGetChainIdFromLatestSnapshotFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []ISnapshotsGetChainIdFromLatestSnapshotFuncCall
	mutex       sync.Mutex
}

// GetChainIdFromLatestSnapshot delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockISnapshots) GetChainIdFromLatestSnapshot(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetChainIdFromLatestSnapshotFunc.nextHook()(v0)
	m.GetChainIdFromLatestSnapshotFunc.appendCall(ISnapshotsGetChainIdFromLatestSnapshotFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetChainIdFromLatestSnapshot method of the parent MockISnapshots instance
// is invoked and the hook queue is empty.
func (f *ISnapshotsGetChainIdFromLatestSnapshotFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetChainIdFromLatestSnapshot method of the parent MockISnapshots instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ISnapshotsGetChainIdFromLatestSnapshotFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetChainIdFromLatestSnapshotFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetChainIdFromLatestSnapshotFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetChainIdFromLatestSnapshotFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetChainIdFromLatestSnapshotFunc) appendCall(r0 ISnapshotsGetChainIdFromLatestSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsGetChainIdFromLatestSnapshotFuncCall objects describing the
// invocations of this function.
func (f *ISnapshotsGetChainIdFromLatestSnapshotFunc) History() []ISnapshotsGetChainIdFromLatestSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetChainIdFromLatestSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetChainIdFromLatestSnapshotFuncCall is an object that
// describes an invocation of method GetChainIdFromLatestSnapshot on an
// instance of MockISnapshots.
type ISnapshotsGetChainIdFromLatestSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetChainIdFromLatestSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetChainIdFromLatestSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetChainIdFromSnapshotFunc describes the behavior when the
// GetChainIdFromSnapshot method of the parent MockISnapshots instance is
// invoked.
type ISnapshotsGetChainIdFromSnapshotFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []ISnapshotsGetChainIdFromSnapshotFuncCall
	mutex       sync.Mutex
}

// GetChainIdFromSnapshot delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockISnapshots) GetChainIdFromSnapshot(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.GetChainIdFromSnapshotFunc.nextHook()(v0, v1)
	m.GetChainIdFromSnapshotFunc.appendCall(ISnapshotsGetChainIdFromSnapshotFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetChainIdFromSnapshot method of the parent MockISnapshots instance is
// invoked and the hook queue is empty.
func (f *ISnapshotsGetChainIdFromSnapshotFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetChainIdFromSnapshot method of the parent MockISnapshots instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ISnapshotsGetChainIdFromSnapshotFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetChainIdFromSnapshotFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetChainIdFromSnapshotFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetChainIdFromSnapshotFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetChainIdFromSnapshotFunc) appendCall(r0 ISnapshotsGetChainIdFromSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsGetChainIdFromSnapshotFuncCall
// objects describing the invocations of this function.
func (f *ISnapshotsGetChainIdFromSnapshotFunc) History() []ISnapshotsGetChainIdFromSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetChainIdFromSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetChainIdFromSnapshotFuncCall is an object that describes an
// invocation of method GetChainIdFromSnapshot on an instance of
// MockISnapshots.
type ISnapshotsGetChainIdFromSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetChainIdFromSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetChainIdFromSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetCommittedHeightFromLatestSnapshotFunc describes the behavior
// when the GetCommittedHeightFromLatestSnapshot method of the parent
// MockISnapshots instance is invoked.
type ISnapshotsGetCommittedHeightFromLatestSnapshotFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []ISnapshotsGetCommittedHeightFromLatestSnapshotFuncCall
	mutex       sync.Mutex
}

// GetCommittedHeightFromLatestSnapshot delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockISnapshots) GetCommittedHeightFromLatestSnapshot(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetCommittedHeightFromLatestSnapshotFunc.nextHook()(v0)
	m.GetCommittedHeightFromLatestSnapshotFunc.appendCall(ISnapshotsGetCommittedHeightFromLatestSnapshotFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetCommittedHeightFromLatestSnapshot method of the parent MockISnapshots
// instance is invoked and the hook queue is empty.
func (f *ISnapshotsGetCommittedHeightFromLatestSnapshotFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommittedHeightFromLatestSnapshot method of the parent MockISnapshots
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ISnapshotsGetCommittedHeightFromLatestSnapshotFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetCommittedHeightFromLatestSnapshotFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetCommittedHeightFromLatestSnapshotFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetCommittedHeightFromLatestSnapshotFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetCommittedHeightFromLatestSnapshotFunc) appendCall(r0 ISnapshotsGetCommittedHeightFromLatestSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsGetCommittedHeightFromLatestSnapshotFuncCall objects describing
// the invocations of this function.
func (f *ISnapshotsGetCommittedHeightFromLatestSnapshotFunc) History() []ISnapshotsGetCommittedHeightFromLatestSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetCommittedHeightFromLatestSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetCommittedHeightFromLatestSnapshotFuncCall is an object that
// describes an invocation of method GetCommittedHeightFromLatestSnapshot on
// an instance of MockISnapshots.
type ISnapshotsGetCommittedHeightFromLatestSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetCommittedHeightFromLatestSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetCommittedHeightFromLatestSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetCommittedHeightFromSnapshotFunc describes the behavior when
// the GetCommittedHeightFromSnapshot method of the parent MockISnapshots
// instance is invoked.
type ISnapshotsGetCommittedHeightFromSnapshotFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []ISnapshotsGetCommittedHeightFromSnapshotFuncCall
	mutex       sync.Mutex
}

// GetCommittedHeightFromSnapshot delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockISnapshots) GetCommittedHeightFromSnapshot(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.GetCommittedHeightFromSnapshotFunc.nextHook()(v0, v1)
	m.GetCommittedHeightFromSnapshotFunc.appendCall(ISnapshotsGetCommittedHeightFromSnapshotFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetCommittedHeightFromSnapshot method of the parent MockISnapshots
// instance is invoked and the hook queue is empty.
func (f *ISnapshotsGetCommittedHeightFromSnapshotFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommittedHeightFromSnapshot method of the parent MockISnapshots
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ISnapshotsGetCommittedHeightFromSnapshotFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetCommittedHeightFromSnapshotFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetCommittedHeightFromSnapshotFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetCommittedHeightFromSnapshotFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetCommittedHeightFromSnapshotFunc) appendCall(r0 ISnapshotsGetCommittedHeightFromSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsGetCommittedHeightFromSnapshotFuncCall objects describing the
// invocations of this function.
func (f *ISnapshotsGetCommittedHeightFromSnapshotFunc) History() []ISnapshotsGetCommittedHeightFromSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetCommittedHeightFromSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetCommittedHeightFromSnapshotFuncCall is an object that
// describes an invocation of method GetCommittedHeightFromSnapshot on an
// instance of MockISnapshots.
type ISnapshotsGetCommittedHeightFromSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetCommittedHeightFromSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetCommittedHeightFromSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetEpochFunc describes the behavior when the GetEpoch method of
// the parent MockISnapshots instance is invoked.
type ISnapshotsGetEpochFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []ISnapshotsGetEpochFuncCall
	mutex       sync.Mutex
}

// GetEpoch delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockISnapshots) GetEpoch(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetEpochFunc.nextHook()(v0)
	m.GetEpochFunc.appendCall(ISnapshotsGetEpochFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetEpoch method of
// the parent MockISnapshots instance is invoked and the hook queue is
// empty.
func (f *ISnapshotsGetEpochFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEpoch method of the parent MockISnapshots instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ISnapshotsGetEpochFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetEpochFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetEpochFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetEpochFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetEpochFunc) appendCall(r0 ISnapshotsGetEpochFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsGetEpochFuncCall objects
// describing the invocations of this function.
func (f *ISnapshotsGetEpochFunc) History() []ISnapshotsGetEpochFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetEpochFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetEpochFuncCall is an object that describes an invocation of
// method GetEpoch on an instance of MockISnapshots.
type ISnapshotsGetEpochFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetEpochFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetEpochFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetEpochFromHeightFunc describes the behavior when the
// GetEpochFromHeight method of the parent MockISnapshots instance is
// invoked.
type ISnapshotsGetEpochFromHeightFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []ISnapshotsGetEpochFromHeightFuncCall
	mutex       sync.Mutex
}

// GetEpochFromHeight delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockISnapshots) GetEpochFromHeight(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.GetEpochFromHeightFunc.nextHook()(v0, v1)
	m.GetEpochFromHeightFunc.appendCall(ISnapshotsGetEpochFromHeightFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetEpochFromHeight
// method of the parent MockISnapshots instance is invoked and the hook
// queue is empty.
func (f *ISnapshotsGetEpochFromHeightFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEpochFromHeight method of the parent MockISnapshots instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ISnapshotsGetEpochFromHeightFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetEpochFromHeightFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetEpochFromHeightFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetEpochFromHeightFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetEpochFromHeightFunc) appendCall(r0 ISnapshotsGetEpochFromHeightFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsGetEpochFromHeightFuncCall
// objects describing the invocations of this function.
func (f *ISnapshotsGetEpochFromHeightFunc) History() []ISnapshotsGetEpochFromHeightFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetEpochFromHeightFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetEpochFromHeightFuncCall is an object that describes an
// invocation of method GetEpochFromHeight on an instance of MockISnapshots.
type ISnapshotsGetEpochFromHeightFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetEpochFromHeightFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetEpochFromHeightFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetEpochLengthFunc describes the behavior when the
// GetEpochLength method of the parent MockISnapshots instance is invoked.
type ISnapshotsGetEpochLengthFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []ISnapshotsGetEpochLengthFuncCall
	mutex       sync.Mutex
}

// GetEpochLength delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockISnapshots) GetEpochLength(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetEpochLengthFunc.nextHook()(v0)
	m.GetEpochLengthFunc.appendCall(ISnapshotsGetEpochLengthFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetEpochLength
// method of the parent MockISnapshots instance is invoked and the hook
// queue is empty.
func (f *ISnapshotsGetEpochLengthFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEpochLength method of the parent MockISnapshots instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ISnapshotsGetEpochLengthFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetEpochLengthFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetEpochLengthFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetEpochLengthFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetEpochLengthFunc) appendCall(r0 ISnapshotsGetEpochLengthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsGetEpochLengthFuncCall objects
// describing the invocations of this function.
func (f *ISnapshotsGetEpochLengthFunc) History() []ISnapshotsGetEpochLengthFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetEpochLengthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetEpochLengthFuncCall is an object that describes an
// invocation of method GetEpochLength on an instance of MockISnapshots.
type ISnapshotsGetEpochLengthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetEpochLengthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetEpochLengthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetLatestSnapshotFunc describes the behavior when the
// GetLatestSnapshot method of the parent MockISnapshots instance is
// invoked.
type ISnapshotsGetLatestSnapshotFunc struct {
	defaultHook func(*bind.CallOpts) (bindings.Snapshot, error)
	hooks       []func(*bind.CallOpts) (bindings.Snapshot, error)
	history     []ISnapshotsGetLatestSnapshotFuncCall
	mutex       sync.Mutex
}

// GetLatestSnapshot delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockISnapshots) GetLatestSnapshot(v0 *bind.CallOpts) (bindings.Snapshot, error) {
	r0, r1 := m.GetLatestSnapshotFunc.nextHook()(v0)
	m.GetLatestSnapshotFunc.appendCall(ISnapshotsGetLatestSnapshotFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLatestSnapshot
// method of the parent MockISnapshots instance is invoked and the hook
// queue is empty.
func (f *ISnapshotsGetLatestSnapshotFunc) SetDefaultHook(hook func(*bind.CallOpts) (bindings.Snapshot, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestSnapshot method of the parent MockISnapshots instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ISnapshotsGetLatestSnapshotFunc) PushHook(hook func(*bind.CallOpts) (bindings.Snapshot, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetLatestSnapshotFunc) SetDefaultReturn(r0 bindings.Snapshot, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (bindings.Snapshot, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetLatestSnapshotFunc) PushReturn(r0 bindings.Snapshot, r1 error) {
	f.PushHook(func(*bind.CallOpts) (bindings.Snapshot, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetLatestSnapshotFunc) nextHook() func(*bind.CallOpts) (bindings.Snapshot, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetLatestSnapshotFunc) appendCall(r0 ISnapshotsGetLatestSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsGetLatestSnapshotFuncCall objects
// describing the invocations of this function.
func (f *ISnapshotsGetLatestSnapshotFunc) History() []ISnapshotsGetLatestSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetLatestSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetLatestSnapshotFuncCall is an object that describes an
// invocation of method GetLatestSnapshot on an instance of MockISnapshots.
type ISnapshotsGetLatestSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.Snapshot
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetLatestSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetLatestSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetMetamorphicContractAddressFunc describes the behavior when
// the GetMetamorphicContractAddress method of the parent MockISnapshots
// instance is invoked.
type ISnapshotsGetMetamorphicContractAddressFunc struct {
	defaultHook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	hooks       []func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	history     []ISnapshotsGetMetamorphicContractAddressFuncCall
	mutex       sync.Mutex
}

// GetMetamorphicContractAddress delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockISnapshots) GetMetamorphicContractAddress(v0 *bind.CallOpts, v1 [32]byte, v2 common.Address) (common.Address, error) {
	r0, r1 := m.GetMetamorphicContractAddressFunc.nextHook()(v0, v1, v2)
	m.GetMetamorphicContractAddressFunc.appendCall(ISnapshotsGetMetamorphicContractAddressFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMetamorphicContractAddress method of the parent MockISnapshots
// instance is invoked and the hook queue is empty.
func (f *ISnapshotsGetMetamorphicContractAddressFunc) SetDefaultHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMetamorphicContractAddress method of the parent MockISnapshots
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ISnapshotsGetMetamorphicContractAddressFunc) PushHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetMetamorphicContractAddressFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetMetamorphicContractAddressFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetMetamorphicContractAddressFunc) nextHook() func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetMetamorphicContractAddressFunc) appendCall(r0 ISnapshotsGetMetamorphicContractAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsGetMetamorphicContractAddressFuncCall objects describing the
// invocations of this function.
func (f *ISnapshotsGetMetamorphicContractAddressFunc) History() []ISnapshotsGetMetamorphicContractAddressFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetMetamorphicContractAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetMetamorphicContractAddressFuncCall is an object that
// describes an invocation of method GetMetamorphicContractAddress on an
// instance of MockISnapshots.
type ISnapshotsGetMetamorphicContractAddressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetMetamorphicContractAddressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetMetamorphicContractAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetMinimumIntervalBetweenSnapshotsFunc describes the behavior
// when the GetMinimumIntervalBetweenSnapshots method of the parent
// MockISnapshots instance is invoked.
type ISnapshotsGetMinimumIntervalBetweenSnapshotsFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []ISnapshotsGetMinimumIntervalBetweenSnapshotsFuncCall
	mutex       sync.Mutex
}

// GetMinimumIntervalBetweenSnapshots delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockISnapshots) GetMinimumIntervalBetweenSnapshots(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetMinimumIntervalBetweenSnapshotsFunc.nextHook()(v0)
	m.GetMinimumIntervalBetweenSnapshotsFunc.appendCall(ISnapshotsGetMinimumIntervalBetweenSnapshotsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMinimumIntervalBetweenSnapshots method of the parent MockISnapshots
// instance is invoked and the hook queue is empty.
func (f *ISnapshotsGetMinimumIntervalBetweenSnapshotsFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMinimumIntervalBetweenSnapshots method of the parent MockISnapshots
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ISnapshotsGetMinimumIntervalBetweenSnapshotsFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetMinimumIntervalBetweenSnapshotsFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetMinimumIntervalBetweenSnapshotsFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetMinimumIntervalBetweenSnapshotsFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetMinimumIntervalBetweenSnapshotsFunc) appendCall(r0 ISnapshotsGetMinimumIntervalBetweenSnapshotsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsGetMinimumIntervalBetweenSnapshotsFuncCall objects describing
// the invocations of this function.
func (f *ISnapshotsGetMinimumIntervalBetweenSnapshotsFunc) History() []ISnapshotsGetMinimumIntervalBetweenSnapshotsFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetMinimumIntervalBetweenSnapshotsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetMinimumIntervalBetweenSnapshotsFuncCall is an object that
// describes an invocation of method GetMinimumIntervalBetweenSnapshots on
// an instance of MockISnapshots.
type ISnapshotsGetMinimumIntervalBetweenSnapshotsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetMinimumIntervalBetweenSnapshotsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetMinimumIntervalBetweenSnapshotsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetSnapshotFunc describes the behavior when the GetSnapshot
// method of the parent MockISnapshots instance is invoked.
type ISnapshotsGetSnapshotFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (bindings.Snapshot, error)
	hooks       []func(*bind.CallOpts, *big.Int) (bindings.Snapshot, error)
	history     []ISnapshotsGetSnapshotFuncCall
	mutex       sync.Mutex
}

// GetSnapshot delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockISnapshots) GetSnapshot(v0 *bind.CallOpts, v1 *big.Int) (bindings.Snapshot, error) {
	r0, r1 := m.GetSnapshotFunc.nextHook()(v0, v1)
	m.GetSnapshotFunc.appendCall(ISnapshotsGetSnapshotFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSnapshot method
// of the parent MockISnapshots instance is invoked and the hook queue is
// empty.
func (f *ISnapshotsGetSnapshotFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (bindings.Snapshot, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSnapshot method of the parent MockISnapshots instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ISnapshotsGetSnapshotFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (bindings.Snapshot, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetSnapshotFunc) SetDefaultReturn(r0 bindings.Snapshot, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (bindings.Snapshot, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetSnapshotFunc) PushReturn(r0 bindings.Snapshot, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (bindings.Snapshot, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetSnapshotFunc) nextHook() func(*bind.CallOpts, *big.Int) (bindings.Snapshot, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetSnapshotFunc) appendCall(r0 ISnapshotsGetSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsGetSnapshotFuncCall objects
// describing the invocations of this function.
func (f *ISnapshotsGetSnapshotFunc) History() []ISnapshotsGetSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetSnapshotFuncCall is an object that describes an invocation
// of method GetSnapshot on an instance of MockISnapshots.
type ISnapshotsGetSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.Snapshot
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetSnapshotDesperationDelayFunc describes the behavior when the
// GetSnapshotDesperationDelay method of the parent MockISnapshots instance
// is invoked.
type ISnapshotsGetSnapshotDesperationDelayFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []ISnapshotsGetSnapshotDesperationDelayFuncCall
	mutex       sync.Mutex
}

// GetSnapshotDesperationDelay delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockISnapshots) GetSnapshotDesperationDelay(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetSnapshotDesperationDelayFunc.nextHook()(v0)
	m.GetSnapshotDesperationDelayFunc.appendCall(ISnapshotsGetSnapshotDesperationDelayFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetSnapshotDesperationDelay method of the parent MockISnapshots instance
// is invoked and the hook queue is empty.
func (f *ISnapshotsGetSnapshotDesperationDelayFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSnapshotDesperationDelay method of the parent MockISnapshots instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ISnapshotsGetSnapshotDesperationDelayFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetSnapshotDesperationDelayFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetSnapshotDesperationDelayFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetSnapshotDesperationDelayFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetSnapshotDesperationDelayFunc) appendCall(r0 ISnapshotsGetSnapshotDesperationDelayFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsGetSnapshotDesperationDelayFuncCall objects describing the
// invocations of this function.
func (f *ISnapshotsGetSnapshotDesperationDelayFunc) History() []ISnapshotsGetSnapshotDesperationDelayFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetSnapshotDesperationDelayFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetSnapshotDesperationDelayFuncCall is an object that describes
// an invocation of method GetSnapshotDesperationDelay on an instance of
// MockISnapshots.
type ISnapshotsGetSnapshotDesperationDelayFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetSnapshotDesperationDelayFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetSnapshotDesperationDelayFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsGetSnapshotDesperationFactorFunc describes the behavior when
// the GetSnapshotDesperationFactor method of the parent MockISnapshots
// instance is invoked.
type ISnapshotsGetSnapshotDesperationFactorFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []ISnapshotsGetSnapshotDesperationFactorFuncCall
	mutex       sync.Mutex
}

// GetSnapshotDesperationFactor delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockISnapshots) GetSnapshotDesperationFactor(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetSnapshotDesperationFactorFunc.nextHook()(v0)
	m.GetSnapshotDesperationFactorFunc.appendCall(ISnapshotsGetSnapshotDesperationFactorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetSnapshotDesperationFactor method of the parent MockISnapshots instance
// is invoked and the hook queue is empty.
func (f *ISnapshotsGetSnapshotDesperationFactorFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSnapshotDesperationFactor method of the parent MockISnapshots instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ISnapshotsGetSnapshotDesperationFactorFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsGetSnapshotDesperationFactorFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsGetSnapshotDesperationFactorFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ISnapshotsGetSnapshotDesperationFactorFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsGetSnapshotDesperationFactorFunc) appendCall(r0 ISnapshotsGetSnapshotDesperationFactorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsGetSnapshotDesperationFactorFuncCall objects describing the
// invocations of this function.
func (f *ISnapshotsGetSnapshotDesperationFactorFunc) History() []ISnapshotsGetSnapshotDesperationFactorFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsGetSnapshotDesperationFactorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsGetSnapshotDesperationFactorFuncCall is an object that
// describes an invocation of method GetSnapshotDesperationFactor on an
// instance of MockISnapshots.
type ISnapshotsGetSnapshotDesperationFactorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsGetSnapshotDesperationFactorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsGetSnapshotDesperationFactorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsInitializeFunc describes the behavior when the Initialize
// method of the parent MockISnapshots instance is invoked.
type ISnapshotsInitializeFunc struct {
	defaultHook func(*bind.TransactOpts, uint32, uint32) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint32, uint32) (*types.Transaction, error)
	history     []ISnapshotsInitializeFuncCall
	mutex       sync.Mutex
}

// Initialize delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockISnapshots) Initialize(v0 *bind.TransactOpts, v1 uint32, v2 uint32) (*types.Transaction, error) {
	r0, r1 := m.InitializeFunc.nextHook()(v0, v1, v2)
	m.InitializeFunc.appendCall(ISnapshotsInitializeFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Initialize method of
// the parent MockISnapshots instance is invoked and the hook queue is
// empty.
func (f *ISnapshotsInitializeFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint32, uint32) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Initialize method of the parent MockISnapshots instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ISnapshotsInitializeFunc) PushHook(hook func(*bind.TransactOpts, uint32, uint32) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsInitializeFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint32, uint32) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsInitializeFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint32, uint32) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *ISnapshotsInitializeFunc) nextHook() func(*bind.TransactOpts, uint32, uint32) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsInitializeFunc) appendCall(r0 ISnapshotsInitializeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsInitializeFuncCall objects
// describing the invocations of this function.
func (f *ISnapshotsInitializeFunc) History() []ISnapshotsInitializeFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsInitializeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsInitializeFuncCall is an object that describes an invocation of
// method Initialize on an instance of MockISnapshots.
type ISnapshotsInitializeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 uint32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsInitializeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsInitializeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsIsValidatorElectedToPerformSnapshotFunc describes the behavior
// when the IsValidatorElectedToPerformSnapshot method of the parent
// MockISnapshots instance is invoked.
type ISnapshotsIsValidatorElectedToPerformSnapshotFunc struct {
	defaultHook func(*bind.CallOpts, common.Address, *big.Int, [32]byte) (bool, error)
	hooks       []func(*bind.CallOpts, common.Address, *big.Int, [32]byte) (bool, error)
	history     []ISnapshotsIsValidatorElectedToPerformSnapshotFuncCall
	mutex       sync.Mutex
}

// IsValidatorElectedToPerformSnapshot delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockISnapshots) IsValidatorElectedToPerformSnapshot(v0 *bind.CallOpts, v1 common.Address, v2 *big.Int, v3 [32]byte) (bool, error) {
	r0, r1 := m.IsValidatorElectedToPerformSnapshotFunc.nextHook()(v0, v1, v2, v3)
	m.IsValidatorElectedToPerformSnapshotFunc.appendCall(ISnapshotsIsValidatorElectedToPerformSnapshotFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// IsValidatorElectedToPerformSnapshot method of the parent MockISnapshots
// instance is invoked and the hook queue is empty.
func (f *ISnapshotsIsValidatorElectedToPerformSnapshotFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address, *big.Int, [32]byte) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsValidatorElectedToPerformSnapshot method of the parent MockISnapshots
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ISnapshotsIsValidatorElectedToPerformSnapshotFunc) PushHook(hook func(*bind.CallOpts, common.Address, *big.Int, [32]byte) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsIsValidatorElectedToPerformSnapshotFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address, *big.Int, [32]byte) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsIsValidatorElectedToPerformSnapshotFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address, *big.Int, [32]byte) (bool, error) {
		return r0, r1
	})
}

func (f *ISnapshotsIsValidatorElectedToPerformSnapshotFunc) nextHook() func(*bind.CallOpts, common.Address, *big.Int, [32]byte) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsIsValidatorElectedToPerformSnapshotFunc) appendCall(r0 ISnapshotsIsValidatorElectedToPerformSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsIsValidatorElectedToPerformSnapshotFuncCall objects describing
// the invocations of this function.
func (f *ISnapshotsIsValidatorElectedToPerformSnapshotFunc) History() []ISnapshotsIsValidatorElectedToPerformSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsIsValidatorElectedToPerformSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsIsValidatorElectedToPerformSnapshotFuncCall is an object that
// describes an invocation of method IsValidatorElectedToPerformSnapshot on
// an instance of MockISnapshots.
type ISnapshotsIsValidatorElectedToPerformSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 [32]byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsIsValidatorElectedToPerformSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsIsValidatorElectedToPerformSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsMayValidatorSnapshotFunc describes the behavior when the
// MayValidatorSnapshot method of the parent MockISnapshots instance is
// invoked.
type ISnapshotsMayValidatorSnapshotFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int, *big.Int, *big.Int, [32]byte, *big.Int) (bool, error)
	hooks       []func(*bind.CallOpts, *big.Int, *big.Int, *big.Int, [32]byte, *big.Int) (bool, error)
	history     []ISnapshotsMayValidatorSnapshotFuncCall
	mutex       sync.Mutex
}

// MayValidatorSnapshot delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockISnapshots) MayValidatorSnapshot(v0 *bind.CallOpts, v1 *big.Int, v2 *big.Int, v3 *big.Int, v4 [32]byte, v5 *big.Int) (bool, error) {
	r0, r1 := m.MayValidatorSnapshotFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.MayValidatorSnapshotFunc.appendCall(ISnapshotsMayValidatorSnapshotFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MayValidatorSnapshot
// method of the parent MockISnapshots instance is invoked and the hook
// queue is empty.
func (f *ISnapshotsMayValidatorSnapshotFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int, *big.Int, *big.Int, [32]byte, *big.Int) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MayValidatorSnapshot method of the parent MockISnapshots instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ISnapshotsMayValidatorSnapshotFunc) PushHook(hook func(*bind.CallOpts, *big.Int, *big.Int, *big.Int, [32]byte, *big.Int) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsMayValidatorSnapshotFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int, *big.Int, *big.Int, [32]byte, *big.Int) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsMayValidatorSnapshotFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int, *big.Int, *big.Int, [32]byte, *big.Int) (bool, error) {
		return r0, r1
	})
}

func (f *ISnapshotsMayValidatorSnapshotFunc) nextHook() func(*bind.CallOpts, *big.Int, *big.Int, *big.Int, [32]byte, *big.Int) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsMayValidatorSnapshotFunc) appendCall(r0 ISnapshotsMayValidatorSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsMayValidatorSnapshotFuncCall
// objects describing the invocations of this function.
func (f *ISnapshotsMayValidatorSnapshotFunc) History() []ISnapshotsMayValidatorSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsMayValidatorSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsMayValidatorSnapshotFuncCall is an object that describes an
// invocation of method MayValidatorSnapshot on an instance of
// MockISnapshots.
type ISnapshotsMayValidatorSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 [32]byte
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsMayValidatorSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsMayValidatorSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsMigrateSnapshotsFunc describes the behavior when the
// MigrateSnapshots method of the parent MockISnapshots instance is invoked.
type ISnapshotsMigrateSnapshotsFunc struct {
	defaultHook func(*bind.TransactOpts, [][]byte, [][]byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, [][]byte, [][]byte) (*types.Transaction, error)
	history     []ISnapshotsMigrateSnapshotsFuncCall
	mutex       sync.Mutex
}

// MigrateSnapshots delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockISnapshots) MigrateSnapshots(v0 *bind.TransactOpts, v1 [][]byte, v2 [][]byte) (*types.Transaction, error) {
	r0, r1 := m.MigrateSnapshotsFunc.nextHook()(v0, v1, v2)
	m.MigrateSnapshotsFunc.appendCall(ISnapshotsMigrateSnapshotsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MigrateSnapshots
// method of the parent MockISnapshots instance is invoked and the hook
// queue is empty.
func (f *ISnapshotsMigrateSnapshotsFunc) SetDefaultHook(hook func(*bind.TransactOpts, [][]byte, [][]byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MigrateSnapshots method of the parent MockISnapshots instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ISnapshotsMigrateSnapshotsFunc) PushHook(hook func(*bind.TransactOpts, [][]byte, [][]byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsMigrateSnapshotsFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, [][]byte, [][]byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsMigrateSnapshotsFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, [][]byte, [][]byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *ISnapshotsMigrateSnapshotsFunc) nextHook() func(*bind.TransactOpts, [][]byte, [][]byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsMigrateSnapshotsFunc) appendCall(r0 ISnapshotsMigrateSnapshotsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsMigrateSnapshotsFuncCall objects
// describing the invocations of this function.
func (f *ISnapshotsMigrateSnapshotsFunc) History() []ISnapshotsMigrateSnapshotsFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsMigrateSnapshotsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsMigrateSnapshotsFuncCall is an object that describes an
// invocation of method MigrateSnapshots on an instance of MockISnapshots.
type ISnapshotsMigrateSnapshotsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [][]byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 [][]byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsMigrateSnapshotsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsMigrateSnapshotsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsParseInitializedFunc describes the behavior when the
// ParseInitialized method of the parent MockISnapshots instance is invoked.
type ISnapshotsParseInitializedFunc struct {
	defaultHook func(types.Log) (*bindings.SnapshotsInitialized, error)
	hooks       []func(types.Log) (*bindings.SnapshotsInitialized, error)
	history     []ISnapshotsParseInitializedFuncCall
	mutex       sync.Mutex
}

// ParseInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockISnapshots) ParseInitialized(v0 types.Log) (*bindings.SnapshotsInitialized, error) {
	r0, r1 := m.ParseInitializedFunc.nextHook()(v0)
	m.ParseInitializedFunc.appendCall(ISnapshotsParseInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseInitialized
// method of the parent MockISnapshots instance is invoked and the hook
// queue is empty.
func (f *ISnapshotsParseInitializedFunc) SetDefaultHook(hook func(types.Log) (*bindings.SnapshotsInitialized, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseInitialized method of the parent MockISnapshots instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ISnapshotsParseInitializedFunc) PushHook(hook func(types.Log) (*bindings.SnapshotsInitialized, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsParseInitializedFunc) SetDefaultReturn(r0 *bindings.SnapshotsInitialized, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.SnapshotsInitialized, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsParseInitializedFunc) PushReturn(r0 *bindings.SnapshotsInitialized, r1 error) {
	f.PushHook(func(types.Log) (*bindings.SnapshotsInitialized, error) {
		return r0, r1
	})
}

func (f *ISnapshotsParseInitializedFunc) nextHook() func(types.Log) (*bindings.SnapshotsInitialized, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsParseInitializedFunc) appendCall(r0 ISnapshotsParseInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsParseInitializedFuncCall objects
// describing the invocations of this function.
func (f *ISnapshotsParseInitializedFunc) History() []ISnapshotsParseInitializedFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsParseInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsParseInitializedFuncCall is an object that describes an
// invocation of method ParseInitialized on an instance of MockISnapshots.
type ISnapshotsParseInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.SnapshotsInitialized
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsParseInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsParseInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsParseSnapshotTakenFunc describes the behavior when the
// ParseSnapshotTaken method of the parent MockISnapshots instance is
// invoked.
type ISnapshotsParseSnapshotTakenFunc struct {
	defaultHook func(types.Log) (*bindings.SnapshotsSnapshotTaken, error)
	hooks       []func(types.Log) (*bindings.SnapshotsSnapshotTaken, error)
	history     []ISnapshotsParseSnapshotTakenFuncCall
	mutex       sync.Mutex
}

// ParseSnapshotTaken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockISnapshots) ParseSnapshotTaken(v0 types.Log) (*bindings.SnapshotsSnapshotTaken, error) {
	r0, r1 := m.ParseSnapshotTakenFunc.nextHook()(v0)
	m.ParseSnapshotTakenFunc.appendCall(ISnapshotsParseSnapshotTakenFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseSnapshotTaken
// method of the parent MockISnapshots instance is invoked and the hook
// queue is empty.
func (f *ISnapshotsParseSnapshotTakenFunc) SetDefaultHook(hook func(types.Log) (*bindings.SnapshotsSnapshotTaken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseSnapshotTaken method of the parent MockISnapshots instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ISnapshotsParseSnapshotTakenFunc) PushHook(hook func(types.Log) (*bindings.SnapshotsSnapshotTaken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsParseSnapshotTakenFunc) SetDefaultReturn(r0 *bindings.SnapshotsSnapshotTaken, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.SnapshotsSnapshotTaken, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsParseSnapshotTakenFunc) PushReturn(r0 *bindings.SnapshotsSnapshotTaken, r1 error) {
	f.PushHook(func(types.Log) (*bindings.SnapshotsSnapshotTaken, error) {
		return r0, r1
	})
}

func (f *ISnapshotsParseSnapshotTakenFunc) nextHook() func(types.Log) (*bindings.SnapshotsSnapshotTaken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsParseSnapshotTakenFunc) appendCall(r0 ISnapshotsParseSnapshotTakenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsParseSnapshotTakenFuncCall
// objects describing the invocations of this function.
func (f *ISnapshotsParseSnapshotTakenFunc) History() []ISnapshotsParseSnapshotTakenFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsParseSnapshotTakenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsParseSnapshotTakenFuncCall is an object that describes an
// invocation of method ParseSnapshotTaken on an instance of MockISnapshots.
type ISnapshotsParseSnapshotTakenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.SnapshotsSnapshotTaken
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsParseSnapshotTakenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsParseSnapshotTakenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsSetMinimumIntervalBetweenSnapshotsFunc describes the behavior
// when the SetMinimumIntervalBetweenSnapshots method of the parent
// MockISnapshots instance is invoked.
type ISnapshotsSetMinimumIntervalBetweenSnapshotsFunc struct {
	defaultHook func(*bind.TransactOpts, uint32) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint32) (*types.Transaction, error)
	history     []ISnapshotsSetMinimumIntervalBetweenSnapshotsFuncCall
	mutex       sync.Mutex
}

// SetMinimumIntervalBetweenSnapshots delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockISnapshots) SetMinimumIntervalBetweenSnapshots(v0 *bind.TransactOpts, v1 uint32) (*types.Transaction, error) {
	r0, r1 := m.SetMinimumIntervalBetweenSnapshotsFunc.nextHook()(v0, v1)
	m.SetMinimumIntervalBetweenSnapshotsFunc.appendCall(ISnapshotsSetMinimumIntervalBetweenSnapshotsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SetMinimumIntervalBetweenSnapshots method of the parent MockISnapshots
// instance is invoked and the hook queue is empty.
func (f *ISnapshotsSetMinimumIntervalBetweenSnapshotsFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint32) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetMinimumIntervalBetweenSnapshots method of the parent MockISnapshots
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ISnapshotsSetMinimumIntervalBetweenSnapshotsFunc) PushHook(hook func(*bind.TransactOpts, uint32) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsSetMinimumIntervalBetweenSnapshotsFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsSetMinimumIntervalBetweenSnapshotsFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *ISnapshotsSetMinimumIntervalBetweenSnapshotsFunc) nextHook() func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsSetMinimumIntervalBetweenSnapshotsFunc) appendCall(r0 ISnapshotsSetMinimumIntervalBetweenSnapshotsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsSetMinimumIntervalBetweenSnapshotsFuncCall objects describing
// the invocations of this function.
func (f *ISnapshotsSetMinimumIntervalBetweenSnapshotsFunc) History() []ISnapshotsSetMinimumIntervalBetweenSnapshotsFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsSetMinimumIntervalBetweenSnapshotsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsSetMinimumIntervalBetweenSnapshotsFuncCall is an object that
// describes an invocation of method SetMinimumIntervalBetweenSnapshots on
// an instance of MockISnapshots.
type ISnapshotsSetMinimumIntervalBetweenSnapshotsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsSetMinimumIntervalBetweenSnapshotsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsSetMinimumIntervalBetweenSnapshotsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsSetSnapshotDesperationDelayFunc describes the behavior when the
// SetSnapshotDesperationDelay method of the parent MockISnapshots instance
// is invoked.
type ISnapshotsSetSnapshotDesperationDelayFunc struct {
	defaultHook func(*bind.TransactOpts, uint32) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint32) (*types.Transaction, error)
	history     []ISnapshotsSetSnapshotDesperationDelayFuncCall
	mutex       sync.Mutex
}

// SetSnapshotDesperationDelay delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockISnapshots) SetSnapshotDesperationDelay(v0 *bind.TransactOpts, v1 uint32) (*types.Transaction, error) {
	r0, r1 := m.SetSnapshotDesperationDelayFunc.nextHook()(v0, v1)
	m.SetSnapshotDesperationDelayFunc.appendCall(ISnapshotsSetSnapshotDesperationDelayFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SetSnapshotDesperationDelay method of the parent MockISnapshots instance
// is invoked and the hook queue is empty.
func (f *ISnapshotsSetSnapshotDesperationDelayFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint32) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetSnapshotDesperationDelay method of the parent MockISnapshots instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ISnapshotsSetSnapshotDesperationDelayFunc) PushHook(hook func(*bind.TransactOpts, uint32) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsSetSnapshotDesperationDelayFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsSetSnapshotDesperationDelayFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *ISnapshotsSetSnapshotDesperationDelayFunc) nextHook() func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsSetSnapshotDesperationDelayFunc) appendCall(r0 ISnapshotsSetSnapshotDesperationDelayFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsSetSnapshotDesperationDelayFuncCall objects describing the
// invocations of this function.
func (f *ISnapshotsSetSnapshotDesperationDelayFunc) History() []ISnapshotsSetSnapshotDesperationDelayFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsSetSnapshotDesperationDelayFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsSetSnapshotDesperationDelayFuncCall is an object that describes
// an invocation of method SetSnapshotDesperationDelay on an instance of
// MockISnapshots.
type ISnapshotsSetSnapshotDesperationDelayFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsSetSnapshotDesperationDelayFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsSetSnapshotDesperationDelayFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsSetSnapshotDesperationFactorFunc describes the behavior when
// the SetSnapshotDesperationFactor method of the parent MockISnapshots
// instance is invoked.
type ISnapshotsSetSnapshotDesperationFactorFunc struct {
	defaultHook func(*bind.TransactOpts, uint32) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint32) (*types.Transaction, error)
	history     []ISnapshotsSetSnapshotDesperationFactorFuncCall
	mutex       sync.Mutex
}

// SetSnapshotDesperationFactor delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockISnapshots) SetSnapshotDesperationFactor(v0 *bind.TransactOpts, v1 uint32) (*types.Transaction, error) {
	r0, r1 := m.SetSnapshotDesperationFactorFunc.nextHook()(v0, v1)
	m.SetSnapshotDesperationFactorFunc.appendCall(ISnapshotsSetSnapshotDesperationFactorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SetSnapshotDesperationFactor method of the parent MockISnapshots instance
// is invoked and the hook queue is empty.
func (f *ISnapshotsSetSnapshotDesperationFactorFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint32) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetSnapshotDesperationFactor method of the parent MockISnapshots instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ISnapshotsSetSnapshotDesperationFactorFunc) PushHook(hook func(*bind.TransactOpts, uint32) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsSetSnapshotDesperationFactorFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsSetSnapshotDesperationFactorFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *ISnapshotsSetSnapshotDesperationFactorFunc) nextHook() func(*bind.TransactOpts, uint32) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsSetSnapshotDesperationFactorFunc) appendCall(r0 ISnapshotsSetSnapshotDesperationFactorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ISnapshotsSetSnapshotDesperationFactorFuncCall objects describing the
// invocations of this function.
func (f *ISnapshotsSetSnapshotDesperationFactorFunc) History() []ISnapshotsSetSnapshotDesperationFactorFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsSetSnapshotDesperationFactorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsSetSnapshotDesperationFactorFuncCall is an object that
// describes an invocation of method SetSnapshotDesperationFactor on an
// instance of MockISnapshots.
type ISnapshotsSetSnapshotDesperationFactorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsSetSnapshotDesperationFactorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsSetSnapshotDesperationFactorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsSnapshotFunc describes the behavior when the Snapshot method of
// the parent MockISnapshots instance is invoked.
type ISnapshotsSnapshotFunc struct {
	defaultHook func(*bind.TransactOpts, []byte, []byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []byte, []byte) (*types.Transaction, error)
	history     []ISnapshotsSnapshotFuncCall
	mutex       sync.Mutex
}

// Snapshot delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockISnapshots) Snapshot(v0 *bind.TransactOpts, v1 []byte, v2 []byte) (*types.Transaction, error) {
	r0, r1 := m.SnapshotFunc.nextHook()(v0, v1, v2)
	m.SnapshotFunc.appendCall(ISnapshotsSnapshotFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Snapshot method of
// the parent MockISnapshots instance is invoked and the hook queue is
// empty.
func (f *ISnapshotsSnapshotFunc) SetDefaultHook(hook func(*bind.TransactOpts, []byte, []byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Snapshot method of the parent MockISnapshots instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ISnapshotsSnapshotFunc) PushHook(hook func(*bind.TransactOpts, []byte, []byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsSnapshotFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []byte, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsSnapshotFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []byte, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *ISnapshotsSnapshotFunc) nextHook() func(*bind.TransactOpts, []byte, []byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsSnapshotFunc) appendCall(r0 ISnapshotsSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsSnapshotFuncCall objects
// describing the invocations of this function.
func (f *ISnapshotsSnapshotFunc) History() []ISnapshotsSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsSnapshotFuncCall is an object that describes an invocation of
// method Snapshot on an instance of MockISnapshots.
type ISnapshotsSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsWatchInitializedFunc describes the behavior when the
// WatchInitialized method of the parent MockISnapshots instance is invoked.
type ISnapshotsWatchInitializedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.SnapshotsInitialized) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.SnapshotsInitialized) (event.Subscription, error)
	history     []ISnapshotsWatchInitializedFuncCall
	mutex       sync.Mutex
}

// WatchInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockISnapshots) WatchInitialized(v0 *bind.WatchOpts, v1 chan<- *bindings.SnapshotsInitialized) (event.Subscription, error) {
	r0, r1 := m.WatchInitializedFunc.nextHook()(v0, v1)
	m.WatchInitializedFunc.appendCall(ISnapshotsWatchInitializedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchInitialized
// method of the parent MockISnapshots instance is invoked and the hook
// queue is empty.
func (f *ISnapshotsWatchInitializedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.SnapshotsInitialized) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchInitialized method of the parent MockISnapshots instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ISnapshotsWatchInitializedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.SnapshotsInitialized) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsWatchInitializedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.SnapshotsInitialized) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsWatchInitializedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.SnapshotsInitialized) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *ISnapshotsWatchInitializedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.SnapshotsInitialized) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsWatchInitializedFunc) appendCall(r0 ISnapshotsWatchInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsWatchInitializedFuncCall objects
// describing the invocations of this function.
func (f *ISnapshotsWatchInitializedFunc) History() []ISnapshotsWatchInitializedFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsWatchInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsWatchInitializedFuncCall is an object that describes an
// invocation of method WatchInitialized on an instance of MockISnapshots.
type ISnapshotsWatchInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.SnapshotsInitialized
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsWatchInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsWatchInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ISnapshotsWatchSnapshotTakenFunc describes the behavior when the
// WatchSnapshotTaken method of the parent MockISnapshots instance is
// invoked.
type ISnapshotsWatchSnapshotTakenFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.SnapshotsSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.SnapshotsSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error)
	history     []ISnapshotsWatchSnapshotTakenFuncCall
	mutex       sync.Mutex
}

// WatchSnapshotTaken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockISnapshots) WatchSnapshotTaken(v0 *bind.WatchOpts, v1 chan<- *bindings.SnapshotsSnapshotTaken, v2 []*big.Int, v3 []common.Address) (event.Subscription, error) {
	r0, r1 := m.WatchSnapshotTakenFunc.nextHook()(v0, v1, v2, v3)
	m.WatchSnapshotTakenFunc.appendCall(ISnapshotsWatchSnapshotTakenFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchSnapshotTaken
// method of the parent MockISnapshots instance is invoked and the hook
// queue is empty.
func (f *ISnapshotsWatchSnapshotTakenFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.SnapshotsSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchSnapshotTaken method of the parent MockISnapshots instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ISnapshotsWatchSnapshotTakenFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.SnapshotsSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ISnapshotsWatchSnapshotTakenFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.SnapshotsSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ISnapshotsWatchSnapshotTakenFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.SnapshotsSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *ISnapshotsWatchSnapshotTakenFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.SnapshotsSnapshotTaken, []*big.Int, []common.Address) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ISnapshotsWatchSnapshotTakenFunc) appendCall(r0 ISnapshotsWatchSnapshotTakenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ISnapshotsWatchSnapshotTakenFuncCall
// objects describing the invocations of this function.
func (f *ISnapshotsWatchSnapshotTakenFunc) History() []ISnapshotsWatchSnapshotTakenFuncCall {
	f.mutex.Lock()
	history := make([]ISnapshotsWatchSnapshotTakenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ISnapshotsWatchSnapshotTakenFuncCall is an object that describes an
// invocation of method WatchSnapshotTaken on an instance of MockISnapshots.
type ISnapshotsWatchSnapshotTakenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.SnapshotsSnapshotTaken
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ISnapshotsWatchSnapshotTakenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ISnapshotsWatchSnapshotTakenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockIValidatorPool is a mock implementation of the IValidatorPool
// interface (from the package github.com/alicenet/alicenet/bridge/bindings)
// used for unit testing.
type MockIValidatorPool struct {
	// CLAIMPERIODFunc is an instance of a mock function object controlling
	// the behavior of the method CLAIMPERIOD.
	CLAIMPERIODFunc *IValidatorPoolCLAIMPERIODFunc
	// ClaimExitingNFTPositionFunc is an instance of a mock function object
	// controlling the behavior of the method ClaimExitingNFTPosition.
	ClaimExitingNFTPositionFunc *IValidatorPoolClaimExitingNFTPositionFunc
	// CollectProfitsFunc is an instance of a mock function object
	// controlling the behavior of the method CollectProfits.
	CollectProfitsFunc *IValidatorPoolCollectProfitsFunc
	// CompleteETHDKGFunc is an instance of a mock function object
	// controlling the behavior of the method CompleteETHDKG.
	CompleteETHDKGFunc *IValidatorPoolCompleteETHDKGFunc
	// FilterInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method FilterInitialized.
	FilterInitializedFunc *IValidatorPoolFilterInitializedFunc
	// FilterMaintenanceScheduledFunc is an instance of a mock function
	// object controlling the behavior of the method
	// FilterMaintenanceScheduled.
	FilterMaintenanceScheduledFunc *IValidatorPoolFilterMaintenanceScheduledFunc
	// FilterValidatorJoinedFunc is an instance of a mock function object
	// controlling the behavior of the method FilterValidatorJoined.
	FilterValidatorJoinedFunc *IValidatorPoolFilterValidatorJoinedFunc
	// FilterValidatorLeftFunc is an instance of a mock function object
	// controlling the behavior of the method FilterValidatorLeft.
	FilterValidatorLeftFunc *IValidatorPoolFilterValidatorLeftFunc
	// FilterValidatorMajorSlashedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// FilterValidatorMajorSlashed.
	FilterValidatorMajorSlashedFunc *IValidatorPoolFilterValidatorMajorSlashedFunc
	// FilterValidatorMinorSlashedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// FilterValidatorMinorSlashed.
	FilterValidatorMinorSlashedFunc *IValidatorPoolFilterValidatorMinorSlashedFunc
	// GetDisputerRewardFunc is an instance of a mock function object
	// controlling the behavior of the method GetDisputerReward.
	GetDisputerRewardFunc *IValidatorPoolGetDisputerRewardFunc
	// GetLocationFunc is an instance of a mock function object controlling
	// the behavior of the method GetLocation.
	GetLocationFunc *IValidatorPoolGetLocationFunc
	// GetLocationsFunc is an instance of a mock function object controlling
	// the behavior of the method GetLocations.
	GetLocationsFunc *IValidatorPoolGetLocationsFunc
	// GetMaxIntervalWithoutSnapshotsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetMaxIntervalWithoutSnapshots.
	GetMaxIntervalWithoutSnapshotsFunc *IValidatorPoolGetMaxIntervalWithoutSnapshotsFunc
	// GetMaxNumValidatorsFunc is an instance of a mock function object
	// controlling the behavior of the method GetMaxNumValidators.
	GetMaxNumValidatorsFunc *IValidatorPoolGetMaxNumValidatorsFunc
	// GetMetamorphicContractAddressFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetMetamorphicContractAddress.
	GetMetamorphicContractAddressFunc *IValidatorPoolGetMetamorphicContractAddressFunc
	// GetStakeAmountFunc is an instance of a mock function object
	// controlling the behavior of the method GetStakeAmount.
	GetStakeAmountFunc *IValidatorPoolGetStakeAmountFunc
	// GetValidatorFunc is an instance of a mock function object controlling
	// the behavior of the method GetValidator.
	GetValidatorFunc *IValidatorPoolGetValidatorFunc
	// GetValidatorDataFunc is an instance of a mock function object
	// controlling the behavior of the method GetValidatorData.
	GetValidatorDataFunc *IValidatorPoolGetValidatorDataFunc
	// GetValidatorsAddressesFunc is an instance of a mock function object
	// controlling the behavior of the method GetValidatorsAddresses.
	GetValidatorsAddressesFunc *IValidatorPoolGetValidatorsAddressesFunc
	// GetValidatorsCountFunc is an instance of a mock function object
	// controlling the behavior of the method GetValidatorsCount.
	GetValidatorsCountFunc *IValidatorPoolGetValidatorsCountFunc
	// InitializeFunc is an instance of a mock function object controlling
	// the behavior of the method Initialize.
	InitializeFunc *IValidatorPoolInitializeFunc
	// InitializeETHDKGFunc is an instance of a mock function object
	// controlling the behavior of the method InitializeETHDKG.
	InitializeETHDKGFunc *IValidatorPoolInitializeETHDKGFunc
	// IsAccusableFunc is an instance of a mock function object controlling
	// the behavior of the method IsAccusable.
	IsAccusableFunc *IValidatorPoolIsAccusableFunc
	// IsConsensusRunningFunc is an instance of a mock function object
	// controlling the behavior of the method IsConsensusRunning.
	IsConsensusRunningFunc *IValidatorPoolIsConsensusRunningFunc
	// IsInExitingQueueFunc is an instance of a mock function object
	// controlling the behavior of the method IsInExitingQueue.
	IsInExitingQueueFunc *IValidatorPoolIsInExitingQueueFunc
	// IsMaintenanceScheduledFunc is an instance of a mock function object
	// controlling the behavior of the method IsMaintenanceScheduled.
	IsMaintenanceScheduledFunc *IValidatorPoolIsMaintenanceScheduledFunc
	// IsValidatorFunc is an instance of a mock function object controlling
	// the behavior of the method IsValidator.
	IsValidatorFunc *IValidatorPoolIsValidatorFunc
	// MajorSlashFunc is an instance of a mock function object controlling
	// the behavior of the method MajorSlash.
	MajorSlashFunc *IValidatorPoolMajorSlashFunc
	// MinorSlashFunc is an instance of a mock function object controlling
	// the behavior of the method MinorSlash.
	MinorSlashFunc *IValidatorPoolMinorSlashFunc
	// OnERC721ReceivedFunc is an instance of a mock function object
	// controlling the behavior of the method OnERC721Received.
	OnERC721ReceivedFunc *IValidatorPoolOnERC721ReceivedFunc
	// POSITIONLOCKPERIODFunc is an instance of a mock function object
	// controlling the behavior of the method POSITIONLOCKPERIOD.
	POSITIONLOCKPERIODFunc *IValidatorPoolPOSITIONLOCKPERIODFunc
	// ParseInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseInitialized.
	ParseInitializedFunc *IValidatorPoolParseInitializedFunc
	// ParseMaintenanceScheduledFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ParseMaintenanceScheduled.
	ParseMaintenanceScheduledFunc *IValidatorPoolParseMaintenanceScheduledFunc
	// ParseValidatorJoinedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseValidatorJoined.
	ParseValidatorJoinedFunc *IValidatorPoolParseValidatorJoinedFunc
	// ParseValidatorLeftFunc is an instance of a mock function object
	// controlling the behavior of the method ParseValidatorLeft.
	ParseValidatorLeftFunc *IValidatorPoolParseValidatorLeftFunc
	// ParseValidatorMajorSlashedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ParseValidatorMajorSlashed.
	ParseValidatorMajorSlashedFunc *IValidatorPoolParseValidatorMajorSlashedFunc
	// ParseValidatorMinorSlashedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ParseValidatorMinorSlashed.
	ParseValidatorMinorSlashedFunc *IValidatorPoolParseValidatorMinorSlashedFunc
	// PauseConsensusFunc is an instance of a mock function object
	// controlling the behavior of the method PauseConsensus.
	PauseConsensusFunc *IValidatorPoolPauseConsensusFunc
	// PauseConsensusOnArbitraryHeightFunc is an instance of a mock function
	// object controlling the behavior of the method
	// PauseConsensusOnArbitraryHeight.
	PauseConsensusOnArbitraryHeightFunc *IValidatorPoolPauseConsensusOnArbitraryHeightFunc
	// ReceiveFunc is an instance of a mock function object controlling the
	// behavior of the method Receive.
	ReceiveFunc *IValidatorPoolReceiveFunc
	// RegisterValidatorsFunc is an instance of a mock function object
	// controlling the behavior of the method RegisterValidators.
	RegisterValidatorsFunc *IValidatorPoolRegisterValidatorsFunc
	// ScheduleMaintenanceFunc is an instance of a mock function object
	// controlling the behavior of the method ScheduleMaintenance.
	ScheduleMaintenanceFunc *IValidatorPoolScheduleMaintenanceFunc
	// SetDisputerRewardFunc is an instance of a mock function object
	// controlling the behavior of the method SetDisputerReward.
	SetDisputerRewardFunc *IValidatorPoolSetDisputerRewardFunc
	// SetLocationFunc is an instance of a mock function object controlling
	// the behavior of the method SetLocation.
	SetLocationFunc *IValidatorPoolSetLocationFunc
	// SetMaxIntervalWithoutSnapshotsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SetMaxIntervalWithoutSnapshots.
	SetMaxIntervalWithoutSnapshotsFunc *IValidatorPoolSetMaxIntervalWithoutSnapshotsFunc
	// SetMaxNumValidatorsFunc is an instance of a mock function object
	// controlling the behavior of the method SetMaxNumValidators.
	SetMaxNumValidatorsFunc *IValidatorPoolSetMaxNumValidatorsFunc
	// SetStakeAmountFunc is an instance of a mock function object
	// controlling the behavior of the method SetStakeAmount.
	SetStakeAmountFunc *IValidatorPoolSetStakeAmountFunc
	// SkimExcessEthFunc is an instance of a mock function object
	// controlling the behavior of the method SkimExcessEth.
	SkimExcessEthFunc *IValidatorPoolSkimExcessEthFunc
	// SkimExcessTokenFunc is an instance of a mock function object
	// controlling the behavior of the method SkimExcessToken.
	SkimExcessTokenFunc *IValidatorPoolSkimExcessTokenFunc
	// TryGetTokenIDFunc is an instance of a mock function object
	// controlling the behavior of the method TryGetTokenID.
	TryGetTokenIDFunc *IValidatorPoolTryGetTokenIDFunc
	// UnregisterAllValidatorsFunc is an instance of a mock function object
	// controlling the behavior of the method UnregisterAllValidators.
	UnregisterAllValidatorsFunc *IValidatorPoolUnregisterAllValidatorsFunc
	// UnregisterValidatorsFunc is an instance of a mock function object
	// controlling the behavior of the method UnregisterValidators.
	UnregisterValidatorsFunc *IValidatorPoolUnregisterValidatorsFunc
	// WatchInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchInitialized.
	WatchInitializedFunc *IValidatorPoolWatchInitializedFunc
	// WatchMaintenanceScheduledFunc is an instance of a mock function
	// object controlling the behavior of the method
	// WatchMaintenanceScheduled.
	WatchMaintenanceScheduledFunc *IValidatorPoolWatchMaintenanceScheduledFunc
	// WatchValidatorJoinedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchValidatorJoined.
	WatchValidatorJoinedFunc *IValidatorPoolWatchValidatorJoinedFunc
	// WatchValidatorLeftFunc is an instance of a mock function object
	// controlling the behavior of the method WatchValidatorLeft.
	WatchValidatorLeftFunc *IValidatorPoolWatchValidatorLeftFunc
	// WatchValidatorMajorSlashedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// WatchValidatorMajorSlashed.
	WatchValidatorMajorSlashedFunc *IValidatorPoolWatchValidatorMajorSlashedFunc
	// WatchValidatorMinorSlashedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// WatchValidatorMinorSlashed.
	WatchValidatorMinorSlashedFunc *IValidatorPoolWatchValidatorMinorSlashedFunc
}

// NewMockIValidatorPool creates a new mock of the IValidatorPool interface.
// All methods return zero values for all results, unless overwritten.
func NewMockIValidatorPool() *MockIValidatorPool {
	return &MockIValidatorPool{
		CLAIMPERIODFunc: &IValidatorPoolCLAIMPERIODFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		ClaimExitingNFTPositionFunc: &IValidatorPoolClaimExitingNFTPositionFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CollectProfitsFunc: &IValidatorPoolCollectProfitsFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CompleteETHDKGFunc: &IValidatorPoolCompleteETHDKGFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		FilterInitializedFunc: &IValidatorPoolFilterInitializedFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ValidatorPoolInitializedIterator, r1 error) {
				return
			},
		},
		FilterMaintenanceScheduledFunc: &IValidatorPoolFilterMaintenanceScheduledFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ValidatorPoolMaintenanceScheduledIterator, r1 error) {
				return
			},
		},
		FilterValidatorJoinedFunc: &IValidatorPoolFilterValidatorJoinedFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address) (r0 *bindings.ValidatorPoolValidatorJoinedIterator, r1 error) {
				return
			},
		},
		FilterValidatorLeftFunc: &IValidatorPoolFilterValidatorLeftFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address) (r0 *bindings.ValidatorPoolValidatorLeftIterator, r1 error) {
				return
			},
		},
		FilterValidatorMajorSlashedFunc: &IValidatorPoolFilterValidatorMajorSlashedFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address) (r0 *bindings.ValidatorPoolValidatorMajorSlashedIterator, r1 error) {
				return
			},
		},
		FilterValidatorMinorSlashedFunc: &IValidatorPoolFilterValidatorMinorSlashedFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address) (r0 *bindings.ValidatorPoolValidatorMinorSlashedIterator, r1 error) {
				return
			},
		},
		GetDisputerRewardFunc: &IValidatorPoolGetDisputerRewardFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetLocationFunc: &IValidatorPoolGetLocationFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (r0 string, r1 error) {
				return
			},
		},
		GetLocationsFunc: &IValidatorPoolGetLocationsFunc{
			defaultHook: func(*bind.CallOpts, []common.Address) (r0 []string, r1 error) {
				return
			},
		},
		GetMaxIntervalWithoutSnapshotsFunc: &IValidatorPoolGetMaxIntervalWithoutSnapshotsFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetMaxNumValidatorsFunc: &IValidatorPoolGetMaxNumValidatorsFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetMetamorphicContractAddressFunc: &IValidatorPoolGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (r0 common.Address, r1 error) {
				return
			},
		},
		GetStakeAmountFunc: &IValidatorPoolGetStakeAmountFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetValidatorFunc: &IValidatorPoolGetValidatorFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 common.Address, r1 error) {
				return
			},
		},
		GetValidatorDataFunc: &IValidatorPoolGetValidatorDataFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 bindings.ValidatorData, r1 error) {
				return
			},
		},
		GetValidatorsAddressesFunc: &IValidatorPoolGetValidatorsAddressesFunc{
			defaultHook: func(*bind.CallOpts) (r0 []common.Address, r1 error) {
				return
			},
		},
		GetValidatorsCountFunc: &IValidatorPoolGetValidatorsCountFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		InitializeFunc: &IValidatorPoolInitializeFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int, *big.Int, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		InitializeETHDKGFunc: &IValidatorPoolInitializeETHDKGFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		IsAccusableFunc: &IValidatorPoolIsAccusableFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (r0 bool, r1 error) {
				return
			},
		},
		IsConsensusRunningFunc: &IValidatorPoolIsConsensusRunningFunc{
			defaultHook: func(*bind.CallOpts) (r0 bool, r1 error) {
				return
			},
		},
		IsInExitingQueueFunc: &IValidatorPoolIsInExitingQueueFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (r0 bool, r1 error) {
				return
			},
		},
		IsMaintenanceScheduledFunc: &IValidatorPoolIsMaintenanceScheduledFunc{
			defaultHook: func(*bind.CallOpts) (r0 bool, r1 error) {
				return
			},
		},
		IsValidatorFunc: &IValidatorPoolIsValidatorFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (r0 bool, r1 error) {
				return
			},
		},
		MajorSlashFunc: &IValidatorPoolMajorSlashFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		MinorSlashFunc: &IValidatorPoolMinorSlashFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		OnERC721ReceivedFunc: &IValidatorPoolOnERC721ReceivedFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		POSITIONLOCKPERIODFunc: &IValidatorPoolPOSITIONLOCKPERIODFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		ParseInitializedFunc: &IValidatorPoolParseInitializedFunc{
			defaultHook: func(types.Log) (r0 *bindings.ValidatorPoolInitialized, r1 error) {
				return
			},
		},
		ParseMaintenanceScheduledFunc: &IValidatorPoolParseMaintenanceScheduledFunc{
			defaultHook: func(types.Log) (r0 *bindings.ValidatorPoolMaintenanceScheduled, r1 error) {
				return
			},
		},
		ParseValidatorJoinedFunc: &IValidatorPoolParseValidatorJoinedFunc{
			defaultHook: func(types.Log) (r0 *bindings.ValidatorPoolValidatorJoined, r1 error) {
				return
			},
		},
		ParseValidatorLeftFunc: &IValidatorPoolParseValidatorLeftFunc{
			defaultHook: func(types.Log) (r0 *bindings.ValidatorPoolValidatorLeft, r1 error) {
				return
			},
		},
		ParseValidatorMajorSlashedFunc: &IValidatorPoolParseValidatorMajorSlashedFunc{
			defaultHook: func(types.Log) (r0 *bindings.ValidatorPoolValidatorMajorSlashed, r1 error) {
				return
			},
		},
		ParseValidatorMinorSlashedFunc: &IValidatorPoolParseValidatorMinorSlashedFunc{
			defaultHook: func(types.Log) (r0 *bindings.ValidatorPoolValidatorMinorSlashed, r1 error) {
				return
			},
		},
		PauseConsensusFunc: &IValidatorPoolPauseConsensusFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		PauseConsensusOnArbitraryHeightFunc: &IValidatorPoolPauseConsensusOnArbitraryHeightFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		ReceiveFunc: &IValidatorPoolReceiveFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		RegisterValidatorsFunc: &IValidatorPoolRegisterValidatorsFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address, []*big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		ScheduleMaintenanceFunc: &IValidatorPoolScheduleMaintenanceFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SetDisputerRewardFunc: &IValidatorPoolSetDisputerRewardFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SetLocationFunc: &IValidatorPoolSetLocationFunc{
			defaultHook: func(*bind.TransactOpts, string) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SetMaxIntervalWithoutSnapshotsFunc: &IValidatorPoolSetMaxIntervalWithoutSnapshotsFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SetMaxNumValidatorsFunc: &IValidatorPoolSetMaxNumValidatorsFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SetStakeAmountFunc: &IValidatorPoolSetStakeAmountFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SkimExcessEthFunc: &IValidatorPoolSkimExcessEthFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SkimExcessTokenFunc: &IValidatorPoolSkimExcessTokenFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		TryGetTokenIDFunc: &IValidatorPoolTryGetTokenIDFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (r0 bool, r1 common.Address, r2 *big.Int, r3 error) {
				return
			},
		},
		UnregisterAllValidatorsFunc: &IValidatorPoolUnregisterAllValidatorsFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		UnregisterValidatorsFunc: &IValidatorPoolUnregisterValidatorsFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		WatchInitializedFunc: &IValidatorPoolWatchInitializedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolInitialized) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchMaintenanceScheduledFunc: &IValidatorPoolWatchMaintenanceScheduledFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolMaintenanceScheduled) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchValidatorJoinedFunc: &IValidatorPoolWatchValidatorJoinedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorJoined, []common.Address) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchValidatorLeftFunc: &IValidatorPoolWatchValidatorLeftFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorLeft, []common.Address) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchValidatorMajorSlashedFunc: &IValidatorPoolWatchValidatorMajorSlashedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMajorSlashed, []common.Address) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchValidatorMinorSlashedFunc: &IValidatorPoolWatchValidatorMinorSlashedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMinorSlashed, []common.Address) (r0 event.Subscription, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockIValidatorPool creates a new mock of the IValidatorPool
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockIValidatorPool() *MockIValidatorPool {
	return &MockIValidatorPool{
		CLAIMPERIODFunc: &IValidatorPoolCLAIMPERIODFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorPool.CLAIMPERIOD")
			},
		},
		ClaimExitingNFTPositionFunc: &IValidatorPoolClaimExitingNFTPositionFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.ClaimExitingNFTPosition")
			},
		},
		CollectProfitsFunc: &IValidatorPoolCollectProfitsFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.CollectProfits")
			},
		},
		CompleteETHDKGFunc: &IValidatorPoolCompleteETHDKGFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.CompleteETHDKG")
			},
		},
		FilterInitializedFunc: &IValidatorPoolFilterInitializedFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ValidatorPoolInitializedIterator, error) {
				panic("unexpected invocation of MockIValidatorPool.FilterInitialized")
			},
		},
		FilterMaintenanceScheduledFunc: &IValidatorPoolFilterMaintenanceScheduledFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ValidatorPoolMaintenanceScheduledIterator, error) {
				panic("unexpected invocation of MockIValidatorPool.FilterMaintenanceScheduled")
			},
		},
		FilterValidatorJoinedFunc: &IValidatorPoolFilterValidatorJoinedFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorJoinedIterator, error) {
				panic("unexpected invocation of MockIValidatorPool.FilterValidatorJoined")
			},
		},
		FilterValidatorLeftFunc: &IValidatorPoolFilterValidatorLeftFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorLeftIterator, error) {
				panic("unexpected invocation of MockIValidatorPool.FilterValidatorLeft")
			},
		},
		FilterValidatorMajorSlashedFunc: &IValidatorPoolFilterValidatorMajorSlashedFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMajorSlashedIterator, error) {
				panic("unexpected invocation of MockIValidatorPool.FilterValidatorMajorSlashed")
			},
		},
		FilterValidatorMinorSlashedFunc: &IValidatorPoolFilterValidatorMinorSlashedFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMinorSlashedIterator, error) {
				panic("unexpected invocation of MockIValidatorPool.FilterValidatorMinorSlashed")
			},
		},
		GetDisputerRewardFunc: &IValidatorPoolGetDisputerRewardFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorPool.GetDisputerReward")
			},
		},
		GetLocationFunc: &IValidatorPoolGetLocationFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (string, error) {
				panic("unexpected invocation of MockIValidatorPool.GetLocation")
			},
		},
		GetLocationsFunc: &IValidatorPoolGetLocationsFunc{
			defaultHook: func(*bind.CallOpts, []common.Address) ([]string, error) {
				panic("unexpected invocation of MockIValidatorPool.GetLocations")
			},
		},
		GetMaxIntervalWithoutSnapshotsFunc: &IValidatorPoolGetMaxIntervalWithoutSnapshotsFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorPool.GetMaxIntervalWithoutSnapshots")
			},
		},
		GetMaxNumValidatorsFunc: &IValidatorPoolGetMaxNumValidatorsFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorPool.GetMaxNumValidators")
			},
		},
		GetMetamorphicContractAddressFunc: &IValidatorPoolGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
				panic("unexpected invocation of MockIValidatorPool.GetMetamorphicContractAddress")
			},
		},
		GetStakeAmountFunc: &IValidatorPoolGetStakeAmountFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorPool.GetStakeAmount")
			},
		},
		GetValidatorFunc: &IValidatorPoolGetValidatorFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (common.Address, error) {
				panic("unexpected invocation of MockIValidatorPool.GetValidator")
			},
		},
		GetValidatorDataFunc: &IValidatorPoolGetValidatorDataFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (bindings.ValidatorData, error) {
				panic("unexpected invocation of MockIValidatorPool.GetValidatorData")
			},
		},
		GetValidatorsAddressesFunc: &IValidatorPoolGetValidatorsAddressesFunc{
			defaultHook: func(*bind.CallOpts) ([]common.Address, error) {
				panic("unexpected invocation of MockIValidatorPool.GetValidatorsAddresses")
			},
		},
		GetValidatorsCountFunc: &IValidatorPoolGetValidatorsCountFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorPool.GetValidatorsCount")
			},
		},
		InitializeFunc: &IValidatorPoolInitializeFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int, *big.Int, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.Initialize")
			},
		},
		InitializeETHDKGFunc: &IValidatorPoolInitializeETHDKGFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.InitializeETHDKG")
			},
		},
		IsAccusableFunc: &IValidatorPoolIsAccusableFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (bool, error) {
				panic("unexpected invocation of MockIValidatorPool.IsAccusable")
			},
		},
		IsConsensusRunningFunc: &IValidatorPoolIsConsensusRunningFunc{
			defaultHook: func(*bind.CallOpts) (bool, error) {
				panic("unexpected invocation of MockIValidatorPool.IsConsensusRunning")
			},
		},
		IsInExitingQueueFunc: &IValidatorPoolIsInExitingQueueFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (bool, error) {
				panic("unexpected invocation of MockIValidatorPool.IsInExitingQueue")
			},
		},
		IsMaintenanceScheduledFunc: &IValidatorPoolIsMaintenanceScheduledFunc{
			defaultHook: func(*bind.CallOpts) (bool, error) {
				panic("unexpected invocation of MockIValidatorPool.IsMaintenanceScheduled")
			},
		},
		IsValidatorFunc: &IValidatorPoolIsValidatorFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (bool, error) {
				panic("unexpected invocation of MockIValidatorPool.IsValidator")
			},
		},
		MajorSlashFunc: &IValidatorPoolMajorSlashFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.MajorSlash")
			},
		},
		MinorSlashFunc: &IValidatorPoolMinorSlashFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.MinorSlash")
			},
		},
		OnERC721ReceivedFunc: &IValidatorPoolOnERC721ReceivedFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.OnERC721Received")
			},
		},
		POSITIONLOCKPERIODFunc: &IValidatorPoolPOSITIONLOCKPERIODFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorPool.POSITIONLOCKPERIOD")
			},
		},
		ParseInitializedFunc: &IValidatorPoolParseInitializedFunc{
			defaultHook: func(types.Log) (*bindings.ValidatorPoolInitialized, error) {
				panic("unexpected invocation of MockIValidatorPool.ParseInitialized")
			},
		},
		ParseMaintenanceScheduledFunc: &IValidatorPoolParseMaintenanceScheduledFunc{
			defaultHook: func(types.Log) (*bindings.ValidatorPoolMaintenanceScheduled, error) {
				panic("unexpected invocation of MockIValidatorPool.ParseMaintenanceScheduled")
			},
		},
		ParseValidatorJoinedFunc: &IValidatorPoolParseValidatorJoinedFunc{
			defaultHook: func(types.Log) (*bindings.ValidatorPoolValidatorJoined, error) {
				panic("unexpected invocation of MockIValidatorPool.ParseValidatorJoined")
			},
		},
		ParseValidatorLeftFunc: &IValidatorPoolParseValidatorLeftFunc{
			defaultHook: func(types.Log) (*bindings.ValidatorPoolValidatorLeft, error) {
				panic("unexpected invocation of MockIValidatorPool.ParseValidatorLeft")
			},
		},
		ParseValidatorMajorSlashedFunc: &IValidatorPoolParseValidatorMajorSlashedFunc{
			defaultHook: func(types.Log) (*bindings.ValidatorPoolValidatorMajorSlashed, error) {
				panic("unexpected invocation of MockIValidatorPool.ParseValidatorMajorSlashed")
			},
		},
		ParseValidatorMinorSlashedFunc: &IValidatorPoolParseValidatorMinorSlashedFunc{
			defaultHook: func(types.Log) (*bindings.ValidatorPoolValidatorMinorSlashed, error) {
				panic("unexpected invocation of MockIValidatorPool.ParseValidatorMinorSlashed")
			},
		},
		PauseConsensusFunc: &IValidatorPoolPauseConsensusFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.PauseConsensus")
			},
		},
		PauseConsensusOnArbitraryHeightFunc: &IValidatorPoolPauseConsensusOnArbitraryHeightFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.PauseConsensusOnArbitraryHeight")
			},
		},
		ReceiveFunc: &IValidatorPoolReceiveFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.Receive")
			},
		},
		RegisterValidatorsFunc: &IValidatorPoolRegisterValidatorsFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address, []*big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.RegisterValidators")
			},
		},
		ScheduleMaintenanceFunc: &IValidatorPoolScheduleMaintenanceFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.ScheduleMaintenance")
			},
		},
		SetDisputerRewardFunc: &IValidatorPoolSetDisputerRewardFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.SetDisputerReward")
			},
		},
		SetLocationFunc: &IValidatorPoolSetLocationFunc{
			defaultHook: func(*bind.TransactOpts, string) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.SetLocation")
			},
		},
		SetMaxIntervalWithoutSnapshotsFunc: &IValidatorPoolSetMaxIntervalWithoutSnapshotsFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.SetMaxIntervalWithoutSnapshots")
			},
		},
		SetMaxNumValidatorsFunc: &IValidatorPoolSetMaxNumValidatorsFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.SetMaxNumValidators")
			},
		},
		SetStakeAmountFunc: &IValidatorPoolSetStakeAmountFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.SetStakeAmount")
			},
		},
		SkimExcessEthFunc: &IValidatorPoolSkimExcessEthFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.SkimExcessEth")
			},
		},
		SkimExcessTokenFunc: &IValidatorPoolSkimExcessTokenFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.SkimExcessToken")
			},
		},
		TryGetTokenIDFunc: &IValidatorPoolTryGetTokenIDFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (bool, common.Address, *big.Int, error) {
				panic("unexpected invocation of MockIValidatorPool.TryGetTokenID")
			},
		},
		UnregisterAllValidatorsFunc: &IValidatorPoolUnregisterAllValidatorsFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.UnregisterAllValidators")
			},
		},
		UnregisterValidatorsFunc: &IValidatorPoolUnregisterValidatorsFunc{
			defaultHook: func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorPool.UnregisterValidators")
			},
		},
		WatchInitializedFunc: &IValidatorPoolWatchInitializedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolInitialized) (event.Subscription, error) {
				panic("unexpected invocation of MockIValidatorPool.WatchInitialized")
			},
		},
		WatchMaintenanceScheduledFunc: &IValidatorPoolWatchMaintenanceScheduledFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolMaintenanceScheduled) (event.Subscription, error) {
				panic("unexpected invocation of MockIValidatorPool.WatchMaintenanceScheduled")
			},
		},
		WatchValidatorJoinedFunc: &IValidatorPoolWatchValidatorJoinedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorJoined, []common.Address) (event.Subscription, error) {
				panic("unexpected invocation of MockIValidatorPool.WatchValidatorJoined")
			},
		},
		WatchValidatorLeftFunc: &IValidatorPoolWatchValidatorLeftFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorLeft, []common.Address) (event.Subscription, error) {
				panic("unexpected invocation of MockIValidatorPool.WatchValidatorLeft")
			},
		},
		WatchValidatorMajorSlashedFunc: &IValidatorPoolWatchValidatorMajorSlashedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMajorSlashed, []common.Address) (event.Subscription, error) {
				panic("unexpected invocation of MockIValidatorPool.WatchValidatorMajorSlashed")
			},
		},
		WatchValidatorMinorSlashedFunc: &IValidatorPoolWatchValidatorMinorSlashedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMinorSlashed, []common.Address) (event.Subscription, error) {
				panic("unexpected invocation of MockIValidatorPool.WatchValidatorMinorSlashed")
			},
		},
	}
}

// NewMockIValidatorPoolFrom creates a new mock of the MockIValidatorPool
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockIValidatorPoolFrom(i bindings.IValidatorPool) *MockIValidatorPool {
	return &MockIValidatorPool{
		CLAIMPERIODFunc: &IValidatorPoolCLAIMPERIODFunc{
			defaultHook: i.CLAIMPERIOD,
		},
		ClaimExitingNFTPositionFunc: &IValidatorPoolClaimExitingNFTPositionFunc{
			defaultHook: i.ClaimExitingNFTPosition,
		},
		CollectProfitsFunc: &IValidatorPoolCollectProfitsFunc{
			defaultHook: i.CollectProfits,
		},
		CompleteETHDKGFunc: &IValidatorPoolCompleteETHDKGFunc{
			defaultHook: i.CompleteETHDKG,
		},
		FilterInitializedFunc: &IValidatorPoolFilterInitializedFunc{
			defaultHook: i.FilterInitialized,
		},
		FilterMaintenanceScheduledFunc: &IValidatorPoolFilterMaintenanceScheduledFunc{
			defaultHook: i.FilterMaintenanceScheduled,
		},
		FilterValidatorJoinedFunc: &IValidatorPoolFilterValidatorJoinedFunc{
			defaultHook: i.FilterValidatorJoined,
		},
		FilterValidatorLeftFunc: &IValidatorPoolFilterValidatorLeftFunc{
			defaultHook: i.FilterValidatorLeft,
		},
		FilterValidatorMajorSlashedFunc: &IValidatorPoolFilterValidatorMajorSlashedFunc{
			defaultHook: i.FilterValidatorMajorSlashed,
		},
		FilterValidatorMinorSlashedFunc: &IValidatorPoolFilterValidatorMinorSlashedFunc{
			defaultHook: i.FilterValidatorMinorSlashed,
		},
		GetDisputerRewardFunc: &IValidatorPoolGetDisputerRewardFunc{
			defaultHook: i.GetDisputerReward,
		},
		GetLocationFunc: &IValidatorPoolGetLocationFunc{
			defaultHook: i.GetLocation,
		},
		GetLocationsFunc: &IValidatorPoolGetLocationsFunc{
			defaultHook: i.GetLocations,
		},
		GetMaxIntervalWithoutSnapshotsFunc: &IValidatorPoolGetMaxIntervalWithoutSnapshotsFunc{
			defaultHook: i.GetMaxIntervalWithoutSnapshots,
		},
		GetMaxNumValidatorsFunc: &IValidatorPoolGetMaxNumValidatorsFunc{
			defaultHook: i.GetMaxNumValidators,
		},
		GetMetamorphicContractAddressFunc: &IValidatorPoolGetMetamorphicContractAddressFunc{
			defaultHook: i.GetMetamorphicContractAddress,
		},
		GetStakeAmountFunc: &IValidatorPoolGetStakeAmountFunc{
			defaultHook: i.GetStakeAmount,
		},
		GetValidatorFunc: &IValidatorPoolGetValidatorFunc{
			defaultHook: i.GetValidator,
		},
		GetValidatorDataFunc: &IValidatorPoolGetValidatorDataFunc{
			defaultHook: i.GetValidatorData,
		},
		GetValidatorsAddressesFunc: &IValidatorPoolGetValidatorsAddressesFunc{
			defaultHook: i.GetValidatorsAddresses,
		},
		GetValidatorsCountFunc: &IValidatorPoolGetValidatorsCountFunc{
			defaultHook: i.GetValidatorsCount,
		},
		InitializeFunc: &IValidatorPoolInitializeFunc{
			defaultHook: i.Initialize,
		},
		InitializeETHDKGFunc: &IValidatorPoolInitializeETHDKGFunc{
			defaultHook: i.InitializeETHDKG,
		},
		IsAccusableFunc: &IValidatorPoolIsAccusableFunc{
			defaultHook: i.IsAccusable,
		},
		IsConsensusRunningFunc: &IValidatorPoolIsConsensusRunningFunc{
			defaultHook: i.IsConsensusRunning,
		},
		IsInExitingQueueFunc: &IValidatorPoolIsInExitingQueueFunc{
			defaultHook: i.IsInExitingQueue,
		},
		IsMaintenanceScheduledFunc: &IValidatorPoolIsMaintenanceScheduledFunc{
			defaultHook: i.IsMaintenanceScheduled,
		},
		IsValidatorFunc: &IValidatorPoolIsValidatorFunc{
			defaultHook: i.IsValidator,
		},
		MajorSlashFunc: &IValidatorPoolMajorSlashFunc{
			defaultHook: i.MajorSlash,
		},
		MinorSlashFunc: &IValidatorPoolMinorSlashFunc{
			defaultHook: i.MinorSlash,
		},
		OnERC721ReceivedFunc: &IValidatorPoolOnERC721ReceivedFunc{
			defaultHook: i.OnERC721Received,
		},
		POSITIONLOCKPERIODFunc: &IValidatorPoolPOSITIONLOCKPERIODFunc{
			defaultHook: i.POSITIONLOCKPERIOD,
		},
		ParseInitializedFunc: &IValidatorPoolParseInitializedFunc{
			defaultHook: i.ParseInitialized,
		},
		ParseMaintenanceScheduledFunc: &IValidatorPoolParseMaintenanceScheduledFunc{
			defaultHook: i.ParseMaintenanceScheduled,
		},
		ParseValidatorJoinedFunc: &IValidatorPoolParseValidatorJoinedFunc{
			defaultHook: i.ParseValidatorJoined,
		},
		ParseValidatorLeftFunc: &IValidatorPoolParseValidatorLeftFunc{
			defaultHook: i.ParseValidatorLeft,
		},
		ParseValidatorMajorSlashedFunc: &IValidatorPoolParseValidatorMajorSlashedFunc{
			defaultHook: i.ParseValidatorMajorSlashed,
		},
		ParseValidatorMinorSlashedFunc: &IValidatorPoolParseValidatorMinorSlashedFunc{
			defaultHook: i.ParseValidatorMinorSlashed,
		},
		PauseConsensusFunc: &IValidatorPoolPauseConsensusFunc{
			defaultHook: i.PauseConsensus,
		},
		PauseConsensusOnArbitraryHeightFunc: &IValidatorPoolPauseConsensusOnArbitraryHeightFunc{
			defaultHook: i.PauseConsensusOnArbitraryHeight,
		},
		ReceiveFunc: &IValidatorPoolReceiveFunc{
			defaultHook: i.Receive,
		},
		RegisterValidatorsFunc: &IValidatorPoolRegisterValidatorsFunc{
			defaultHook: i.RegisterValidators,
		},
		ScheduleMaintenanceFunc: &IValidatorPoolScheduleMaintenanceFunc{
			defaultHook: i.ScheduleMaintenance,
		},
		SetDisputerRewardFunc: &IValidatorPoolSetDisputerRewardFunc{
			defaultHook: i.SetDisputerReward,
		},
		SetLocationFunc: &IValidatorPoolSetLocationFunc{
			defaultHook: i.SetLocation,
		},
		SetMaxIntervalWithoutSnapshotsFunc: &IValidatorPoolSetMaxIntervalWithoutSnapshotsFunc{
			defaultHook: i.SetMaxIntervalWithoutSnapshots,
		},
		SetMaxNumValidatorsFunc: &IValidatorPoolSetMaxNumValidatorsFunc{
			defaultHook: i.SetMaxNumValidators,
		},
		SetStakeAmountFunc: &IValidatorPoolSetStakeAmountFunc{
			defaultHook: i.SetStakeAmount,
		},
		SkimExcessEthFunc: &IValidatorPoolSkimExcessEthFunc{
			defaultHook: i.SkimExcessEth,
		},
		SkimExcessTokenFunc: &IValidatorPoolSkimExcessTokenFunc{
			defaultHook: i.SkimExcessToken,
		},
		TryGetTokenIDFunc: &IValidatorPoolTryGetTokenIDFunc{
			defaultHook: i.TryGetTokenID,
		},
		UnregisterAllValidatorsFunc: &IValidatorPoolUnregisterAllValidatorsFunc{
			defaultHook: i.UnregisterAllValidators,
		},
		UnregisterValidatorsFunc: &IValidatorPoolUnregisterValidatorsFunc{
			defaultHook: i.UnregisterValidators,
		},
		WatchInitializedFunc: &IValidatorPoolWatchInitializedFunc{
			defaultHook: i.WatchInitialized,
		},
		WatchMaintenanceScheduledFunc: &IValidatorPoolWatchMaintenanceScheduledFunc{
			defaultHook: i.WatchMaintenanceScheduled,
		},
		WatchValidatorJoinedFunc: &IValidatorPoolWatchValidatorJoinedFunc{
			defaultHook: i.WatchValidatorJoined,
		},
		WatchValidatorLeftFunc: &IValidatorPoolWatchValidatorLeftFunc{
			defaultHook: i.WatchValidatorLeft,
		},
		WatchValidatorMajorSlashedFunc: &IValidatorPoolWatchValidatorMajorSlashedFunc{
			defaultHook: i.WatchValidatorMajorSlashed,
		},
		WatchValidatorMinorSlashedFunc: &IValidatorPoolWatchValidatorMinorSlashedFunc{
			defaultHook: i.WatchValidatorMinorSlashed,
		},
	}
}

// IValidatorPoolCLAIMPERIODFunc describes the behavior when the CLAIMPERIOD
// method of the parent MockIValidatorPool instance is invoked.
type IValidatorPoolCLAIMPERIODFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorPoolCLAIMPERIODFuncCall
	mutex       sync.Mutex
}

// CLAIMPERIOD delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorPool) CLAIMPERIOD(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.CLAIMPERIODFunc.nextHook()(v0)
	m.CLAIMPERIODFunc.appendCall(IValidatorPoolCLAIMPERIODFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CLAIMPERIOD method
// of the parent MockIValidatorPool instance is invoked and the hook queue
// is empty.
func (f *IValidatorPoolCLAIMPERIODFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CLAIMPERIOD method of the parent MockIValidatorPool instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorPoolCLAIMPERIODFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolCLAIMPERIODFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolCLAIMPERIODFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolCLAIMPERIODFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolCLAIMPERIODFunc) appendCall(r0 IValidatorPoolCLAIMPERIODFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolCLAIMPERIODFuncCall objects
// describing the invocations of this function.
func (f *IValidatorPoolCLAIMPERIODFunc) History() []IValidatorPoolCLAIMPERIODFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolCLAIMPERIODFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolCLAIMPERIODFuncCall is an object that describes an
// invocation of method CLAIMPERIOD on an instance of MockIValidatorPool.
type IValidatorPoolCLAIMPERIODFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolCLAIMPERIODFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolCLAIMPERIODFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolClaimExitingNFTPositionFunc describes the behavior when the
// ClaimExitingNFTPosition method of the parent MockIValidatorPool instance
// is invoked.
type IValidatorPoolClaimExitingNFTPositionFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IValidatorPoolClaimExitingNFTPositionFuncCall
	mutex       sync.Mutex
}

// ClaimExitingNFTPosition delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) ClaimExitingNFTPosition(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.ClaimExitingNFTPositionFunc.nextHook()(v0)
	m.ClaimExitingNFTPositionFunc.appendCall(IValidatorPoolClaimExitingNFTPositionFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ClaimExitingNFTPosition method of the parent MockIValidatorPool instance
// is invoked and the hook queue is empty.
func (f *IValidatorPoolClaimExitingNFTPositionFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ClaimExitingNFTPosition method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolClaimExitingNFTPositionFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolClaimExitingNFTPositionFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolClaimExitingNFTPositionFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolClaimExitingNFTPositionFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolClaimExitingNFTPositionFunc) appendCall(r0 IValidatorPoolClaimExitingNFTPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolClaimExitingNFTPositionFuncCall objects describing the
// invocations of this function.
func (f *IValidatorPoolClaimExitingNFTPositionFunc) History() []IValidatorPoolClaimExitingNFTPositionFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolClaimExitingNFTPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolClaimExitingNFTPositionFuncCall is an object that describes
// an invocation of method ClaimExitingNFTPosition on an instance of
// MockIValidatorPool.
type IValidatorPoolClaimExitingNFTPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolClaimExitingNFTPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolClaimExitingNFTPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolCollectProfitsFunc describes the behavior when the
// CollectProfits method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolCollectProfitsFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IValidatorPoolCollectProfitsFuncCall
	mutex       sync.Mutex
}

// CollectProfits delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) CollectProfits(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.CollectProfitsFunc.nextHook()(v0)
	m.CollectProfitsFunc.appendCall(IValidatorPoolCollectProfitsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CollectProfits
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolCollectProfitsFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CollectProfits method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolCollectProfitsFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolCollectProfitsFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolCollectProfitsFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolCollectProfitsFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolCollectProfitsFunc) appendCall(r0 IValidatorPoolCollectProfitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolCollectProfitsFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolCollectProfitsFunc) History() []IValidatorPoolCollectProfitsFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolCollectProfitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolCollectProfitsFuncCall is an object that describes an
// invocation of method CollectProfits on an instance of MockIValidatorPool.
type IValidatorPoolCollectProfitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolCollectProfitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolCollectProfitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolCompleteETHDKGFunc describes the behavior when the
// CompleteETHDKG method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolCompleteETHDKGFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IValidatorPoolCompleteETHDKGFuncCall
	mutex       sync.Mutex
}

// CompleteETHDKG delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) CompleteETHDKG(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.CompleteETHDKGFunc.nextHook()(v0)
	m.CompleteETHDKGFunc.appendCall(IValidatorPoolCompleteETHDKGFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CompleteETHDKG
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolCompleteETHDKGFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CompleteETHDKG method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolCompleteETHDKGFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolCompleteETHDKGFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolCompleteETHDKGFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolCompleteETHDKGFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolCompleteETHDKGFunc) appendCall(r0 IValidatorPoolCompleteETHDKGFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolCompleteETHDKGFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolCompleteETHDKGFunc) History() []IValidatorPoolCompleteETHDKGFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolCompleteETHDKGFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolCompleteETHDKGFuncCall is an object that describes an
// invocation of method CompleteETHDKG on an instance of MockIValidatorPool.
type IValidatorPoolCompleteETHDKGFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolCompleteETHDKGFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolCompleteETHDKGFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolFilterInitializedFunc describes the behavior when the
// FilterInitialized method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolFilterInitializedFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ValidatorPoolInitializedIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ValidatorPoolInitializedIterator, error)
	history     []IValidatorPoolFilterInitializedFuncCall
	mutex       sync.Mutex
}

// FilterInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) FilterInitialized(v0 *bind.FilterOpts) (*bindings.ValidatorPoolInitializedIterator, error) {
	r0, r1 := m.FilterInitializedFunc.nextHook()(v0)
	m.FilterInitializedFunc.appendCall(IValidatorPoolFilterInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterInitialized
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolFilterInitializedFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ValidatorPoolInitializedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterInitialized method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolFilterInitializedFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ValidatorPoolInitializedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolFilterInitializedFunc) SetDefaultReturn(r0 *bindings.ValidatorPoolInitializedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ValidatorPoolInitializedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolFilterInitializedFunc) PushReturn(r0 *bindings.ValidatorPoolInitializedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ValidatorPoolInitializedIterator, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolFilterInitializedFunc) nextHook() func(*bind.FilterOpts) (*bindings.ValidatorPoolInitializedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolFilterInitializedFunc) appendCall(r0 IValidatorPoolFilterInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolFilterInitializedFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolFilterInitializedFunc) History() []IValidatorPoolFilterInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolFilterInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolFilterInitializedFuncCall is an object that describes an
// invocation of method FilterInitialized on an instance of
// MockIValidatorPool.
type IValidatorPoolFilterInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorPoolInitializedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolFilterInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolFilterInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolFilterMaintenanceScheduledFunc describes the behavior when
// the FilterMaintenanceScheduled method of the parent MockIValidatorPool
// instance is invoked.
type IValidatorPoolFilterMaintenanceScheduledFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ValidatorPoolMaintenanceScheduledIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ValidatorPoolMaintenanceScheduledIterator, error)
	history     []IValidatorPoolFilterMaintenanceScheduledFuncCall
	mutex       sync.Mutex
}

// FilterMaintenanceScheduled delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) FilterMaintenanceScheduled(v0 *bind.FilterOpts) (*bindings.ValidatorPoolMaintenanceScheduledIterator, error) {
	r0, r1 := m.FilterMaintenanceScheduledFunc.nextHook()(v0)
	m.FilterMaintenanceScheduledFunc.appendCall(IValidatorPoolFilterMaintenanceScheduledFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterMaintenanceScheduled method of the parent MockIValidatorPool
// instance is invoked and the hook queue is empty.
func (f *IValidatorPoolFilterMaintenanceScheduledFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ValidatorPoolMaintenanceScheduledIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterMaintenanceScheduled method of the parent MockIValidatorPool
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorPoolFilterMaintenanceScheduledFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ValidatorPoolMaintenanceScheduledIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolFilterMaintenanceScheduledFunc) SetDefaultReturn(r0 *bindings.ValidatorPoolMaintenanceScheduledIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ValidatorPoolMaintenanceScheduledIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolFilterMaintenanceScheduledFunc) PushReturn(r0 *bindings.ValidatorPoolMaintenanceScheduledIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ValidatorPoolMaintenanceScheduledIterator, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolFilterMaintenanceScheduledFunc) nextHook() func(*bind.FilterOpts) (*bindings.ValidatorPoolMaintenanceScheduledIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolFilterMaintenanceScheduledFunc) appendCall(r0 IValidatorPoolFilterMaintenanceScheduledFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolFilterMaintenanceScheduledFuncCall objects describing the
// invocations of this function.
func (f *IValidatorPoolFilterMaintenanceScheduledFunc) History() []IValidatorPoolFilterMaintenanceScheduledFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolFilterMaintenanceScheduledFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolFilterMaintenanceScheduledFuncCall is an object that
// describes an invocation of method FilterMaintenanceScheduled on an
// instance of MockIValidatorPool.
type IValidatorPoolFilterMaintenanceScheduledFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorPoolMaintenanceScheduledIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolFilterMaintenanceScheduledFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolFilterMaintenanceScheduledFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolFilterValidatorJoinedFunc describes the behavior when the
// FilterValidatorJoined method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolFilterValidatorJoinedFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorJoinedIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorJoinedIterator, error)
	history     []IValidatorPoolFilterValidatorJoinedFuncCall
	mutex       sync.Mutex
}

// FilterValidatorJoined delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) FilterValidatorJoined(v0 *bind.FilterOpts, v1 []common.Address) (*bindings.ValidatorPoolValidatorJoinedIterator, error) {
	r0, r1 := m.FilterValidatorJoinedFunc.nextHook()(v0, v1)
	m.FilterValidatorJoinedFunc.appendCall(IValidatorPoolFilterValidatorJoinedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterValidatorJoined method of the parent MockIValidatorPool instance is
// invoked and the hook queue is empty.
func (f *IValidatorPoolFilterValidatorJoinedFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorJoinedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterValidatorJoined method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolFilterValidatorJoinedFunc) PushHook(hook func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorJoinedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolFilterValidatorJoinedFunc) SetDefaultReturn(r0 *bindings.ValidatorPoolValidatorJoinedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorJoinedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolFilterValidatorJoinedFunc) PushReturn(r0 *bindings.ValidatorPoolValidatorJoinedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorJoinedIterator, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolFilterValidatorJoinedFunc) nextHook() func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorJoinedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolFilterValidatorJoinedFunc) appendCall(r0 IValidatorPoolFilterValidatorJoinedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolFilterValidatorJoinedFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolFilterValidatorJoinedFunc) History() []IValidatorPoolFilterValidatorJoinedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolFilterValidatorJoinedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolFilterValidatorJoinedFuncCall is an object that describes
// an invocation of method FilterValidatorJoined on an instance of
// MockIValidatorPool.
type IValidatorPoolFilterValidatorJoinedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorPoolValidatorJoinedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolFilterValidatorJoinedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolFilterValidatorJoinedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolFilterValidatorLeftFunc describes the behavior when the
// FilterValidatorLeft method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolFilterValidatorLeftFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorLeftIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorLeftIterator, error)
	history     []IValidatorPoolFilterValidatorLeftFuncCall
	mutex       sync.Mutex
}

// FilterValidatorLeft delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) FilterValidatorLeft(v0 *bind.FilterOpts, v1 []common.Address) (*bindings.ValidatorPoolValidatorLeftIterator, error) {
	r0, r1 := m.FilterValidatorLeftFunc.nextHook()(v0, v1)
	m.FilterValidatorLeftFunc.appendCall(IValidatorPoolFilterValidatorLeftFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterValidatorLeft
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolFilterValidatorLeftFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorLeftIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterValidatorLeft method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolFilterValidatorLeftFunc) PushHook(hook func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorLeftIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolFilterValidatorLeftFunc) SetDefaultReturn(r0 *bindings.ValidatorPoolValidatorLeftIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorLeftIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolFilterValidatorLeftFunc) PushReturn(r0 *bindings.ValidatorPoolValidatorLeftIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorLeftIterator, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolFilterValidatorLeftFunc) nextHook() func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorLeftIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolFilterValidatorLeftFunc) appendCall(r0 IValidatorPoolFilterValidatorLeftFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolFilterValidatorLeftFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolFilterValidatorLeftFunc) History() []IValidatorPoolFilterValidatorLeftFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolFilterValidatorLeftFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolFilterValidatorLeftFuncCall is an object that describes an
// invocation of method FilterValidatorLeft on an instance of
// MockIValidatorPool.
type IValidatorPoolFilterValidatorLeftFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorPoolValidatorLeftIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolFilterValidatorLeftFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolFilterValidatorLeftFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolFilterValidatorMajorSlashedFunc describes the behavior when
// the FilterValidatorMajorSlashed method of the parent MockIValidatorPool
// instance is invoked.
type IValidatorPoolFilterValidatorMajorSlashedFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMajorSlashedIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMajorSlashedIterator, error)
	history     []IValidatorPoolFilterValidatorMajorSlashedFuncCall
	mutex       sync.Mutex
}

// FilterValidatorMajorSlashed delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) FilterValidatorMajorSlashed(v0 *bind.FilterOpts, v1 []common.Address) (*bindings.ValidatorPoolValidatorMajorSlashedIterator, error) {
	r0, r1 := m.FilterValidatorMajorSlashedFunc.nextHook()(v0, v1)
	m.FilterValidatorMajorSlashedFunc.appendCall(IValidatorPoolFilterValidatorMajorSlashedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterValidatorMajorSlashed method of the parent MockIValidatorPool
// instance is invoked and the hook queue is empty.
func (f *IValidatorPoolFilterValidatorMajorSlashedFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMajorSlashedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterValidatorMajorSlashed method of the parent MockIValidatorPool
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorPoolFilterValidatorMajorSlashedFunc) PushHook(hook func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMajorSlashedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolFilterValidatorMajorSlashedFunc) SetDefaultReturn(r0 *bindings.ValidatorPoolValidatorMajorSlashedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMajorSlashedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolFilterValidatorMajorSlashedFunc) PushReturn(r0 *bindings.ValidatorPoolValidatorMajorSlashedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMajorSlashedIterator, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolFilterValidatorMajorSlashedFunc) nextHook() func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMajorSlashedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolFilterValidatorMajorSlashedFunc) appendCall(r0 IValidatorPoolFilterValidatorMajorSlashedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolFilterValidatorMajorSlashedFuncCall objects describing the
// invocations of this function.
func (f *IValidatorPoolFilterValidatorMajorSlashedFunc) History() []IValidatorPoolFilterValidatorMajorSlashedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolFilterValidatorMajorSlashedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolFilterValidatorMajorSlashedFuncCall is an object that
// describes an invocation of method FilterValidatorMajorSlashed on an
// instance of MockIValidatorPool.
type IValidatorPoolFilterValidatorMajorSlashedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorPoolValidatorMajorSlashedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolFilterValidatorMajorSlashedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolFilterValidatorMajorSlashedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolFilterValidatorMinorSlashedFunc describes the behavior when
// the FilterValidatorMinorSlashed method of the parent MockIValidatorPool
// instance is invoked.
type IValidatorPoolFilterValidatorMinorSlashedFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMinorSlashedIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMinorSlashedIterator, error)
	history     []IValidatorPoolFilterValidatorMinorSlashedFuncCall
	mutex       sync.Mutex
}

// FilterValidatorMinorSlashed delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) FilterValidatorMinorSlashed(v0 *bind.FilterOpts, v1 []common.Address) (*bindings.ValidatorPoolValidatorMinorSlashedIterator, error) {
	r0, r1 := m.FilterValidatorMinorSlashedFunc.nextHook()(v0, v1)
	m.FilterValidatorMinorSlashedFunc.appendCall(IValidatorPoolFilterValidatorMinorSlashedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FilterValidatorMinorSlashed method of the parent MockIValidatorPool
// instance is invoked and the hook queue is empty.
func (f *IValidatorPoolFilterValidatorMinorSlashedFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMinorSlashedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterValidatorMinorSlashed method of the parent MockIValidatorPool
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorPoolFilterValidatorMinorSlashedFunc) PushHook(hook func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMinorSlashedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolFilterValidatorMinorSlashedFunc) SetDefaultReturn(r0 *bindings.ValidatorPoolValidatorMinorSlashedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMinorSlashedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolFilterValidatorMinorSlashedFunc) PushReturn(r0 *bindings.ValidatorPoolValidatorMinorSlashedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMinorSlashedIterator, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolFilterValidatorMinorSlashedFunc) nextHook() func(*bind.FilterOpts, []common.Address) (*bindings.ValidatorPoolValidatorMinorSlashedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolFilterValidatorMinorSlashedFunc) appendCall(r0 IValidatorPoolFilterValidatorMinorSlashedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolFilterValidatorMinorSlashedFuncCall objects describing the
// invocations of this function.
func (f *IValidatorPoolFilterValidatorMinorSlashedFunc) History() []IValidatorPoolFilterValidatorMinorSlashedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolFilterValidatorMinorSlashedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolFilterValidatorMinorSlashedFuncCall is an object that
// describes an invocation of method FilterValidatorMinorSlashed on an
// instance of MockIValidatorPool.
type IValidatorPoolFilterValidatorMinorSlashedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorPoolValidatorMinorSlashedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolFilterValidatorMinorSlashedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolFilterValidatorMinorSlashedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolGetDisputerRewardFunc describes the behavior when the
// GetDisputerReward method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolGetDisputerRewardFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorPoolGetDisputerRewardFuncCall
	mutex       sync.Mutex
}

// GetDisputerReward delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) GetDisputerReward(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetDisputerRewardFunc.nextHook()(v0)
	m.GetDisputerRewardFunc.appendCall(IValidatorPoolGetDisputerRewardFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDisputerReward
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolGetDisputerRewardFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDisputerReward method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolGetDisputerRewardFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolGetDisputerRewardFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolGetDisputerRewardFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolGetDisputerRewardFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolGetDisputerRewardFunc) appendCall(r0 IValidatorPoolGetDisputerRewardFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolGetDisputerRewardFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolGetDisputerRewardFunc) History() []IValidatorPoolGetDisputerRewardFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolGetDisputerRewardFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolGetDisputerRewardFuncCall is an object that describes an
// invocation of method GetDisputerReward on an instance of
// MockIValidatorPool.
type IValidatorPoolGetDisputerRewardFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolGetDisputerRewardFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolGetDisputerRewardFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolGetLocationFunc describes the behavior when the GetLocation
// method of the parent MockIValidatorPool instance is invoked.
type IValidatorPoolGetLocationFunc struct {
	defaultHook func(*bind.CallOpts, common.Address) (string, error)
	hooks       []func(*bind.CallOpts, common.Address) (string, error)
	history     []IValidatorPoolGetLocationFuncCall
	mutex       sync.Mutex
}

// GetLocation delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorPool) GetLocation(v0 *bind.CallOpts, v1 common.Address) (string, error) {
	r0, r1 := m.GetLocationFunc.nextHook()(v0, v1)
	m.GetLocationFunc.appendCall(IValidatorPoolGetLocationFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLocation method
// of the parent MockIValidatorPool instance is invoked and the hook queue
// is empty.
func (f *IValidatorPoolGetLocationFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLocation method of the parent MockIValidatorPool instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorPoolGetLocationFunc) PushHook(hook func(*bind.CallOpts, common.Address) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolGetLocationFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolGetLocationFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address) (string, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolGetLocationFunc) nextHook() func(*bind.CallOpts, common.Address) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolGetLocationFunc) appendCall(r0 IValidatorPoolGetLocationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolGetLocationFuncCall objects
// describing the invocations of this function.
func (f *IValidatorPoolGetLocationFunc) History() []IValidatorPoolGetLocationFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolGetLocationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolGetLocationFuncCall is an object that describes an
// invocation of method GetLocation on an instance of MockIValidatorPool.
type IValidatorPoolGetLocationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolGetLocationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolGetLocationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolGetLocationsFunc describes the behavior when the
// GetLocations method of the parent MockIValidatorPool instance is invoked.
type IValidatorPoolGetLocationsFunc struct {
	defaultHook func(*bind.CallOpts, []common.Address) ([]string, error)
	hooks       []func(*bind.CallOpts, []common.Address) ([]string, error)
	history     []IValidatorPoolGetLocationsFuncCall
	mutex       sync.Mutex
}

// GetLocations delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorPool) GetLocations(v0 *bind.CallOpts, v1 []common.Address) ([]string, error) {
	r0, r1 := m.GetLocationsFunc.nextHook()(v0, v1)
	m.GetLocationsFunc.appendCall(IValidatorPoolGetLocationsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLocations method
// of the parent MockIValidatorPool instance is invoked and the hook queue
// is empty.
func (f *IValidatorPoolGetLocationsFunc) SetDefaultHook(hook func(*bind.CallOpts, []common.Address) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLocations method of the parent MockIValidatorPool instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorPoolGetLocationsFunc) PushHook(hook func(*bind.CallOpts, []common.Address) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolGetLocationsFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, []common.Address) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolGetLocationsFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(*bind.CallOpts, []common.Address) ([]string, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolGetLocationsFunc) nextHook() func(*bind.CallOpts, []common.Address) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolGetLocationsFunc) appendCall(r0 IValidatorPoolGetLocationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolGetLocationsFuncCall objects
// describing the invocations of this function.
func (f *IValidatorPoolGetLocationsFunc) History() []IValidatorPoolGetLocationsFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolGetLocationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolGetLocationsFuncCall is an object that describes an
// invocation of method GetLocations on an instance of MockIValidatorPool.
type IValidatorPoolGetLocationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolGetLocationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolGetLocationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolGetMaxIntervalWithoutSnapshotsFunc describes the behavior
// when the GetMaxIntervalWithoutSnapshots method of the parent
// MockIValidatorPool instance is invoked.
type IValidatorPoolGetMaxIntervalWithoutSnapshotsFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorPoolGetMaxIntervalWithoutSnapshotsFuncCall
	mutex       sync.Mutex
}

// GetMaxIntervalWithoutSnapshots delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) GetMaxIntervalWithoutSnapshots(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetMaxIntervalWithoutSnapshotsFunc.nextHook()(v0)
	m.GetMaxIntervalWithoutSnapshotsFunc.appendCall(IValidatorPoolGetMaxIntervalWithoutSnapshotsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMaxIntervalWithoutSnapshots method of the parent MockIValidatorPool
// instance is invoked and the hook queue is empty.
func (f *IValidatorPoolGetMaxIntervalWithoutSnapshotsFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMaxIntervalWithoutSnapshots method of the parent MockIValidatorPool
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorPoolGetMaxIntervalWithoutSnapshotsFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolGetMaxIntervalWithoutSnapshotsFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolGetMaxIntervalWithoutSnapshotsFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolGetMaxIntervalWithoutSnapshotsFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolGetMaxIntervalWithoutSnapshotsFunc) appendCall(r0 IValidatorPoolGetMaxIntervalWithoutSnapshotsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolGetMaxIntervalWithoutSnapshotsFuncCall objects describing
// the invocations of this function.
func (f *IValidatorPoolGetMaxIntervalWithoutSnapshotsFunc) History() []IValidatorPoolGetMaxIntervalWithoutSnapshotsFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolGetMaxIntervalWithoutSnapshotsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolGetMaxIntervalWithoutSnapshotsFuncCall is an object that
// describes an invocation of method GetMaxIntervalWithoutSnapshots on an
// instance of MockIValidatorPool.
type IValidatorPoolGetMaxIntervalWithoutSnapshotsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolGetMaxIntervalWithoutSnapshotsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolGetMaxIntervalWithoutSnapshotsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolGetMaxNumValidatorsFunc describes the behavior when the
// GetMaxNumValidators method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolGetMaxNumValidatorsFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorPoolGetMaxNumValidatorsFuncCall
	mutex       sync.Mutex
}

// GetMaxNumValidators delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) GetMaxNumValidators(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetMaxNumValidatorsFunc.nextHook()(v0)
	m.GetMaxNumValidatorsFunc.appendCall(IValidatorPoolGetMaxNumValidatorsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetMaxNumValidators
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolGetMaxNumValidatorsFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMaxNumValidators method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolGetMaxNumValidatorsFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolGetMaxNumValidatorsFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolGetMaxNumValidatorsFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolGetMaxNumValidatorsFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolGetMaxNumValidatorsFunc) appendCall(r0 IValidatorPoolGetMaxNumValidatorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolGetMaxNumValidatorsFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolGetMaxNumValidatorsFunc) History() []IValidatorPoolGetMaxNumValidatorsFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolGetMaxNumValidatorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolGetMaxNumValidatorsFuncCall is an object that describes an
// invocation of method GetMaxNumValidators on an instance of
// MockIValidatorPool.
type IValidatorPoolGetMaxNumValidatorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolGetMaxNumValidatorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolGetMaxNumValidatorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolGetMetamorphicContractAddressFunc describes the behavior
// when the GetMetamorphicContractAddress method of the parent
// MockIValidatorPool instance is invoked.
type IValidatorPoolGetMetamorphicContractAddressFunc struct {
	defaultHook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	hooks       []func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	history     []IValidatorPoolGetMetamorphicContractAddressFuncCall
	mutex       sync.Mutex
}

// GetMetamorphicContractAddress delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) GetMetamorphicContractAddress(v0 *bind.CallOpts, v1 [32]byte, v2 common.Address) (common.Address, error) {
	r0, r1 := m.GetMetamorphicContractAddressFunc.nextHook()(v0, v1, v2)
	m.GetMetamorphicContractAddressFunc.appendCall(IValidatorPoolGetMetamorphicContractAddressFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMetamorphicContractAddress method of the parent MockIValidatorPool
// instance is invoked and the hook queue is empty.
func (f *IValidatorPoolGetMetamorphicContractAddressFunc) SetDefaultHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMetamorphicContractAddress method of the parent MockIValidatorPool
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorPoolGetMetamorphicContractAddressFunc) PushHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolGetMetamorphicContractAddressFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolGetMetamorphicContractAddressFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolGetMetamorphicContractAddressFunc) nextHook() func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolGetMetamorphicContractAddressFunc) appendCall(r0 IValidatorPoolGetMetamorphicContractAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolGetMetamorphicContractAddressFuncCall objects describing
// the invocations of this function.
func (f *IValidatorPoolGetMetamorphicContractAddressFunc) History() []IValidatorPoolGetMetamorphicContractAddressFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolGetMetamorphicContractAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolGetMetamorphicContractAddressFuncCall is an object that
// describes an invocation of method GetMetamorphicContractAddress on an
// instance of MockIValidatorPool.
type IValidatorPoolGetMetamorphicContractAddressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolGetMetamorphicContractAddressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolGetMetamorphicContractAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolGetStakeAmountFunc describes the behavior when the
// GetStakeAmount method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolGetStakeAmountFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorPoolGetStakeAmountFuncCall
	mutex       sync.Mutex
}

// GetStakeAmount delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) GetStakeAmount(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetStakeAmountFunc.nextHook()(v0)
	m.GetStakeAmountFunc.appendCall(IValidatorPoolGetStakeAmountFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetStakeAmount
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolGetStakeAmountFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStakeAmount method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolGetStakeAmountFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolGetStakeAmountFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolGetStakeAmountFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolGetStakeAmountFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolGetStakeAmountFunc) appendCall(r0 IValidatorPoolGetStakeAmountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolGetStakeAmountFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolGetStakeAmountFunc) History() []IValidatorPoolGetStakeAmountFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolGetStakeAmountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolGetStakeAmountFuncCall is an object that describes an
// invocation of method GetStakeAmount on an instance of MockIValidatorPool.
type IValidatorPoolGetStakeAmountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolGetStakeAmountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolGetStakeAmountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolGetValidatorFunc describes the behavior when the
// GetValidator method of the parent MockIValidatorPool instance is invoked.
type IValidatorPoolGetValidatorFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (common.Address, error)
	hooks       []func(*bind.CallOpts, *big.Int) (common.Address, error)
	history     []IValidatorPoolGetValidatorFuncCall
	mutex       sync.Mutex
}

// GetValidator delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorPool) GetValidator(v0 *bind.CallOpts, v1 *big.Int) (common.Address, error) {
	r0, r1 := m.GetValidatorFunc.nextHook()(v0, v1)
	m.GetValidatorFunc.appendCall(IValidatorPoolGetValidatorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetValidator method
// of the parent MockIValidatorPool instance is invoked and the hook queue
// is empty.
func (f *IValidatorPoolGetValidatorFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetValidator method of the parent MockIValidatorPool instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorPoolGetValidatorFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolGetValidatorFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolGetValidatorFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (common.Address, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolGetValidatorFunc) nextHook() func(*bind.CallOpts, *big.Int) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolGetValidatorFunc) appendCall(r0 IValidatorPoolGetValidatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolGetValidatorFuncCall objects
// describing the invocations of this function.
func (f *IValidatorPoolGetValidatorFunc) History() []IValidatorPoolGetValidatorFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolGetValidatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolGetValidatorFuncCall is an object that describes an
// invocation of method GetValidator on an instance of MockIValidatorPool.
type IValidatorPoolGetValidatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolGetValidatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolGetValidatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolGetValidatorDataFunc describes the behavior when the
// GetValidatorData method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolGetValidatorDataFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (bindings.ValidatorData, error)
	hooks       []func(*bind.CallOpts, *big.Int) (bindings.ValidatorData, error)
	history     []IValidatorPoolGetValidatorDataFuncCall
	mutex       sync.Mutex
}

// GetValidatorData delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) GetValidatorData(v0 *bind.CallOpts, v1 *big.Int) (bindings.ValidatorData, error) {
	r0, r1 := m.GetValidatorDataFunc.nextHook()(v0, v1)
	m.GetValidatorDataFunc.appendCall(IValidatorPoolGetValidatorDataFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetValidatorData
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolGetValidatorDataFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (bindings.ValidatorData, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetValidatorData method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolGetValidatorDataFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (bindings.ValidatorData, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolGetValidatorDataFunc) SetDefaultReturn(r0 bindings.ValidatorData, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (bindings.ValidatorData, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolGetValidatorDataFunc) PushReturn(r0 bindings.ValidatorData, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (bindings.ValidatorData, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolGetValidatorDataFunc) nextHook() func(*bind.CallOpts, *big.Int) (bindings.ValidatorData, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolGetValidatorDataFunc) appendCall(r0 IValidatorPoolGetValidatorDataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolGetValidatorDataFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolGetValidatorDataFunc) History() []IValidatorPoolGetValidatorDataFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolGetValidatorDataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolGetValidatorDataFuncCall is an object that describes an
// invocation of method GetValidatorData on an instance of
// MockIValidatorPool.
type IValidatorPoolGetValidatorDataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.ValidatorData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolGetValidatorDataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolGetValidatorDataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolGetValidatorsAddressesFunc describes the behavior when the
// GetValidatorsAddresses method of the parent MockIValidatorPool instance
// is invoked.
type IValidatorPoolGetValidatorsAddressesFunc struct {
	defaultHook func(*bind.CallOpts) ([]common.Address, error)
	hooks       []func(*bind.CallOpts) ([]common.Address, error)
	history     []IValidatorPoolGetValidatorsAddressesFuncCall
	mutex       sync.Mutex
}

// GetValidatorsAddresses delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) GetValidatorsAddresses(v0 *bind.CallOpts) ([]common.Address, error) {
	r0, r1 := m.GetValidatorsAddressesFunc.nextHook()(v0)
	m.GetValidatorsAddressesFunc.appendCall(IValidatorPoolGetValidatorsAddressesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetValidatorsAddresses method of the parent MockIValidatorPool instance
// is invoked and the hook queue is empty.
func (f *IValidatorPoolGetValidatorsAddressesFunc) SetDefaultHook(hook func(*bind.CallOpts) ([]common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetValidatorsAddresses method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolGetValidatorsAddressesFunc) PushHook(hook func(*bind.CallOpts) ([]common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolGetValidatorsAddressesFunc) SetDefaultReturn(r0 []common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) ([]common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolGetValidatorsAddressesFunc) PushReturn(r0 []common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts) ([]common.Address, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolGetValidatorsAddressesFunc) nextHook() func(*bind.CallOpts) ([]common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolGetValidatorsAddressesFunc) appendCall(r0 IValidatorPoolGetValidatorsAddressesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolGetValidatorsAddressesFuncCall objects describing the
// invocations of this function.
func (f *IValidatorPoolGetValidatorsAddressesFunc) History() []IValidatorPoolGetValidatorsAddressesFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolGetValidatorsAddressesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolGetValidatorsAddressesFuncCall is an object that describes
// an invocation of method GetValidatorsAddresses on an instance of
// MockIValidatorPool.
type IValidatorPoolGetValidatorsAddressesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolGetValidatorsAddressesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolGetValidatorsAddressesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolGetValidatorsCountFunc describes the behavior when the
// GetValidatorsCount method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolGetValidatorsCountFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorPoolGetValidatorsCountFuncCall
	mutex       sync.Mutex
}

// GetValidatorsCount delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) GetValidatorsCount(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetValidatorsCountFunc.nextHook()(v0)
	m.GetValidatorsCountFunc.appendCall(IValidatorPoolGetValidatorsCountFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetValidatorsCount
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolGetValidatorsCountFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetValidatorsCount method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolGetValidatorsCountFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolGetValidatorsCountFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolGetValidatorsCountFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolGetValidatorsCountFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolGetValidatorsCountFunc) appendCall(r0 IValidatorPoolGetValidatorsCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolGetValidatorsCountFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolGetValidatorsCountFunc) History() []IValidatorPoolGetValidatorsCountFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolGetValidatorsCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolGetValidatorsCountFuncCall is an object that describes an
// invocation of method GetValidatorsCount on an instance of
// MockIValidatorPool.
type IValidatorPoolGetValidatorsCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolGetValidatorsCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolGetValidatorsCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolInitializeFunc describes the behavior when the Initialize
// method of the parent MockIValidatorPool instance is invoked.
type IValidatorPoolInitializeFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int, *big.Int, *big.Int, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int, *big.Int, *big.Int, *big.Int) (*types.Transaction, error)
	history     []IValidatorPoolInitializeFuncCall
	mutex       sync.Mutex
}

// Initialize delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorPool) Initialize(v0 *bind.TransactOpts, v1 *big.Int, v2 *big.Int, v3 *big.Int, v4 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.InitializeFunc.nextHook()(v0, v1, v2, v3, v4)
	m.InitializeFunc.appendCall(IValidatorPoolInitializeFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Initialize method of
// the parent MockIValidatorPool instance is invoked and the hook queue is
// empty.
func (f *IValidatorPoolInitializeFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int, *big.Int, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Initialize method of the parent MockIValidatorPool instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorPoolInitializeFunc) PushHook(hook func(*bind.TransactOpts, *big.Int, *big.Int, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolInitializeFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int, *big.Int, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolInitializeFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int, *big.Int, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolInitializeFunc) nextHook() func(*bind.TransactOpts, *big.Int, *big.Int, *big.Int, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolInitializeFunc) appendCall(r0 IValidatorPoolInitializeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolInitializeFuncCall objects
// describing the invocations of this function.
func (f *IValidatorPoolInitializeFunc) History() []IValidatorPoolInitializeFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolInitializeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolInitializeFuncCall is an object that describes an
// invocation of method Initialize on an instance of MockIValidatorPool.
type IValidatorPoolInitializeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolInitializeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolInitializeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolInitializeETHDKGFunc describes the behavior when the
// InitializeETHDKG method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolInitializeETHDKGFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IValidatorPoolInitializeETHDKGFuncCall
	mutex       sync.Mutex
}

// InitializeETHDKG delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) InitializeETHDKG(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.InitializeETHDKGFunc.nextHook()(v0)
	m.InitializeETHDKGFunc.appendCall(IValidatorPoolInitializeETHDKGFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the InitializeETHDKG
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolInitializeETHDKGFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InitializeETHDKG method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolInitializeETHDKGFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolInitializeETHDKGFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolInitializeETHDKGFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolInitializeETHDKGFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolInitializeETHDKGFunc) appendCall(r0 IValidatorPoolInitializeETHDKGFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolInitializeETHDKGFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolInitializeETHDKGFunc) History() []IValidatorPoolInitializeETHDKGFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolInitializeETHDKGFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolInitializeETHDKGFuncCall is an object that describes an
// invocation of method InitializeETHDKG on an instance of
// MockIValidatorPool.
type IValidatorPoolInitializeETHDKGFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolInitializeETHDKGFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolInitializeETHDKGFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolIsAccusableFunc describes the behavior when the IsAccusable
// method of the parent MockIValidatorPool instance is invoked.
type IValidatorPoolIsAccusableFunc struct {
	defaultHook func(*bind.CallOpts, common.Address) (bool, error)
	hooks       []func(*bind.CallOpts, common.Address) (bool, error)
	history     []IValidatorPoolIsAccusableFuncCall
	mutex       sync.Mutex
}

// IsAccusable delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorPool) IsAccusable(v0 *bind.CallOpts, v1 common.Address) (bool, error) {
	r0, r1 := m.IsAccusableFunc.nextHook()(v0, v1)
	m.IsAccusableFunc.appendCall(IValidatorPoolIsAccusableFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsAccusable method
// of the parent MockIValidatorPool instance is invoked and the hook queue
// is empty.
func (f *IValidatorPoolIsAccusableFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsAccusable method of the parent MockIValidatorPool instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorPoolIsAccusableFunc) PushHook(hook func(*bind.CallOpts, common.Address) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolIsAccusableFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolIsAccusableFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address) (bool, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolIsAccusableFunc) nextHook() func(*bind.CallOpts, common.Address) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolIsAccusableFunc) appendCall(r0 IValidatorPoolIsAccusableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolIsAccusableFuncCall objects
// describing the invocations of this function.
func (f *IValidatorPoolIsAccusableFunc) History() []IValidatorPoolIsAccusableFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolIsAccusableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolIsAccusableFuncCall is an object that describes an
// invocation of method IsAccusable on an instance of MockIValidatorPool.
type IValidatorPoolIsAccusableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolIsAccusableFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolIsAccusableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolIsConsensusRunningFunc describes the behavior when the
// IsConsensusRunning method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolIsConsensusRunningFunc struct {
	defaultHook func(*bind.CallOpts) (bool, error)
	hooks       []func(*bind.CallOpts) (bool, error)
	history     []IValidatorPoolIsConsensusRunningFuncCall
	mutex       sync.Mutex
}

// IsConsensusRunning delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) IsConsensusRunning(v0 *bind.CallOpts) (bool, error) {
	r0, r1 := m.IsConsensusRunningFunc.nextHook()(v0)
	m.IsConsensusRunningFunc.appendCall(IValidatorPoolIsConsensusRunningFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsConsensusRunning
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolIsConsensusRunningFunc) SetDefaultHook(hook func(*bind.CallOpts) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsConsensusRunning method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolIsConsensusRunningFunc) PushHook(hook func(*bind.CallOpts) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolIsConsensusRunningFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolIsConsensusRunningFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolIsConsensusRunningFunc) nextHook() func(*bind.CallOpts) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolIsConsensusRunningFunc) appendCall(r0 IValidatorPoolIsConsensusRunningFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolIsConsensusRunningFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolIsConsensusRunningFunc) History() []IValidatorPoolIsConsensusRunningFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolIsConsensusRunningFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolIsConsensusRunningFuncCall is an object that describes an
// invocation of method IsConsensusRunning on an instance of
// MockIValidatorPool.
type IValidatorPoolIsConsensusRunningFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolIsConsensusRunningFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolIsConsensusRunningFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolIsInExitingQueueFunc describes the behavior when the
// IsInExitingQueue method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolIsInExitingQueueFunc struct {
	defaultHook func(*bind.CallOpts, common.Address) (bool, error)
	hooks       []func(*bind.CallOpts, common.Address) (bool, error)
	history     []IValidatorPoolIsInExitingQueueFuncCall
	mutex       sync.Mutex
}

// IsInExitingQueue delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) IsInExitingQueue(v0 *bind.CallOpts, v1 common.Address) (bool, error) {
	r0, r1 := m.IsInExitingQueueFunc.nextHook()(v0, v1)
	m.IsInExitingQueueFunc.appendCall(IValidatorPoolIsInExitingQueueFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsInExitingQueue
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolIsInExitingQueueFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsInExitingQueue method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolIsInExitingQueueFunc) PushHook(hook func(*bind.CallOpts, common.Address) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolIsInExitingQueueFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolIsInExitingQueueFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address) (bool, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolIsInExitingQueueFunc) nextHook() func(*bind.CallOpts, common.Address) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolIsInExitingQueueFunc) appendCall(r0 IValidatorPoolIsInExitingQueueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolIsInExitingQueueFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolIsInExitingQueueFunc) History() []IValidatorPoolIsInExitingQueueFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolIsInExitingQueueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolIsInExitingQueueFuncCall is an object that describes an
// invocation of method IsInExitingQueue on an instance of
// MockIValidatorPool.
type IValidatorPoolIsInExitingQueueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolIsInExitingQueueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolIsInExitingQueueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolIsMaintenanceScheduledFunc describes the behavior when the
// IsMaintenanceScheduled method of the parent MockIValidatorPool instance
// is invoked.
type IValidatorPoolIsMaintenanceScheduledFunc struct {
	defaultHook func(*bind.CallOpts) (bool, error)
	hooks       []func(*bind.CallOpts) (bool, error)
	history     []IValidatorPoolIsMaintenanceScheduledFuncCall
	mutex       sync.Mutex
}

// IsMaintenanceScheduled delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) IsMaintenanceScheduled(v0 *bind.CallOpts) (bool, error) {
	r0, r1 := m.IsMaintenanceScheduledFunc.nextHook()(v0)
	m.IsMaintenanceScheduledFunc.appendCall(IValidatorPoolIsMaintenanceScheduledFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// IsMaintenanceScheduled method of the parent MockIValidatorPool instance
// is invoked and the hook queue is empty.
func (f *IValidatorPoolIsMaintenanceScheduledFunc) SetDefaultHook(hook func(*bind.CallOpts) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsMaintenanceScheduled method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolIsMaintenanceScheduledFunc) PushHook(hook func(*bind.CallOpts) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolIsMaintenanceScheduledFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolIsMaintenanceScheduledFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolIsMaintenanceScheduledFunc) nextHook() func(*bind.CallOpts) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolIsMaintenanceScheduledFunc) appendCall(r0 IValidatorPoolIsMaintenanceScheduledFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolIsMaintenanceScheduledFuncCall objects describing the
// invocations of this function.
func (f *IValidatorPoolIsMaintenanceScheduledFunc) History() []IValidatorPoolIsMaintenanceScheduledFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolIsMaintenanceScheduledFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolIsMaintenanceScheduledFuncCall is an object that describes
// an invocation of method IsMaintenanceScheduled on an instance of
// MockIValidatorPool.
type IValidatorPoolIsMaintenanceScheduledFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolIsMaintenanceScheduledFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolIsMaintenanceScheduledFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolIsValidatorFunc describes the behavior when the IsValidator
// method of the parent MockIValidatorPool instance is invoked.
type IValidatorPoolIsValidatorFunc struct {
	defaultHook func(*bind.CallOpts, common.Address) (bool, error)
	hooks       []func(*bind.CallOpts, common.Address) (bool, error)
	history     []IValidatorPoolIsValidatorFuncCall
	mutex       sync.Mutex
}

// IsValidator delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorPool) IsValidator(v0 *bind.CallOpts, v1 common.Address) (bool, error) {
	r0, r1 := m.IsValidatorFunc.nextHook()(v0, v1)
	m.IsValidatorFunc.appendCall(IValidatorPoolIsValidatorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsValidator method
// of the parent MockIValidatorPool instance is invoked and the hook queue
// is empty.
func (f *IValidatorPoolIsValidatorFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsValidator method of the parent MockIValidatorPool instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorPoolIsValidatorFunc) PushHook(hook func(*bind.CallOpts, common.Address) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolIsValidatorFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolIsValidatorFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address) (bool, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolIsValidatorFunc) nextHook() func(*bind.CallOpts, common.Address) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolIsValidatorFunc) appendCall(r0 IValidatorPoolIsValidatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolIsValidatorFuncCall objects
// describing the invocations of this function.
func (f *IValidatorPoolIsValidatorFunc) History() []IValidatorPoolIsValidatorFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolIsValidatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolIsValidatorFuncCall is an object that describes an
// invocation of method IsValidator on an instance of MockIValidatorPool.
type IValidatorPoolIsValidatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolIsValidatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolIsValidatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolMajorSlashFunc describes the behavior when the MajorSlash
// method of the parent MockIValidatorPool instance is invoked.
type IValidatorPoolMajorSlashFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error)
	history     []IValidatorPoolMajorSlashFuncCall
	mutex       sync.Mutex
}

// MajorSlash delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorPool) MajorSlash(v0 *bind.TransactOpts, v1 common.Address, v2 common.Address) (*types.Transaction, error) {
	r0, r1 := m.MajorSlashFunc.nextHook()(v0, v1, v2)
	m.MajorSlashFunc.appendCall(IValidatorPoolMajorSlashFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MajorSlash method of
// the parent MockIValidatorPool instance is invoked and the hook queue is
// empty.
func (f *IValidatorPoolMajorSlashFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MajorSlash method of the parent MockIValidatorPool instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorPoolMajorSlashFunc) PushHook(hook func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolMajorSlashFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolMajorSlashFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolMajorSlashFunc) nextHook() func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolMajorSlashFunc) appendCall(r0 IValidatorPoolMajorSlashFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolMajorSlashFuncCall objects
// describing the invocations of this function.
func (f *IValidatorPoolMajorSlashFunc) History() []IValidatorPoolMajorSlashFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolMajorSlashFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolMajorSlashFuncCall is an object that describes an
// invocation of method MajorSlash on an instance of MockIValidatorPool.
type IValidatorPoolMajorSlashFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolMajorSlashFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolMajorSlashFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolMinorSlashFunc describes the behavior when the MinorSlash
// method of the parent MockIValidatorPool instance is invoked.
type IValidatorPoolMinorSlashFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error)
	history     []IValidatorPoolMinorSlashFuncCall
	mutex       sync.Mutex
}

// MinorSlash delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorPool) MinorSlash(v0 *bind.TransactOpts, v1 common.Address, v2 common.Address) (*types.Transaction, error) {
	r0, r1 := m.MinorSlashFunc.nextHook()(v0, v1, v2)
	m.MinorSlashFunc.appendCall(IValidatorPoolMinorSlashFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MinorSlash method of
// the parent MockIValidatorPool instance is invoked and the hook queue is
// empty.
func (f *IValidatorPoolMinorSlashFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MinorSlash method of the parent MockIValidatorPool instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorPoolMinorSlashFunc) PushHook(hook func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolMinorSlashFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolMinorSlashFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolMinorSlashFunc) nextHook() func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolMinorSlashFunc) appendCall(r0 IValidatorPoolMinorSlashFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolMinorSlashFuncCall objects
// describing the invocations of this function.
func (f *IValidatorPoolMinorSlashFunc) History() []IValidatorPoolMinorSlashFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolMinorSlashFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolMinorSlashFuncCall is an object that describes an
// invocation of method MinorSlash on an instance of MockIValidatorPool.
type IValidatorPoolMinorSlashFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolMinorSlashFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolMinorSlashFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolOnERC721ReceivedFunc describes the behavior when the
// OnERC721Received method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolOnERC721ReceivedFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error)
	history     []IValidatorPoolOnERC721ReceivedFuncCall
	mutex       sync.Mutex
}

// OnERC721Received delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) OnERC721Received(v0 *bind.TransactOpts, v1 common.Address, v2 common.Address, v3 *big.Int, v4 []byte) (*types.Transaction, error) {
	r0, r1 := m.OnERC721ReceivedFunc.nextHook()(v0, v1, v2, v3, v4)
	m.OnERC721ReceivedFunc.appendCall(IValidatorPoolOnERC721ReceivedFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the OnERC721Received
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolOnERC721ReceivedFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OnERC721Received method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolOnERC721ReceivedFunc) PushHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolOnERC721ReceivedFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolOnERC721ReceivedFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolOnERC721ReceivedFunc) nextHook() func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolOnERC721ReceivedFunc) appendCall(r0 IValidatorPoolOnERC721ReceivedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolOnERC721ReceivedFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolOnERC721ReceivedFunc) History() []IValidatorPoolOnERC721ReceivedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolOnERC721ReceivedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolOnERC721ReceivedFuncCall is an object that describes an
// invocation of method OnERC721Received on an instance of
// MockIValidatorPool.
type IValidatorPoolOnERC721ReceivedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolOnERC721ReceivedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolOnERC721ReceivedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolPOSITIONLOCKPERIODFunc describes the behavior when the
// POSITIONLOCKPERIOD method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolPOSITIONLOCKPERIODFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorPoolPOSITIONLOCKPERIODFuncCall
	mutex       sync.Mutex
}

// POSITIONLOCKPERIOD delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) POSITIONLOCKPERIOD(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.POSITIONLOCKPERIODFunc.nextHook()(v0)
	m.POSITIONLOCKPERIODFunc.appendCall(IValidatorPoolPOSITIONLOCKPERIODFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the POSITIONLOCKPERIOD
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolPOSITIONLOCKPERIODFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// POSITIONLOCKPERIOD method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolPOSITIONLOCKPERIODFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolPOSITIONLOCKPERIODFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolPOSITIONLOCKPERIODFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolPOSITIONLOCKPERIODFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolPOSITIONLOCKPERIODFunc) appendCall(r0 IValidatorPoolPOSITIONLOCKPERIODFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolPOSITIONLOCKPERIODFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolPOSITIONLOCKPERIODFunc) History() []IValidatorPoolPOSITIONLOCKPERIODFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolPOSITIONLOCKPERIODFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolPOSITIONLOCKPERIODFuncCall is an object that describes an
// invocation of method POSITIONLOCKPERIOD on an instance of
// MockIValidatorPool.
type IValidatorPoolPOSITIONLOCKPERIODFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolPOSITIONLOCKPERIODFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolPOSITIONLOCKPERIODFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolParseInitializedFunc describes the behavior when the
// ParseInitialized method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolParseInitializedFunc struct {
	defaultHook func(types.Log) (*bindings.ValidatorPoolInitialized, error)
	hooks       []func(types.Log) (*bindings.ValidatorPoolInitialized, error)
	history     []IValidatorPoolParseInitializedFuncCall
	mutex       sync.Mutex
}

// ParseInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) ParseInitialized(v0 types.Log) (*bindings.ValidatorPoolInitialized, error) {
	r0, r1 := m.ParseInitializedFunc.nextHook()(v0)
	m.ParseInitializedFunc.appendCall(IValidatorPoolParseInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseInitialized
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolParseInitializedFunc) SetDefaultHook(hook func(types.Log) (*bindings.ValidatorPoolInitialized, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseInitialized method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolParseInitializedFunc) PushHook(hook func(types.Log) (*bindings.ValidatorPoolInitialized, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolParseInitializedFunc) SetDefaultReturn(r0 *bindings.ValidatorPoolInitialized, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ValidatorPoolInitialized, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolParseInitializedFunc) PushReturn(r0 *bindings.ValidatorPoolInitialized, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ValidatorPoolInitialized, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolParseInitializedFunc) nextHook() func(types.Log) (*bindings.ValidatorPoolInitialized, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolParseInitializedFunc) appendCall(r0 IValidatorPoolParseInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolParseInitializedFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolParseInitializedFunc) History() []IValidatorPoolParseInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolParseInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolParseInitializedFuncCall is an object that describes an
// invocation of method ParseInitialized on an instance of
// MockIValidatorPool.
type IValidatorPoolParseInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorPoolInitialized
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolParseInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolParseInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolParseMaintenanceScheduledFunc describes the behavior when
// the ParseMaintenanceScheduled method of the parent MockIValidatorPool
// instance is invoked.
type IValidatorPoolParseMaintenanceScheduledFunc struct {
	defaultHook func(types.Log) (*bindings.ValidatorPoolMaintenanceScheduled, error)
	hooks       []func(types.Log) (*bindings.ValidatorPoolMaintenanceScheduled, error)
	history     []IValidatorPoolParseMaintenanceScheduledFuncCall
	mutex       sync.Mutex
}

// ParseMaintenanceScheduled delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) ParseMaintenanceScheduled(v0 types.Log) (*bindings.ValidatorPoolMaintenanceScheduled, error) {
	r0, r1 := m.ParseMaintenanceScheduledFunc.nextHook()(v0)
	m.ParseMaintenanceScheduledFunc.appendCall(IValidatorPoolParseMaintenanceScheduledFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseMaintenanceScheduled method of the parent MockIValidatorPool
// instance is invoked and the hook queue is empty.
func (f *IValidatorPoolParseMaintenanceScheduledFunc) SetDefaultHook(hook func(types.Log) (*bindings.ValidatorPoolMaintenanceScheduled, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseMaintenanceScheduled method of the parent MockIValidatorPool
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorPoolParseMaintenanceScheduledFunc) PushHook(hook func(types.Log) (*bindings.ValidatorPoolMaintenanceScheduled, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolParseMaintenanceScheduledFunc) SetDefaultReturn(r0 *bindings.ValidatorPoolMaintenanceScheduled, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ValidatorPoolMaintenanceScheduled, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolParseMaintenanceScheduledFunc) PushReturn(r0 *bindings.ValidatorPoolMaintenanceScheduled, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ValidatorPoolMaintenanceScheduled, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolParseMaintenanceScheduledFunc) nextHook() func(types.Log) (*bindings.ValidatorPoolMaintenanceScheduled, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolParseMaintenanceScheduledFunc) appendCall(r0 IValidatorPoolParseMaintenanceScheduledFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolParseMaintenanceScheduledFuncCall objects describing the
// invocations of this function.
func (f *IValidatorPoolParseMaintenanceScheduledFunc) History() []IValidatorPoolParseMaintenanceScheduledFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolParseMaintenanceScheduledFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolParseMaintenanceScheduledFuncCall is an object that
// describes an invocation of method ParseMaintenanceScheduled on an
// instance of MockIValidatorPool.
type IValidatorPoolParseMaintenanceScheduledFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorPoolMaintenanceScheduled
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolParseMaintenanceScheduledFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolParseMaintenanceScheduledFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolParseValidatorJoinedFunc describes the behavior when the
// ParseValidatorJoined method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolParseValidatorJoinedFunc struct {
	defaultHook func(types.Log) (*bindings.ValidatorPoolValidatorJoined, error)
	hooks       []func(types.Log) (*bindings.ValidatorPoolValidatorJoined, error)
	history     []IValidatorPoolParseValidatorJoinedFuncCall
	mutex       sync.Mutex
}

// ParseValidatorJoined delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) ParseValidatorJoined(v0 types.Log) (*bindings.ValidatorPoolValidatorJoined, error) {
	r0, r1 := m.ParseValidatorJoinedFunc.nextHook()(v0)
	m.ParseValidatorJoinedFunc.appendCall(IValidatorPoolParseValidatorJoinedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseValidatorJoined
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolParseValidatorJoinedFunc) SetDefaultHook(hook func(types.Log) (*bindings.ValidatorPoolValidatorJoined, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseValidatorJoined method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolParseValidatorJoinedFunc) PushHook(hook func(types.Log) (*bindings.ValidatorPoolValidatorJoined, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolParseValidatorJoinedFunc) SetDefaultReturn(r0 *bindings.ValidatorPoolValidatorJoined, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ValidatorPoolValidatorJoined, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolParseValidatorJoinedFunc) PushReturn(r0 *bindings.ValidatorPoolValidatorJoined, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ValidatorPoolValidatorJoined, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolParseValidatorJoinedFunc) nextHook() func(types.Log) (*bindings.ValidatorPoolValidatorJoined, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolParseValidatorJoinedFunc) appendCall(r0 IValidatorPoolParseValidatorJoinedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolParseValidatorJoinedFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolParseValidatorJoinedFunc) History() []IValidatorPoolParseValidatorJoinedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolParseValidatorJoinedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolParseValidatorJoinedFuncCall is an object that describes an
// invocation of method ParseValidatorJoined on an instance of
// MockIValidatorPool.
type IValidatorPoolParseValidatorJoinedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorPoolValidatorJoined
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolParseValidatorJoinedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolParseValidatorJoinedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolParseValidatorLeftFunc describes the behavior when the
// ParseValidatorLeft method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolParseValidatorLeftFunc struct {
	defaultHook func(types.Log) (*bindings.ValidatorPoolValidatorLeft, error)
	hooks       []func(types.Log) (*bindings.ValidatorPoolValidatorLeft, error)
	history     []IValidatorPoolParseValidatorLeftFuncCall
	mutex       sync.Mutex
}

// ParseValidatorLeft delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) ParseValidatorLeft(v0 types.Log) (*bindings.ValidatorPoolValidatorLeft, error) {
	r0, r1 := m.ParseValidatorLeftFunc.nextHook()(v0)
	m.ParseValidatorLeftFunc.appendCall(IValidatorPoolParseValidatorLeftFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseValidatorLeft
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolParseValidatorLeftFunc) SetDefaultHook(hook func(types.Log) (*bindings.ValidatorPoolValidatorLeft, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseValidatorLeft method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolParseValidatorLeftFunc) PushHook(hook func(types.Log) (*bindings.ValidatorPoolValidatorLeft, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolParseValidatorLeftFunc) SetDefaultReturn(r0 *bindings.ValidatorPoolValidatorLeft, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ValidatorPoolValidatorLeft, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolParseValidatorLeftFunc) PushReturn(r0 *bindings.ValidatorPoolValidatorLeft, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ValidatorPoolValidatorLeft, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolParseValidatorLeftFunc) nextHook() func(types.Log) (*bindings.ValidatorPoolValidatorLeft, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolParseValidatorLeftFunc) appendCall(r0 IValidatorPoolParseValidatorLeftFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolParseValidatorLeftFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolParseValidatorLeftFunc) History() []IValidatorPoolParseValidatorLeftFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolParseValidatorLeftFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolParseValidatorLeftFuncCall is an object that describes an
// invocation of method ParseValidatorLeft on an instance of
// MockIValidatorPool.
type IValidatorPoolParseValidatorLeftFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorPoolValidatorLeft
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolParseValidatorLeftFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolParseValidatorLeftFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolParseValidatorMajorSlashedFunc describes the behavior when
// the ParseValidatorMajorSlashed method of the parent MockIValidatorPool
// instance is invoked.
type IValidatorPoolParseValidatorMajorSlashedFunc struct {
	defaultHook func(types.Log) (*bindings.ValidatorPoolValidatorMajorSlashed, error)
	hooks       []func(types.Log) (*bindings.ValidatorPoolValidatorMajorSlashed, error)
	history     []IValidatorPoolParseValidatorMajorSlashedFuncCall
	mutex       sync.Mutex
}

// ParseValidatorMajorSlashed delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) ParseValidatorMajorSlashed(v0 types.Log) (*bindings.ValidatorPoolValidatorMajorSlashed, error) {
	r0, r1 := m.ParseValidatorMajorSlashedFunc.nextHook()(v0)
	m.ParseValidatorMajorSlashedFunc.appendCall(IValidatorPoolParseValidatorMajorSlashedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseValidatorMajorSlashed method of the parent MockIValidatorPool
// instance is invoked and the hook queue is empty.
func (f *IValidatorPoolParseValidatorMajorSlashedFunc) SetDefaultHook(hook func(types.Log) (*bindings.ValidatorPoolValidatorMajorSlashed, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseValidatorMajorSlashed method of the parent MockIValidatorPool
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorPoolParseValidatorMajorSlashedFunc) PushHook(hook func(types.Log) (*bindings.ValidatorPoolValidatorMajorSlashed, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolParseValidatorMajorSlashedFunc) SetDefaultReturn(r0 *bindings.ValidatorPoolValidatorMajorSlashed, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ValidatorPoolValidatorMajorSlashed, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolParseValidatorMajorSlashedFunc) PushReturn(r0 *bindings.ValidatorPoolValidatorMajorSlashed, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ValidatorPoolValidatorMajorSlashed, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolParseValidatorMajorSlashedFunc) nextHook() func(types.Log) (*bindings.ValidatorPoolValidatorMajorSlashed, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolParseValidatorMajorSlashedFunc) appendCall(r0 IValidatorPoolParseValidatorMajorSlashedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolParseValidatorMajorSlashedFuncCall objects describing the
// invocations of this function.
func (f *IValidatorPoolParseValidatorMajorSlashedFunc) History() []IValidatorPoolParseValidatorMajorSlashedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolParseValidatorMajorSlashedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolParseValidatorMajorSlashedFuncCall is an object that
// describes an invocation of method ParseValidatorMajorSlashed on an
// instance of MockIValidatorPool.
type IValidatorPoolParseValidatorMajorSlashedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorPoolValidatorMajorSlashed
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolParseValidatorMajorSlashedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolParseValidatorMajorSlashedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolParseValidatorMinorSlashedFunc describes the behavior when
// the ParseValidatorMinorSlashed method of the parent MockIValidatorPool
// instance is invoked.
type IValidatorPoolParseValidatorMinorSlashedFunc struct {
	defaultHook func(types.Log) (*bindings.ValidatorPoolValidatorMinorSlashed, error)
	hooks       []func(types.Log) (*bindings.ValidatorPoolValidatorMinorSlashed, error)
	history     []IValidatorPoolParseValidatorMinorSlashedFuncCall
	mutex       sync.Mutex
}

// ParseValidatorMinorSlashed delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) ParseValidatorMinorSlashed(v0 types.Log) (*bindings.ValidatorPoolValidatorMinorSlashed, error) {
	r0, r1 := m.ParseValidatorMinorSlashedFunc.nextHook()(v0)
	m.ParseValidatorMinorSlashedFunc.appendCall(IValidatorPoolParseValidatorMinorSlashedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ParseValidatorMinorSlashed method of the parent MockIValidatorPool
// instance is invoked and the hook queue is empty.
func (f *IValidatorPoolParseValidatorMinorSlashedFunc) SetDefaultHook(hook func(types.Log) (*bindings.ValidatorPoolValidatorMinorSlashed, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseValidatorMinorSlashed method of the parent MockIValidatorPool
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorPoolParseValidatorMinorSlashedFunc) PushHook(hook func(types.Log) (*bindings.ValidatorPoolValidatorMinorSlashed, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolParseValidatorMinorSlashedFunc) SetDefaultReturn(r0 *bindings.ValidatorPoolValidatorMinorSlashed, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ValidatorPoolValidatorMinorSlashed, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolParseValidatorMinorSlashedFunc) PushReturn(r0 *bindings.ValidatorPoolValidatorMinorSlashed, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ValidatorPoolValidatorMinorSlashed, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolParseValidatorMinorSlashedFunc) nextHook() func(types.Log) (*bindings.ValidatorPoolValidatorMinorSlashed, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolParseValidatorMinorSlashedFunc) appendCall(r0 IValidatorPoolParseValidatorMinorSlashedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolParseValidatorMinorSlashedFuncCall objects describing the
// invocations of this function.
func (f *IValidatorPoolParseValidatorMinorSlashedFunc) History() []IValidatorPoolParseValidatorMinorSlashedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolParseValidatorMinorSlashedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolParseValidatorMinorSlashedFuncCall is an object that
// describes an invocation of method ParseValidatorMinorSlashed on an
// instance of MockIValidatorPool.
type IValidatorPoolParseValidatorMinorSlashedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorPoolValidatorMinorSlashed
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolParseValidatorMinorSlashedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolParseValidatorMinorSlashedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolPauseConsensusFunc describes the behavior when the
// PauseConsensus method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolPauseConsensusFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IValidatorPoolPauseConsensusFuncCall
	mutex       sync.Mutex
}

// PauseConsensus delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) PauseConsensus(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.PauseConsensusFunc.nextHook()(v0)
	m.PauseConsensusFunc.appendCall(IValidatorPoolPauseConsensusFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PauseConsensus
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolPauseConsensusFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PauseConsensus method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolPauseConsensusFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolPauseConsensusFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolPauseConsensusFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolPauseConsensusFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolPauseConsensusFunc) appendCall(r0 IValidatorPoolPauseConsensusFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolPauseConsensusFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolPauseConsensusFunc) History() []IValidatorPoolPauseConsensusFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolPauseConsensusFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolPauseConsensusFuncCall is an object that describes an
// invocation of method PauseConsensus on an instance of MockIValidatorPool.
type IValidatorPoolPauseConsensusFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolPauseConsensusFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolPauseConsensusFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolPauseConsensusOnArbitraryHeightFunc describes the behavior
// when the PauseConsensusOnArbitraryHeight method of the parent
// MockIValidatorPool instance is invoked.
type IValidatorPoolPauseConsensusOnArbitraryHeightFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IValidatorPoolPauseConsensusOnArbitraryHeightFuncCall
	mutex       sync.Mutex
}

// PauseConsensusOnArbitraryHeight delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) PauseConsensusOnArbitraryHeight(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.PauseConsensusOnArbitraryHeightFunc.nextHook()(v0, v1)
	m.PauseConsensusOnArbitraryHeightFunc.appendCall(IValidatorPoolPauseConsensusOnArbitraryHeightFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PauseConsensusOnArbitraryHeight method of the parent MockIValidatorPool
// instance is invoked and the hook queue is empty.
func (f *IValidatorPoolPauseConsensusOnArbitraryHeightFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PauseConsensusOnArbitraryHeight method of the parent MockIValidatorPool
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorPoolPauseConsensusOnArbitraryHeightFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolPauseConsensusOnArbitraryHeightFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolPauseConsensusOnArbitraryHeightFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolPauseConsensusOnArbitraryHeightFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolPauseConsensusOnArbitraryHeightFunc) appendCall(r0 IValidatorPoolPauseConsensusOnArbitraryHeightFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolPauseConsensusOnArbitraryHeightFuncCall objects describing
// the invocations of this function.
func (f *IValidatorPoolPauseConsensusOnArbitraryHeightFunc) History() []IValidatorPoolPauseConsensusOnArbitraryHeightFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolPauseConsensusOnArbitraryHeightFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolPauseConsensusOnArbitraryHeightFuncCall is an object that
// describes an invocation of method PauseConsensusOnArbitraryHeight on an
// instance of MockIValidatorPool.
type IValidatorPoolPauseConsensusOnArbitraryHeightFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolPauseConsensusOnArbitraryHeightFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolPauseConsensusOnArbitraryHeightFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolReceiveFunc describes the behavior when the Receive method
// of the parent MockIValidatorPool instance is invoked.
type IValidatorPoolReceiveFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IValidatorPoolReceiveFuncCall
	mutex       sync.Mutex
}

// Receive delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIValidatorPool) Receive(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.ReceiveFunc.nextHook()(v0)
	m.ReceiveFunc.appendCall(IValidatorPoolReceiveFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Receive method of
// the parent MockIValidatorPool instance is invoked and the hook queue is
// empty.
func (f *IValidatorPoolReceiveFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Receive method of the parent MockIValidatorPool instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IValidatorPoolReceiveFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolReceiveFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolReceiveFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolReceiveFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolReceiveFunc) appendCall(r0 IValidatorPoolReceiveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolReceiveFuncCall objects
// describing the invocations of this function.
func (f *IValidatorPoolReceiveFunc) History() []IValidatorPoolReceiveFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolReceiveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolReceiveFuncCall is an object that describes an invocation
// of method Receive on an instance of MockIValidatorPool.
type IValidatorPoolReceiveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolReceiveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolReceiveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolRegisterValidatorsFunc describes the behavior when the
// RegisterValidators method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolRegisterValidatorsFunc struct {
	defaultHook func(*bind.TransactOpts, []common.Address, []*big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []common.Address, []*big.Int) (*types.Transaction, error)
	history     []IValidatorPoolRegisterValidatorsFuncCall
	mutex       sync.Mutex
}

// RegisterValidators delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) RegisterValidators(v0 *bind.TransactOpts, v1 []common.Address, v2 []*big.Int) (*types.Transaction, error) {
	r0, r1 := m.RegisterValidatorsFunc.nextHook()(v0, v1, v2)
	m.RegisterValidatorsFunc.appendCall(IValidatorPoolRegisterValidatorsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RegisterValidators
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolRegisterValidatorsFunc) SetDefaultHook(hook func(*bind.TransactOpts, []common.Address, []*big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RegisterValidators method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolRegisterValidatorsFunc) PushHook(hook func(*bind.TransactOpts, []common.Address, []*big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolRegisterValidatorsFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []common.Address, []*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolRegisterValidatorsFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []common.Address, []*big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolRegisterValidatorsFunc) nextHook() func(*bind.TransactOpts, []common.Address, []*big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolRegisterValidatorsFunc) appendCall(r0 IValidatorPoolRegisterValidatorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolRegisterValidatorsFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolRegisterValidatorsFunc) History() []IValidatorPoolRegisterValidatorsFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolRegisterValidatorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolRegisterValidatorsFuncCall is an object that describes an
// invocation of method RegisterValidators on an instance of
// MockIValidatorPool.
type IValidatorPoolRegisterValidatorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolRegisterValidatorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolRegisterValidatorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolScheduleMaintenanceFunc describes the behavior when the
// ScheduleMaintenance method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolScheduleMaintenanceFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IValidatorPoolScheduleMaintenanceFuncCall
	mutex       sync.Mutex
}

// ScheduleMaintenance delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) ScheduleMaintenance(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.ScheduleMaintenanceFunc.nextHook()(v0)
	m.ScheduleMaintenanceFunc.appendCall(IValidatorPoolScheduleMaintenanceFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ScheduleMaintenance
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolScheduleMaintenanceFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ScheduleMaintenance method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolScheduleMaintenanceFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolScheduleMaintenanceFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolScheduleMaintenanceFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolScheduleMaintenanceFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolScheduleMaintenanceFunc) appendCall(r0 IValidatorPoolScheduleMaintenanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolScheduleMaintenanceFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolScheduleMaintenanceFunc) History() []IValidatorPoolScheduleMaintenanceFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolScheduleMaintenanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolScheduleMaintenanceFuncCall is an object that describes an
// invocation of method ScheduleMaintenance on an instance of
// MockIValidatorPool.
type IValidatorPoolScheduleMaintenanceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolScheduleMaintenanceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolScheduleMaintenanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolSetDisputerRewardFunc describes the behavior when the
// SetDisputerReward method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolSetDisputerRewardFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IValidatorPoolSetDisputerRewardFuncCall
	mutex       sync.Mutex
}

// SetDisputerReward delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) SetDisputerReward(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.SetDisputerRewardFunc.nextHook()(v0, v1)
	m.SetDisputerRewardFunc.appendCall(IValidatorPoolSetDisputerRewardFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetDisputerReward
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolSetDisputerRewardFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetDisputerReward method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolSetDisputerRewardFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolSetDisputerRewardFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolSetDisputerRewardFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolSetDisputerRewardFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolSetDisputerRewardFunc) appendCall(r0 IValidatorPoolSetDisputerRewardFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolSetDisputerRewardFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolSetDisputerRewardFunc) History() []IValidatorPoolSetDisputerRewardFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolSetDisputerRewardFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolSetDisputerRewardFuncCall is an object that describes an
// invocation of method SetDisputerReward on an instance of
// MockIValidatorPool.
type IValidatorPoolSetDisputerRewardFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolSetDisputerRewardFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolSetDisputerRewardFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolSetLocationFunc describes the behavior when the SetLocation
// method of the parent MockIValidatorPool instance is invoked.
type IValidatorPoolSetLocationFunc struct {
	defaultHook func(*bind.TransactOpts, string) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, string) (*types.Transaction, error)
	history     []IValidatorPoolSetLocationFuncCall
	mutex       sync.Mutex
}

// SetLocation delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorPool) SetLocation(v0 *bind.TransactOpts, v1 string) (*types.Transaction, error) {
	r0, r1 := m.SetLocationFunc.nextHook()(v0, v1)
	m.SetLocationFunc.appendCall(IValidatorPoolSetLocationFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetLocation method
// of the parent MockIValidatorPool instance is invoked and the hook queue
// is empty.
func (f *IValidatorPoolSetLocationFunc) SetDefaultHook(hook func(*bind.TransactOpts, string) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetLocation method of the parent MockIValidatorPool instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorPoolSetLocationFunc) PushHook(hook func(*bind.TransactOpts, string) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolSetLocationFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, string) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolSetLocationFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, string) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolSetLocationFunc) nextHook() func(*bind.TransactOpts, string) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolSetLocationFunc) appendCall(r0 IValidatorPoolSetLocationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolSetLocationFuncCall objects
// describing the invocations of this function.
func (f *IValidatorPoolSetLocationFunc) History() []IValidatorPoolSetLocationFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolSetLocationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolSetLocationFuncCall is an object that describes an
// invocation of method SetLocation on an instance of MockIValidatorPool.
type IValidatorPoolSetLocationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolSetLocationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolSetLocationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolSetMaxIntervalWithoutSnapshotsFunc describes the behavior
// when the SetMaxIntervalWithoutSnapshots method of the parent
// MockIValidatorPool instance is invoked.
type IValidatorPoolSetMaxIntervalWithoutSnapshotsFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IValidatorPoolSetMaxIntervalWithoutSnapshotsFuncCall
	mutex       sync.Mutex
}

// SetMaxIntervalWithoutSnapshots delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) SetMaxIntervalWithoutSnapshots(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.SetMaxIntervalWithoutSnapshotsFunc.nextHook()(v0, v1)
	m.SetMaxIntervalWithoutSnapshotsFunc.appendCall(IValidatorPoolSetMaxIntervalWithoutSnapshotsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SetMaxIntervalWithoutSnapshots method of the parent MockIValidatorPool
// instance is invoked and the hook queue is empty.
func (f *IValidatorPoolSetMaxIntervalWithoutSnapshotsFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetMaxIntervalWithoutSnapshots method of the parent MockIValidatorPool
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorPoolSetMaxIntervalWithoutSnapshotsFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolSetMaxIntervalWithoutSnapshotsFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolSetMaxIntervalWithoutSnapshotsFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolSetMaxIntervalWithoutSnapshotsFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolSetMaxIntervalWithoutSnapshotsFunc) appendCall(r0 IValidatorPoolSetMaxIntervalWithoutSnapshotsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolSetMaxIntervalWithoutSnapshotsFuncCall objects describing
// the invocations of this function.
func (f *IValidatorPoolSetMaxIntervalWithoutSnapshotsFunc) History() []IValidatorPoolSetMaxIntervalWithoutSnapshotsFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolSetMaxIntervalWithoutSnapshotsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolSetMaxIntervalWithoutSnapshotsFuncCall is an object that
// describes an invocation of method SetMaxIntervalWithoutSnapshots on an
// instance of MockIValidatorPool.
type IValidatorPoolSetMaxIntervalWithoutSnapshotsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolSetMaxIntervalWithoutSnapshotsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolSetMaxIntervalWithoutSnapshotsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolSetMaxNumValidatorsFunc describes the behavior when the
// SetMaxNumValidators method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolSetMaxNumValidatorsFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IValidatorPoolSetMaxNumValidatorsFuncCall
	mutex       sync.Mutex
}

// SetMaxNumValidators delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) SetMaxNumValidators(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.SetMaxNumValidatorsFunc.nextHook()(v0, v1)
	m.SetMaxNumValidatorsFunc.appendCall(IValidatorPoolSetMaxNumValidatorsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetMaxNumValidators
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolSetMaxNumValidatorsFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetMaxNumValidators method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolSetMaxNumValidatorsFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolSetMaxNumValidatorsFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolSetMaxNumValidatorsFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolSetMaxNumValidatorsFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolSetMaxNumValidatorsFunc) appendCall(r0 IValidatorPoolSetMaxNumValidatorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolSetMaxNumValidatorsFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolSetMaxNumValidatorsFunc) History() []IValidatorPoolSetMaxNumValidatorsFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolSetMaxNumValidatorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolSetMaxNumValidatorsFuncCall is an object that describes an
// invocation of method SetMaxNumValidators on an instance of
// MockIValidatorPool.
type IValidatorPoolSetMaxNumValidatorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolSetMaxNumValidatorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolSetMaxNumValidatorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolSetStakeAmountFunc describes the behavior when the
// SetStakeAmount method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolSetStakeAmountFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IValidatorPoolSetStakeAmountFuncCall
	mutex       sync.Mutex
}

// SetStakeAmount delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) SetStakeAmount(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.SetStakeAmountFunc.nextHook()(v0, v1)
	m.SetStakeAmountFunc.appendCall(IValidatorPoolSetStakeAmountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetStakeAmount
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolSetStakeAmountFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetStakeAmount method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolSetStakeAmountFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolSetStakeAmountFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolSetStakeAmountFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolSetStakeAmountFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolSetStakeAmountFunc) appendCall(r0 IValidatorPoolSetStakeAmountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolSetStakeAmountFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolSetStakeAmountFunc) History() []IValidatorPoolSetStakeAmountFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolSetStakeAmountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolSetStakeAmountFuncCall is an object that describes an
// invocation of method SetStakeAmount on an instance of MockIValidatorPool.
type IValidatorPoolSetStakeAmountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolSetStakeAmountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolSetStakeAmountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolSkimExcessEthFunc describes the behavior when the
// SkimExcessEth method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolSkimExcessEthFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	history     []IValidatorPoolSkimExcessEthFuncCall
	mutex       sync.Mutex
}

// SkimExcessEth delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorPool) SkimExcessEth(v0 *bind.TransactOpts, v1 common.Address) (*types.Transaction, error) {
	r0, r1 := m.SkimExcessEthFunc.nextHook()(v0, v1)
	m.SkimExcessEthFunc.appendCall(IValidatorPoolSkimExcessEthFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SkimExcessEth method
// of the parent MockIValidatorPool instance is invoked and the hook queue
// is empty.
func (f *IValidatorPoolSkimExcessEthFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SkimExcessEth method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolSkimExcessEthFunc) PushHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolSkimExcessEthFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolSkimExcessEthFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolSkimExcessEthFunc) nextHook() func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolSkimExcessEthFunc) appendCall(r0 IValidatorPoolSkimExcessEthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolSkimExcessEthFuncCall objects
// describing the invocations of this function.
func (f *IValidatorPoolSkimExcessEthFunc) History() []IValidatorPoolSkimExcessEthFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolSkimExcessEthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolSkimExcessEthFuncCall is an object that describes an
// invocation of method SkimExcessEth on an instance of MockIValidatorPool.
type IValidatorPoolSkimExcessEthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolSkimExcessEthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolSkimExcessEthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolSkimExcessTokenFunc describes the behavior when the
// SkimExcessToken method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolSkimExcessTokenFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	history     []IValidatorPoolSkimExcessTokenFuncCall
	mutex       sync.Mutex
}

// SkimExcessToken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) SkimExcessToken(v0 *bind.TransactOpts, v1 common.Address) (*types.Transaction, error) {
	r0, r1 := m.SkimExcessTokenFunc.nextHook()(v0, v1)
	m.SkimExcessTokenFunc.appendCall(IValidatorPoolSkimExcessTokenFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SkimExcessToken
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolSkimExcessTokenFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SkimExcessToken method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolSkimExcessTokenFunc) PushHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolSkimExcessTokenFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolSkimExcessTokenFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolSkimExcessTokenFunc) nextHook() func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolSkimExcessTokenFunc) appendCall(r0 IValidatorPoolSkimExcessTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolSkimExcessTokenFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolSkimExcessTokenFunc) History() []IValidatorPoolSkimExcessTokenFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolSkimExcessTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolSkimExcessTokenFuncCall is an object that describes an
// invocation of method SkimExcessToken on an instance of
// MockIValidatorPool.
type IValidatorPoolSkimExcessTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolSkimExcessTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolSkimExcessTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolTryGetTokenIDFunc describes the behavior when the
// TryGetTokenID method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolTryGetTokenIDFunc struct {
	defaultHook func(*bind.CallOpts, common.Address) (bool, common.Address, *big.Int, error)
	hooks       []func(*bind.CallOpts, common.Address) (bool, common.Address, *big.Int, error)
	history     []IValidatorPoolTryGetTokenIDFuncCall
	mutex       sync.Mutex
}

// TryGetTokenID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorPool) TryGetTokenID(v0 *bind.CallOpts, v1 common.Address) (bool, common.Address, *big.Int, error) {
	r0, r1, r2, r3 := m.TryGetTokenIDFunc.nextHook()(v0, v1)
	m.TryGetTokenIDFunc.appendCall(IValidatorPoolTryGetTokenIDFuncCall{v0, v1, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the TryGetTokenID method
// of the parent MockIValidatorPool instance is invoked and the hook queue
// is empty.
func (f *IValidatorPoolTryGetTokenIDFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address) (bool, common.Address, *big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TryGetTokenID method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolTryGetTokenIDFunc) PushHook(hook func(*bind.CallOpts, common.Address) (bool, common.Address, *big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolTryGetTokenIDFunc) SetDefaultReturn(r0 bool, r1 common.Address, r2 *big.Int, r3 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address) (bool, common.Address, *big.Int, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolTryGetTokenIDFunc) PushReturn(r0 bool, r1 common.Address, r2 *big.Int, r3 error) {
	f.PushHook(func(*bind.CallOpts, common.Address) (bool, common.Address, *big.Int, error) {
		return r0, r1, r2, r3
	})
}

func (f *IValidatorPoolTryGetTokenIDFunc) nextHook() func(*bind.CallOpts, common.Address) (bool, common.Address, *big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolTryGetTokenIDFunc) appendCall(r0 IValidatorPoolTryGetTokenIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolTryGetTokenIDFuncCall objects
// describing the invocations of this function.
func (f *IValidatorPoolTryGetTokenIDFunc) History() []IValidatorPoolTryGetTokenIDFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolTryGetTokenIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolTryGetTokenIDFuncCall is an object that describes an
// invocation of method TryGetTokenID on an instance of MockIValidatorPool.
type IValidatorPoolTryGetTokenIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 common.Address
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 *big.Int
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolTryGetTokenIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolTryGetTokenIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// IValidatorPoolUnregisterAllValidatorsFunc describes the behavior when the
// UnregisterAllValidators method of the parent MockIValidatorPool instance
// is invoked.
type IValidatorPoolUnregisterAllValidatorsFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IValidatorPoolUnregisterAllValidatorsFuncCall
	mutex       sync.Mutex
}

// UnregisterAllValidators delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) UnregisterAllValidators(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.UnregisterAllValidatorsFunc.nextHook()(v0)
	m.UnregisterAllValidatorsFunc.appendCall(IValidatorPoolUnregisterAllValidatorsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UnregisterAllValidators method of the parent MockIValidatorPool instance
// is invoked and the hook queue is empty.
func (f *IValidatorPoolUnregisterAllValidatorsFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UnregisterAllValidators method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolUnregisterAllValidatorsFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolUnregisterAllValidatorsFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolUnregisterAllValidatorsFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolUnregisterAllValidatorsFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolUnregisterAllValidatorsFunc) appendCall(r0 IValidatorPoolUnregisterAllValidatorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolUnregisterAllValidatorsFuncCall objects describing the
// invocations of this function.
func (f *IValidatorPoolUnregisterAllValidatorsFunc) History() []IValidatorPoolUnregisterAllValidatorsFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolUnregisterAllValidatorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolUnregisterAllValidatorsFuncCall is an object that describes
// an invocation of method UnregisterAllValidators on an instance of
// MockIValidatorPool.
type IValidatorPoolUnregisterAllValidatorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolUnregisterAllValidatorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolUnregisterAllValidatorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolUnregisterValidatorsFunc describes the behavior when the
// UnregisterValidators method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolUnregisterValidatorsFunc struct {
	defaultHook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)
	history     []IValidatorPoolUnregisterValidatorsFuncCall
	mutex       sync.Mutex
}

// UnregisterValidators delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) UnregisterValidators(v0 *bind.TransactOpts, v1 []common.Address) (*types.Transaction, error) {
	r0, r1 := m.UnregisterValidatorsFunc.nextHook()(v0, v1)
	m.UnregisterValidatorsFunc.appendCall(IValidatorPoolUnregisterValidatorsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UnregisterValidators
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolUnregisterValidatorsFunc) SetDefaultHook(hook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UnregisterValidators method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolUnregisterValidatorsFunc) PushHook(hook func(*bind.TransactOpts, []common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolUnregisterValidatorsFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolUnregisterValidatorsFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolUnregisterValidatorsFunc) nextHook() func(*bind.TransactOpts, []common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolUnregisterValidatorsFunc) appendCall(r0 IValidatorPoolUnregisterValidatorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolUnregisterValidatorsFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolUnregisterValidatorsFunc) History() []IValidatorPoolUnregisterValidatorsFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolUnregisterValidatorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolUnregisterValidatorsFuncCall is an object that describes an
// invocation of method UnregisterValidators on an instance of
// MockIValidatorPool.
type IValidatorPoolUnregisterValidatorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolUnregisterValidatorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolUnregisterValidatorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolWatchInitializedFunc describes the behavior when the
// WatchInitialized method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolWatchInitializedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolInitialized) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolInitialized) (event.Subscription, error)
	history     []IValidatorPoolWatchInitializedFuncCall
	mutex       sync.Mutex
}

// WatchInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) WatchInitialized(v0 *bind.WatchOpts, v1 chan<- *bindings.ValidatorPoolInitialized) (event.Subscription, error) {
	r0, r1 := m.WatchInitializedFunc.nextHook()(v0, v1)
	m.WatchInitializedFunc.appendCall(IValidatorPoolWatchInitializedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchInitialized
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolWatchInitializedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolInitialized) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchInitialized method of the parent MockIValidatorPool instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorPoolWatchInitializedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolInitialized) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolWatchInitializedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolInitialized) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolWatchInitializedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolInitialized) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolWatchInitializedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolInitialized) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolWatchInitializedFunc) appendCall(r0 IValidatorPoolWatchInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolWatchInitializedFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolWatchInitializedFunc) History() []IValidatorPoolWatchInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolWatchInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolWatchInitializedFuncCall is an object that describes an
// invocation of method WatchInitialized on an instance of
// MockIValidatorPool.
type IValidatorPoolWatchInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ValidatorPoolInitialized
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolWatchInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolWatchInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolWatchMaintenanceScheduledFunc describes the behavior when
// the WatchMaintenanceScheduled method of the parent MockIValidatorPool
// instance is invoked.
type IValidatorPoolWatchMaintenanceScheduledFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolMaintenanceScheduled) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolMaintenanceScheduled) (event.Subscription, error)
	history     []IValidatorPoolWatchMaintenanceScheduledFuncCall
	mutex       sync.Mutex
}

// WatchMaintenanceScheduled delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) WatchMaintenanceScheduled(v0 *bind.WatchOpts, v1 chan<- *bindings.ValidatorPoolMaintenanceScheduled) (event.Subscription, error) {
	r0, r1 := m.WatchMaintenanceScheduledFunc.nextHook()(v0, v1)
	m.WatchMaintenanceScheduledFunc.appendCall(IValidatorPoolWatchMaintenanceScheduledFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchMaintenanceScheduled method of the parent MockIValidatorPool
// instance is invoked and the hook queue is empty.
func (f *IValidatorPoolWatchMaintenanceScheduledFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolMaintenanceScheduled) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchMaintenanceScheduled method of the parent MockIValidatorPool
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorPoolWatchMaintenanceScheduledFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolMaintenanceScheduled) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolWatchMaintenanceScheduledFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolMaintenanceScheduled) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolWatchMaintenanceScheduledFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolMaintenanceScheduled) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolWatchMaintenanceScheduledFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolMaintenanceScheduled) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolWatchMaintenanceScheduledFunc) appendCall(r0 IValidatorPoolWatchMaintenanceScheduledFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolWatchMaintenanceScheduledFuncCall objects describing the
// invocations of this function.
func (f *IValidatorPoolWatchMaintenanceScheduledFunc) History() []IValidatorPoolWatchMaintenanceScheduledFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolWatchMaintenanceScheduledFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolWatchMaintenanceScheduledFuncCall is an object that
// describes an invocation of method WatchMaintenanceScheduled on an
// instance of MockIValidatorPool.
type IValidatorPoolWatchMaintenanceScheduledFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ValidatorPoolMaintenanceScheduled
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolWatchMaintenanceScheduledFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolWatchMaintenanceScheduledFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolWatchValidatorJoinedFunc describes the behavior when the
// WatchValidatorJoined method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolWatchValidatorJoinedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorJoined, []common.Address) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorJoined, []common.Address) (event.Subscription, error)
	history     []IValidatorPoolWatchValidatorJoinedFuncCall
	mutex       sync.Mutex
}

// WatchValidatorJoined delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) WatchValidatorJoined(v0 *bind.WatchOpts, v1 chan<- *bindings.ValidatorPoolValidatorJoined, v2 []common.Address) (event.Subscription, error) {
	r0, r1 := m.WatchValidatorJoinedFunc.nextHook()(v0, v1, v2)
	m.WatchValidatorJoinedFunc.appendCall(IValidatorPoolWatchValidatorJoinedFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchValidatorJoined
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolWatchValidatorJoinedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorJoined, []common.Address) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchValidatorJoined method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolWatchValidatorJoinedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorJoined, []common.Address) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolWatchValidatorJoinedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorJoined, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolWatchValidatorJoinedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorJoined, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolWatchValidatorJoinedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorJoined, []common.Address) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolWatchValidatorJoinedFunc) appendCall(r0 IValidatorPoolWatchValidatorJoinedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolWatchValidatorJoinedFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolWatchValidatorJoinedFunc) History() []IValidatorPoolWatchValidatorJoinedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolWatchValidatorJoinedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolWatchValidatorJoinedFuncCall is an object that describes an
// invocation of method WatchValidatorJoined on an instance of
// MockIValidatorPool.
type IValidatorPoolWatchValidatorJoinedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ValidatorPoolValidatorJoined
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolWatchValidatorJoinedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolWatchValidatorJoinedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolWatchValidatorLeftFunc describes the behavior when the
// WatchValidatorLeft method of the parent MockIValidatorPool instance is
// invoked.
type IValidatorPoolWatchValidatorLeftFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorLeft, []common.Address) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorLeft, []common.Address) (event.Subscription, error)
	history     []IValidatorPoolWatchValidatorLeftFuncCall
	mutex       sync.Mutex
}

// WatchValidatorLeft delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) WatchValidatorLeft(v0 *bind.WatchOpts, v1 chan<- *bindings.ValidatorPoolValidatorLeft, v2 []common.Address) (event.Subscription, error) {
	r0, r1 := m.WatchValidatorLeftFunc.nextHook()(v0, v1, v2)
	m.WatchValidatorLeftFunc.appendCall(IValidatorPoolWatchValidatorLeftFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchValidatorLeft
// method of the parent MockIValidatorPool instance is invoked and the hook
// queue is empty.
func (f *IValidatorPoolWatchValidatorLeftFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorLeft, []common.Address) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchValidatorLeft method of the parent MockIValidatorPool instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorPoolWatchValidatorLeftFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorLeft, []common.Address) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolWatchValidatorLeftFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorLeft, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolWatchValidatorLeftFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorLeft, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolWatchValidatorLeftFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorLeft, []common.Address) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolWatchValidatorLeftFunc) appendCall(r0 IValidatorPoolWatchValidatorLeftFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorPoolWatchValidatorLeftFuncCall
// objects describing the invocations of this function.
func (f *IValidatorPoolWatchValidatorLeftFunc) History() []IValidatorPoolWatchValidatorLeftFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolWatchValidatorLeftFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolWatchValidatorLeftFuncCall is an object that describes an
// invocation of method WatchValidatorLeft on an instance of
// MockIValidatorPool.
type IValidatorPoolWatchValidatorLeftFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ValidatorPoolValidatorLeft
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolWatchValidatorLeftFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolWatchValidatorLeftFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolWatchValidatorMajorSlashedFunc describes the behavior when
// the WatchValidatorMajorSlashed method of the parent MockIValidatorPool
// instance is invoked.
type IValidatorPoolWatchValidatorMajorSlashedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMajorSlashed, []common.Address) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMajorSlashed, []common.Address) (event.Subscription, error)
	history     []IValidatorPoolWatchValidatorMajorSlashedFuncCall
	mutex       sync.Mutex
}

// WatchValidatorMajorSlashed delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) WatchValidatorMajorSlashed(v0 *bind.WatchOpts, v1 chan<- *bindings.ValidatorPoolValidatorMajorSlashed, v2 []common.Address) (event.Subscription, error) {
	r0, r1 := m.WatchValidatorMajorSlashedFunc.nextHook()(v0, v1, v2)
	m.WatchValidatorMajorSlashedFunc.appendCall(IValidatorPoolWatchValidatorMajorSlashedFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchValidatorMajorSlashed method of the parent MockIValidatorPool
// instance is invoked and the hook queue is empty.
func (f *IValidatorPoolWatchValidatorMajorSlashedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMajorSlashed, []common.Address) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchValidatorMajorSlashed method of the parent MockIValidatorPool
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorPoolWatchValidatorMajorSlashedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMajorSlashed, []common.Address) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolWatchValidatorMajorSlashedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMajorSlashed, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolWatchValidatorMajorSlashedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMajorSlashed, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolWatchValidatorMajorSlashedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMajorSlashed, []common.Address) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolWatchValidatorMajorSlashedFunc) appendCall(r0 IValidatorPoolWatchValidatorMajorSlashedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolWatchValidatorMajorSlashedFuncCall objects describing the
// invocations of this function.
func (f *IValidatorPoolWatchValidatorMajorSlashedFunc) History() []IValidatorPoolWatchValidatorMajorSlashedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolWatchValidatorMajorSlashedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolWatchValidatorMajorSlashedFuncCall is an object that
// describes an invocation of method WatchValidatorMajorSlashed on an
// instance of MockIValidatorPool.
type IValidatorPoolWatchValidatorMajorSlashedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ValidatorPoolValidatorMajorSlashed
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolWatchValidatorMajorSlashedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolWatchValidatorMajorSlashedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorPoolWatchValidatorMinorSlashedFunc describes the behavior when
// the WatchValidatorMinorSlashed method of the parent MockIValidatorPool
// instance is invoked.
type IValidatorPoolWatchValidatorMinorSlashedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMinorSlashed, []common.Address) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMinorSlashed, []common.Address) (event.Subscription, error)
	history     []IValidatorPoolWatchValidatorMinorSlashedFuncCall
	mutex       sync.Mutex
}

// WatchValidatorMinorSlashed delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorPool) WatchValidatorMinorSlashed(v0 *bind.WatchOpts, v1 chan<- *bindings.ValidatorPoolValidatorMinorSlashed, v2 []common.Address) (event.Subscription, error) {
	r0, r1 := m.WatchValidatorMinorSlashedFunc.nextHook()(v0, v1, v2)
	m.WatchValidatorMinorSlashedFunc.appendCall(IValidatorPoolWatchValidatorMinorSlashedFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// WatchValidatorMinorSlashed method of the parent MockIValidatorPool
// instance is invoked and the hook queue is empty.
func (f *IValidatorPoolWatchValidatorMinorSlashedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMinorSlashed, []common.Address) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchValidatorMinorSlashed method of the parent MockIValidatorPool
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorPoolWatchValidatorMinorSlashedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMinorSlashed, []common.Address) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorPoolWatchValidatorMinorSlashedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMinorSlashed, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorPoolWatchValidatorMinorSlashedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMinorSlashed, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IValidatorPoolWatchValidatorMinorSlashedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ValidatorPoolValidatorMinorSlashed, []common.Address) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorPoolWatchValidatorMinorSlashedFunc) appendCall(r0 IValidatorPoolWatchValidatorMinorSlashedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorPoolWatchValidatorMinorSlashedFuncCall objects describing the
// invocations of this function.
func (f *IValidatorPoolWatchValidatorMinorSlashedFunc) History() []IValidatorPoolWatchValidatorMinorSlashedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorPoolWatchValidatorMinorSlashedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorPoolWatchValidatorMinorSlashedFuncCall is an object that
// describes an invocation of method WatchValidatorMinorSlashed on an
// instance of MockIValidatorPool.
type IValidatorPoolWatchValidatorMinorSlashedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ValidatorPoolValidatorMinorSlashed
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorPoolWatchValidatorMinorSlashedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorPoolWatchValidatorMinorSlashedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockIValidatorStaking is a mock implementation of the IValidatorStaking
// interface (from the package github.com/alicenet/alicenet/bridge/bindings)
// used for unit testing.
type MockIValidatorStaking struct {
	// ApproveFunc is an instance of a mock function object controlling the
	// behavior of the method Approve.
	ApproveFunc *IValidatorStakingApproveFunc
	// BalanceOfFunc is an instance of a mock function object controlling
	// the behavior of the method BalanceOf.
	BalanceOfFunc *IValidatorStakingBalanceOfFunc
	// BurnFunc is an instance of a mock function object controlling the
	// behavior of the method Burn.
	BurnFunc *IValidatorStakingBurnFunc
	// BurnToFunc is an instance of a mock function object controlling the
	// behavior of the method BurnTo.
	BurnToFunc *IValidatorStakingBurnToFunc
	// CircuitBreakerStateFunc is an instance of a mock function object
	// controlling the behavior of the method CircuitBreakerState.
	CircuitBreakerStateFunc *IValidatorStakingCircuitBreakerStateFunc
	// CollectAllProfitsFunc is an instance of a mock function object
	// controlling the behavior of the method CollectAllProfits.
	CollectAllProfitsFunc *IValidatorStakingCollectAllProfitsFunc
	// CollectAllProfitsToFunc is an instance of a mock function object
	// controlling the behavior of the method CollectAllProfitsTo.
	CollectAllProfitsToFunc *IValidatorStakingCollectAllProfitsToFunc
	// CollectEthFunc is an instance of a mock function object controlling
	// the behavior of the method CollectEth.
	CollectEthFunc *IValidatorStakingCollectEthFunc
	// CollectEthToFunc is an instance of a mock function object controlling
	// the behavior of the method CollectEthTo.
	CollectEthToFunc *IValidatorStakingCollectEthToFunc
	// CollectTokenFunc is an instance of a mock function object controlling
	// the behavior of the method CollectToken.
	CollectTokenFunc *IValidatorStakingCollectTokenFunc
	// CollectTokenToFunc is an instance of a mock function object
	// controlling the behavior of the method CollectTokenTo.
	CollectTokenToFunc *IValidatorStakingCollectTokenToFunc
	// DepositEthFunc is an instance of a mock function object controlling
	// the behavior of the method DepositEth.
	DepositEthFunc *IValidatorStakingDepositEthFunc
	// DepositTokenFunc is an instance of a mock function object controlling
	// the behavior of the method DepositToken.
	DepositTokenFunc *IValidatorStakingDepositTokenFunc
	// EstimateAllProfitsFunc is an instance of a mock function object
	// controlling the behavior of the method EstimateAllProfits.
	EstimateAllProfitsFunc *IValidatorStakingEstimateAllProfitsFunc
	// EstimateEthCollectionFunc is an instance of a mock function object
	// controlling the behavior of the method EstimateEthCollection.
	EstimateEthCollectionFunc *IValidatorStakingEstimateEthCollectionFunc
	// EstimateExcessEthFunc is an instance of a mock function object
	// controlling the behavior of the method EstimateExcessEth.
	EstimateExcessEthFunc *IValidatorStakingEstimateExcessEthFunc
	// EstimateExcessTokenFunc is an instance of a mock function object
	// controlling the behavior of the method EstimateExcessToken.
	EstimateExcessTokenFunc *IValidatorStakingEstimateExcessTokenFunc
	// EstimateTokenCollectionFunc is an instance of a mock function object
	// controlling the behavior of the method EstimateTokenCollection.
	EstimateTokenCollectionFunc *IValidatorStakingEstimateTokenCollectionFunc
	// FilterApprovalFunc is an instance of a mock function object
	// controlling the behavior of the method FilterApproval.
	FilterApprovalFunc *IValidatorStakingFilterApprovalFunc
	// FilterApprovalForAllFunc is an instance of a mock function object
	// controlling the behavior of the method FilterApprovalForAll.
	FilterApprovalForAllFunc *IValidatorStakingFilterApprovalForAllFunc
	// FilterInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method FilterInitialized.
	FilterInitializedFunc *IValidatorStakingFilterInitializedFunc
	// FilterTransferFunc is an instance of a mock function object
	// controlling the behavior of the method FilterTransfer.
	FilterTransferFunc *IValidatorStakingFilterTransferFunc
	// GetAccumulatorScaleFactorFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetAccumulatorScaleFactor.
	GetAccumulatorScaleFactorFunc *IValidatorStakingGetAccumulatorScaleFactorFunc
	// GetApprovedFunc is an instance of a mock function object controlling
	// the behavior of the method GetApproved.
	GetApprovedFunc *IValidatorStakingGetApprovedFunc
	// GetEthAccumulatorFunc is an instance of a mock function object
	// controlling the behavior of the method GetEthAccumulator.
	GetEthAccumulatorFunc *IValidatorStakingGetEthAccumulatorFunc
	// GetLatestMintedPositionIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetLatestMintedPositionID.
	GetLatestMintedPositionIDFunc *IValidatorStakingGetLatestMintedPositionIDFunc
	// GetMaxGovernanceLockFunc is an instance of a mock function object
	// controlling the behavior of the method GetMaxGovernanceLock.
	GetMaxGovernanceLockFunc *IValidatorStakingGetMaxGovernanceLockFunc
	// GetMaxMintLockFunc is an instance of a mock function object
	// controlling the behavior of the method GetMaxMintLock.
	GetMaxMintLockFunc *IValidatorStakingGetMaxMintLockFunc
	// GetMetamorphicContractAddressFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetMetamorphicContractAddress.
	GetMetamorphicContractAddressFunc *IValidatorStakingGetMetamorphicContractAddressFunc
	// GetPositionFunc is an instance of a mock function object controlling
	// the behavior of the method GetPosition.
	GetPositionFunc *IValidatorStakingGetPositionFunc
	// GetTokenAccumulatorFunc is an instance of a mock function object
	// controlling the behavior of the method GetTokenAccumulator.
	GetTokenAccumulatorFunc *IValidatorStakingGetTokenAccumulatorFunc
	// GetTotalReserveALCAFunc is an instance of a mock function object
	// controlling the behavior of the method GetTotalReserveALCA.
	GetTotalReserveALCAFunc *IValidatorStakingGetTotalReserveALCAFunc
	// GetTotalReserveEthFunc is an instance of a mock function object
	// controlling the behavior of the method GetTotalReserveEth.
	GetTotalReserveEthFunc *IValidatorStakingGetTotalReserveEthFunc
	// GetTotalSharesFunc is an instance of a mock function object
	// controlling the behavior of the method GetTotalShares.
	GetTotalSharesFunc *IValidatorStakingGetTotalSharesFunc
	// InitializeFunc is an instance of a mock function object controlling
	// the behavior of the method Initialize.
	InitializeFunc *IValidatorStakingInitializeFunc
	// IsApprovedForAllFunc is an instance of a mock function object
	// controlling the behavior of the method IsApprovedForAll.
	IsApprovedForAllFunc *IValidatorStakingIsApprovedForAllFunc
	// LockOwnPositionFunc is an instance of a mock function object
	// controlling the behavior of the method LockOwnPosition.
	LockOwnPositionFunc *IValidatorStakingLockOwnPositionFunc
	// LockPositionFunc is an instance of a mock function object controlling
	// the behavior of the method LockPosition.
	LockPositionFunc *IValidatorStakingLockPositionFunc
	// LockWithdrawFunc is an instance of a mock function object controlling
	// the behavior of the method LockWithdraw.
	LockWithdrawFunc *IValidatorStakingLockWithdrawFunc
	// MintFunc is an instance of a mock function object controlling the
	// behavior of the method Mint.
	MintFunc *IValidatorStakingMintFunc
	// MintToFunc is an instance of a mock function object controlling the
	// behavior of the method MintTo.
	MintToFunc *IValidatorStakingMintToFunc
	// NameFunc is an instance of a mock function object controlling the
	// behavior of the method Name.
	NameFunc *IValidatorStakingNameFunc
	// OwnerOfFunc is an instance of a mock function object controlling the
	// behavior of the method OwnerOf.
	OwnerOfFunc *IValidatorStakingOwnerOfFunc
	// ParseApprovalFunc is an instance of a mock function object
	// controlling the behavior of the method ParseApproval.
	ParseApprovalFunc *IValidatorStakingParseApprovalFunc
	// ParseApprovalForAllFunc is an instance of a mock function object
	// controlling the behavior of the method ParseApprovalForAll.
	ParseApprovalForAllFunc *IValidatorStakingParseApprovalForAllFunc
	// ParseInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method ParseInitialized.
	ParseInitializedFunc *IValidatorStakingParseInitializedFunc
	// ParseTransferFunc is an instance of a mock function object
	// controlling the behavior of the method ParseTransfer.
	ParseTransferFunc *IValidatorStakingParseTransferFunc
	// SafeTransferFromFunc is an instance of a mock function object
	// controlling the behavior of the method SafeTransferFrom.
	SafeTransferFromFunc *IValidatorStakingSafeTransferFromFunc
	// SafeTransferFrom0Func is an instance of a mock function object
	// controlling the behavior of the method SafeTransferFrom0.
	SafeTransferFrom0Func *IValidatorStakingSafeTransferFrom0Func
	// SetApprovalForAllFunc is an instance of a mock function object
	// controlling the behavior of the method SetApprovalForAll.
	SetApprovalForAllFunc *IValidatorStakingSetApprovalForAllFunc
	// SkimExcessEthFunc is an instance of a mock function object
	// controlling the behavior of the method SkimExcessEth.
	SkimExcessEthFunc *IValidatorStakingSkimExcessEthFunc
	// SkimExcessTokenFunc is an instance of a mock function object
	// controlling the behavior of the method SkimExcessToken.
	SkimExcessTokenFunc *IValidatorStakingSkimExcessTokenFunc
	// SupportsInterfaceFunc is an instance of a mock function object
	// controlling the behavior of the method SupportsInterface.
	SupportsInterfaceFunc *IValidatorStakingSupportsInterfaceFunc
	// SymbolFunc is an instance of a mock function object controlling the
	// behavior of the method Symbol.
	SymbolFunc *IValidatorStakingSymbolFunc
	// TokenByIndexFunc is an instance of a mock function object controlling
	// the behavior of the method TokenByIndex.
	TokenByIndexFunc *IValidatorStakingTokenByIndexFunc
	// TokenOfOwnerByIndexFunc is an instance of a mock function object
	// controlling the behavior of the method TokenOfOwnerByIndex.
	TokenOfOwnerByIndexFunc *IValidatorStakingTokenOfOwnerByIndexFunc
	// TokenURIFunc is an instance of a mock function object controlling the
	// behavior of the method TokenURI.
	TokenURIFunc *IValidatorStakingTokenURIFunc
	// TotalSupplyFunc is an instance of a mock function object controlling
	// the behavior of the method TotalSupply.
	TotalSupplyFunc *IValidatorStakingTotalSupplyFunc
	// TransferFromFunc is an instance of a mock function object controlling
	// the behavior of the method TransferFrom.
	TransferFromFunc *IValidatorStakingTransferFromFunc
	// TripCBFunc is an instance of a mock function object controlling the
	// behavior of the method TripCB.
	TripCBFunc *IValidatorStakingTripCBFunc
	// WatchApprovalFunc is an instance of a mock function object
	// controlling the behavior of the method WatchApproval.
	WatchApprovalFunc *IValidatorStakingWatchApprovalFunc
	// WatchApprovalForAllFunc is an instance of a mock function object
	// controlling the behavior of the method WatchApprovalForAll.
	WatchApprovalForAllFunc *IValidatorStakingWatchApprovalForAllFunc
	// WatchInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method WatchInitialized.
	WatchInitializedFunc *IValidatorStakingWatchInitializedFunc
	// WatchTransferFunc is an instance of a mock function object
	// controlling the behavior of the method WatchTransfer.
	WatchTransferFunc *IValidatorStakingWatchTransferFunc
}

// NewMockIValidatorStaking creates a new mock of the IValidatorStaking
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockIValidatorStaking() *MockIValidatorStaking {
	return &MockIValidatorStaking{
		ApproveFunc: &IValidatorStakingApproveFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		BalanceOfFunc: &IValidatorStakingBalanceOfFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (r0 *big.Int, r1 error) {
				return
			},
		},
		BurnFunc: &IValidatorStakingBurnFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		BurnToFunc: &IValidatorStakingBurnToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CircuitBreakerStateFunc: &IValidatorStakingCircuitBreakerStateFunc{
			defaultHook: func(*bind.CallOpts) (r0 bool, r1 error) {
				return
			},
		},
		CollectAllProfitsFunc: &IValidatorStakingCollectAllProfitsFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CollectAllProfitsToFunc: &IValidatorStakingCollectAllProfitsToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CollectEthFunc: &IValidatorStakingCollectEthFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CollectEthToFunc: &IValidatorStakingCollectEthToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CollectTokenFunc: &IValidatorStakingCollectTokenFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		CollectTokenToFunc: &IValidatorStakingCollectTokenToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DepositEthFunc: &IValidatorStakingDepositEthFunc{
			defaultHook: func(*bind.TransactOpts, uint8) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		DepositTokenFunc: &IValidatorStakingDepositTokenFunc{
			defaultHook: func(*bind.TransactOpts, uint8, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		EstimateAllProfitsFunc: &IValidatorStakingEstimateAllProfitsFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 struct {
				PayoutEth   *big.Int
				PayoutToken *big.Int
			}, r1 error) {
				return
			},
		},
		EstimateEthCollectionFunc: &IValidatorStakingEstimateEthCollectionFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		EstimateExcessEthFunc: &IValidatorStakingEstimateExcessEthFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		EstimateExcessTokenFunc: &IValidatorStakingEstimateExcessTokenFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		EstimateTokenCollectionFunc: &IValidatorStakingEstimateTokenCollectionFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		FilterApprovalFunc: &IValidatorStakingFilterApprovalFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (r0 *bindings.ValidatorStakingApprovalIterator, r1 error) {
				return
			},
		},
		FilterApprovalForAllFunc: &IValidatorStakingFilterApprovalForAllFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address) (r0 *bindings.ValidatorStakingApprovalForAllIterator, r1 error) {
				return
			},
		},
		FilterInitializedFunc: &IValidatorStakingFilterInitializedFunc{
			defaultHook: func(*bind.FilterOpts) (r0 *bindings.ValidatorStakingInitializedIterator, r1 error) {
				return
			},
		},
		FilterTransferFunc: &IValidatorStakingFilterTransferFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (r0 *bindings.ValidatorStakingTransferIterator, r1 error) {
				return
			},
		},
		GetAccumulatorScaleFactorFunc: &IValidatorStakingGetAccumulatorScaleFactorFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetApprovedFunc: &IValidatorStakingGetApprovedFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 common.Address, r1 error) {
				return
			},
		},
		GetEthAccumulatorFunc: &IValidatorStakingGetEthAccumulatorFunc{
			defaultHook: func(*bind.CallOpts) (r0 struct {
				Accumulator *big.Int
				Slush       *big.Int
			}, r1 error) {
				return
			},
		},
		GetLatestMintedPositionIDFunc: &IValidatorStakingGetLatestMintedPositionIDFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetMaxGovernanceLockFunc: &IValidatorStakingGetMaxGovernanceLockFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetMaxMintLockFunc: &IValidatorStakingGetMaxMintLockFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetMetamorphicContractAddressFunc: &IValidatorStakingGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (r0 common.Address, r1 error) {
				return
			},
		},
		GetPositionFunc: &IValidatorStakingGetPositionFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 struct {
				Shares            *big.Int
				FreeAfter         *big.Int
				WithdrawFreeAfter *big.Int
				AccumulatorEth    *big.Int
				AccumulatorToken  *big.Int
			}, r1 error) {
				return
			},
		},
		GetTokenAccumulatorFunc: &IValidatorStakingGetTokenAccumulatorFunc{
			defaultHook: func(*bind.CallOpts) (r0 struct {
				Accumulator *big.Int
				Slush       *big.Int
			}, r1 error) {
				return
			},
		},
		GetTotalReserveALCAFunc: &IValidatorStakingGetTotalReserveALCAFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetTotalReserveEthFunc: &IValidatorStakingGetTotalReserveEthFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetTotalSharesFunc: &IValidatorStakingGetTotalSharesFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		InitializeFunc: &IValidatorStakingInitializeFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		IsApprovedForAllFunc: &IValidatorStakingIsApprovedForAllFunc{
			defaultHook: func(*bind.CallOpts, common.Address, common.Address) (r0 bool, r1 error) {
				return
			},
		},
		LockOwnPositionFunc: &IValidatorStakingLockOwnPositionFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		LockPositionFunc: &IValidatorStakingLockPositionFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		LockWithdrawFunc: &IValidatorStakingLockWithdrawFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		MintFunc: &IValidatorStakingMintFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		MintToFunc: &IValidatorStakingMintToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		NameFunc: &IValidatorStakingNameFunc{
			defaultHook: func(*bind.CallOpts) (r0 string, r1 error) {
				return
			},
		},
		OwnerOfFunc: &IValidatorStakingOwnerOfFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 common.Address, r1 error) {
				return
			},
		},
		ParseApprovalFunc: &IValidatorStakingParseApprovalFunc{
			defaultHook: func(types.Log) (r0 *bindings.ValidatorStakingApproval, r1 error) {
				return
			},
		},
		ParseApprovalForAllFunc: &IValidatorStakingParseApprovalForAllFunc{
			defaultHook: func(types.Log) (r0 *bindings.ValidatorStakingApprovalForAll, r1 error) {
				return
			},
		},
		ParseInitializedFunc: &IValidatorStakingParseInitializedFunc{
			defaultHook: func(types.Log) (r0 *bindings.ValidatorStakingInitialized, r1 error) {
				return
			},
		},
		ParseTransferFunc: &IValidatorStakingParseTransferFunc{
			defaultHook: func(types.Log) (r0 *bindings.ValidatorStakingTransfer, r1 error) {
				return
			},
		},
		SafeTransferFromFunc: &IValidatorStakingSafeTransferFromFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SafeTransferFrom0Func: &IValidatorStakingSafeTransferFrom0Func{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SetApprovalForAllFunc: &IValidatorStakingSetApprovalForAllFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, bool) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SkimExcessEthFunc: &IValidatorStakingSkimExcessEthFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SkimExcessTokenFunc: &IValidatorStakingSkimExcessTokenFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SupportsInterfaceFunc: &IValidatorStakingSupportsInterfaceFunc{
			defaultHook: func(*bind.CallOpts, [4]byte) (r0 bool, r1 error) {
				return
			},
		},
		SymbolFunc: &IValidatorStakingSymbolFunc{
			defaultHook: func(*bind.CallOpts) (r0 string, r1 error) {
				return
			},
		},
		TokenByIndexFunc: &IValidatorStakingTokenByIndexFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		TokenOfOwnerByIndexFunc: &IValidatorStakingTokenOfOwnerByIndexFunc{
			defaultHook: func(*bind.CallOpts, common.Address, *big.Int) (r0 *big.Int, r1 error) {
				return
			},
		},
		TokenURIFunc: &IValidatorStakingTokenURIFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (r0 string, r1 error) {
				return
			},
		},
		TotalSupplyFunc: &IValidatorStakingTotalSupplyFunc{
			defaultHook: func(*bind.CallOpts) (r0 *big.Int, r1 error) {
				return
			},
		},
		TransferFromFunc: &IValidatorStakingTransferFromFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		TripCBFunc: &IValidatorStakingTripCBFunc{
			defaultHook: func(*bind.TransactOpts) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		WatchApprovalFunc: &IValidatorStakingWatchApprovalFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApproval, []common.Address, []common.Address, []*big.Int) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchApprovalForAllFunc: &IValidatorStakingWatchApprovalForAllFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApprovalForAll, []common.Address, []common.Address) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchInitializedFunc: &IValidatorStakingWatchInitializedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingInitialized) (r0 event.Subscription, r1 error) {
				return
			},
		},
		WatchTransferFunc: &IValidatorStakingWatchTransferFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingTransfer, []common.Address, []common.Address, []*big.Int) (r0 event.Subscription, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockIValidatorStaking creates a new mock of the
// IValidatorStaking interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockIValidatorStaking() *MockIValidatorStaking {
	return &MockIValidatorStaking{
		ApproveFunc: &IValidatorStakingApproveFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.Approve")
			},
		},
		BalanceOfFunc: &IValidatorStakingBalanceOfFunc{
			defaultHook: func(*bind.CallOpts, common.Address) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.BalanceOf")
			},
		},
		BurnFunc: &IValidatorStakingBurnFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.Burn")
			},
		},
		BurnToFunc: &IValidatorStakingBurnToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.BurnTo")
			},
		},
		CircuitBreakerStateFunc: &IValidatorStakingCircuitBreakerStateFunc{
			defaultHook: func(*bind.CallOpts) (bool, error) {
				panic("unexpected invocation of MockIValidatorStaking.CircuitBreakerState")
			},
		},
		CollectAllProfitsFunc: &IValidatorStakingCollectAllProfitsFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.CollectAllProfits")
			},
		},
		CollectAllProfitsToFunc: &IValidatorStakingCollectAllProfitsToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.CollectAllProfitsTo")
			},
		},
		CollectEthFunc: &IValidatorStakingCollectEthFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.CollectEth")
			},
		},
		CollectEthToFunc: &IValidatorStakingCollectEthToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.CollectEthTo")
			},
		},
		CollectTokenFunc: &IValidatorStakingCollectTokenFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.CollectToken")
			},
		},
		CollectTokenToFunc: &IValidatorStakingCollectTokenToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.CollectTokenTo")
			},
		},
		DepositEthFunc: &IValidatorStakingDepositEthFunc{
			defaultHook: func(*bind.TransactOpts, uint8) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.DepositEth")
			},
		},
		DepositTokenFunc: &IValidatorStakingDepositTokenFunc{
			defaultHook: func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.DepositToken")
			},
		},
		EstimateAllProfitsFunc: &IValidatorStakingEstimateAllProfitsFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (struct {
				PayoutEth   *big.Int
				PayoutToken *big.Int
			}, error) {
				panic("unexpected invocation of MockIValidatorStaking.EstimateAllProfits")
			},
		},
		EstimateEthCollectionFunc: &IValidatorStakingEstimateEthCollectionFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.EstimateEthCollection")
			},
		},
		EstimateExcessEthFunc: &IValidatorStakingEstimateExcessEthFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.EstimateExcessEth")
			},
		},
		EstimateExcessTokenFunc: &IValidatorStakingEstimateExcessTokenFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.EstimateExcessToken")
			},
		},
		EstimateTokenCollectionFunc: &IValidatorStakingEstimateTokenCollectionFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.EstimateTokenCollection")
			},
		},
		FilterApprovalFunc: &IValidatorStakingFilterApprovalFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingApprovalIterator, error) {
				panic("unexpected invocation of MockIValidatorStaking.FilterApproval")
			},
		},
		FilterApprovalForAllFunc: &IValidatorStakingFilterApprovalForAllFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ValidatorStakingApprovalForAllIterator, error) {
				panic("unexpected invocation of MockIValidatorStaking.FilterApprovalForAll")
			},
		},
		FilterInitializedFunc: &IValidatorStakingFilterInitializedFunc{
			defaultHook: func(*bind.FilterOpts) (*bindings.ValidatorStakingInitializedIterator, error) {
				panic("unexpected invocation of MockIValidatorStaking.FilterInitialized")
			},
		},
		FilterTransferFunc: &IValidatorStakingFilterTransferFunc{
			defaultHook: func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingTransferIterator, error) {
				panic("unexpected invocation of MockIValidatorStaking.FilterTransfer")
			},
		},
		GetAccumulatorScaleFactorFunc: &IValidatorStakingGetAccumulatorScaleFactorFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.GetAccumulatorScaleFactor")
			},
		},
		GetApprovedFunc: &IValidatorStakingGetApprovedFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (common.Address, error) {
				panic("unexpected invocation of MockIValidatorStaking.GetApproved")
			},
		},
		GetEthAccumulatorFunc: &IValidatorStakingGetEthAccumulatorFunc{
			defaultHook: func(*bind.CallOpts) (struct {
				Accumulator *big.Int
				Slush       *big.Int
			}, error) {
				panic("unexpected invocation of MockIValidatorStaking.GetEthAccumulator")
			},
		},
		GetLatestMintedPositionIDFunc: &IValidatorStakingGetLatestMintedPositionIDFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.GetLatestMintedPositionID")
			},
		},
		GetMaxGovernanceLockFunc: &IValidatorStakingGetMaxGovernanceLockFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.GetMaxGovernanceLock")
			},
		},
		GetMaxMintLockFunc: &IValidatorStakingGetMaxMintLockFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.GetMaxMintLock")
			},
		},
		GetMetamorphicContractAddressFunc: &IValidatorStakingGetMetamorphicContractAddressFunc{
			defaultHook: func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
				panic("unexpected invocation of MockIValidatorStaking.GetMetamorphicContractAddress")
			},
		},
		GetPositionFunc: &IValidatorStakingGetPositionFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (struct {
				Shares            *big.Int
				FreeAfter         *big.Int
				WithdrawFreeAfter *big.Int
				AccumulatorEth    *big.Int
				AccumulatorToken  *big.Int
			}, error) {
				panic("unexpected invocation of MockIValidatorStaking.GetPosition")
			},
		},
		GetTokenAccumulatorFunc: &IValidatorStakingGetTokenAccumulatorFunc{
			defaultHook: func(*bind.CallOpts) (struct {
				Accumulator *big.Int
				Slush       *big.Int
			}, error) {
				panic("unexpected invocation of MockIValidatorStaking.GetTokenAccumulator")
			},
		},
		GetTotalReserveALCAFunc: &IValidatorStakingGetTotalReserveALCAFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.GetTotalReserveALCA")
			},
		},
		GetTotalReserveEthFunc: &IValidatorStakingGetTotalReserveEthFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.GetTotalReserveEth")
			},
		},
		GetTotalSharesFunc: &IValidatorStakingGetTotalSharesFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.GetTotalShares")
			},
		},
		InitializeFunc: &IValidatorStakingInitializeFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.Initialize")
			},
		},
		IsApprovedForAllFunc: &IValidatorStakingIsApprovedForAllFunc{
			defaultHook: func(*bind.CallOpts, common.Address, common.Address) (bool, error) {
				panic("unexpected invocation of MockIValidatorStaking.IsApprovedForAll")
			},
		},
		LockOwnPositionFunc: &IValidatorStakingLockOwnPositionFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.LockOwnPosition")
			},
		},
		LockPositionFunc: &IValidatorStakingLockPositionFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.LockPosition")
			},
		},
		LockWithdrawFunc: &IValidatorStakingLockWithdrawFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.LockWithdraw")
			},
		},
		MintFunc: &IValidatorStakingMintFunc{
			defaultHook: func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.Mint")
			},
		},
		MintToFunc: &IValidatorStakingMintToFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.MintTo")
			},
		},
		NameFunc: &IValidatorStakingNameFunc{
			defaultHook: func(*bind.CallOpts) (string, error) {
				panic("unexpected invocation of MockIValidatorStaking.Name")
			},
		},
		OwnerOfFunc: &IValidatorStakingOwnerOfFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (common.Address, error) {
				panic("unexpected invocation of MockIValidatorStaking.OwnerOf")
			},
		},
		ParseApprovalFunc: &IValidatorStakingParseApprovalFunc{
			defaultHook: func(types.Log) (*bindings.ValidatorStakingApproval, error) {
				panic("unexpected invocation of MockIValidatorStaking.ParseApproval")
			},
		},
		ParseApprovalForAllFunc: &IValidatorStakingParseApprovalForAllFunc{
			defaultHook: func(types.Log) (*bindings.ValidatorStakingApprovalForAll, error) {
				panic("unexpected invocation of MockIValidatorStaking.ParseApprovalForAll")
			},
		},
		ParseInitializedFunc: &IValidatorStakingParseInitializedFunc{
			defaultHook: func(types.Log) (*bindings.ValidatorStakingInitialized, error) {
				panic("unexpected invocation of MockIValidatorStaking.ParseInitialized")
			},
		},
		ParseTransferFunc: &IValidatorStakingParseTransferFunc{
			defaultHook: func(types.Log) (*bindings.ValidatorStakingTransfer, error) {
				panic("unexpected invocation of MockIValidatorStaking.ParseTransfer")
			},
		},
		SafeTransferFromFunc: &IValidatorStakingSafeTransferFromFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.SafeTransferFrom")
			},
		},
		SafeTransferFrom0Func: &IValidatorStakingSafeTransferFrom0Func{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.SafeTransferFrom0")
			},
		},
		SetApprovalForAllFunc: &IValidatorStakingSetApprovalForAllFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.SetApprovalForAll")
			},
		},
		SkimExcessEthFunc: &IValidatorStakingSkimExcessEthFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.SkimExcessEth")
			},
		},
		SkimExcessTokenFunc: &IValidatorStakingSkimExcessTokenFunc{
			defaultHook: func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.SkimExcessToken")
			},
		},
		SupportsInterfaceFunc: &IValidatorStakingSupportsInterfaceFunc{
			defaultHook: func(*bind.CallOpts, [4]byte) (bool, error) {
				panic("unexpected invocation of MockIValidatorStaking.SupportsInterface")
			},
		},
		SymbolFunc: &IValidatorStakingSymbolFunc{
			defaultHook: func(*bind.CallOpts) (string, error) {
				panic("unexpected invocation of MockIValidatorStaking.Symbol")
			},
		},
		TokenByIndexFunc: &IValidatorStakingTokenByIndexFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.TokenByIndex")
			},
		},
		TokenOfOwnerByIndexFunc: &IValidatorStakingTokenOfOwnerByIndexFunc{
			defaultHook: func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.TokenOfOwnerByIndex")
			},
		},
		TokenURIFunc: &IValidatorStakingTokenURIFunc{
			defaultHook: func(*bind.CallOpts, *big.Int) (string, error) {
				panic("unexpected invocation of MockIValidatorStaking.TokenURI")
			},
		},
		TotalSupplyFunc: &IValidatorStakingTotalSupplyFunc{
			defaultHook: func(*bind.CallOpts) (*big.Int, error) {
				panic("unexpected invocation of MockIValidatorStaking.TotalSupply")
			},
		},
		TransferFromFunc: &IValidatorStakingTransferFromFunc{
			defaultHook: func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.TransferFrom")
			},
		},
		TripCBFunc: &IValidatorStakingTripCBFunc{
			defaultHook: func(*bind.TransactOpts) (*types.Transaction, error) {
				panic("unexpected invocation of MockIValidatorStaking.TripCB")
			},
		},
		WatchApprovalFunc: &IValidatorStakingWatchApprovalFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
				panic("unexpected invocation of MockIValidatorStaking.WatchApproval")
			},
		},
		WatchApprovalForAllFunc: &IValidatorStakingWatchApprovalForAllFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error) {
				panic("unexpected invocation of MockIValidatorStaking.WatchApprovalForAll")
			},
		},
		WatchInitializedFunc: &IValidatorStakingWatchInitializedFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingInitialized) (event.Subscription, error) {
				panic("unexpected invocation of MockIValidatorStaking.WatchInitialized")
			},
		},
		WatchTransferFunc: &IValidatorStakingWatchTransferFunc{
			defaultHook: func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
				panic("unexpected invocation of MockIValidatorStaking.WatchTransfer")
			},
		},
	}
}

// NewMockIValidatorStakingFrom creates a new mock of the
// MockIValidatorStaking interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockIValidatorStakingFrom(i bindings.IValidatorStaking) *MockIValidatorStaking {
	return &MockIValidatorStaking{
		ApproveFunc: &IValidatorStakingApproveFunc{
			defaultHook: i.Approve,
		},
		BalanceOfFunc: &IValidatorStakingBalanceOfFunc{
			defaultHook: i.BalanceOf,
		},
		BurnFunc: &IValidatorStakingBurnFunc{
			defaultHook: i.Burn,
		},
		BurnToFunc: &IValidatorStakingBurnToFunc{
			defaultHook: i.BurnTo,
		},
		CircuitBreakerStateFunc: &IValidatorStakingCircuitBreakerStateFunc{
			defaultHook: i.CircuitBreakerState,
		},
		CollectAllProfitsFunc: &IValidatorStakingCollectAllProfitsFunc{
			defaultHook: i.CollectAllProfits,
		},
		CollectAllProfitsToFunc: &IValidatorStakingCollectAllProfitsToFunc{
			defaultHook: i.CollectAllProfitsTo,
		},
		CollectEthFunc: &IValidatorStakingCollectEthFunc{
			defaultHook: i.CollectEth,
		},
		CollectEthToFunc: &IValidatorStakingCollectEthToFunc{
			defaultHook: i.CollectEthTo,
		},
		CollectTokenFunc: &IValidatorStakingCollectTokenFunc{
			defaultHook: i.CollectToken,
		},
		CollectTokenToFunc: &IValidatorStakingCollectTokenToFunc{
			defaultHook: i.CollectTokenTo,
		},
		DepositEthFunc: &IValidatorStakingDepositEthFunc{
			defaultHook: i.DepositEth,
		},
		DepositTokenFunc: &IValidatorStakingDepositTokenFunc{
			defaultHook: i.DepositToken,
		},
		EstimateAllProfitsFunc: &IValidatorStakingEstimateAllProfitsFunc{
			defaultHook: i.EstimateAllProfits,
		},
		EstimateEthCollectionFunc: &IValidatorStakingEstimateEthCollectionFunc{
			defaultHook: i.EstimateEthCollection,
		},
		EstimateExcessEthFunc: &IValidatorStakingEstimateExcessEthFunc{
			defaultHook: i.EstimateExcessEth,
		},
		EstimateExcessTokenFunc: &IValidatorStakingEstimateExcessTokenFunc{
			defaultHook: i.EstimateExcessToken,
		},
		EstimateTokenCollectionFunc: &IValidatorStakingEstimateTokenCollectionFunc{
			defaultHook: i.EstimateTokenCollection,
		},
		FilterApprovalFunc: &IValidatorStakingFilterApprovalFunc{
			defaultHook: i.FilterApproval,
		},
		FilterApprovalForAllFunc: &IValidatorStakingFilterApprovalForAllFunc{
			defaultHook: i.FilterApprovalForAll,
		},
		FilterInitializedFunc: &IValidatorStakingFilterInitializedFunc{
			defaultHook: i.FilterInitialized,
		},
		FilterTransferFunc: &IValidatorStakingFilterTransferFunc{
			defaultHook: i.FilterTransfer,
		},
		GetAccumulatorScaleFactorFunc: &IValidatorStakingGetAccumulatorScaleFactorFunc{
			defaultHook: i.GetAccumulatorScaleFactor,
		},
		GetApprovedFunc: &IValidatorStakingGetApprovedFunc{
			defaultHook: i.GetApproved,
		},
		GetEthAccumulatorFunc: &IValidatorStakingGetEthAccumulatorFunc{
			defaultHook: i.GetEthAccumulator,
		},
		GetLatestMintedPositionIDFunc: &IValidatorStakingGetLatestMintedPositionIDFunc{
			defaultHook: i.GetLatestMintedPositionID,
		},
		GetMaxGovernanceLockFunc: &IValidatorStakingGetMaxGovernanceLockFunc{
			defaultHook: i.GetMaxGovernanceLock,
		},
		GetMaxMintLockFunc: &IValidatorStakingGetMaxMintLockFunc{
			defaultHook: i.GetMaxMintLock,
		},
		GetMetamorphicContractAddressFunc: &IValidatorStakingGetMetamorphicContractAddressFunc{
			defaultHook: i.GetMetamorphicContractAddress,
		},
		GetPositionFunc: &IValidatorStakingGetPositionFunc{
			defaultHook: i.GetPosition,
		},
		GetTokenAccumulatorFunc: &IValidatorStakingGetTokenAccumulatorFunc{
			defaultHook: i.GetTokenAccumulator,
		},
		GetTotalReserveALCAFunc: &IValidatorStakingGetTotalReserveALCAFunc{
			defaultHook: i.GetTotalReserveALCA,
		},
		GetTotalReserveEthFunc: &IValidatorStakingGetTotalReserveEthFunc{
			defaultHook: i.GetTotalReserveEth,
		},
		GetTotalSharesFunc: &IValidatorStakingGetTotalSharesFunc{
			defaultHook: i.GetTotalShares,
		},
		InitializeFunc: &IValidatorStakingInitializeFunc{
			defaultHook: i.Initialize,
		},
		IsApprovedForAllFunc: &IValidatorStakingIsApprovedForAllFunc{
			defaultHook: i.IsApprovedForAll,
		},
		LockOwnPositionFunc: &IValidatorStakingLockOwnPositionFunc{
			defaultHook: i.LockOwnPosition,
		},
		LockPositionFunc: &IValidatorStakingLockPositionFunc{
			defaultHook: i.LockPosition,
		},
		LockWithdrawFunc: &IValidatorStakingLockWithdrawFunc{
			defaultHook: i.LockWithdraw,
		},
		MintFunc: &IValidatorStakingMintFunc{
			defaultHook: i.Mint,
		},
		MintToFunc: &IValidatorStakingMintToFunc{
			defaultHook: i.MintTo,
		},
		NameFunc: &IValidatorStakingNameFunc{
			defaultHook: i.Name,
		},
		OwnerOfFunc: &IValidatorStakingOwnerOfFunc{
			defaultHook: i.OwnerOf,
		},
		ParseApprovalFunc: &IValidatorStakingParseApprovalFunc{
			defaultHook: i.ParseApproval,
		},
		ParseApprovalForAllFunc: &IValidatorStakingParseApprovalForAllFunc{
			defaultHook: i.ParseApprovalForAll,
		},
		ParseInitializedFunc: &IValidatorStakingParseInitializedFunc{
			defaultHook: i.ParseInitialized,
		},
		ParseTransferFunc: &IValidatorStakingParseTransferFunc{
			defaultHook: i.ParseTransfer,
		},
		SafeTransferFromFunc: &IValidatorStakingSafeTransferFromFunc{
			defaultHook: i.SafeTransferFrom,
		},
		SafeTransferFrom0Func: &IValidatorStakingSafeTransferFrom0Func{
			defaultHook: i.SafeTransferFrom0,
		},
		SetApprovalForAllFunc: &IValidatorStakingSetApprovalForAllFunc{
			defaultHook: i.SetApprovalForAll,
		},
		SkimExcessEthFunc: &IValidatorStakingSkimExcessEthFunc{
			defaultHook: i.SkimExcessEth,
		},
		SkimExcessTokenFunc: &IValidatorStakingSkimExcessTokenFunc{
			defaultHook: i.SkimExcessToken,
		},
		SupportsInterfaceFunc: &IValidatorStakingSupportsInterfaceFunc{
			defaultHook: i.SupportsInterface,
		},
		SymbolFunc: &IValidatorStakingSymbolFunc{
			defaultHook: i.Symbol,
		},
		TokenByIndexFunc: &IValidatorStakingTokenByIndexFunc{
			defaultHook: i.TokenByIndex,
		},
		TokenOfOwnerByIndexFunc: &IValidatorStakingTokenOfOwnerByIndexFunc{
			defaultHook: i.TokenOfOwnerByIndex,
		},
		TokenURIFunc: &IValidatorStakingTokenURIFunc{
			defaultHook: i.TokenURI,
		},
		TotalSupplyFunc: &IValidatorStakingTotalSupplyFunc{
			defaultHook: i.TotalSupply,
		},
		TransferFromFunc: &IValidatorStakingTransferFromFunc{
			defaultHook: i.TransferFrom,
		},
		TripCBFunc: &IValidatorStakingTripCBFunc{
			defaultHook: i.TripCB,
		},
		WatchApprovalFunc: &IValidatorStakingWatchApprovalFunc{
			defaultHook: i.WatchApproval,
		},
		WatchApprovalForAllFunc: &IValidatorStakingWatchApprovalForAllFunc{
			defaultHook: i.WatchApprovalForAll,
		},
		WatchInitializedFunc: &IValidatorStakingWatchInitializedFunc{
			defaultHook: i.WatchInitialized,
		},
		WatchTransferFunc: &IValidatorStakingWatchTransferFunc{
			defaultHook: i.WatchTransfer,
		},
	}
}

// IValidatorStakingApproveFunc describes the behavior when the Approve
// method of the parent MockIValidatorStaking instance is invoked.
type IValidatorStakingApproveFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingApproveFuncCall
	mutex       sync.Mutex
}

// Approve delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIValidatorStaking) Approve(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.ApproveFunc.nextHook()(v0, v1, v2)
	m.ApproveFunc.appendCall(IValidatorStakingApproveFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Approve method of
// the parent MockIValidatorStaking instance is invoked and the hook queue
// is empty.
func (f *IValidatorStakingApproveFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Approve method of the parent MockIValidatorStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorStakingApproveFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingApproveFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingApproveFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingApproveFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingApproveFunc) appendCall(r0 IValidatorStakingApproveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingApproveFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingApproveFunc) History() []IValidatorStakingApproveFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingApproveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingApproveFuncCall is an object that describes an
// invocation of method Approve on an instance of MockIValidatorStaking.
type IValidatorStakingApproveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingApproveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingApproveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingBalanceOfFunc describes the behavior when the BalanceOf
// method of the parent MockIValidatorStaking instance is invoked.
type IValidatorStakingBalanceOfFunc struct {
	defaultHook func(*bind.CallOpts, common.Address) (*big.Int, error)
	hooks       []func(*bind.CallOpts, common.Address) (*big.Int, error)
	history     []IValidatorStakingBalanceOfFuncCall
	mutex       sync.Mutex
}

// BalanceOf delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIValidatorStaking) BalanceOf(v0 *bind.CallOpts, v1 common.Address) (*big.Int, error) {
	r0, r1 := m.BalanceOfFunc.nextHook()(v0, v1)
	m.BalanceOfFunc.appendCall(IValidatorStakingBalanceOfFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BalanceOf method of
// the parent MockIValidatorStaking instance is invoked and the hook queue
// is empty.
func (f *IValidatorStakingBalanceOfFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BalanceOf method of the parent MockIValidatorStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorStakingBalanceOfFunc) PushHook(hook func(*bind.CallOpts, common.Address) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingBalanceOfFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingBalanceOfFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingBalanceOfFunc) nextHook() func(*bind.CallOpts, common.Address) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingBalanceOfFunc) appendCall(r0 IValidatorStakingBalanceOfFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingBalanceOfFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingBalanceOfFunc) History() []IValidatorStakingBalanceOfFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingBalanceOfFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingBalanceOfFuncCall is an object that describes an
// invocation of method BalanceOf on an instance of MockIValidatorStaking.
type IValidatorStakingBalanceOfFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingBalanceOfFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingBalanceOfFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingBurnFunc describes the behavior when the Burn method of
// the parent MockIValidatorStaking instance is invoked.
type IValidatorStakingBurnFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingBurnFuncCall
	mutex       sync.Mutex
}

// Burn delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIValidatorStaking) Burn(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.BurnFunc.nextHook()(v0, v1)
	m.BurnFunc.appendCall(IValidatorStakingBurnFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Burn method of the
// parent MockIValidatorStaking instance is invoked and the hook queue is
// empty.
func (f *IValidatorStakingBurnFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Burn method of the parent MockIValidatorStaking instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IValidatorStakingBurnFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingBurnFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingBurnFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingBurnFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingBurnFunc) appendCall(r0 IValidatorStakingBurnFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingBurnFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingBurnFunc) History() []IValidatorStakingBurnFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingBurnFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingBurnFuncCall is an object that describes an invocation
// of method Burn on an instance of MockIValidatorStaking.
type IValidatorStakingBurnFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingBurnFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingBurnFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingBurnToFunc describes the behavior when the BurnTo method
// of the parent MockIValidatorStaking instance is invoked.
type IValidatorStakingBurnToFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingBurnToFuncCall
	mutex       sync.Mutex
}

// BurnTo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIValidatorStaking) BurnTo(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.BurnToFunc.nextHook()(v0, v1, v2)
	m.BurnToFunc.appendCall(IValidatorStakingBurnToFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BurnTo method of the
// parent MockIValidatorStaking instance is invoked and the hook queue is
// empty.
func (f *IValidatorStakingBurnToFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BurnTo method of the parent MockIValidatorStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorStakingBurnToFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingBurnToFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingBurnToFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingBurnToFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingBurnToFunc) appendCall(r0 IValidatorStakingBurnToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingBurnToFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingBurnToFunc) History() []IValidatorStakingBurnToFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingBurnToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingBurnToFuncCall is an object that describes an invocation
// of method BurnTo on an instance of MockIValidatorStaking.
type IValidatorStakingBurnToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingBurnToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingBurnToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingCircuitBreakerStateFunc describes the behavior when the
// CircuitBreakerState method of the parent MockIValidatorStaking instance
// is invoked.
type IValidatorStakingCircuitBreakerStateFunc struct {
	defaultHook func(*bind.CallOpts) (bool, error)
	hooks       []func(*bind.CallOpts) (bool, error)
	history     []IValidatorStakingCircuitBreakerStateFuncCall
	mutex       sync.Mutex
}

// CircuitBreakerState delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) CircuitBreakerState(v0 *bind.CallOpts) (bool, error) {
	r0, r1 := m.CircuitBreakerStateFunc.nextHook()(v0)
	m.CircuitBreakerStateFunc.appendCall(IValidatorStakingCircuitBreakerStateFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CircuitBreakerState
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingCircuitBreakerStateFunc) SetDefaultHook(hook func(*bind.CallOpts) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CircuitBreakerState method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingCircuitBreakerStateFunc) PushHook(hook func(*bind.CallOpts) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingCircuitBreakerStateFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingCircuitBreakerStateFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts) (bool, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingCircuitBreakerStateFunc) nextHook() func(*bind.CallOpts) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingCircuitBreakerStateFunc) appendCall(r0 IValidatorStakingCircuitBreakerStateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingCircuitBreakerStateFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingCircuitBreakerStateFunc) History() []IValidatorStakingCircuitBreakerStateFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingCircuitBreakerStateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingCircuitBreakerStateFuncCall is an object that describes
// an invocation of method CircuitBreakerState on an instance of
// MockIValidatorStaking.
type IValidatorStakingCircuitBreakerStateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingCircuitBreakerStateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingCircuitBreakerStateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingCollectAllProfitsFunc describes the behavior when the
// CollectAllProfits method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingCollectAllProfitsFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingCollectAllProfitsFuncCall
	mutex       sync.Mutex
}

// CollectAllProfits delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) CollectAllProfits(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.CollectAllProfitsFunc.nextHook()(v0, v1)
	m.CollectAllProfitsFunc.appendCall(IValidatorStakingCollectAllProfitsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CollectAllProfits
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingCollectAllProfitsFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CollectAllProfits method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingCollectAllProfitsFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingCollectAllProfitsFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingCollectAllProfitsFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingCollectAllProfitsFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingCollectAllProfitsFunc) appendCall(r0 IValidatorStakingCollectAllProfitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingCollectAllProfitsFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingCollectAllProfitsFunc) History() []IValidatorStakingCollectAllProfitsFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingCollectAllProfitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingCollectAllProfitsFuncCall is an object that describes an
// invocation of method CollectAllProfits on an instance of
// MockIValidatorStaking.
type IValidatorStakingCollectAllProfitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingCollectAllProfitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingCollectAllProfitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingCollectAllProfitsToFunc describes the behavior when the
// CollectAllProfitsTo method of the parent MockIValidatorStaking instance
// is invoked.
type IValidatorStakingCollectAllProfitsToFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingCollectAllProfitsToFuncCall
	mutex       sync.Mutex
}

// CollectAllProfitsTo delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) CollectAllProfitsTo(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.CollectAllProfitsToFunc.nextHook()(v0, v1, v2)
	m.CollectAllProfitsToFunc.appendCall(IValidatorStakingCollectAllProfitsToFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CollectAllProfitsTo
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingCollectAllProfitsToFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CollectAllProfitsTo method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingCollectAllProfitsToFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingCollectAllProfitsToFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingCollectAllProfitsToFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingCollectAllProfitsToFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingCollectAllProfitsToFunc) appendCall(r0 IValidatorStakingCollectAllProfitsToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingCollectAllProfitsToFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingCollectAllProfitsToFunc) History() []IValidatorStakingCollectAllProfitsToFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingCollectAllProfitsToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingCollectAllProfitsToFuncCall is an object that describes
// an invocation of method CollectAllProfitsTo on an instance of
// MockIValidatorStaking.
type IValidatorStakingCollectAllProfitsToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingCollectAllProfitsToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingCollectAllProfitsToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingCollectEthFunc describes the behavior when the
// CollectEth method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingCollectEthFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingCollectEthFuncCall
	mutex       sync.Mutex
}

// CollectEth delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) CollectEth(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.CollectEthFunc.nextHook()(v0, v1)
	m.CollectEthFunc.appendCall(IValidatorStakingCollectEthFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CollectEth method of
// the parent MockIValidatorStaking instance is invoked and the hook queue
// is empty.
func (f *IValidatorStakingCollectEthFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CollectEth method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingCollectEthFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingCollectEthFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingCollectEthFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingCollectEthFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingCollectEthFunc) appendCall(r0 IValidatorStakingCollectEthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingCollectEthFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingCollectEthFunc) History() []IValidatorStakingCollectEthFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingCollectEthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingCollectEthFuncCall is an object that describes an
// invocation of method CollectEth on an instance of MockIValidatorStaking.
type IValidatorStakingCollectEthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingCollectEthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingCollectEthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingCollectEthToFunc describes the behavior when the
// CollectEthTo method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingCollectEthToFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingCollectEthToFuncCall
	mutex       sync.Mutex
}

// CollectEthTo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) CollectEthTo(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.CollectEthToFunc.nextHook()(v0, v1, v2)
	m.CollectEthToFunc.appendCall(IValidatorStakingCollectEthToFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CollectEthTo method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingCollectEthToFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CollectEthTo method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingCollectEthToFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingCollectEthToFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingCollectEthToFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingCollectEthToFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingCollectEthToFunc) appendCall(r0 IValidatorStakingCollectEthToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingCollectEthToFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingCollectEthToFunc) History() []IValidatorStakingCollectEthToFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingCollectEthToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingCollectEthToFuncCall is an object that describes an
// invocation of method CollectEthTo on an instance of
// MockIValidatorStaking.
type IValidatorStakingCollectEthToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingCollectEthToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingCollectEthToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingCollectTokenFunc describes the behavior when the
// CollectToken method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingCollectTokenFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingCollectTokenFuncCall
	mutex       sync.Mutex
}

// CollectToken delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) CollectToken(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.CollectTokenFunc.nextHook()(v0, v1)
	m.CollectTokenFunc.appendCall(IValidatorStakingCollectTokenFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CollectToken method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingCollectTokenFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CollectToken method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingCollectTokenFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingCollectTokenFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingCollectTokenFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingCollectTokenFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingCollectTokenFunc) appendCall(r0 IValidatorStakingCollectTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingCollectTokenFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingCollectTokenFunc) History() []IValidatorStakingCollectTokenFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingCollectTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingCollectTokenFuncCall is an object that describes an
// invocation of method CollectToken on an instance of
// MockIValidatorStaking.
type IValidatorStakingCollectTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingCollectTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingCollectTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingCollectTokenToFunc describes the behavior when the
// CollectTokenTo method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingCollectTokenToFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingCollectTokenToFuncCall
	mutex       sync.Mutex
}

// CollectTokenTo delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) CollectTokenTo(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.CollectTokenToFunc.nextHook()(v0, v1, v2)
	m.CollectTokenToFunc.appendCall(IValidatorStakingCollectTokenToFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CollectTokenTo
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingCollectTokenToFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CollectTokenTo method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingCollectTokenToFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingCollectTokenToFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingCollectTokenToFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingCollectTokenToFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingCollectTokenToFunc) appendCall(r0 IValidatorStakingCollectTokenToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingCollectTokenToFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingCollectTokenToFunc) History() []IValidatorStakingCollectTokenToFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingCollectTokenToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingCollectTokenToFuncCall is an object that describes an
// invocation of method CollectTokenTo on an instance of
// MockIValidatorStaking.
type IValidatorStakingCollectTokenToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingCollectTokenToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingCollectTokenToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingDepositEthFunc describes the behavior when the
// DepositEth method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingDepositEthFunc struct {
	defaultHook func(*bind.TransactOpts, uint8) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint8) (*types.Transaction, error)
	history     []IValidatorStakingDepositEthFuncCall
	mutex       sync.Mutex
}

// DepositEth delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) DepositEth(v0 *bind.TransactOpts, v1 uint8) (*types.Transaction, error) {
	r0, r1 := m.DepositEthFunc.nextHook()(v0, v1)
	m.DepositEthFunc.appendCall(IValidatorStakingDepositEthFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DepositEth method of
// the parent MockIValidatorStaking instance is invoked and the hook queue
// is empty.
func (f *IValidatorStakingDepositEthFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint8) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DepositEth method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingDepositEthFunc) PushHook(hook func(*bind.TransactOpts, uint8) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingDepositEthFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint8) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingDepositEthFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint8) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingDepositEthFunc) nextHook() func(*bind.TransactOpts, uint8) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingDepositEthFunc) appendCall(r0 IValidatorStakingDepositEthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingDepositEthFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingDepositEthFunc) History() []IValidatorStakingDepositEthFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingDepositEthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingDepositEthFuncCall is an object that describes an
// invocation of method DepositEth on an instance of MockIValidatorStaking.
type IValidatorStakingDepositEthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint8
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingDepositEthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingDepositEthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingDepositTokenFunc describes the behavior when the
// DepositToken method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingDepositTokenFunc struct {
	defaultHook func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingDepositTokenFuncCall
	mutex       sync.Mutex
}

// DepositToken delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) DepositToken(v0 *bind.TransactOpts, v1 uint8, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.DepositTokenFunc.nextHook()(v0, v1, v2)
	m.DepositTokenFunc.appendCall(IValidatorStakingDepositTokenFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DepositToken method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingDepositTokenFunc) SetDefaultHook(hook func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DepositToken method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingDepositTokenFunc) PushHook(hook func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingDepositTokenFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingDepositTokenFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingDepositTokenFunc) nextHook() func(*bind.TransactOpts, uint8, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingDepositTokenFunc) appendCall(r0 IValidatorStakingDepositTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingDepositTokenFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingDepositTokenFunc) History() []IValidatorStakingDepositTokenFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingDepositTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingDepositTokenFuncCall is an object that describes an
// invocation of method DepositToken on an instance of
// MockIValidatorStaking.
type IValidatorStakingDepositTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint8
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingDepositTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingDepositTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingEstimateAllProfitsFunc describes the behavior when the
// EstimateAllProfits method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingEstimateAllProfitsFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (struct {
		PayoutEth   *big.Int
		PayoutToken *big.Int
	}, error)
	hooks []func(*bind.CallOpts, *big.Int) (struct {
		PayoutEth   *big.Int
		PayoutToken *big.Int
	}, error)
	history []IValidatorStakingEstimateAllProfitsFuncCall
	mutex   sync.Mutex
}

// EstimateAllProfits delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) EstimateAllProfits(v0 *bind.CallOpts, v1 *big.Int) (struct {
	PayoutEth   *big.Int
	PayoutToken *big.Int
}, error) {
	r0, r1 := m.EstimateAllProfitsFunc.nextHook()(v0, v1)
	m.EstimateAllProfitsFunc.appendCall(IValidatorStakingEstimateAllProfitsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the EstimateAllProfits
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingEstimateAllProfitsFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (struct {
	PayoutEth   *big.Int
	PayoutToken *big.Int
}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EstimateAllProfits method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingEstimateAllProfitsFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (struct {
	PayoutEth   *big.Int
	PayoutToken *big.Int
}, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingEstimateAllProfitsFunc) SetDefaultReturn(r0 struct {
	PayoutEth   *big.Int
	PayoutToken *big.Int
}, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (struct {
		PayoutEth   *big.Int
		PayoutToken *big.Int
	}, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingEstimateAllProfitsFunc) PushReturn(r0 struct {
	PayoutEth   *big.Int
	PayoutToken *big.Int
}, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (struct {
		PayoutEth   *big.Int
		PayoutToken *big.Int
	}, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingEstimateAllProfitsFunc) nextHook() func(*bind.CallOpts, *big.Int) (struct {
	PayoutEth   *big.Int
	PayoutToken *big.Int
}, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingEstimateAllProfitsFunc) appendCall(r0 IValidatorStakingEstimateAllProfitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingEstimateAllProfitsFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingEstimateAllProfitsFunc) History() []IValidatorStakingEstimateAllProfitsFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingEstimateAllProfitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingEstimateAllProfitsFuncCall is an object that describes
// an invocation of method EstimateAllProfits on an instance of
// MockIValidatorStaking.
type IValidatorStakingEstimateAllProfitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 struct {
		PayoutEth   *big.Int
		PayoutToken *big.Int
	}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingEstimateAllProfitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingEstimateAllProfitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingEstimateEthCollectionFunc describes the behavior when
// the EstimateEthCollection method of the parent MockIValidatorStaking
// instance is invoked.
type IValidatorStakingEstimateEthCollectionFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []IValidatorStakingEstimateEthCollectionFuncCall
	mutex       sync.Mutex
}

// EstimateEthCollection delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) EstimateEthCollection(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.EstimateEthCollectionFunc.nextHook()(v0, v1)
	m.EstimateEthCollectionFunc.appendCall(IValidatorStakingEstimateEthCollectionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// EstimateEthCollection method of the parent MockIValidatorStaking instance
// is invoked and the hook queue is empty.
func (f *IValidatorStakingEstimateEthCollectionFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EstimateEthCollection method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingEstimateEthCollectionFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingEstimateEthCollectionFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingEstimateEthCollectionFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingEstimateEthCollectionFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingEstimateEthCollectionFunc) appendCall(r0 IValidatorStakingEstimateEthCollectionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingEstimateEthCollectionFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingEstimateEthCollectionFunc) History() []IValidatorStakingEstimateEthCollectionFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingEstimateEthCollectionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingEstimateEthCollectionFuncCall is an object that
// describes an invocation of method EstimateEthCollection on an instance of
// MockIValidatorStaking.
type IValidatorStakingEstimateEthCollectionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingEstimateEthCollectionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingEstimateEthCollectionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingEstimateExcessEthFunc describes the behavior when the
// EstimateExcessEth method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingEstimateExcessEthFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorStakingEstimateExcessEthFuncCall
	mutex       sync.Mutex
}

// EstimateExcessEth delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) EstimateExcessEth(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.EstimateExcessEthFunc.nextHook()(v0)
	m.EstimateExcessEthFunc.appendCall(IValidatorStakingEstimateExcessEthFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the EstimateExcessEth
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingEstimateExcessEthFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EstimateExcessEth method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingEstimateExcessEthFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingEstimateExcessEthFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingEstimateExcessEthFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingEstimateExcessEthFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingEstimateExcessEthFunc) appendCall(r0 IValidatorStakingEstimateExcessEthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingEstimateExcessEthFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingEstimateExcessEthFunc) History() []IValidatorStakingEstimateExcessEthFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingEstimateExcessEthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingEstimateExcessEthFuncCall is an object that describes an
// invocation of method EstimateExcessEth on an instance of
// MockIValidatorStaking.
type IValidatorStakingEstimateExcessEthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingEstimateExcessEthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingEstimateExcessEthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingEstimateExcessTokenFunc describes the behavior when the
// EstimateExcessToken method of the parent MockIValidatorStaking instance
// is invoked.
type IValidatorStakingEstimateExcessTokenFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorStakingEstimateExcessTokenFuncCall
	mutex       sync.Mutex
}

// EstimateExcessToken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) EstimateExcessToken(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.EstimateExcessTokenFunc.nextHook()(v0)
	m.EstimateExcessTokenFunc.appendCall(IValidatorStakingEstimateExcessTokenFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the EstimateExcessToken
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingEstimateExcessTokenFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EstimateExcessToken method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingEstimateExcessTokenFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingEstimateExcessTokenFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingEstimateExcessTokenFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingEstimateExcessTokenFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingEstimateExcessTokenFunc) appendCall(r0 IValidatorStakingEstimateExcessTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingEstimateExcessTokenFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingEstimateExcessTokenFunc) History() []IValidatorStakingEstimateExcessTokenFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingEstimateExcessTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingEstimateExcessTokenFuncCall is an object that describes
// an invocation of method EstimateExcessToken on an instance of
// MockIValidatorStaking.
type IValidatorStakingEstimateExcessTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingEstimateExcessTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingEstimateExcessTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingEstimateTokenCollectionFunc describes the behavior when
// the EstimateTokenCollection method of the parent MockIValidatorStaking
// instance is invoked.
type IValidatorStakingEstimateTokenCollectionFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []IValidatorStakingEstimateTokenCollectionFuncCall
	mutex       sync.Mutex
}

// EstimateTokenCollection delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) EstimateTokenCollection(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.EstimateTokenCollectionFunc.nextHook()(v0, v1)
	m.EstimateTokenCollectionFunc.appendCall(IValidatorStakingEstimateTokenCollectionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// EstimateTokenCollection method of the parent MockIValidatorStaking
// instance is invoked and the hook queue is empty.
func (f *IValidatorStakingEstimateTokenCollectionFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EstimateTokenCollection method of the parent MockIValidatorStaking
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorStakingEstimateTokenCollectionFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingEstimateTokenCollectionFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingEstimateTokenCollectionFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingEstimateTokenCollectionFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingEstimateTokenCollectionFunc) appendCall(r0 IValidatorStakingEstimateTokenCollectionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingEstimateTokenCollectionFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingEstimateTokenCollectionFunc) History() []IValidatorStakingEstimateTokenCollectionFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingEstimateTokenCollectionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingEstimateTokenCollectionFuncCall is an object that
// describes an invocation of method EstimateTokenCollection on an instance
// of MockIValidatorStaking.
type IValidatorStakingEstimateTokenCollectionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingEstimateTokenCollectionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingEstimateTokenCollectionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingFilterApprovalFunc describes the behavior when the
// FilterApproval method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingFilterApprovalFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingApprovalIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingApprovalIterator, error)
	history     []IValidatorStakingFilterApprovalFuncCall
	mutex       sync.Mutex
}

// FilterApproval delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) FilterApproval(v0 *bind.FilterOpts, v1 []common.Address, v2 []common.Address, v3 []*big.Int) (*bindings.ValidatorStakingApprovalIterator, error) {
	r0, r1 := m.FilterApprovalFunc.nextHook()(v0, v1, v2, v3)
	m.FilterApprovalFunc.appendCall(IValidatorStakingFilterApprovalFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterApproval
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingFilterApprovalFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingApprovalIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterApproval method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingFilterApprovalFunc) PushHook(hook func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingApprovalIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingFilterApprovalFunc) SetDefaultReturn(r0 *bindings.ValidatorStakingApprovalIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingApprovalIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingFilterApprovalFunc) PushReturn(r0 *bindings.ValidatorStakingApprovalIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingApprovalIterator, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingFilterApprovalFunc) nextHook() func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingApprovalIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingFilterApprovalFunc) appendCall(r0 IValidatorStakingFilterApprovalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingFilterApprovalFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingFilterApprovalFunc) History() []IValidatorStakingFilterApprovalFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingFilterApprovalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingFilterApprovalFuncCall is an object that describes an
// invocation of method FilterApproval on an instance of
// MockIValidatorStaking.
type IValidatorStakingFilterApprovalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorStakingApprovalIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingFilterApprovalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingFilterApprovalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingFilterApprovalForAllFunc describes the behavior when the
// FilterApprovalForAll method of the parent MockIValidatorStaking instance
// is invoked.
type IValidatorStakingFilterApprovalForAllFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ValidatorStakingApprovalForAllIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ValidatorStakingApprovalForAllIterator, error)
	history     []IValidatorStakingFilterApprovalForAllFuncCall
	mutex       sync.Mutex
}

// FilterApprovalForAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) FilterApprovalForAll(v0 *bind.FilterOpts, v1 []common.Address, v2 []common.Address) (*bindings.ValidatorStakingApprovalForAllIterator, error) {
	r0, r1 := m.FilterApprovalForAllFunc.nextHook()(v0, v1, v2)
	m.FilterApprovalForAllFunc.appendCall(IValidatorStakingFilterApprovalForAllFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterApprovalForAll
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingFilterApprovalForAllFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ValidatorStakingApprovalForAllIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterApprovalForAll method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingFilterApprovalForAllFunc) PushHook(hook func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ValidatorStakingApprovalForAllIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingFilterApprovalForAllFunc) SetDefaultReturn(r0 *bindings.ValidatorStakingApprovalForAllIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ValidatorStakingApprovalForAllIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingFilterApprovalForAllFunc) PushReturn(r0 *bindings.ValidatorStakingApprovalForAllIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ValidatorStakingApprovalForAllIterator, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingFilterApprovalForAllFunc) nextHook() func(*bind.FilterOpts, []common.Address, []common.Address) (*bindings.ValidatorStakingApprovalForAllIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingFilterApprovalForAllFunc) appendCall(r0 IValidatorStakingFilterApprovalForAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingFilterApprovalForAllFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingFilterApprovalForAllFunc) History() []IValidatorStakingFilterApprovalForAllFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingFilterApprovalForAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingFilterApprovalForAllFuncCall is an object that describes
// an invocation of method FilterApprovalForAll on an instance of
// MockIValidatorStaking.
type IValidatorStakingFilterApprovalForAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorStakingApprovalForAllIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingFilterApprovalForAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingFilterApprovalForAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingFilterInitializedFunc describes the behavior when the
// FilterInitialized method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingFilterInitializedFunc struct {
	defaultHook func(*bind.FilterOpts) (*bindings.ValidatorStakingInitializedIterator, error)
	hooks       []func(*bind.FilterOpts) (*bindings.ValidatorStakingInitializedIterator, error)
	history     []IValidatorStakingFilterInitializedFuncCall
	mutex       sync.Mutex
}

// FilterInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) FilterInitialized(v0 *bind.FilterOpts) (*bindings.ValidatorStakingInitializedIterator, error) {
	r0, r1 := m.FilterInitializedFunc.nextHook()(v0)
	m.FilterInitializedFunc.appendCall(IValidatorStakingFilterInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterInitialized
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingFilterInitializedFunc) SetDefaultHook(hook func(*bind.FilterOpts) (*bindings.ValidatorStakingInitializedIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterInitialized method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingFilterInitializedFunc) PushHook(hook func(*bind.FilterOpts) (*bindings.ValidatorStakingInitializedIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingFilterInitializedFunc) SetDefaultReturn(r0 *bindings.ValidatorStakingInitializedIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts) (*bindings.ValidatorStakingInitializedIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingFilterInitializedFunc) PushReturn(r0 *bindings.ValidatorStakingInitializedIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts) (*bindings.ValidatorStakingInitializedIterator, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingFilterInitializedFunc) nextHook() func(*bind.FilterOpts) (*bindings.ValidatorStakingInitializedIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingFilterInitializedFunc) appendCall(r0 IValidatorStakingFilterInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingFilterInitializedFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingFilterInitializedFunc) History() []IValidatorStakingFilterInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingFilterInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingFilterInitializedFuncCall is an object that describes an
// invocation of method FilterInitialized on an instance of
// MockIValidatorStaking.
type IValidatorStakingFilterInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorStakingInitializedIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingFilterInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingFilterInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingFilterTransferFunc describes the behavior when the
// FilterTransfer method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingFilterTransferFunc struct {
	defaultHook func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingTransferIterator, error)
	hooks       []func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingTransferIterator, error)
	history     []IValidatorStakingFilterTransferFuncCall
	mutex       sync.Mutex
}

// FilterTransfer delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) FilterTransfer(v0 *bind.FilterOpts, v1 []common.Address, v2 []common.Address, v3 []*big.Int) (*bindings.ValidatorStakingTransferIterator, error) {
	r0, r1 := m.FilterTransferFunc.nextHook()(v0, v1, v2, v3)
	m.FilterTransferFunc.appendCall(IValidatorStakingFilterTransferFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterTransfer
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingFilterTransferFunc) SetDefaultHook(hook func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingTransferIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterTransfer method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingFilterTransferFunc) PushHook(hook func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingTransferIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingFilterTransferFunc) SetDefaultReturn(r0 *bindings.ValidatorStakingTransferIterator, r1 error) {
	f.SetDefaultHook(func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingTransferIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingFilterTransferFunc) PushReturn(r0 *bindings.ValidatorStakingTransferIterator, r1 error) {
	f.PushHook(func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingTransferIterator, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingFilterTransferFunc) nextHook() func(*bind.FilterOpts, []common.Address, []common.Address, []*big.Int) (*bindings.ValidatorStakingTransferIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingFilterTransferFunc) appendCall(r0 IValidatorStakingFilterTransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingFilterTransferFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingFilterTransferFunc) History() []IValidatorStakingFilterTransferFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingFilterTransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingFilterTransferFuncCall is an object that describes an
// invocation of method FilterTransfer on an instance of
// MockIValidatorStaking.
type IValidatorStakingFilterTransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.FilterOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorStakingTransferIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingFilterTransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingFilterTransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingGetAccumulatorScaleFactorFunc describes the behavior
// when the GetAccumulatorScaleFactor method of the parent
// MockIValidatorStaking instance is invoked.
type IValidatorStakingGetAccumulatorScaleFactorFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorStakingGetAccumulatorScaleFactorFuncCall
	mutex       sync.Mutex
}

// GetAccumulatorScaleFactor delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) GetAccumulatorScaleFactor(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetAccumulatorScaleFactorFunc.nextHook()(v0)
	m.GetAccumulatorScaleFactorFunc.appendCall(IValidatorStakingGetAccumulatorScaleFactorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAccumulatorScaleFactor method of the parent MockIValidatorStaking
// instance is invoked and the hook queue is empty.
func (f *IValidatorStakingGetAccumulatorScaleFactorFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAccumulatorScaleFactor method of the parent MockIValidatorStaking
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorStakingGetAccumulatorScaleFactorFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingGetAccumulatorScaleFactorFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingGetAccumulatorScaleFactorFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingGetAccumulatorScaleFactorFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingGetAccumulatorScaleFactorFunc) appendCall(r0 IValidatorStakingGetAccumulatorScaleFactorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingGetAccumulatorScaleFactorFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingGetAccumulatorScaleFactorFunc) History() []IValidatorStakingGetAccumulatorScaleFactorFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingGetAccumulatorScaleFactorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingGetAccumulatorScaleFactorFuncCall is an object that
// describes an invocation of method GetAccumulatorScaleFactor on an
// instance of MockIValidatorStaking.
type IValidatorStakingGetAccumulatorScaleFactorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingGetAccumulatorScaleFactorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingGetAccumulatorScaleFactorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingGetApprovedFunc describes the behavior when the
// GetApproved method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingGetApprovedFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (common.Address, error)
	hooks       []func(*bind.CallOpts, *big.Int) (common.Address, error)
	history     []IValidatorStakingGetApprovedFuncCall
	mutex       sync.Mutex
}

// GetApproved delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) GetApproved(v0 *bind.CallOpts, v1 *big.Int) (common.Address, error) {
	r0, r1 := m.GetApprovedFunc.nextHook()(v0, v1)
	m.GetApprovedFunc.appendCall(IValidatorStakingGetApprovedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetApproved method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingGetApprovedFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetApproved method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingGetApprovedFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingGetApprovedFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingGetApprovedFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (common.Address, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingGetApprovedFunc) nextHook() func(*bind.CallOpts, *big.Int) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingGetApprovedFunc) appendCall(r0 IValidatorStakingGetApprovedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingGetApprovedFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingGetApprovedFunc) History() []IValidatorStakingGetApprovedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingGetApprovedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingGetApprovedFuncCall is an object that describes an
// invocation of method GetApproved on an instance of MockIValidatorStaking.
type IValidatorStakingGetApprovedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingGetApprovedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingGetApprovedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingGetEthAccumulatorFunc describes the behavior when the
// GetEthAccumulator method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingGetEthAccumulatorFunc struct {
	defaultHook func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error)
	hooks []func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error)
	history []IValidatorStakingGetEthAccumulatorFuncCall
	mutex   sync.Mutex
}

// GetEthAccumulator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) GetEthAccumulator(v0 *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	r0, r1 := m.GetEthAccumulatorFunc.nextHook()(v0)
	m.GetEthAccumulatorFunc.appendCall(IValidatorStakingGetEthAccumulatorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetEthAccumulator
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingGetEthAccumulatorFunc) SetDefaultHook(hook func(*bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEthAccumulator method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingGetEthAccumulatorFunc) PushHook(hook func(*bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingGetEthAccumulatorFunc) SetDefaultReturn(r0 struct {
	Accumulator *big.Int
	Slush       *big.Int
}, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingGetEthAccumulatorFunc) PushReturn(r0 struct {
	Accumulator *big.Int
	Slush       *big.Int
}, r1 error) {
	f.PushHook(func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingGetEthAccumulatorFunc) nextHook() func(*bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingGetEthAccumulatorFunc) appendCall(r0 IValidatorStakingGetEthAccumulatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingGetEthAccumulatorFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingGetEthAccumulatorFunc) History() []IValidatorStakingGetEthAccumulatorFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingGetEthAccumulatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingGetEthAccumulatorFuncCall is an object that describes an
// invocation of method GetEthAccumulator on an instance of
// MockIValidatorStaking.
type IValidatorStakingGetEthAccumulatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 struct {
		Accumulator *big.Int
		Slush       *big.Int
	}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingGetEthAccumulatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingGetEthAccumulatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingGetLatestMintedPositionIDFunc describes the behavior
// when the GetLatestMintedPositionID method of the parent
// MockIValidatorStaking instance is invoked.
type IValidatorStakingGetLatestMintedPositionIDFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorStakingGetLatestMintedPositionIDFuncCall
	mutex       sync.Mutex
}

// GetLatestMintedPositionID delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) GetLatestMintedPositionID(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetLatestMintedPositionIDFunc.nextHook()(v0)
	m.GetLatestMintedPositionIDFunc.appendCall(IValidatorStakingGetLatestMintedPositionIDFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLatestMintedPositionID method of the parent MockIValidatorStaking
// instance is invoked and the hook queue is empty.
func (f *IValidatorStakingGetLatestMintedPositionIDFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestMintedPositionID method of the parent MockIValidatorStaking
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorStakingGetLatestMintedPositionIDFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingGetLatestMintedPositionIDFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingGetLatestMintedPositionIDFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingGetLatestMintedPositionIDFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingGetLatestMintedPositionIDFunc) appendCall(r0 IValidatorStakingGetLatestMintedPositionIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingGetLatestMintedPositionIDFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingGetLatestMintedPositionIDFunc) History() []IValidatorStakingGetLatestMintedPositionIDFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingGetLatestMintedPositionIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingGetLatestMintedPositionIDFuncCall is an object that
// describes an invocation of method GetLatestMintedPositionID on an
// instance of MockIValidatorStaking.
type IValidatorStakingGetLatestMintedPositionIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingGetLatestMintedPositionIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingGetLatestMintedPositionIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingGetMaxGovernanceLockFunc describes the behavior when the
// GetMaxGovernanceLock method of the parent MockIValidatorStaking instance
// is invoked.
type IValidatorStakingGetMaxGovernanceLockFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorStakingGetMaxGovernanceLockFuncCall
	mutex       sync.Mutex
}

// GetMaxGovernanceLock delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) GetMaxGovernanceLock(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetMaxGovernanceLockFunc.nextHook()(v0)
	m.GetMaxGovernanceLockFunc.appendCall(IValidatorStakingGetMaxGovernanceLockFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetMaxGovernanceLock
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingGetMaxGovernanceLockFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMaxGovernanceLock method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingGetMaxGovernanceLockFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingGetMaxGovernanceLockFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingGetMaxGovernanceLockFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingGetMaxGovernanceLockFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingGetMaxGovernanceLockFunc) appendCall(r0 IValidatorStakingGetMaxGovernanceLockFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingGetMaxGovernanceLockFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingGetMaxGovernanceLockFunc) History() []IValidatorStakingGetMaxGovernanceLockFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingGetMaxGovernanceLockFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingGetMaxGovernanceLockFuncCall is an object that describes
// an invocation of method GetMaxGovernanceLock on an instance of
// MockIValidatorStaking.
type IValidatorStakingGetMaxGovernanceLockFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingGetMaxGovernanceLockFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingGetMaxGovernanceLockFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingGetMaxMintLockFunc describes the behavior when the
// GetMaxMintLock method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingGetMaxMintLockFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorStakingGetMaxMintLockFuncCall
	mutex       sync.Mutex
}

// GetMaxMintLock delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) GetMaxMintLock(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetMaxMintLockFunc.nextHook()(v0)
	m.GetMaxMintLockFunc.appendCall(IValidatorStakingGetMaxMintLockFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetMaxMintLock
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingGetMaxMintLockFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMaxMintLock method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingGetMaxMintLockFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingGetMaxMintLockFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingGetMaxMintLockFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingGetMaxMintLockFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingGetMaxMintLockFunc) appendCall(r0 IValidatorStakingGetMaxMintLockFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingGetMaxMintLockFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingGetMaxMintLockFunc) History() []IValidatorStakingGetMaxMintLockFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingGetMaxMintLockFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingGetMaxMintLockFuncCall is an object that describes an
// invocation of method GetMaxMintLock on an instance of
// MockIValidatorStaking.
type IValidatorStakingGetMaxMintLockFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingGetMaxMintLockFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingGetMaxMintLockFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingGetMetamorphicContractAddressFunc describes the behavior
// when the GetMetamorphicContractAddress method of the parent
// MockIValidatorStaking instance is invoked.
type IValidatorStakingGetMetamorphicContractAddressFunc struct {
	defaultHook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	hooks       []func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)
	history     []IValidatorStakingGetMetamorphicContractAddressFuncCall
	mutex       sync.Mutex
}

// GetMetamorphicContractAddress delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) GetMetamorphicContractAddress(v0 *bind.CallOpts, v1 [32]byte, v2 common.Address) (common.Address, error) {
	r0, r1 := m.GetMetamorphicContractAddressFunc.nextHook()(v0, v1, v2)
	m.GetMetamorphicContractAddressFunc.appendCall(IValidatorStakingGetMetamorphicContractAddressFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMetamorphicContractAddress method of the parent MockIValidatorStaking
// instance is invoked and the hook queue is empty.
func (f *IValidatorStakingGetMetamorphicContractAddressFunc) SetDefaultHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMetamorphicContractAddress method of the parent MockIValidatorStaking
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *IValidatorStakingGetMetamorphicContractAddressFunc) PushHook(hook func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingGetMetamorphicContractAddressFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingGetMetamorphicContractAddressFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingGetMetamorphicContractAddressFunc) nextHook() func(*bind.CallOpts, [32]byte, common.Address) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingGetMetamorphicContractAddressFunc) appendCall(r0 IValidatorStakingGetMetamorphicContractAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingGetMetamorphicContractAddressFuncCall objects describing
// the invocations of this function.
func (f *IValidatorStakingGetMetamorphicContractAddressFunc) History() []IValidatorStakingGetMetamorphicContractAddressFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingGetMetamorphicContractAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingGetMetamorphicContractAddressFuncCall is an object that
// describes an invocation of method GetMetamorphicContractAddress on an
// instance of MockIValidatorStaking.
type IValidatorStakingGetMetamorphicContractAddressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [32]byte
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingGetMetamorphicContractAddressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingGetMetamorphicContractAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingGetPositionFunc describes the behavior when the
// GetPosition method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingGetPositionFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	}, error)
	hooks []func(*bind.CallOpts, *big.Int) (struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	}, error)
	history []IValidatorStakingGetPositionFuncCall
	mutex   sync.Mutex
}

// GetPosition delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) GetPosition(v0 *bind.CallOpts, v1 *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	r0, r1 := m.GetPositionFunc.nextHook()(v0, v1)
	m.GetPositionFunc.appendCall(IValidatorStakingGetPositionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPosition method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingGetPositionFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPosition method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingGetPositionFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingGetPositionFunc) SetDefaultReturn(r0 struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	}, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingGetPositionFunc) PushReturn(r0 struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	}, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingGetPositionFunc) nextHook() func(*bind.CallOpts, *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingGetPositionFunc) appendCall(r0 IValidatorStakingGetPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingGetPositionFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingGetPositionFunc) History() []IValidatorStakingGetPositionFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingGetPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingGetPositionFuncCall is an object that describes an
// invocation of method GetPosition on an instance of MockIValidatorStaking.
type IValidatorStakingGetPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingGetPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingGetPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingGetTokenAccumulatorFunc describes the behavior when the
// GetTokenAccumulator method of the parent MockIValidatorStaking instance
// is invoked.
type IValidatorStakingGetTokenAccumulatorFunc struct {
	defaultHook func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error)
	hooks []func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error)
	history []IValidatorStakingGetTokenAccumulatorFuncCall
	mutex   sync.Mutex
}

// GetTokenAccumulator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) GetTokenAccumulator(v0 *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	r0, r1 := m.GetTokenAccumulatorFunc.nextHook()(v0)
	m.GetTokenAccumulatorFunc.appendCall(IValidatorStakingGetTokenAccumulatorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTokenAccumulator
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingGetTokenAccumulatorFunc) SetDefaultHook(hook func(*bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTokenAccumulator method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingGetTokenAccumulatorFunc) PushHook(hook func(*bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingGetTokenAccumulatorFunc) SetDefaultReturn(r0 struct {
	Accumulator *big.Int
	Slush       *big.Int
}, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingGetTokenAccumulatorFunc) PushReturn(r0 struct {
	Accumulator *big.Int
	Slush       *big.Int
}, r1 error) {
	f.PushHook(func(*bind.CallOpts) (struct {
		Accumulator *big.Int
		Slush       *big.Int
	}, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingGetTokenAccumulatorFunc) nextHook() func(*bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingGetTokenAccumulatorFunc) appendCall(r0 IValidatorStakingGetTokenAccumulatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingGetTokenAccumulatorFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingGetTokenAccumulatorFunc) History() []IValidatorStakingGetTokenAccumulatorFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingGetTokenAccumulatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingGetTokenAccumulatorFuncCall is an object that describes
// an invocation of method GetTokenAccumulator on an instance of
// MockIValidatorStaking.
type IValidatorStakingGetTokenAccumulatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 struct {
		Accumulator *big.Int
		Slush       *big.Int
	}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingGetTokenAccumulatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingGetTokenAccumulatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingGetTotalReserveALCAFunc describes the behavior when the
// GetTotalReserveALCA method of the parent MockIValidatorStaking instance
// is invoked.
type IValidatorStakingGetTotalReserveALCAFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorStakingGetTotalReserveALCAFuncCall
	mutex       sync.Mutex
}

// GetTotalReserveALCA delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) GetTotalReserveALCA(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetTotalReserveALCAFunc.nextHook()(v0)
	m.GetTotalReserveALCAFunc.appendCall(IValidatorStakingGetTotalReserveALCAFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTotalReserveALCA
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingGetTotalReserveALCAFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTotalReserveALCA method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingGetTotalReserveALCAFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingGetTotalReserveALCAFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingGetTotalReserveALCAFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingGetTotalReserveALCAFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingGetTotalReserveALCAFunc) appendCall(r0 IValidatorStakingGetTotalReserveALCAFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingGetTotalReserveALCAFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingGetTotalReserveALCAFunc) History() []IValidatorStakingGetTotalReserveALCAFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingGetTotalReserveALCAFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingGetTotalReserveALCAFuncCall is an object that describes
// an invocation of method GetTotalReserveALCA on an instance of
// MockIValidatorStaking.
type IValidatorStakingGetTotalReserveALCAFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingGetTotalReserveALCAFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingGetTotalReserveALCAFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingGetTotalReserveEthFunc describes the behavior when the
// GetTotalReserveEth method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingGetTotalReserveEthFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorStakingGetTotalReserveEthFuncCall
	mutex       sync.Mutex
}

// GetTotalReserveEth delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) GetTotalReserveEth(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetTotalReserveEthFunc.nextHook()(v0)
	m.GetTotalReserveEthFunc.appendCall(IValidatorStakingGetTotalReserveEthFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTotalReserveEth
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingGetTotalReserveEthFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTotalReserveEth method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingGetTotalReserveEthFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingGetTotalReserveEthFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingGetTotalReserveEthFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingGetTotalReserveEthFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingGetTotalReserveEthFunc) appendCall(r0 IValidatorStakingGetTotalReserveEthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingGetTotalReserveEthFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingGetTotalReserveEthFunc) History() []IValidatorStakingGetTotalReserveEthFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingGetTotalReserveEthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingGetTotalReserveEthFuncCall is an object that describes
// an invocation of method GetTotalReserveEth on an instance of
// MockIValidatorStaking.
type IValidatorStakingGetTotalReserveEthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingGetTotalReserveEthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingGetTotalReserveEthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingGetTotalSharesFunc describes the behavior when the
// GetTotalShares method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingGetTotalSharesFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorStakingGetTotalSharesFuncCall
	mutex       sync.Mutex
}

// GetTotalShares delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) GetTotalShares(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.GetTotalSharesFunc.nextHook()(v0)
	m.GetTotalSharesFunc.appendCall(IValidatorStakingGetTotalSharesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTotalShares
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingGetTotalSharesFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTotalShares method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingGetTotalSharesFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingGetTotalSharesFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingGetTotalSharesFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingGetTotalSharesFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingGetTotalSharesFunc) appendCall(r0 IValidatorStakingGetTotalSharesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingGetTotalSharesFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingGetTotalSharesFunc) History() []IValidatorStakingGetTotalSharesFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingGetTotalSharesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingGetTotalSharesFuncCall is an object that describes an
// invocation of method GetTotalShares on an instance of
// MockIValidatorStaking.
type IValidatorStakingGetTotalSharesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingGetTotalSharesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingGetTotalSharesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingInitializeFunc describes the behavior when the
// Initialize method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingInitializeFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IValidatorStakingInitializeFuncCall
	mutex       sync.Mutex
}

// Initialize delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) Initialize(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.InitializeFunc.nextHook()(v0)
	m.InitializeFunc.appendCall(IValidatorStakingInitializeFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Initialize method of
// the parent MockIValidatorStaking instance is invoked and the hook queue
// is empty.
func (f *IValidatorStakingInitializeFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Initialize method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingInitializeFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingInitializeFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingInitializeFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingInitializeFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingInitializeFunc) appendCall(r0 IValidatorStakingInitializeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingInitializeFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingInitializeFunc) History() []IValidatorStakingInitializeFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingInitializeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingInitializeFuncCall is an object that describes an
// invocation of method Initialize on an instance of MockIValidatorStaking.
type IValidatorStakingInitializeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingInitializeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingInitializeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingIsApprovedForAllFunc describes the behavior when the
// IsApprovedForAll method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingIsApprovedForAllFunc struct {
	defaultHook func(*bind.CallOpts, common.Address, common.Address) (bool, error)
	hooks       []func(*bind.CallOpts, common.Address, common.Address) (bool, error)
	history     []IValidatorStakingIsApprovedForAllFuncCall
	mutex       sync.Mutex
}

// IsApprovedForAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) IsApprovedForAll(v0 *bind.CallOpts, v1 common.Address, v2 common.Address) (bool, error) {
	r0, r1 := m.IsApprovedForAllFunc.nextHook()(v0, v1, v2)
	m.IsApprovedForAllFunc.appendCall(IValidatorStakingIsApprovedForAllFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsApprovedForAll
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingIsApprovedForAllFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address, common.Address) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsApprovedForAll method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingIsApprovedForAllFunc) PushHook(hook func(*bind.CallOpts, common.Address, common.Address) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingIsApprovedForAllFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address, common.Address) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingIsApprovedForAllFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address, common.Address) (bool, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingIsApprovedForAllFunc) nextHook() func(*bind.CallOpts, common.Address, common.Address) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingIsApprovedForAllFunc) appendCall(r0 IValidatorStakingIsApprovedForAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingIsApprovedForAllFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingIsApprovedForAllFunc) History() []IValidatorStakingIsApprovedForAllFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingIsApprovedForAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingIsApprovedForAllFuncCall is an object that describes an
// invocation of method IsApprovedForAll on an instance of
// MockIValidatorStaking.
type IValidatorStakingIsApprovedForAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingIsApprovedForAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingIsApprovedForAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingLockOwnPositionFunc describes the behavior when the
// LockOwnPosition method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingLockOwnPositionFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingLockOwnPositionFuncCall
	mutex       sync.Mutex
}

// LockOwnPosition delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) LockOwnPosition(v0 *bind.TransactOpts, v1 *big.Int, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.LockOwnPositionFunc.nextHook()(v0, v1, v2)
	m.LockOwnPositionFunc.appendCall(IValidatorStakingLockOwnPositionFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LockOwnPosition
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingLockOwnPositionFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LockOwnPosition method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingLockOwnPositionFunc) PushHook(hook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingLockOwnPositionFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingLockOwnPositionFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingLockOwnPositionFunc) nextHook() func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingLockOwnPositionFunc) appendCall(r0 IValidatorStakingLockOwnPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingLockOwnPositionFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingLockOwnPositionFunc) History() []IValidatorStakingLockOwnPositionFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingLockOwnPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingLockOwnPositionFuncCall is an object that describes an
// invocation of method LockOwnPosition on an instance of
// MockIValidatorStaking.
type IValidatorStakingLockOwnPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingLockOwnPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingLockOwnPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingLockPositionFunc describes the behavior when the
// LockPosition method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingLockPositionFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingLockPositionFuncCall
	mutex       sync.Mutex
}

// LockPosition delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) LockPosition(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.LockPositionFunc.nextHook()(v0, v1, v2, v3)
	m.LockPositionFunc.appendCall(IValidatorStakingLockPositionFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LockPosition method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingLockPositionFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LockPosition method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingLockPositionFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingLockPositionFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingLockPositionFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingLockPositionFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingLockPositionFunc) appendCall(r0 IValidatorStakingLockPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingLockPositionFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingLockPositionFunc) History() []IValidatorStakingLockPositionFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingLockPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingLockPositionFuncCall is an object that describes an
// invocation of method LockPosition on an instance of
// MockIValidatorStaking.
type IValidatorStakingLockPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingLockPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingLockPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingLockWithdrawFunc describes the behavior when the
// LockWithdraw method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingLockWithdrawFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingLockWithdrawFuncCall
	mutex       sync.Mutex
}

// LockWithdraw delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) LockWithdraw(v0 *bind.TransactOpts, v1 *big.Int, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.LockWithdrawFunc.nextHook()(v0, v1, v2)
	m.LockWithdrawFunc.appendCall(IValidatorStakingLockWithdrawFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LockWithdraw method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingLockWithdrawFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LockWithdraw method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingLockWithdrawFunc) PushHook(hook func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingLockWithdrawFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingLockWithdrawFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingLockWithdrawFunc) nextHook() func(*bind.TransactOpts, *big.Int, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingLockWithdrawFunc) appendCall(r0 IValidatorStakingLockWithdrawFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingLockWithdrawFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingLockWithdrawFunc) History() []IValidatorStakingLockWithdrawFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingLockWithdrawFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingLockWithdrawFuncCall is an object that describes an
// invocation of method LockWithdraw on an instance of
// MockIValidatorStaking.
type IValidatorStakingLockWithdrawFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingLockWithdrawFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingLockWithdrawFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingMintFunc describes the behavior when the Mint method of
// the parent MockIValidatorStaking instance is invoked.
type IValidatorStakingMintFunc struct {
	defaultHook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingMintFuncCall
	mutex       sync.Mutex
}

// Mint delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIValidatorStaking) Mint(v0 *bind.TransactOpts, v1 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.MintFunc.nextHook()(v0, v1)
	m.MintFunc.appendCall(IValidatorStakingMintFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Mint method of the
// parent MockIValidatorStaking instance is invoked and the hook queue is
// empty.
func (f *IValidatorStakingMintFunc) SetDefaultHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Mint method of the parent MockIValidatorStaking instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IValidatorStakingMintFunc) PushHook(hook func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingMintFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingMintFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingMintFunc) nextHook() func(*bind.TransactOpts, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingMintFunc) appendCall(r0 IValidatorStakingMintFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingMintFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingMintFunc) History() []IValidatorStakingMintFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingMintFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingMintFuncCall is an object that describes an invocation
// of method Mint on an instance of MockIValidatorStaking.
type IValidatorStakingMintFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingMintFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingMintFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingMintToFunc describes the behavior when the MintTo method
// of the parent MockIValidatorStaking instance is invoked.
type IValidatorStakingMintToFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingMintToFuncCall
	mutex       sync.Mutex
}

// MintTo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIValidatorStaking) MintTo(v0 *bind.TransactOpts, v1 common.Address, v2 *big.Int, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.MintToFunc.nextHook()(v0, v1, v2, v3)
	m.MintToFunc.appendCall(IValidatorStakingMintToFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MintTo method of the
// parent MockIValidatorStaking instance is invoked and the hook queue is
// empty.
func (f *IValidatorStakingMintToFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MintTo method of the parent MockIValidatorStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorStakingMintToFunc) PushHook(hook func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingMintToFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingMintToFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingMintToFunc) nextHook() func(*bind.TransactOpts, common.Address, *big.Int, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingMintToFunc) appendCall(r0 IValidatorStakingMintToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingMintToFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingMintToFunc) History() []IValidatorStakingMintToFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingMintToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingMintToFuncCall is an object that describes an invocation
// of method MintTo on an instance of MockIValidatorStaking.
type IValidatorStakingMintToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingMintToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingMintToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingNameFunc describes the behavior when the Name method of
// the parent MockIValidatorStaking instance is invoked.
type IValidatorStakingNameFunc struct {
	defaultHook func(*bind.CallOpts) (string, error)
	hooks       []func(*bind.CallOpts) (string, error)
	history     []IValidatorStakingNameFuncCall
	mutex       sync.Mutex
}

// Name delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIValidatorStaking) Name(v0 *bind.CallOpts) (string, error) {
	r0, r1 := m.NameFunc.nextHook()(v0)
	m.NameFunc.appendCall(IValidatorStakingNameFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Name method of the
// parent MockIValidatorStaking instance is invoked and the hook queue is
// empty.
func (f *IValidatorStakingNameFunc) SetDefaultHook(hook func(*bind.CallOpts) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Name method of the parent MockIValidatorStaking instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IValidatorStakingNameFunc) PushHook(hook func(*bind.CallOpts) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingNameFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingNameFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingNameFunc) nextHook() func(*bind.CallOpts) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingNameFunc) appendCall(r0 IValidatorStakingNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingNameFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingNameFunc) History() []IValidatorStakingNameFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingNameFuncCall is an object that describes an invocation
// of method Name on an instance of MockIValidatorStaking.
type IValidatorStakingNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingOwnerOfFunc describes the behavior when the OwnerOf
// method of the parent MockIValidatorStaking instance is invoked.
type IValidatorStakingOwnerOfFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (common.Address, error)
	hooks       []func(*bind.CallOpts, *big.Int) (common.Address, error)
	history     []IValidatorStakingOwnerOfFuncCall
	mutex       sync.Mutex
}

// OwnerOf delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIValidatorStaking) OwnerOf(v0 *bind.CallOpts, v1 *big.Int) (common.Address, error) {
	r0, r1 := m.OwnerOfFunc.nextHook()(v0, v1)
	m.OwnerOfFunc.appendCall(IValidatorStakingOwnerOfFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the OwnerOf method of
// the parent MockIValidatorStaking instance is invoked and the hook queue
// is empty.
func (f *IValidatorStakingOwnerOfFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OwnerOf method of the parent MockIValidatorStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorStakingOwnerOfFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingOwnerOfFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingOwnerOfFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (common.Address, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingOwnerOfFunc) nextHook() func(*bind.CallOpts, *big.Int) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingOwnerOfFunc) appendCall(r0 IValidatorStakingOwnerOfFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingOwnerOfFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingOwnerOfFunc) History() []IValidatorStakingOwnerOfFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingOwnerOfFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingOwnerOfFuncCall is an object that describes an
// invocation of method OwnerOf on an instance of MockIValidatorStaking.
type IValidatorStakingOwnerOfFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingOwnerOfFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingOwnerOfFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingParseApprovalFunc describes the behavior when the
// ParseApproval method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingParseApprovalFunc struct {
	defaultHook func(types.Log) (*bindings.ValidatorStakingApproval, error)
	hooks       []func(types.Log) (*bindings.ValidatorStakingApproval, error)
	history     []IValidatorStakingParseApprovalFuncCall
	mutex       sync.Mutex
}

// ParseApproval delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) ParseApproval(v0 types.Log) (*bindings.ValidatorStakingApproval, error) {
	r0, r1 := m.ParseApprovalFunc.nextHook()(v0)
	m.ParseApprovalFunc.appendCall(IValidatorStakingParseApprovalFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseApproval method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingParseApprovalFunc) SetDefaultHook(hook func(types.Log) (*bindings.ValidatorStakingApproval, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseApproval method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingParseApprovalFunc) PushHook(hook func(types.Log) (*bindings.ValidatorStakingApproval, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingParseApprovalFunc) SetDefaultReturn(r0 *bindings.ValidatorStakingApproval, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ValidatorStakingApproval, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingParseApprovalFunc) PushReturn(r0 *bindings.ValidatorStakingApproval, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ValidatorStakingApproval, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingParseApprovalFunc) nextHook() func(types.Log) (*bindings.ValidatorStakingApproval, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingParseApprovalFunc) appendCall(r0 IValidatorStakingParseApprovalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingParseApprovalFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingParseApprovalFunc) History() []IValidatorStakingParseApprovalFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingParseApprovalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingParseApprovalFuncCall is an object that describes an
// invocation of method ParseApproval on an instance of
// MockIValidatorStaking.
type IValidatorStakingParseApprovalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorStakingApproval
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingParseApprovalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingParseApprovalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingParseApprovalForAllFunc describes the behavior when the
// ParseApprovalForAll method of the parent MockIValidatorStaking instance
// is invoked.
type IValidatorStakingParseApprovalForAllFunc struct {
	defaultHook func(types.Log) (*bindings.ValidatorStakingApprovalForAll, error)
	hooks       []func(types.Log) (*bindings.ValidatorStakingApprovalForAll, error)
	history     []IValidatorStakingParseApprovalForAllFuncCall
	mutex       sync.Mutex
}

// ParseApprovalForAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) ParseApprovalForAll(v0 types.Log) (*bindings.ValidatorStakingApprovalForAll, error) {
	r0, r1 := m.ParseApprovalForAllFunc.nextHook()(v0)
	m.ParseApprovalForAllFunc.appendCall(IValidatorStakingParseApprovalForAllFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseApprovalForAll
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingParseApprovalForAllFunc) SetDefaultHook(hook func(types.Log) (*bindings.ValidatorStakingApprovalForAll, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseApprovalForAll method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingParseApprovalForAllFunc) PushHook(hook func(types.Log) (*bindings.ValidatorStakingApprovalForAll, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingParseApprovalForAllFunc) SetDefaultReturn(r0 *bindings.ValidatorStakingApprovalForAll, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ValidatorStakingApprovalForAll, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingParseApprovalForAllFunc) PushReturn(r0 *bindings.ValidatorStakingApprovalForAll, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ValidatorStakingApprovalForAll, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingParseApprovalForAllFunc) nextHook() func(types.Log) (*bindings.ValidatorStakingApprovalForAll, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingParseApprovalForAllFunc) appendCall(r0 IValidatorStakingParseApprovalForAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingParseApprovalForAllFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingParseApprovalForAllFunc) History() []IValidatorStakingParseApprovalForAllFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingParseApprovalForAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingParseApprovalForAllFuncCall is an object that describes
// an invocation of method ParseApprovalForAll on an instance of
// MockIValidatorStaking.
type IValidatorStakingParseApprovalForAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorStakingApprovalForAll
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingParseApprovalForAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingParseApprovalForAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingParseInitializedFunc describes the behavior when the
// ParseInitialized method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingParseInitializedFunc struct {
	defaultHook func(types.Log) (*bindings.ValidatorStakingInitialized, error)
	hooks       []func(types.Log) (*bindings.ValidatorStakingInitialized, error)
	history     []IValidatorStakingParseInitializedFuncCall
	mutex       sync.Mutex
}

// ParseInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) ParseInitialized(v0 types.Log) (*bindings.ValidatorStakingInitialized, error) {
	r0, r1 := m.ParseInitializedFunc.nextHook()(v0)
	m.ParseInitializedFunc.appendCall(IValidatorStakingParseInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseInitialized
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingParseInitializedFunc) SetDefaultHook(hook func(types.Log) (*bindings.ValidatorStakingInitialized, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseInitialized method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingParseInitializedFunc) PushHook(hook func(types.Log) (*bindings.ValidatorStakingInitialized, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingParseInitializedFunc) SetDefaultReturn(r0 *bindings.ValidatorStakingInitialized, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ValidatorStakingInitialized, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingParseInitializedFunc) PushReturn(r0 *bindings.ValidatorStakingInitialized, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ValidatorStakingInitialized, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingParseInitializedFunc) nextHook() func(types.Log) (*bindings.ValidatorStakingInitialized, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingParseInitializedFunc) appendCall(r0 IValidatorStakingParseInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingParseInitializedFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingParseInitializedFunc) History() []IValidatorStakingParseInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingParseInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingParseInitializedFuncCall is an object that describes an
// invocation of method ParseInitialized on an instance of
// MockIValidatorStaking.
type IValidatorStakingParseInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorStakingInitialized
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingParseInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingParseInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingParseTransferFunc describes the behavior when the
// ParseTransfer method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingParseTransferFunc struct {
	defaultHook func(types.Log) (*bindings.ValidatorStakingTransfer, error)
	hooks       []func(types.Log) (*bindings.ValidatorStakingTransfer, error)
	history     []IValidatorStakingParseTransferFuncCall
	mutex       sync.Mutex
}

// ParseTransfer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) ParseTransfer(v0 types.Log) (*bindings.ValidatorStakingTransfer, error) {
	r0, r1 := m.ParseTransferFunc.nextHook()(v0)
	m.ParseTransferFunc.appendCall(IValidatorStakingParseTransferFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ParseTransfer method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingParseTransferFunc) SetDefaultHook(hook func(types.Log) (*bindings.ValidatorStakingTransfer, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParseTransfer method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingParseTransferFunc) PushHook(hook func(types.Log) (*bindings.ValidatorStakingTransfer, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingParseTransferFunc) SetDefaultReturn(r0 *bindings.ValidatorStakingTransfer, r1 error) {
	f.SetDefaultHook(func(types.Log) (*bindings.ValidatorStakingTransfer, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingParseTransferFunc) PushReturn(r0 *bindings.ValidatorStakingTransfer, r1 error) {
	f.PushHook(func(types.Log) (*bindings.ValidatorStakingTransfer, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingParseTransferFunc) nextHook() func(types.Log) (*bindings.ValidatorStakingTransfer, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingParseTransferFunc) appendCall(r0 IValidatorStakingParseTransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingParseTransferFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingParseTransferFunc) History() []IValidatorStakingParseTransferFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingParseTransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingParseTransferFuncCall is an object that describes an
// invocation of method ParseTransfer on an instance of
// MockIValidatorStaking.
type IValidatorStakingParseTransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bindings.ValidatorStakingTransfer
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingParseTransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingParseTransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingSafeTransferFromFunc describes the behavior when the
// SafeTransferFrom method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingSafeTransferFromFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingSafeTransferFromFuncCall
	mutex       sync.Mutex
}

// SafeTransferFrom delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) SafeTransferFrom(v0 *bind.TransactOpts, v1 common.Address, v2 common.Address, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.SafeTransferFromFunc.nextHook()(v0, v1, v2, v3)
	m.SafeTransferFromFunc.appendCall(IValidatorStakingSafeTransferFromFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SafeTransferFrom
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingSafeTransferFromFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SafeTransferFrom method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingSafeTransferFromFunc) PushHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingSafeTransferFromFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingSafeTransferFromFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingSafeTransferFromFunc) nextHook() func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingSafeTransferFromFunc) appendCall(r0 IValidatorStakingSafeTransferFromFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingSafeTransferFromFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingSafeTransferFromFunc) History() []IValidatorStakingSafeTransferFromFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingSafeTransferFromFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingSafeTransferFromFuncCall is an object that describes an
// invocation of method SafeTransferFrom on an instance of
// MockIValidatorStaking.
type IValidatorStakingSafeTransferFromFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingSafeTransferFromFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingSafeTransferFromFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingSafeTransferFrom0Func describes the behavior when the
// SafeTransferFrom0 method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingSafeTransferFrom0Func struct {
	defaultHook func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error)
	history     []IValidatorStakingSafeTransferFrom0FuncCall
	mutex       sync.Mutex
}

// SafeTransferFrom0 delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) SafeTransferFrom0(v0 *bind.TransactOpts, v1 common.Address, v2 common.Address, v3 *big.Int, v4 []byte) (*types.Transaction, error) {
	r0, r1 := m.SafeTransferFrom0Func.nextHook()(v0, v1, v2, v3, v4)
	m.SafeTransferFrom0Func.appendCall(IValidatorStakingSafeTransferFrom0FuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SafeTransferFrom0
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingSafeTransferFrom0Func) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SafeTransferFrom0 method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingSafeTransferFrom0Func) PushHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingSafeTransferFrom0Func) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingSafeTransferFrom0Func) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingSafeTransferFrom0Func) nextHook() func(*bind.TransactOpts, common.Address, common.Address, *big.Int, []byte) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingSafeTransferFrom0Func) appendCall(r0 IValidatorStakingSafeTransferFrom0FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingSafeTransferFrom0FuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingSafeTransferFrom0Func) History() []IValidatorStakingSafeTransferFrom0FuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingSafeTransferFrom0FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingSafeTransferFrom0FuncCall is an object that describes an
// invocation of method SafeTransferFrom0 on an instance of
// MockIValidatorStaking.
type IValidatorStakingSafeTransferFrom0FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingSafeTransferFrom0FuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingSafeTransferFrom0FuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingSetApprovalForAllFunc describes the behavior when the
// SetApprovalForAll method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingSetApprovalForAllFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error)
	history     []IValidatorStakingSetApprovalForAllFuncCall
	mutex       sync.Mutex
}

// SetApprovalForAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) SetApprovalForAll(v0 *bind.TransactOpts, v1 common.Address, v2 bool) (*types.Transaction, error) {
	r0, r1 := m.SetApprovalForAllFunc.nextHook()(v0, v1, v2)
	m.SetApprovalForAllFunc.appendCall(IValidatorStakingSetApprovalForAllFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetApprovalForAll
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingSetApprovalForAllFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetApprovalForAll method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingSetApprovalForAllFunc) PushHook(hook func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingSetApprovalForAllFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingSetApprovalForAllFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingSetApprovalForAllFunc) nextHook() func(*bind.TransactOpts, common.Address, bool) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingSetApprovalForAllFunc) appendCall(r0 IValidatorStakingSetApprovalForAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingSetApprovalForAllFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingSetApprovalForAllFunc) History() []IValidatorStakingSetApprovalForAllFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingSetApprovalForAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingSetApprovalForAllFuncCall is an object that describes an
// invocation of method SetApprovalForAll on an instance of
// MockIValidatorStaking.
type IValidatorStakingSetApprovalForAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingSetApprovalForAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingSetApprovalForAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingSkimExcessEthFunc describes the behavior when the
// SkimExcessEth method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingSkimExcessEthFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	history     []IValidatorStakingSkimExcessEthFuncCall
	mutex       sync.Mutex
}

// SkimExcessEth delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) SkimExcessEth(v0 *bind.TransactOpts, v1 common.Address) (*types.Transaction, error) {
	r0, r1 := m.SkimExcessEthFunc.nextHook()(v0, v1)
	m.SkimExcessEthFunc.appendCall(IValidatorStakingSkimExcessEthFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SkimExcessEth method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingSkimExcessEthFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SkimExcessEth method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingSkimExcessEthFunc) PushHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingSkimExcessEthFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingSkimExcessEthFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingSkimExcessEthFunc) nextHook() func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingSkimExcessEthFunc) appendCall(r0 IValidatorStakingSkimExcessEthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingSkimExcessEthFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingSkimExcessEthFunc) History() []IValidatorStakingSkimExcessEthFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingSkimExcessEthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingSkimExcessEthFuncCall is an object that describes an
// invocation of method SkimExcessEth on an instance of
// MockIValidatorStaking.
type IValidatorStakingSkimExcessEthFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingSkimExcessEthFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingSkimExcessEthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingSkimExcessTokenFunc describes the behavior when the
// SkimExcessToken method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingSkimExcessTokenFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address) (*types.Transaction, error)
	history     []IValidatorStakingSkimExcessTokenFuncCall
	mutex       sync.Mutex
}

// SkimExcessToken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) SkimExcessToken(v0 *bind.TransactOpts, v1 common.Address) (*types.Transaction, error) {
	r0, r1 := m.SkimExcessTokenFunc.nextHook()(v0, v1)
	m.SkimExcessTokenFunc.appendCall(IValidatorStakingSkimExcessTokenFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SkimExcessToken
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingSkimExcessTokenFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SkimExcessToken method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingSkimExcessTokenFunc) PushHook(hook func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingSkimExcessTokenFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingSkimExcessTokenFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingSkimExcessTokenFunc) nextHook() func(*bind.TransactOpts, common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingSkimExcessTokenFunc) appendCall(r0 IValidatorStakingSkimExcessTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingSkimExcessTokenFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingSkimExcessTokenFunc) History() []IValidatorStakingSkimExcessTokenFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingSkimExcessTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingSkimExcessTokenFuncCall is an object that describes an
// invocation of method SkimExcessToken on an instance of
// MockIValidatorStaking.
type IValidatorStakingSkimExcessTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingSkimExcessTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingSkimExcessTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingSupportsInterfaceFunc describes the behavior when the
// SupportsInterface method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingSupportsInterfaceFunc struct {
	defaultHook func(*bind.CallOpts, [4]byte) (bool, error)
	hooks       []func(*bind.CallOpts, [4]byte) (bool, error)
	history     []IValidatorStakingSupportsInterfaceFuncCall
	mutex       sync.Mutex
}

// SupportsInterface delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) SupportsInterface(v0 *bind.CallOpts, v1 [4]byte) (bool, error) {
	r0, r1 := m.SupportsInterfaceFunc.nextHook()(v0, v1)
	m.SupportsInterfaceFunc.appendCall(IValidatorStakingSupportsInterfaceFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SupportsInterface
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingSupportsInterfaceFunc) SetDefaultHook(hook func(*bind.CallOpts, [4]byte) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SupportsInterface method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingSupportsInterfaceFunc) PushHook(hook func(*bind.CallOpts, [4]byte) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingSupportsInterfaceFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, [4]byte) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingSupportsInterfaceFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(*bind.CallOpts, [4]byte) (bool, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingSupportsInterfaceFunc) nextHook() func(*bind.CallOpts, [4]byte) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingSupportsInterfaceFunc) appendCall(r0 IValidatorStakingSupportsInterfaceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingSupportsInterfaceFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingSupportsInterfaceFunc) History() []IValidatorStakingSupportsInterfaceFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingSupportsInterfaceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingSupportsInterfaceFuncCall is an object that describes an
// invocation of method SupportsInterface on an instance of
// MockIValidatorStaking.
type IValidatorStakingSupportsInterfaceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 [4]byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingSupportsInterfaceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingSupportsInterfaceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingSymbolFunc describes the behavior when the Symbol method
// of the parent MockIValidatorStaking instance is invoked.
type IValidatorStakingSymbolFunc struct {
	defaultHook func(*bind.CallOpts) (string, error)
	hooks       []func(*bind.CallOpts) (string, error)
	history     []IValidatorStakingSymbolFuncCall
	mutex       sync.Mutex
}

// Symbol delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIValidatorStaking) Symbol(v0 *bind.CallOpts) (string, error) {
	r0, r1 := m.SymbolFunc.nextHook()(v0)
	m.SymbolFunc.appendCall(IValidatorStakingSymbolFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Symbol method of the
// parent MockIValidatorStaking instance is invoked and the hook queue is
// empty.
func (f *IValidatorStakingSymbolFunc) SetDefaultHook(hook func(*bind.CallOpts) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Symbol method of the parent MockIValidatorStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorStakingSymbolFunc) PushHook(hook func(*bind.CallOpts) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingSymbolFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingSymbolFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(*bind.CallOpts) (string, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingSymbolFunc) nextHook() func(*bind.CallOpts) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingSymbolFunc) appendCall(r0 IValidatorStakingSymbolFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingSymbolFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingSymbolFunc) History() []IValidatorStakingSymbolFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingSymbolFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingSymbolFuncCall is an object that describes an invocation
// of method Symbol on an instance of MockIValidatorStaking.
type IValidatorStakingSymbolFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingSymbolFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingSymbolFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingTokenByIndexFunc describes the behavior when the
// TokenByIndex method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingTokenByIndexFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, *big.Int) (*big.Int, error)
	history     []IValidatorStakingTokenByIndexFuncCall
	mutex       sync.Mutex
}

// TokenByIndex delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) TokenByIndex(v0 *bind.CallOpts, v1 *big.Int) (*big.Int, error) {
	r0, r1 := m.TokenByIndexFunc.nextHook()(v0, v1)
	m.TokenByIndexFunc.appendCall(IValidatorStakingTokenByIndexFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TokenByIndex method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingTokenByIndexFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TokenByIndex method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingTokenByIndexFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingTokenByIndexFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingTokenByIndexFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingTokenByIndexFunc) nextHook() func(*bind.CallOpts, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingTokenByIndexFunc) appendCall(r0 IValidatorStakingTokenByIndexFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingTokenByIndexFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingTokenByIndexFunc) History() []IValidatorStakingTokenByIndexFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingTokenByIndexFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingTokenByIndexFuncCall is an object that describes an
// invocation of method TokenByIndex on an instance of
// MockIValidatorStaking.
type IValidatorStakingTokenByIndexFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingTokenByIndexFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingTokenByIndexFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingTokenOfOwnerByIndexFunc describes the behavior when the
// TokenOfOwnerByIndex method of the parent MockIValidatorStaking instance
// is invoked.
type IValidatorStakingTokenOfOwnerByIndexFunc struct {
	defaultHook func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error)
	hooks       []func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error)
	history     []IValidatorStakingTokenOfOwnerByIndexFuncCall
	mutex       sync.Mutex
}

// TokenOfOwnerByIndex delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) TokenOfOwnerByIndex(v0 *bind.CallOpts, v1 common.Address, v2 *big.Int) (*big.Int, error) {
	r0, r1 := m.TokenOfOwnerByIndexFunc.nextHook()(v0, v1, v2)
	m.TokenOfOwnerByIndexFunc.appendCall(IValidatorStakingTokenOfOwnerByIndexFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TokenOfOwnerByIndex
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingTokenOfOwnerByIndexFunc) SetDefaultHook(hook func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TokenOfOwnerByIndex method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingTokenOfOwnerByIndexFunc) PushHook(hook func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingTokenOfOwnerByIndexFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingTokenOfOwnerByIndexFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingTokenOfOwnerByIndexFunc) nextHook() func(*bind.CallOpts, common.Address, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingTokenOfOwnerByIndexFunc) appendCall(r0 IValidatorStakingTokenOfOwnerByIndexFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingTokenOfOwnerByIndexFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingTokenOfOwnerByIndexFunc) History() []IValidatorStakingTokenOfOwnerByIndexFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingTokenOfOwnerByIndexFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingTokenOfOwnerByIndexFuncCall is an object that describes
// an invocation of method TokenOfOwnerByIndex on an instance of
// MockIValidatorStaking.
type IValidatorStakingTokenOfOwnerByIndexFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingTokenOfOwnerByIndexFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingTokenOfOwnerByIndexFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingTokenURIFunc describes the behavior when the TokenURI
// method of the parent MockIValidatorStaking instance is invoked.
type IValidatorStakingTokenURIFunc struct {
	defaultHook func(*bind.CallOpts, *big.Int) (string, error)
	hooks       []func(*bind.CallOpts, *big.Int) (string, error)
	history     []IValidatorStakingTokenURIFuncCall
	mutex       sync.Mutex
}

// TokenURI delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIValidatorStaking) TokenURI(v0 *bind.CallOpts, v1 *big.Int) (string, error) {
	r0, r1 := m.TokenURIFunc.nextHook()(v0, v1)
	m.TokenURIFunc.appendCall(IValidatorStakingTokenURIFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TokenURI method of
// the parent MockIValidatorStaking instance is invoked and the hook queue
// is empty.
func (f *IValidatorStakingTokenURIFunc) SetDefaultHook(hook func(*bind.CallOpts, *big.Int) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TokenURI method of the parent MockIValidatorStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorStakingTokenURIFunc) PushHook(hook func(*bind.CallOpts, *big.Int) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingTokenURIFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts, *big.Int) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingTokenURIFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(*bind.CallOpts, *big.Int) (string, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingTokenURIFunc) nextHook() func(*bind.CallOpts, *big.Int) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingTokenURIFunc) appendCall(r0 IValidatorStakingTokenURIFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingTokenURIFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingTokenURIFunc) History() []IValidatorStakingTokenURIFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingTokenURIFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingTokenURIFuncCall is an object that describes an
// invocation of method TokenURI on an instance of MockIValidatorStaking.
type IValidatorStakingTokenURIFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingTokenURIFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingTokenURIFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingTotalSupplyFunc describes the behavior when the
// TotalSupply method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingTotalSupplyFunc struct {
	defaultHook func(*bind.CallOpts) (*big.Int, error)
	hooks       []func(*bind.CallOpts) (*big.Int, error)
	history     []IValidatorStakingTotalSupplyFuncCall
	mutex       sync.Mutex
}

// TotalSupply delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) TotalSupply(v0 *bind.CallOpts) (*big.Int, error) {
	r0, r1 := m.TotalSupplyFunc.nextHook()(v0)
	m.TotalSupplyFunc.appendCall(IValidatorStakingTotalSupplyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TotalSupply method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingTotalSupplyFunc) SetDefaultHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TotalSupply method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingTotalSupplyFunc) PushHook(hook func(*bind.CallOpts) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingTotalSupplyFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingTotalSupplyFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(*bind.CallOpts) (*big.Int, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingTotalSupplyFunc) nextHook() func(*bind.CallOpts) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingTotalSupplyFunc) appendCall(r0 IValidatorStakingTotalSupplyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingTotalSupplyFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingTotalSupplyFunc) History() []IValidatorStakingTotalSupplyFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingTotalSupplyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingTotalSupplyFuncCall is an object that describes an
// invocation of method TotalSupply on an instance of MockIValidatorStaking.
type IValidatorStakingTotalSupplyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.CallOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingTotalSupplyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingTotalSupplyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingTransferFromFunc describes the behavior when the
// TransferFrom method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingTransferFromFunc struct {
	defaultHook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)
	history     []IValidatorStakingTransferFromFuncCall
	mutex       sync.Mutex
}

// TransferFrom delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) TransferFrom(v0 *bind.TransactOpts, v1 common.Address, v2 common.Address, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.TransferFromFunc.nextHook()(v0, v1, v2, v3)
	m.TransferFromFunc.appendCall(IValidatorStakingTransferFromFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TransferFrom method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingTransferFromFunc) SetDefaultHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransferFrom method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingTransferFromFunc) PushHook(hook func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingTransferFromFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingTransferFromFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingTransferFromFunc) nextHook() func(*bind.TransactOpts, common.Address, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingTransferFromFunc) appendCall(r0 IValidatorStakingTransferFromFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingTransferFromFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingTransferFromFunc) History() []IValidatorStakingTransferFromFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingTransferFromFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingTransferFromFuncCall is an object that describes an
// invocation of method TransferFrom on an instance of
// MockIValidatorStaking.
type IValidatorStakingTransferFromFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingTransferFromFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingTransferFromFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingTripCBFunc describes the behavior when the TripCB method
// of the parent MockIValidatorStaking instance is invoked.
type IValidatorStakingTripCBFunc struct {
	defaultHook func(*bind.TransactOpts) (*types.Transaction, error)
	hooks       []func(*bind.TransactOpts) (*types.Transaction, error)
	history     []IValidatorStakingTripCBFuncCall
	mutex       sync.Mutex
}

// TripCB delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIValidatorStaking) TripCB(v0 *bind.TransactOpts) (*types.Transaction, error) {
	r0, r1 := m.TripCBFunc.nextHook()(v0)
	m.TripCBFunc.appendCall(IValidatorStakingTripCBFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TripCB method of the
// parent MockIValidatorStaking instance is invoked and the hook queue is
// empty.
func (f *IValidatorStakingTripCBFunc) SetDefaultHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TripCB method of the parent MockIValidatorStaking instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IValidatorStakingTripCBFunc) PushHook(hook func(*bind.TransactOpts) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingTripCBFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingTripCBFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(*bind.TransactOpts) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingTripCBFunc) nextHook() func(*bind.TransactOpts) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingTripCBFunc) appendCall(r0 IValidatorStakingTripCBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingTripCBFuncCall objects
// describing the invocations of this function.
func (f *IValidatorStakingTripCBFunc) History() []IValidatorStakingTripCBFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingTripCBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingTripCBFuncCall is an object that describes an invocation
// of method TripCB on an instance of MockIValidatorStaking.
type IValidatorStakingTripCBFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.TransactOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingTripCBFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingTripCBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingWatchApprovalFunc describes the behavior when the
// WatchApproval method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingWatchApprovalFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)
	history     []IValidatorStakingWatchApprovalFuncCall
	mutex       sync.Mutex
}

// WatchApproval delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) WatchApproval(v0 *bind.WatchOpts, v1 chan<- *bindings.ValidatorStakingApproval, v2 []common.Address, v3 []common.Address, v4 []*big.Int) (event.Subscription, error) {
	r0, r1 := m.WatchApprovalFunc.nextHook()(v0, v1, v2, v3, v4)
	m.WatchApprovalFunc.appendCall(IValidatorStakingWatchApprovalFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchApproval method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingWatchApprovalFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchApproval method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingWatchApprovalFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingWatchApprovalFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingWatchApprovalFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingWatchApprovalFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApproval, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingWatchApprovalFunc) appendCall(r0 IValidatorStakingWatchApprovalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingWatchApprovalFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingWatchApprovalFunc) History() []IValidatorStakingWatchApprovalFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingWatchApprovalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingWatchApprovalFuncCall is an object that describes an
// invocation of method WatchApproval on an instance of
// MockIValidatorStaking.
type IValidatorStakingWatchApprovalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ValidatorStakingApproval
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 []*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingWatchApprovalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingWatchApprovalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingWatchApprovalForAllFunc describes the behavior when the
// WatchApprovalForAll method of the parent MockIValidatorStaking instance
// is invoked.
type IValidatorStakingWatchApprovalForAllFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error)
	history     []IValidatorStakingWatchApprovalForAllFuncCall
	mutex       sync.Mutex
}

// WatchApprovalForAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) WatchApprovalForAll(v0 *bind.WatchOpts, v1 chan<- *bindings.ValidatorStakingApprovalForAll, v2 []common.Address, v3 []common.Address) (event.Subscription, error) {
	r0, r1 := m.WatchApprovalForAllFunc.nextHook()(v0, v1, v2, v3)
	m.WatchApprovalForAllFunc.appendCall(IValidatorStakingWatchApprovalForAllFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchApprovalForAll
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingWatchApprovalForAllFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchApprovalForAll method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingWatchApprovalForAllFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingWatchApprovalForAllFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingWatchApprovalForAllFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingWatchApprovalForAllFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingApprovalForAll, []common.Address, []common.Address) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingWatchApprovalForAllFunc) appendCall(r0 IValidatorStakingWatchApprovalForAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IValidatorStakingWatchApprovalForAllFuncCall objects describing the
// invocations of this function.
func (f *IValidatorStakingWatchApprovalForAllFunc) History() []IValidatorStakingWatchApprovalForAllFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingWatchApprovalForAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingWatchApprovalForAllFuncCall is an object that describes
// an invocation of method WatchApprovalForAll on an instance of
// MockIValidatorStaking.
type IValidatorStakingWatchApprovalForAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ValidatorStakingApprovalForAll
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingWatchApprovalForAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingWatchApprovalForAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingWatchInitializedFunc describes the behavior when the
// WatchInitialized method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingWatchInitializedFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingInitialized) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingInitialized) (event.Subscription, error)
	history     []IValidatorStakingWatchInitializedFuncCall
	mutex       sync.Mutex
}

// WatchInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIValidatorStaking) WatchInitialized(v0 *bind.WatchOpts, v1 chan<- *bindings.ValidatorStakingInitialized) (event.Subscription, error) {
	r0, r1 := m.WatchInitializedFunc.nextHook()(v0, v1)
	m.WatchInitializedFunc.appendCall(IValidatorStakingWatchInitializedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchInitialized
// method of the parent MockIValidatorStaking instance is invoked and the
// hook queue is empty.
func (f *IValidatorStakingWatchInitializedFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingInitialized) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchInitialized method of the parent MockIValidatorStaking instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IValidatorStakingWatchInitializedFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingInitialized) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingWatchInitializedFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingInitialized) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingWatchInitializedFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingInitialized) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingWatchInitializedFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingInitialized) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingWatchInitializedFunc) appendCall(r0 IValidatorStakingWatchInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingWatchInitializedFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingWatchInitializedFunc) History() []IValidatorStakingWatchInitializedFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingWatchInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingWatchInitializedFuncCall is an object that describes an
// invocation of method WatchInitialized on an instance of
// MockIValidatorStaking.
type IValidatorStakingWatchInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ValidatorStakingInitialized
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingWatchInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingWatchInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IValidatorStakingWatchTransferFunc describes the behavior when the
// WatchTransfer method of the parent MockIValidatorStaking instance is
// invoked.
type IValidatorStakingWatchTransferFunc struct {
	defaultHook func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)
	hooks       []func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)
	history     []IValidatorStakingWatchTransferFuncCall
	mutex       sync.Mutex
}

// WatchTransfer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIValidatorStaking) WatchTransfer(v0 *bind.WatchOpts, v1 chan<- *bindings.ValidatorStakingTransfer, v2 []common.Address, v3 []common.Address, v4 []*big.Int) (event.Subscription, error) {
	r0, r1 := m.WatchTransferFunc.nextHook()(v0, v1, v2, v3, v4)
	m.WatchTransferFunc.appendCall(IValidatorStakingWatchTransferFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WatchTransfer method
// of the parent MockIValidatorStaking instance is invoked and the hook
// queue is empty.
func (f *IValidatorStakingWatchTransferFunc) SetDefaultHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WatchTransfer method of the parent MockIValidatorStaking instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IValidatorStakingWatchTransferFunc) PushHook(hook func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IValidatorStakingWatchTransferFunc) SetDefaultReturn(r0 event.Subscription, r1 error) {
	f.SetDefaultHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IValidatorStakingWatchTransferFunc) PushReturn(r0 event.Subscription, r1 error) {
	f.PushHook(func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
		return r0, r1
	})
}

func (f *IValidatorStakingWatchTransferFunc) nextHook() func(*bind.WatchOpts, chan<- *bindings.ValidatorStakingTransfer, []common.Address, []common.Address, []*big.Int) (event.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IValidatorStakingWatchTransferFunc) appendCall(r0 IValidatorStakingWatchTransferFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IValidatorStakingWatchTransferFuncCall
// objects describing the invocations of this function.
func (f *IValidatorStakingWatchTransferFunc) History() []IValidatorStakingWatchTransferFuncCall {
	f.mutex.Lock()
	history := make([]IValidatorStakingWatchTransferFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IValidatorStakingWatchTransferFuncCall is an object that describes an
// invocation of method WatchTransfer on an instance of
// MockIValidatorStaking.
type IValidatorStakingWatchTransferFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bind.WatchOpts
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *bindings.ValidatorStakingTransfer
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []common.Address
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 []*big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 event.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IValidatorStakingWatchTransferFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IValidatorStakingWatchTransferFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
