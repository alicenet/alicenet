// Code generated by go-mockgen 1.3.7; DO NOT EDIT.

package mocks

import (
	"context"
	"math/big"
	"sync"

	bindings "github.com/alicenet/alicenet/bridge/bindings"
	layer1 "github.com/alicenet/alicenet/layer1"
	accounts "github.com/ethereum/go-ethereum/accounts"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
)

// MockAllSmartContracts is a mock implementation of the AllSmartContracts
// interface (from the package github.com/alicenet/alicenet/layer1) used for
// unit testing.
type MockAllSmartContracts struct {
	// EthereumContractsFunc is an instance of a mock function object
	// controlling the behavior of the method EthereumContracts.
	EthereumContractsFunc *AllSmartContractsEthereumContractsFunc
}

// NewMockAllSmartContracts creates a new mock of the AllSmartContracts
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAllSmartContracts() *MockAllSmartContracts {
	return &MockAllSmartContracts{
		EthereumContractsFunc: &AllSmartContractsEthereumContractsFunc{
			defaultHook: func() (r0 layer1.EthereumContracts) {
				return
			},
		},
	}
}

// NewStrictMockAllSmartContracts creates a new mock of the
// AllSmartContracts interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockAllSmartContracts() *MockAllSmartContracts {
	return &MockAllSmartContracts{
		EthereumContractsFunc: &AllSmartContractsEthereumContractsFunc{
			defaultHook: func() layer1.EthereumContracts {
				panic("unexpected invocation of MockAllSmartContracts.EthereumContracts")
			},
		},
	}
}

// NewMockAllSmartContractsFrom creates a new mock of the
// MockAllSmartContracts interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAllSmartContractsFrom(i layer1.AllSmartContracts) *MockAllSmartContracts {
	return &MockAllSmartContracts{
		EthereumContractsFunc: &AllSmartContractsEthereumContractsFunc{
			defaultHook: i.EthereumContracts,
		},
	}
}

// AllSmartContractsEthereumContractsFunc describes the behavior when the
// EthereumContracts method of the parent MockAllSmartContracts instance is
// invoked.
type AllSmartContractsEthereumContractsFunc struct {
	defaultHook func() layer1.EthereumContracts
	hooks       []func() layer1.EthereumContracts
	history     []AllSmartContractsEthereumContractsFuncCall
	mutex       sync.Mutex
}

// EthereumContracts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAllSmartContracts) EthereumContracts() layer1.EthereumContracts {
	r0 := m.EthereumContractsFunc.nextHook()()
	m.EthereumContractsFunc.appendCall(AllSmartContractsEthereumContractsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the EthereumContracts
// method of the parent MockAllSmartContracts instance is invoked and the
// hook queue is empty.
func (f *AllSmartContractsEthereumContractsFunc) SetDefaultHook(hook func() layer1.EthereumContracts) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EthereumContracts method of the parent MockAllSmartContracts instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AllSmartContractsEthereumContractsFunc) PushHook(hook func() layer1.EthereumContracts) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AllSmartContractsEthereumContractsFunc) SetDefaultReturn(r0 layer1.EthereumContracts) {
	f.SetDefaultHook(func() layer1.EthereumContracts {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AllSmartContractsEthereumContractsFunc) PushReturn(r0 layer1.EthereumContracts) {
	f.PushHook(func() layer1.EthereumContracts {
		return r0
	})
}

func (f *AllSmartContractsEthereumContractsFunc) nextHook() func() layer1.EthereumContracts {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AllSmartContractsEthereumContractsFunc) appendCall(r0 AllSmartContractsEthereumContractsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AllSmartContractsEthereumContractsFuncCall
// objects describing the invocations of this function.
func (f *AllSmartContractsEthereumContractsFunc) History() []AllSmartContractsEthereumContractsFuncCall {
	f.mutex.Lock()
	history := make([]AllSmartContractsEthereumContractsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AllSmartContractsEthereumContractsFuncCall is an object that describes an
// invocation of method EthereumContracts on an instance of
// MockAllSmartContracts.
type AllSmartContractsEthereumContractsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 layer1.EthereumContracts
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AllSmartContractsEthereumContractsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AllSmartContractsEthereumContractsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockClient is a mock implementation of the Client interface (from the
// package github.com/alicenet/alicenet/layer1) used for unit testing.
type MockClient struct {
	// CloseFunc is an instance of a mock function object controlling the
	// behavior of the method Close.
	CloseFunc *ClientCloseFunc
	// EndpointInSyncFunc is an instance of a mock function object
	// controlling the behavior of the method EndpointInSync.
	EndpointInSyncFunc *ClientEndpointInSyncFunc
	// ExtractTransactionSenderFunc is an instance of a mock function object
	// controlling the behavior of the method ExtractTransactionSender.
	ExtractTransactionSenderFunc *ClientExtractTransactionSenderFunc
	// GetAccountFunc is an instance of a mock function object controlling
	// the behavior of the method GetAccount.
	GetAccountFunc *ClientGetAccountFunc
	// GetBalanceFunc is an instance of a mock function object controlling
	// the behavior of the method GetBalance.
	GetBalanceFunc *ClientGetBalanceFunc
	// GetBlockBaseFeeAndSuggestedGasTipFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetBlockBaseFeeAndSuggestedGasTip.
	GetBlockBaseFeeAndSuggestedGasTipFunc *ClientGetBlockBaseFeeAndSuggestedGasTipFunc
	// GetBlockByNumberFunc is an instance of a mock function object
	// controlling the behavior of the method GetBlockByNumber.
	GetBlockByNumberFunc *ClientGetBlockByNumberFunc
	// GetCallOptsFunc is an instance of a mock function object controlling
	// the behavior of the method GetCallOpts.
	GetCallOptsFunc *ClientGetCallOptsFunc
	// GetCallOptsLatestBlockFunc is an instance of a mock function object
	// controlling the behavior of the method GetCallOptsLatestBlock.
	GetCallOptsLatestBlockFunc *ClientGetCallOptsLatestBlockFunc
	// GetChainIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetChainID.
	GetChainIDFunc *ClientGetChainIDFunc
	// GetCurrentHeightFunc is an instance of a mock function object
	// controlling the behavior of the method GetCurrentHeight.
	GetCurrentHeightFunc *ClientGetCurrentHeightFunc
	// GetDefaultAccountFunc is an instance of a mock function object
	// controlling the behavior of the method GetDefaultAccount.
	GetDefaultAccountFunc *ClientGetDefaultAccountFunc
	// GetEndpointFunc is an instance of a mock function object controlling
	// the behavior of the method GetEndpoint.
	GetEndpointFunc *ClientGetEndpointFunc
	// GetEventsFunc is an instance of a mock function object controlling
	// the behavior of the method GetEvents.
	GetEventsFunc *ClientGetEventsFunc
	// GetFinalityDelayFunc is an instance of a mock function object
	// controlling the behavior of the method GetFinalityDelay.
	GetFinalityDelayFunc *ClientGetFinalityDelayFunc
	// GetFinalizedHeightFunc is an instance of a mock function object
	// controlling the behavior of the method GetFinalizedHeight.
	GetFinalizedHeightFunc *ClientGetFinalizedHeightFunc
	// GetHeaderByNumberFunc is an instance of a mock function object
	// controlling the behavior of the method GetHeaderByNumber.
	GetHeaderByNumberFunc *ClientGetHeaderByNumberFunc
	// GetKnownAccountsFunc is an instance of a mock function object
	// controlling the behavior of the method GetKnownAccounts.
	GetKnownAccountsFunc *ClientGetKnownAccountsFunc
	// GetPeerCountFunc is an instance of a mock function object controlling
	// the behavior of the method GetPeerCount.
	GetPeerCountFunc *ClientGetPeerCountFunc
	// GetPendingNonceFunc is an instance of a mock function object
	// controlling the behavior of the method GetPendingNonce.
	GetPendingNonceFunc *ClientGetPendingNonceFunc
	// GetTimeoutContextFunc is an instance of a mock function object
	// controlling the behavior of the method GetTimeoutContext.
	GetTimeoutContextFunc *ClientGetTimeoutContextFunc
	// GetTransactionByHashFunc is an instance of a mock function object
	// controlling the behavior of the method GetTransactionByHash.
	GetTransactionByHashFunc *ClientGetTransactionByHashFunc
	// GetTransactionOptsFunc is an instance of a mock function object
	// controlling the behavior of the method GetTransactionOpts.
	GetTransactionOptsFunc *ClientGetTransactionOptsFunc
	// GetTransactionReceiptFunc is an instance of a mock function object
	// controlling the behavior of the method GetTransactionReceipt.
	GetTransactionReceiptFunc *ClientGetTransactionReceiptFunc
	// GetTxMaxGasFeeAllowedFunc is an instance of a mock function object
	// controlling the behavior of the method GetTxMaxGasFeeAllowed.
	GetTxMaxGasFeeAllowedFunc *ClientGetTxMaxGasFeeAllowedFunc
	// GetTxMaxStaleBlocksFunc is an instance of a mock function object
	// controlling the behavior of the method GetTxMaxStaleBlocks.
	GetTxMaxStaleBlocksFunc *ClientGetTxMaxStaleBlocksFunc
	// GetTxNotFoundMaxBlocksFunc is an instance of a mock function object
	// controlling the behavior of the method GetTxNotFoundMaxBlocks.
	GetTxNotFoundMaxBlocksFunc *ClientGetTxNotFoundMaxBlocksFunc
	// IsAccessibleFunc is an instance of a mock function object controlling
	// the behavior of the method IsAccessible.
	IsAccessibleFunc *ClientIsAccessibleFunc
	// RetryTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method RetryTransaction.
	RetryTransactionFunc *ClientRetryTransactionFunc
	// SendTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method SendTransaction.
	SendTransactionFunc *ClientSendTransactionFunc
	// SignTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method SignTransaction.
	SignTransactionFunc *ClientSignTransactionFunc
}

// NewMockClient creates a new mock of the Client interface. All methods
// return zero values for all results, unless overwritten.
func NewMockClient() *MockClient {
	return &MockClient{
		CloseFunc: &ClientCloseFunc{
			defaultHook: func() {
				return
			},
		},
		EndpointInSyncFunc: &ClientEndpointInSyncFunc{
			defaultHook: func(context.Context) (r0 bool, r1 uint32, r2 error) {
				return
			},
		},
		ExtractTransactionSenderFunc: &ClientExtractTransactionSenderFunc{
			defaultHook: func(*types.Transaction) (r0 common.Address, r1 error) {
				return
			},
		},
		GetAccountFunc: &ClientGetAccountFunc{
			defaultHook: func(common.Address) (r0 accounts.Account, r1 error) {
				return
			},
		},
		GetBalanceFunc: &ClientGetBalanceFunc{
			defaultHook: func(common.Address) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetBlockBaseFeeAndSuggestedGasTipFunc: &ClientGetBlockBaseFeeAndSuggestedGasTipFunc{
			defaultHook: func(context.Context) (r0 *big.Int, r1 *big.Int, r2 error) {
				return
			},
		},
		GetBlockByNumberFunc: &ClientGetBlockByNumberFunc{
			defaultHook: func(context.Context, *big.Int) (r0 *types.Block, r1 error) {
				return
			},
		},
		GetCallOptsFunc: &ClientGetCallOptsFunc{
			defaultHook: func(context.Context, accounts.Account) (r0 *bind.CallOpts, r1 error) {
				return
			},
		},
		GetCallOptsLatestBlockFunc: &ClientGetCallOptsLatestBlockFunc{
			defaultHook: func(context.Context, accounts.Account) (r0 *bind.CallOpts) {
				return
			},
		},
		GetChainIDFunc: &ClientGetChainIDFunc{
			defaultHook: func() (r0 *big.Int) {
				return
			},
		},
		GetCurrentHeightFunc: &ClientGetCurrentHeightFunc{
			defaultHook: func(context.Context) (r0 uint64, r1 error) {
				return
			},
		},
		GetDefaultAccountFunc: &ClientGetDefaultAccountFunc{
			defaultHook: func() (r0 accounts.Account) {
				return
			},
		},
		GetEndpointFunc: &ClientGetEndpointFunc{
			defaultHook: func() (r0 string) {
				return
			},
		},
		GetEventsFunc: &ClientGetEventsFunc{
			defaultHook: func(context.Context, uint64, uint64, []common.Address) (r0 []types.Log, r1 error) {
				return
			},
		},
		GetFinalityDelayFunc: &ClientGetFinalityDelayFunc{
			defaultHook: func() (r0 uint64) {
				return
			},
		},
		GetFinalizedHeightFunc: &ClientGetFinalizedHeightFunc{
			defaultHook: func(context.Context) (r0 uint64, r1 error) {
				return
			},
		},
		GetHeaderByNumberFunc: &ClientGetHeaderByNumberFunc{
			defaultHook: func(context.Context, *big.Int) (r0 *types.Header, r1 error) {
				return
			},
		},
		GetKnownAccountsFunc: &ClientGetKnownAccountsFunc{
			defaultHook: func() (r0 []accounts.Account) {
				return
			},
		},
		GetPeerCountFunc: &ClientGetPeerCountFunc{
			defaultHook: func(context.Context) (r0 uint64, r1 error) {
				return
			},
		},
		GetPendingNonceFunc: &ClientGetPendingNonceFunc{
			defaultHook: func(context.Context, common.Address) (r0 uint64, r1 error) {
				return
			},
		},
		GetTimeoutContextFunc: &ClientGetTimeoutContextFunc{
			defaultHook: func() (r0 context.Context, r1 context.CancelFunc) {
				return
			},
		},
		GetTransactionByHashFunc: &ClientGetTransactionByHashFunc{
			defaultHook: func(context.Context, common.Hash) (r0 *types.Transaction, r1 bool, r2 error) {
				return
			},
		},
		GetTransactionOptsFunc: &ClientGetTransactionOptsFunc{
			defaultHook: func(context.Context, accounts.Account) (r0 *bind.TransactOpts, r1 error) {
				return
			},
		},
		GetTransactionReceiptFunc: &ClientGetTransactionReceiptFunc{
			defaultHook: func(context.Context, common.Hash) (r0 *types.Receipt, r1 error) {
				return
			},
		},
		GetTxMaxGasFeeAllowedFunc: &ClientGetTxMaxGasFeeAllowedFunc{
			defaultHook: func() (r0 *big.Int) {
				return
			},
		},
		GetTxMaxStaleBlocksFunc: &ClientGetTxMaxStaleBlocksFunc{
			defaultHook: func() (r0 uint64) {
				return
			},
		},
		GetTxNotFoundMaxBlocksFunc: &ClientGetTxNotFoundMaxBlocksFunc{
			defaultHook: func() (r0 uint64) {
				return
			},
		},
		IsAccessibleFunc: &ClientIsAccessibleFunc{
			defaultHook: func() (r0 bool) {
				return
			},
		},
		RetryTransactionFunc: &ClientRetryTransactionFunc{
			defaultHook: func(context.Context, *types.Transaction, *big.Int, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		SendTransactionFunc: &ClientSendTransactionFunc{
			defaultHook: func(context.Context, *types.Transaction) (r0 error) {
				return
			},
		},
		SignTransactionFunc: &ClientSignTransactionFunc{
			defaultHook: func(types.TxData, common.Address) (r0 *types.Transaction, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockClient creates a new mock of the Client interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockClient() *MockClient {
	return &MockClient{
		CloseFunc: &ClientCloseFunc{
			defaultHook: func() {
				panic("unexpected invocation of MockClient.Close")
			},
		},
		EndpointInSyncFunc: &ClientEndpointInSyncFunc{
			defaultHook: func(context.Context) (bool, uint32, error) {
				panic("unexpected invocation of MockClient.EndpointInSync")
			},
		},
		ExtractTransactionSenderFunc: &ClientExtractTransactionSenderFunc{
			defaultHook: func(*types.Transaction) (common.Address, error) {
				panic("unexpected invocation of MockClient.ExtractTransactionSender")
			},
		},
		GetAccountFunc: &ClientGetAccountFunc{
			defaultHook: func(common.Address) (accounts.Account, error) {
				panic("unexpected invocation of MockClient.GetAccount")
			},
		},
		GetBalanceFunc: &ClientGetBalanceFunc{
			defaultHook: func(common.Address) (*big.Int, error) {
				panic("unexpected invocation of MockClient.GetBalance")
			},
		},
		GetBlockBaseFeeAndSuggestedGasTipFunc: &ClientGetBlockBaseFeeAndSuggestedGasTipFunc{
			defaultHook: func(context.Context) (*big.Int, *big.Int, error) {
				panic("unexpected invocation of MockClient.GetBlockBaseFeeAndSuggestedGasTip")
			},
		},
		GetBlockByNumberFunc: &ClientGetBlockByNumberFunc{
			defaultHook: func(context.Context, *big.Int) (*types.Block, error) {
				panic("unexpected invocation of MockClient.GetBlockByNumber")
			},
		},
		GetCallOptsFunc: &ClientGetCallOptsFunc{
			defaultHook: func(context.Context, accounts.Account) (*bind.CallOpts, error) {
				panic("unexpected invocation of MockClient.GetCallOpts")
			},
		},
		GetCallOptsLatestBlockFunc: &ClientGetCallOptsLatestBlockFunc{
			defaultHook: func(context.Context, accounts.Account) *bind.CallOpts {
				panic("unexpected invocation of MockClient.GetCallOptsLatestBlock")
			},
		},
		GetChainIDFunc: &ClientGetChainIDFunc{
			defaultHook: func() *big.Int {
				panic("unexpected invocation of MockClient.GetChainID")
			},
		},
		GetCurrentHeightFunc: &ClientGetCurrentHeightFunc{
			defaultHook: func(context.Context) (uint64, error) {
				panic("unexpected invocation of MockClient.GetCurrentHeight")
			},
		},
		GetDefaultAccountFunc: &ClientGetDefaultAccountFunc{
			defaultHook: func() accounts.Account {
				panic("unexpected invocation of MockClient.GetDefaultAccount")
			},
		},
		GetEndpointFunc: &ClientGetEndpointFunc{
			defaultHook: func() string {
				panic("unexpected invocation of MockClient.GetEndpoint")
			},
		},
		GetEventsFunc: &ClientGetEventsFunc{
			defaultHook: func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error) {
				panic("unexpected invocation of MockClient.GetEvents")
			},
		},
		GetFinalityDelayFunc: &ClientGetFinalityDelayFunc{
			defaultHook: func() uint64 {
				panic("unexpected invocation of MockClient.GetFinalityDelay")
			},
		},
		GetFinalizedHeightFunc: &ClientGetFinalizedHeightFunc{
			defaultHook: func(context.Context) (uint64, error) {
				panic("unexpected invocation of MockClient.GetFinalizedHeight")
			},
		},
		GetHeaderByNumberFunc: &ClientGetHeaderByNumberFunc{
			defaultHook: func(context.Context, *big.Int) (*types.Header, error) {
				panic("unexpected invocation of MockClient.GetHeaderByNumber")
			},
		},
		GetKnownAccountsFunc: &ClientGetKnownAccountsFunc{
			defaultHook: func() []accounts.Account {
				panic("unexpected invocation of MockClient.GetKnownAccounts")
			},
		},
		GetPeerCountFunc: &ClientGetPeerCountFunc{
			defaultHook: func(context.Context) (uint64, error) {
				panic("unexpected invocation of MockClient.GetPeerCount")
			},
		},
		GetPendingNonceFunc: &ClientGetPendingNonceFunc{
			defaultHook: func(context.Context, common.Address) (uint64, error) {
				panic("unexpected invocation of MockClient.GetPendingNonce")
			},
		},
		GetTimeoutContextFunc: &ClientGetTimeoutContextFunc{
			defaultHook: func() (context.Context, context.CancelFunc) {
				panic("unexpected invocation of MockClient.GetTimeoutContext")
			},
		},
		GetTransactionByHashFunc: &ClientGetTransactionByHashFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Transaction, bool, error) {
				panic("unexpected invocation of MockClient.GetTransactionByHash")
			},
		},
		GetTransactionOptsFunc: &ClientGetTransactionOptsFunc{
			defaultHook: func(context.Context, accounts.Account) (*bind.TransactOpts, error) {
				panic("unexpected invocation of MockClient.GetTransactionOpts")
			},
		},
		GetTransactionReceiptFunc: &ClientGetTransactionReceiptFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Receipt, error) {
				panic("unexpected invocation of MockClient.GetTransactionReceipt")
			},
		},
		GetTxMaxGasFeeAllowedFunc: &ClientGetTxMaxGasFeeAllowedFunc{
			defaultHook: func() *big.Int {
				panic("unexpected invocation of MockClient.GetTxMaxGasFeeAllowed")
			},
		},
		GetTxMaxStaleBlocksFunc: &ClientGetTxMaxStaleBlocksFunc{
			defaultHook: func() uint64 {
				panic("unexpected invocation of MockClient.GetTxMaxStaleBlocks")
			},
		},
		GetTxNotFoundMaxBlocksFunc: &ClientGetTxNotFoundMaxBlocksFunc{
			defaultHook: func() uint64 {
				panic("unexpected invocation of MockClient.GetTxNotFoundMaxBlocks")
			},
		},
		IsAccessibleFunc: &ClientIsAccessibleFunc{
			defaultHook: func() bool {
				panic("unexpected invocation of MockClient.IsAccessible")
			},
		},
		RetryTransactionFunc: &ClientRetryTransactionFunc{
			defaultHook: func(context.Context, *types.Transaction, *big.Int, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockClient.RetryTransaction")
			},
		},
		SendTransactionFunc: &ClientSendTransactionFunc{
			defaultHook: func(context.Context, *types.Transaction) error {
				panic("unexpected invocation of MockClient.SendTransaction")
			},
		},
		SignTransactionFunc: &ClientSignTransactionFunc{
			defaultHook: func(types.TxData, common.Address) (*types.Transaction, error) {
				panic("unexpected invocation of MockClient.SignTransaction")
			},
		},
	}
}

// NewMockClientFrom creates a new mock of the MockClient interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockClientFrom(i layer1.Client) *MockClient {
	return &MockClient{
		CloseFunc: &ClientCloseFunc{
			defaultHook: i.Close,
		},
		EndpointInSyncFunc: &ClientEndpointInSyncFunc{
			defaultHook: i.EndpointInSync,
		},
		ExtractTransactionSenderFunc: &ClientExtractTransactionSenderFunc{
			defaultHook: i.ExtractTransactionSender,
		},
		GetAccountFunc: &ClientGetAccountFunc{
			defaultHook: i.GetAccount,
		},
		GetBalanceFunc: &ClientGetBalanceFunc{
			defaultHook: i.GetBalance,
		},
		GetBlockBaseFeeAndSuggestedGasTipFunc: &ClientGetBlockBaseFeeAndSuggestedGasTipFunc{
			defaultHook: i.GetBlockBaseFeeAndSuggestedGasTip,
		},
		GetBlockByNumberFunc: &ClientGetBlockByNumberFunc{
			defaultHook: i.GetBlockByNumber,
		},
		GetCallOptsFunc: &ClientGetCallOptsFunc{
			defaultHook: i.GetCallOpts,
		},
		GetCallOptsLatestBlockFunc: &ClientGetCallOptsLatestBlockFunc{
			defaultHook: i.GetCallOptsLatestBlock,
		},
		GetChainIDFunc: &ClientGetChainIDFunc{
			defaultHook: i.GetChainID,
		},
		GetCurrentHeightFunc: &ClientGetCurrentHeightFunc{
			defaultHook: i.GetCurrentHeight,
		},
		GetDefaultAccountFunc: &ClientGetDefaultAccountFunc{
			defaultHook: i.GetDefaultAccount,
		},
		GetEndpointFunc: &ClientGetEndpointFunc{
			defaultHook: i.GetEndpoint,
		},
		GetEventsFunc: &ClientGetEventsFunc{
			defaultHook: i.GetEvents,
		},
		GetFinalityDelayFunc: &ClientGetFinalityDelayFunc{
			defaultHook: i.GetFinalityDelay,
		},
		GetFinalizedHeightFunc: &ClientGetFinalizedHeightFunc{
			defaultHook: i.GetFinalizedHeight,
		},
		GetHeaderByNumberFunc: &ClientGetHeaderByNumberFunc{
			defaultHook: i.GetHeaderByNumber,
		},
		GetKnownAccountsFunc: &ClientGetKnownAccountsFunc{
			defaultHook: i.GetKnownAccounts,
		},
		GetPeerCountFunc: &ClientGetPeerCountFunc{
			defaultHook: i.GetPeerCount,
		},
		GetPendingNonceFunc: &ClientGetPendingNonceFunc{
			defaultHook: i.GetPendingNonce,
		},
		GetTimeoutContextFunc: &ClientGetTimeoutContextFunc{
			defaultHook: i.GetTimeoutContext,
		},
		GetTransactionByHashFunc: &ClientGetTransactionByHashFunc{
			defaultHook: i.GetTransactionByHash,
		},
		GetTransactionOptsFunc: &ClientGetTransactionOptsFunc{
			defaultHook: i.GetTransactionOpts,
		},
		GetTransactionReceiptFunc: &ClientGetTransactionReceiptFunc{
			defaultHook: i.GetTransactionReceipt,
		},
		GetTxMaxGasFeeAllowedFunc: &ClientGetTxMaxGasFeeAllowedFunc{
			defaultHook: i.GetTxMaxGasFeeAllowed,
		},
		GetTxMaxStaleBlocksFunc: &ClientGetTxMaxStaleBlocksFunc{
			defaultHook: i.GetTxMaxStaleBlocks,
		},
		GetTxNotFoundMaxBlocksFunc: &ClientGetTxNotFoundMaxBlocksFunc{
			defaultHook: i.GetTxNotFoundMaxBlocks,
		},
		IsAccessibleFunc: &ClientIsAccessibleFunc{
			defaultHook: i.IsAccessible,
		},
		RetryTransactionFunc: &ClientRetryTransactionFunc{
			defaultHook: i.RetryTransaction,
		},
		SendTransactionFunc: &ClientSendTransactionFunc{
			defaultHook: i.SendTransaction,
		},
		SignTransactionFunc: &ClientSignTransactionFunc{
			defaultHook: i.SignTransaction,
		},
	}
}

// ClientCloseFunc describes the behavior when the Close method of the
// parent MockClient instance is invoked.
type ClientCloseFunc struct {
	defaultHook func()
	hooks       []func()
	history     []ClientCloseFuncCall
	mutex       sync.Mutex
}

// Close delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Close() {
	m.CloseFunc.nextHook()()
	m.CloseFunc.appendCall(ClientCloseFuncCall{})
	return
}

// SetDefaultHook sets function that is called when the Close method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientCloseFunc) SetDefaultHook(hook func()) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Close method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientCloseFunc) PushHook(hook func()) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCloseFunc) SetDefaultReturn() {
	f.SetDefaultHook(func() {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCloseFunc) PushReturn() {
	f.PushHook(func() {
		return
	})
}

func (f *ClientCloseFunc) nextHook() func() {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCloseFunc) appendCall(r0 ClientCloseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCloseFuncCall objects describing the
// invocations of this function.
func (f *ClientCloseFunc) History() []ClientCloseFuncCall {
	f.mutex.Lock()
	history := make([]ClientCloseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCloseFuncCall is an object that describes an invocation of method
// Close on an instance of MockClient.
type ClientCloseFuncCall struct{}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCloseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCloseFuncCall) Results() []interface{} {
	return []interface{}{}
}

// ClientEndpointInSyncFunc describes the behavior when the EndpointInSync
// method of the parent MockClient instance is invoked.
type ClientEndpointInSyncFunc struct {
	defaultHook func(context.Context) (bool, uint32, error)
	hooks       []func(context.Context) (bool, uint32, error)
	history     []ClientEndpointInSyncFuncCall
	mutex       sync.Mutex
}

// EndpointInSync delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) EndpointInSync(v0 context.Context) (bool, uint32, error) {
	r0, r1, r2 := m.EndpointInSyncFunc.nextHook()(v0)
	m.EndpointInSyncFunc.appendCall(ClientEndpointInSyncFuncCall{v0, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the EndpointInSync
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientEndpointInSyncFunc) SetDefaultHook(hook func(context.Context) (bool, uint32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EndpointInSync method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientEndpointInSyncFunc) PushHook(hook func(context.Context) (bool, uint32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientEndpointInSyncFunc) SetDefaultReturn(r0 bool, r1 uint32, r2 error) {
	f.SetDefaultHook(func(context.Context) (bool, uint32, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientEndpointInSyncFunc) PushReturn(r0 bool, r1 uint32, r2 error) {
	f.PushHook(func(context.Context) (bool, uint32, error) {
		return r0, r1, r2
	})
}

func (f *ClientEndpointInSyncFunc) nextHook() func(context.Context) (bool, uint32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientEndpointInSyncFunc) appendCall(r0 ClientEndpointInSyncFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientEndpointInSyncFuncCall objects
// describing the invocations of this function.
func (f *ClientEndpointInSyncFunc) History() []ClientEndpointInSyncFuncCall {
	f.mutex.Lock()
	history := make([]ClientEndpointInSyncFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientEndpointInSyncFuncCall is an object that describes an invocation of
// method EndpointInSync on an instance of MockClient.
type ClientEndpointInSyncFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 uint32
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientEndpointInSyncFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientEndpointInSyncFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientExtractTransactionSenderFunc describes the behavior when the
// ExtractTransactionSender method of the parent MockClient instance is
// invoked.
type ClientExtractTransactionSenderFunc struct {
	defaultHook func(*types.Transaction) (common.Address, error)
	hooks       []func(*types.Transaction) (common.Address, error)
	history     []ClientExtractTransactionSenderFuncCall
	mutex       sync.Mutex
}

// ExtractTransactionSender delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) ExtractTransactionSender(v0 *types.Transaction) (common.Address, error) {
	r0, r1 := m.ExtractTransactionSenderFunc.nextHook()(v0)
	m.ExtractTransactionSenderFunc.appendCall(ClientExtractTransactionSenderFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ExtractTransactionSender method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientExtractTransactionSenderFunc) SetDefaultHook(hook func(*types.Transaction) (common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExtractTransactionSender method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientExtractTransactionSenderFunc) PushHook(hook func(*types.Transaction) (common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientExtractTransactionSenderFunc) SetDefaultReturn(r0 common.Address, r1 error) {
	f.SetDefaultHook(func(*types.Transaction) (common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientExtractTransactionSenderFunc) PushReturn(r0 common.Address, r1 error) {
	f.PushHook(func(*types.Transaction) (common.Address, error) {
		return r0, r1
	})
}

func (f *ClientExtractTransactionSenderFunc) nextHook() func(*types.Transaction) (common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientExtractTransactionSenderFunc) appendCall(r0 ClientExtractTransactionSenderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientExtractTransactionSenderFuncCall
// objects describing the invocations of this function.
func (f *ClientExtractTransactionSenderFunc) History() []ClientExtractTransactionSenderFuncCall {
	f.mutex.Lock()
	history := make([]ClientExtractTransactionSenderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientExtractTransactionSenderFuncCall is an object that describes an
// invocation of method ExtractTransactionSender on an instance of
// MockClient.
type ClientExtractTransactionSenderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *types.Transaction
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientExtractTransactionSenderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientExtractTransactionSenderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetAccountFunc describes the behavior when the GetAccount method of
// the parent MockClient instance is invoked.
type ClientGetAccountFunc struct {
	defaultHook func(common.Address) (accounts.Account, error)
	hooks       []func(common.Address) (accounts.Account, error)
	history     []ClientGetAccountFuncCall
	mutex       sync.Mutex
}

// GetAccount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) GetAccount(v0 common.Address) (accounts.Account, error) {
	r0, r1 := m.GetAccountFunc.nextHook()(v0)
	m.GetAccountFunc.appendCall(ClientGetAccountFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAccount method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetAccountFunc) SetDefaultHook(hook func(common.Address) (accounts.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAccount method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetAccountFunc) PushHook(hook func(common.Address) (accounts.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetAccountFunc) SetDefaultReturn(r0 accounts.Account, r1 error) {
	f.SetDefaultHook(func(common.Address) (accounts.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetAccountFunc) PushReturn(r0 accounts.Account, r1 error) {
	f.PushHook(func(common.Address) (accounts.Account, error) {
		return r0, r1
	})
}

func (f *ClientGetAccountFunc) nextHook() func(common.Address) (accounts.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetAccountFunc) appendCall(r0 ClientGetAccountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetAccountFuncCall objects describing
// the invocations of this function.
func (f *ClientGetAccountFunc) History() []ClientGetAccountFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetAccountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetAccountFuncCall is an object that describes an invocation of
// method GetAccount on an instance of MockClient.
type ClientGetAccountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 accounts.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetAccountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetAccountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetBalanceFunc describes the behavior when the GetBalance method of
// the parent MockClient instance is invoked.
type ClientGetBalanceFunc struct {
	defaultHook func(common.Address) (*big.Int, error)
	hooks       []func(common.Address) (*big.Int, error)
	history     []ClientGetBalanceFuncCall
	mutex       sync.Mutex
}

// GetBalance delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) GetBalance(v0 common.Address) (*big.Int, error) {
	r0, r1 := m.GetBalanceFunc.nextHook()(v0)
	m.GetBalanceFunc.appendCall(ClientGetBalanceFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetBalance method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetBalanceFunc) SetDefaultHook(hook func(common.Address) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBalance method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetBalanceFunc) PushHook(hook func(common.Address) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetBalanceFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(common.Address) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetBalanceFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(common.Address) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ClientGetBalanceFunc) nextHook() func(common.Address) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetBalanceFunc) appendCall(r0 ClientGetBalanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetBalanceFuncCall objects describing
// the invocations of this function.
func (f *ClientGetBalanceFunc) History() []ClientGetBalanceFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetBalanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetBalanceFuncCall is an object that describes an invocation of
// method GetBalance on an instance of MockClient.
type ClientGetBalanceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetBalanceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetBalanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetBlockBaseFeeAndSuggestedGasTipFunc describes the behavior when
// the GetBlockBaseFeeAndSuggestedGasTip method of the parent MockClient
// instance is invoked.
type ClientGetBlockBaseFeeAndSuggestedGasTipFunc struct {
	defaultHook func(context.Context) (*big.Int, *big.Int, error)
	hooks       []func(context.Context) (*big.Int, *big.Int, error)
	history     []ClientGetBlockBaseFeeAndSuggestedGasTipFuncCall
	mutex       sync.Mutex
}

// GetBlockBaseFeeAndSuggestedGasTip delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockClient) GetBlockBaseFeeAndSuggestedGasTip(v0 context.Context) (*big.Int, *big.Int, error) {
	r0, r1, r2 := m.GetBlockBaseFeeAndSuggestedGasTipFunc.nextHook()(v0)
	m.GetBlockBaseFeeAndSuggestedGasTipFunc.appendCall(ClientGetBlockBaseFeeAndSuggestedGasTipFuncCall{v0, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetBlockBaseFeeAndSuggestedGasTip method of the parent MockClient
// instance is invoked and the hook queue is empty.
func (f *ClientGetBlockBaseFeeAndSuggestedGasTipFunc) SetDefaultHook(hook func(context.Context) (*big.Int, *big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBlockBaseFeeAndSuggestedGasTip method of the parent MockClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ClientGetBlockBaseFeeAndSuggestedGasTipFunc) PushHook(hook func(context.Context) (*big.Int, *big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetBlockBaseFeeAndSuggestedGasTipFunc) SetDefaultReturn(r0 *big.Int, r1 *big.Int, r2 error) {
	f.SetDefaultHook(func(context.Context) (*big.Int, *big.Int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetBlockBaseFeeAndSuggestedGasTipFunc) PushReturn(r0 *big.Int, r1 *big.Int, r2 error) {
	f.PushHook(func(context.Context) (*big.Int, *big.Int, error) {
		return r0, r1, r2
	})
}

func (f *ClientGetBlockBaseFeeAndSuggestedGasTipFunc) nextHook() func(context.Context) (*big.Int, *big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetBlockBaseFeeAndSuggestedGasTipFunc) appendCall(r0 ClientGetBlockBaseFeeAndSuggestedGasTipFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ClientGetBlockBaseFeeAndSuggestedGasTipFuncCall objects describing the
// invocations of this function.
func (f *ClientGetBlockBaseFeeAndSuggestedGasTipFunc) History() []ClientGetBlockBaseFeeAndSuggestedGasTipFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetBlockBaseFeeAndSuggestedGasTipFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetBlockBaseFeeAndSuggestedGasTipFuncCall is an object that
// describes an invocation of method GetBlockBaseFeeAndSuggestedGasTip on an
// instance of MockClient.
type ClientGetBlockBaseFeeAndSuggestedGasTipFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *big.Int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetBlockBaseFeeAndSuggestedGasTipFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetBlockBaseFeeAndSuggestedGasTipFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientGetBlockByNumberFunc describes the behavior when the
// GetBlockByNumber method of the parent MockClient instance is invoked.
type ClientGetBlockByNumberFunc struct {
	defaultHook func(context.Context, *big.Int) (*types.Block, error)
	hooks       []func(context.Context, *big.Int) (*types.Block, error)
	history     []ClientGetBlockByNumberFuncCall
	mutex       sync.Mutex
}

// GetBlockByNumber delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetBlockByNumber(v0 context.Context, v1 *big.Int) (*types.Block, error) {
	r0, r1 := m.GetBlockByNumberFunc.nextHook()(v0, v1)
	m.GetBlockByNumberFunc.appendCall(ClientGetBlockByNumberFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetBlockByNumber
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetBlockByNumberFunc) SetDefaultHook(hook func(context.Context, *big.Int) (*types.Block, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBlockByNumber method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientGetBlockByNumberFunc) PushHook(hook func(context.Context, *big.Int) (*types.Block, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetBlockByNumberFunc) SetDefaultReturn(r0 *types.Block, r1 error) {
	f.SetDefaultHook(func(context.Context, *big.Int) (*types.Block, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetBlockByNumberFunc) PushReturn(r0 *types.Block, r1 error) {
	f.PushHook(func(context.Context, *big.Int) (*types.Block, error) {
		return r0, r1
	})
}

func (f *ClientGetBlockByNumberFunc) nextHook() func(context.Context, *big.Int) (*types.Block, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetBlockByNumberFunc) appendCall(r0 ClientGetBlockByNumberFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetBlockByNumberFuncCall objects
// describing the invocations of this function.
func (f *ClientGetBlockByNumberFunc) History() []ClientGetBlockByNumberFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetBlockByNumberFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetBlockByNumberFuncCall is an object that describes an invocation
// of method GetBlockByNumber on an instance of MockClient.
type ClientGetBlockByNumberFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Block
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetBlockByNumberFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetBlockByNumberFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetCallOptsFunc describes the behavior when the GetCallOpts method
// of the parent MockClient instance is invoked.
type ClientGetCallOptsFunc struct {
	defaultHook func(context.Context, accounts.Account) (*bind.CallOpts, error)
	hooks       []func(context.Context, accounts.Account) (*bind.CallOpts, error)
	history     []ClientGetCallOptsFuncCall
	mutex       sync.Mutex
}

// GetCallOpts delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) GetCallOpts(v0 context.Context, v1 accounts.Account) (*bind.CallOpts, error) {
	r0, r1 := m.GetCallOptsFunc.nextHook()(v0, v1)
	m.GetCallOptsFunc.appendCall(ClientGetCallOptsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCallOpts method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetCallOptsFunc) SetDefaultHook(hook func(context.Context, accounts.Account) (*bind.CallOpts, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCallOpts method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetCallOptsFunc) PushHook(hook func(context.Context, accounts.Account) (*bind.CallOpts, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetCallOptsFunc) SetDefaultReturn(r0 *bind.CallOpts, r1 error) {
	f.SetDefaultHook(func(context.Context, accounts.Account) (*bind.CallOpts, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetCallOptsFunc) PushReturn(r0 *bind.CallOpts, r1 error) {
	f.PushHook(func(context.Context, accounts.Account) (*bind.CallOpts, error) {
		return r0, r1
	})
}

func (f *ClientGetCallOptsFunc) nextHook() func(context.Context, accounts.Account) (*bind.CallOpts, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetCallOptsFunc) appendCall(r0 ClientGetCallOptsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetCallOptsFuncCall objects
// describing the invocations of this function.
func (f *ClientGetCallOptsFunc) History() []ClientGetCallOptsFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetCallOptsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetCallOptsFuncCall is an object that describes an invocation of
// method GetCallOpts on an instance of MockClient.
type ClientGetCallOptsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 accounts.Account
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bind.CallOpts
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetCallOptsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetCallOptsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetCallOptsLatestBlockFunc describes the behavior when the
// GetCallOptsLatestBlock method of the parent MockClient instance is
// invoked.
type ClientGetCallOptsLatestBlockFunc struct {
	defaultHook func(context.Context, accounts.Account) *bind.CallOpts
	hooks       []func(context.Context, accounts.Account) *bind.CallOpts
	history     []ClientGetCallOptsLatestBlockFuncCall
	mutex       sync.Mutex
}

// GetCallOptsLatestBlock delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) GetCallOptsLatestBlock(v0 context.Context, v1 accounts.Account) *bind.CallOpts {
	r0 := m.GetCallOptsLatestBlockFunc.nextHook()(v0, v1)
	m.GetCallOptsLatestBlockFunc.appendCall(ClientGetCallOptsLatestBlockFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetCallOptsLatestBlock method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientGetCallOptsLatestBlockFunc) SetDefaultHook(hook func(context.Context, accounts.Account) *bind.CallOpts) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCallOptsLatestBlock method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientGetCallOptsLatestBlockFunc) PushHook(hook func(context.Context, accounts.Account) *bind.CallOpts) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetCallOptsLatestBlockFunc) SetDefaultReturn(r0 *bind.CallOpts) {
	f.SetDefaultHook(func(context.Context, accounts.Account) *bind.CallOpts {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetCallOptsLatestBlockFunc) PushReturn(r0 *bind.CallOpts) {
	f.PushHook(func(context.Context, accounts.Account) *bind.CallOpts {
		return r0
	})
}

func (f *ClientGetCallOptsLatestBlockFunc) nextHook() func(context.Context, accounts.Account) *bind.CallOpts {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetCallOptsLatestBlockFunc) appendCall(r0 ClientGetCallOptsLatestBlockFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetCallOptsLatestBlockFuncCall
// objects describing the invocations of this function.
func (f *ClientGetCallOptsLatestBlockFunc) History() []ClientGetCallOptsLatestBlockFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetCallOptsLatestBlockFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetCallOptsLatestBlockFuncCall is an object that describes an
// invocation of method GetCallOptsLatestBlock on an instance of MockClient.
type ClientGetCallOptsLatestBlockFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 accounts.Account
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bind.CallOpts
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetCallOptsLatestBlockFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetCallOptsLatestBlockFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientGetChainIDFunc describes the behavior when the GetChainID method of
// the parent MockClient instance is invoked.
type ClientGetChainIDFunc struct {
	defaultHook func() *big.Int
	hooks       []func() *big.Int
	history     []ClientGetChainIDFuncCall
	mutex       sync.Mutex
}

// GetChainID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) GetChainID() *big.Int {
	r0 := m.GetChainIDFunc.nextHook()()
	m.GetChainIDFunc.appendCall(ClientGetChainIDFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetChainID method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetChainIDFunc) SetDefaultHook(hook func() *big.Int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetChainID method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetChainIDFunc) PushHook(hook func() *big.Int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetChainIDFunc) SetDefaultReturn(r0 *big.Int) {
	f.SetDefaultHook(func() *big.Int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetChainIDFunc) PushReturn(r0 *big.Int) {
	f.PushHook(func() *big.Int {
		return r0
	})
}

func (f *ClientGetChainIDFunc) nextHook() func() *big.Int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetChainIDFunc) appendCall(r0 ClientGetChainIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetChainIDFuncCall objects describing
// the invocations of this function.
func (f *ClientGetChainIDFunc) History() []ClientGetChainIDFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetChainIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetChainIDFuncCall is an object that describes an invocation of
// method GetChainID on an instance of MockClient.
type ClientGetChainIDFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetChainIDFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetChainIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientGetCurrentHeightFunc describes the behavior when the
// GetCurrentHeight method of the parent MockClient instance is invoked.
type ClientGetCurrentHeightFunc struct {
	defaultHook func(context.Context) (uint64, error)
	hooks       []func(context.Context) (uint64, error)
	history     []ClientGetCurrentHeightFuncCall
	mutex       sync.Mutex
}

// GetCurrentHeight delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetCurrentHeight(v0 context.Context) (uint64, error) {
	r0, r1 := m.GetCurrentHeightFunc.nextHook()(v0)
	m.GetCurrentHeightFunc.appendCall(ClientGetCurrentHeightFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCurrentHeight
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetCurrentHeightFunc) SetDefaultHook(hook func(context.Context) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCurrentHeight method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientGetCurrentHeightFunc) PushHook(hook func(context.Context) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetCurrentHeightFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetCurrentHeightFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

func (f *ClientGetCurrentHeightFunc) nextHook() func(context.Context) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetCurrentHeightFunc) appendCall(r0 ClientGetCurrentHeightFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetCurrentHeightFuncCall objects
// describing the invocations of this function.
func (f *ClientGetCurrentHeightFunc) History() []ClientGetCurrentHeightFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetCurrentHeightFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetCurrentHeightFuncCall is an object that describes an invocation
// of method GetCurrentHeight on an instance of MockClient.
type ClientGetCurrentHeightFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetCurrentHeightFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetCurrentHeightFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetDefaultAccountFunc describes the behavior when the
// GetDefaultAccount method of the parent MockClient instance is invoked.
type ClientGetDefaultAccountFunc struct {
	defaultHook func() accounts.Account
	hooks       []func() accounts.Account
	history     []ClientGetDefaultAccountFuncCall
	mutex       sync.Mutex
}

// GetDefaultAccount delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetDefaultAccount() accounts.Account {
	r0 := m.GetDefaultAccountFunc.nextHook()()
	m.GetDefaultAccountFunc.appendCall(ClientGetDefaultAccountFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetDefaultAccount
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetDefaultAccountFunc) SetDefaultHook(hook func() accounts.Account) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDefaultAccount method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientGetDefaultAccountFunc) PushHook(hook func() accounts.Account) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetDefaultAccountFunc) SetDefaultReturn(r0 accounts.Account) {
	f.SetDefaultHook(func() accounts.Account {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetDefaultAccountFunc) PushReturn(r0 accounts.Account) {
	f.PushHook(func() accounts.Account {
		return r0
	})
}

func (f *ClientGetDefaultAccountFunc) nextHook() func() accounts.Account {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetDefaultAccountFunc) appendCall(r0 ClientGetDefaultAccountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetDefaultAccountFuncCall objects
// describing the invocations of this function.
func (f *ClientGetDefaultAccountFunc) History() []ClientGetDefaultAccountFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetDefaultAccountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetDefaultAccountFuncCall is an object that describes an invocation
// of method GetDefaultAccount on an instance of MockClient.
type ClientGetDefaultAccountFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 accounts.Account
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetDefaultAccountFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetDefaultAccountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientGetEndpointFunc describes the behavior when the GetEndpoint method
// of the parent MockClient instance is invoked.
type ClientGetEndpointFunc struct {
	defaultHook func() string
	hooks       []func() string
	history     []ClientGetEndpointFuncCall
	mutex       sync.Mutex
}

// GetEndpoint delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) GetEndpoint() string {
	r0 := m.GetEndpointFunc.nextHook()()
	m.GetEndpointFunc.appendCall(ClientGetEndpointFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetEndpoint method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetEndpointFunc) SetDefaultHook(hook func() string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEndpoint method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetEndpointFunc) PushHook(hook func() string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetEndpointFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func() string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetEndpointFunc) PushReturn(r0 string) {
	f.PushHook(func() string {
		return r0
	})
}

func (f *ClientGetEndpointFunc) nextHook() func() string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetEndpointFunc) appendCall(r0 ClientGetEndpointFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetEndpointFuncCall objects
// describing the invocations of this function.
func (f *ClientGetEndpointFunc) History() []ClientGetEndpointFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetEndpointFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetEndpointFuncCall is an object that describes an invocation of
// method GetEndpoint on an instance of MockClient.
type ClientGetEndpointFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetEndpointFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetEndpointFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientGetEventsFunc describes the behavior when the GetEvents method of
// the parent MockClient instance is invoked.
type ClientGetEventsFunc struct {
	defaultHook func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)
	hooks       []func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)
	history     []ClientGetEventsFuncCall
	mutex       sync.Mutex
}

// GetEvents delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) GetEvents(v0 context.Context, v1 uint64, v2 uint64, v3 []common.Address) ([]types.Log, error) {
	r0, r1 := m.GetEventsFunc.nextHook()(v0, v1, v2, v3)
	m.GetEventsFunc.appendCall(ClientGetEventsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetEvents method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetEventsFunc) SetDefaultHook(hook func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEvents method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetEventsFunc) PushHook(hook func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetEventsFunc) SetDefaultReturn(r0 []types.Log, r1 error) {
	f.SetDefaultHook(func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetEventsFunc) PushReturn(r0 []types.Log, r1 error) {
	f.PushHook(func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error) {
		return r0, r1
	})
}

func (f *ClientGetEventsFunc) nextHook() func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetEventsFunc) appendCall(r0 ClientGetEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetEventsFuncCall objects describing
// the invocations of this function.
func (f *ClientGetEventsFunc) History() []ClientGetEventsFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetEventsFuncCall is an object that describes an invocation of
// method GetEvents on an instance of MockClient.
type ClientGetEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 uint64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Log
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetFinalityDelayFunc describes the behavior when the
// GetFinalityDelay method of the parent MockClient instance is invoked.
type ClientGetFinalityDelayFunc struct {
	defaultHook func() uint64
	hooks       []func() uint64
	history     []ClientGetFinalityDelayFuncCall
	mutex       sync.Mutex
}

// GetFinalityDelay delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetFinalityDelay() uint64 {
	r0 := m.GetFinalityDelayFunc.nextHook()()
	m.GetFinalityDelayFunc.appendCall(ClientGetFinalityDelayFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetFinalityDelay
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetFinalityDelayFunc) SetDefaultHook(hook func() uint64) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFinalityDelay method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientGetFinalityDelayFunc) PushHook(hook func() uint64) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetFinalityDelayFunc) SetDefaultReturn(r0 uint64) {
	f.SetDefaultHook(func() uint64 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetFinalityDelayFunc) PushReturn(r0 uint64) {
	f.PushHook(func() uint64 {
		return r0
	})
}

func (f *ClientGetFinalityDelayFunc) nextHook() func() uint64 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetFinalityDelayFunc) appendCall(r0 ClientGetFinalityDelayFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetFinalityDelayFuncCall objects
// describing the invocations of this function.
func (f *ClientGetFinalityDelayFunc) History() []ClientGetFinalityDelayFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetFinalityDelayFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetFinalityDelayFuncCall is an object that describes an invocation
// of method GetFinalityDelay on an instance of MockClient.
type ClientGetFinalityDelayFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetFinalityDelayFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetFinalityDelayFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientGetFinalizedHeightFunc describes the behavior when the
// GetFinalizedHeight method of the parent MockClient instance is invoked.
type ClientGetFinalizedHeightFunc struct {
	defaultHook func(context.Context) (uint64, error)
	hooks       []func(context.Context) (uint64, error)
	history     []ClientGetFinalizedHeightFuncCall
	mutex       sync.Mutex
}

// GetFinalizedHeight delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetFinalizedHeight(v0 context.Context) (uint64, error) {
	r0, r1 := m.GetFinalizedHeightFunc.nextHook()(v0)
	m.GetFinalizedHeightFunc.appendCall(ClientGetFinalizedHeightFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetFinalizedHeight
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetFinalizedHeightFunc) SetDefaultHook(hook func(context.Context) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFinalizedHeight method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientGetFinalizedHeightFunc) PushHook(hook func(context.Context) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetFinalizedHeightFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetFinalizedHeightFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

func (f *ClientGetFinalizedHeightFunc) nextHook() func(context.Context) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetFinalizedHeightFunc) appendCall(r0 ClientGetFinalizedHeightFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetFinalizedHeightFuncCall objects
// describing the invocations of this function.
func (f *ClientGetFinalizedHeightFunc) History() []ClientGetFinalizedHeightFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetFinalizedHeightFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetFinalizedHeightFuncCall is an object that describes an
// invocation of method GetFinalizedHeight on an instance of MockClient.
type ClientGetFinalizedHeightFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetFinalizedHeightFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetFinalizedHeightFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetHeaderByNumberFunc describes the behavior when the
// GetHeaderByNumber method of the parent MockClient instance is invoked.
type ClientGetHeaderByNumberFunc struct {
	defaultHook func(context.Context, *big.Int) (*types.Header, error)
	hooks       []func(context.Context, *big.Int) (*types.Header, error)
	history     []ClientGetHeaderByNumberFuncCall
	mutex       sync.Mutex
}

// GetHeaderByNumber delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetHeaderByNumber(v0 context.Context, v1 *big.Int) (*types.Header, error) {
	r0, r1 := m.GetHeaderByNumberFunc.nextHook()(v0, v1)
	m.GetHeaderByNumberFunc.appendCall(ClientGetHeaderByNumberFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetHeaderByNumber
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetHeaderByNumberFunc) SetDefaultHook(hook func(context.Context, *big.Int) (*types.Header, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetHeaderByNumber method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientGetHeaderByNumberFunc) PushHook(hook func(context.Context, *big.Int) (*types.Header, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetHeaderByNumberFunc) SetDefaultReturn(r0 *types.Header, r1 error) {
	f.SetDefaultHook(func(context.Context, *big.Int) (*types.Header, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetHeaderByNumberFunc) PushReturn(r0 *types.Header, r1 error) {
	f.PushHook(func(context.Context, *big.Int) (*types.Header, error) {
		return r0, r1
	})
}

func (f *ClientGetHeaderByNumberFunc) nextHook() func(context.Context, *big.Int) (*types.Header, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetHeaderByNumberFunc) appendCall(r0 ClientGetHeaderByNumberFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetHeaderByNumberFuncCall objects
// describing the invocations of this function.
func (f *ClientGetHeaderByNumberFunc) History() []ClientGetHeaderByNumberFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetHeaderByNumberFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetHeaderByNumberFuncCall is an object that describes an invocation
// of method GetHeaderByNumber on an instance of MockClient.
type ClientGetHeaderByNumberFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Header
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetHeaderByNumberFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetHeaderByNumberFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetKnownAccountsFunc describes the behavior when the
// GetKnownAccounts method of the parent MockClient instance is invoked.
type ClientGetKnownAccountsFunc struct {
	defaultHook func() []accounts.Account
	hooks       []func() []accounts.Account
	history     []ClientGetKnownAccountsFuncCall
	mutex       sync.Mutex
}

// GetKnownAccounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetKnownAccounts() []accounts.Account {
	r0 := m.GetKnownAccountsFunc.nextHook()()
	m.GetKnownAccountsFunc.appendCall(ClientGetKnownAccountsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetKnownAccounts
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetKnownAccountsFunc) SetDefaultHook(hook func() []accounts.Account) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetKnownAccounts method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientGetKnownAccountsFunc) PushHook(hook func() []accounts.Account) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetKnownAccountsFunc) SetDefaultReturn(r0 []accounts.Account) {
	f.SetDefaultHook(func() []accounts.Account {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetKnownAccountsFunc) PushReturn(r0 []accounts.Account) {
	f.PushHook(func() []accounts.Account {
		return r0
	})
}

func (f *ClientGetKnownAccountsFunc) nextHook() func() []accounts.Account {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetKnownAccountsFunc) appendCall(r0 ClientGetKnownAccountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetKnownAccountsFuncCall objects
// describing the invocations of this function.
func (f *ClientGetKnownAccountsFunc) History() []ClientGetKnownAccountsFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetKnownAccountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetKnownAccountsFuncCall is an object that describes an invocation
// of method GetKnownAccounts on an instance of MockClient.
type ClientGetKnownAccountsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []accounts.Account
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetKnownAccountsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetKnownAccountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientGetPeerCountFunc describes the behavior when the GetPeerCount
// method of the parent MockClient instance is invoked.
type ClientGetPeerCountFunc struct {
	defaultHook func(context.Context) (uint64, error)
	hooks       []func(context.Context) (uint64, error)
	history     []ClientGetPeerCountFuncCall
	mutex       sync.Mutex
}

// GetPeerCount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) GetPeerCount(v0 context.Context) (uint64, error) {
	r0, r1 := m.GetPeerCountFunc.nextHook()(v0)
	m.GetPeerCountFunc.appendCall(ClientGetPeerCountFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPeerCount method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetPeerCountFunc) SetDefaultHook(hook func(context.Context) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPeerCount method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetPeerCountFunc) PushHook(hook func(context.Context) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetPeerCountFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetPeerCountFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

func (f *ClientGetPeerCountFunc) nextHook() func(context.Context) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetPeerCountFunc) appendCall(r0 ClientGetPeerCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetPeerCountFuncCall objects
// describing the invocations of this function.
func (f *ClientGetPeerCountFunc) History() []ClientGetPeerCountFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetPeerCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetPeerCountFuncCall is an object that describes an invocation of
// method GetPeerCount on an instance of MockClient.
type ClientGetPeerCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetPeerCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetPeerCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetPendingNonceFunc describes the behavior when the GetPendingNonce
// method of the parent MockClient instance is invoked.
type ClientGetPendingNonceFunc struct {
	defaultHook func(context.Context, common.Address) (uint64, error)
	hooks       []func(context.Context, common.Address) (uint64, error)
	history     []ClientGetPendingNonceFuncCall
	mutex       sync.Mutex
}

// GetPendingNonce delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetPendingNonce(v0 context.Context, v1 common.Address) (uint64, error) {
	r0, r1 := m.GetPendingNonceFunc.nextHook()(v0, v1)
	m.GetPendingNonceFunc.appendCall(ClientGetPendingNonceFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPendingNonce
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetPendingNonceFunc) SetDefaultHook(hook func(context.Context, common.Address) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPendingNonce method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetPendingNonceFunc) PushHook(hook func(context.Context, common.Address) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetPendingNonceFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Address) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetPendingNonceFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context, common.Address) (uint64, error) {
		return r0, r1
	})
}

func (f *ClientGetPendingNonceFunc) nextHook() func(context.Context, common.Address) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetPendingNonceFunc) appendCall(r0 ClientGetPendingNonceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetPendingNonceFuncCall objects
// describing the invocations of this function.
func (f *ClientGetPendingNonceFunc) History() []ClientGetPendingNonceFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetPendingNonceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetPendingNonceFuncCall is an object that describes an invocation
// of method GetPendingNonce on an instance of MockClient.
type ClientGetPendingNonceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetPendingNonceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetPendingNonceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetTimeoutContextFunc describes the behavior when the
// GetTimeoutContext method of the parent MockClient instance is invoked.
type ClientGetTimeoutContextFunc struct {
	defaultHook func() (context.Context, context.CancelFunc)
	hooks       []func() (context.Context, context.CancelFunc)
	history     []ClientGetTimeoutContextFuncCall
	mutex       sync.Mutex
}

// GetTimeoutContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetTimeoutContext() (context.Context, context.CancelFunc) {
	r0, r1 := m.GetTimeoutContextFunc.nextHook()()
	m.GetTimeoutContextFunc.appendCall(ClientGetTimeoutContextFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTimeoutContext
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetTimeoutContextFunc) SetDefaultHook(hook func() (context.Context, context.CancelFunc)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTimeoutContext method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientGetTimeoutContextFunc) PushHook(hook func() (context.Context, context.CancelFunc)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetTimeoutContextFunc) SetDefaultReturn(r0 context.Context, r1 context.CancelFunc) {
	f.SetDefaultHook(func() (context.Context, context.CancelFunc) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetTimeoutContextFunc) PushReturn(r0 context.Context, r1 context.CancelFunc) {
	f.PushHook(func() (context.Context, context.CancelFunc) {
		return r0, r1
	})
}

func (f *ClientGetTimeoutContextFunc) nextHook() func() (context.Context, context.CancelFunc) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetTimeoutContextFunc) appendCall(r0 ClientGetTimeoutContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetTimeoutContextFuncCall objects
// describing the invocations of this function.
func (f *ClientGetTimeoutContextFunc) History() []ClientGetTimeoutContextFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetTimeoutContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetTimeoutContextFuncCall is an object that describes an invocation
// of method GetTimeoutContext on an instance of MockClient.
type ClientGetTimeoutContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 context.CancelFunc
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetTimeoutContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetTimeoutContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetTransactionByHashFunc describes the behavior when the
// GetTransactionByHash method of the parent MockClient instance is invoked.
type ClientGetTransactionByHashFunc struct {
	defaultHook func(context.Context, common.Hash) (*types.Transaction, bool, error)
	hooks       []func(context.Context, common.Hash) (*types.Transaction, bool, error)
	history     []ClientGetTransactionByHashFuncCall
	mutex       sync.Mutex
}

// GetTransactionByHash delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetTransactionByHash(v0 context.Context, v1 common.Hash) (*types.Transaction, bool, error) {
	r0, r1, r2 := m.GetTransactionByHashFunc.nextHook()(v0, v1)
	m.GetTransactionByHashFunc.appendCall(ClientGetTransactionByHashFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetTransactionByHash
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetTransactionByHashFunc) SetDefaultHook(hook func(context.Context, common.Hash) (*types.Transaction, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTransactionByHash method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientGetTransactionByHashFunc) PushHook(hook func(context.Context, common.Hash) (*types.Transaction, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetTransactionByHashFunc) SetDefaultReturn(r0 *types.Transaction, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, common.Hash) (*types.Transaction, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetTransactionByHashFunc) PushReturn(r0 *types.Transaction, r1 bool, r2 error) {
	f.PushHook(func(context.Context, common.Hash) (*types.Transaction, bool, error) {
		return r0, r1, r2
	})
}

func (f *ClientGetTransactionByHashFunc) nextHook() func(context.Context, common.Hash) (*types.Transaction, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetTransactionByHashFunc) appendCall(r0 ClientGetTransactionByHashFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetTransactionByHashFuncCall objects
// describing the invocations of this function.
func (f *ClientGetTransactionByHashFunc) History() []ClientGetTransactionByHashFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetTransactionByHashFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetTransactionByHashFuncCall is an object that describes an
// invocation of method GetTransactionByHash on an instance of MockClient.
type ClientGetTransactionByHashFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetTransactionByHashFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetTransactionByHashFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientGetTransactionOptsFunc describes the behavior when the
// GetTransactionOpts method of the parent MockClient instance is invoked.
type ClientGetTransactionOptsFunc struct {
	defaultHook func(context.Context, accounts.Account) (*bind.TransactOpts, error)
	hooks       []func(context.Context, accounts.Account) (*bind.TransactOpts, error)
	history     []ClientGetTransactionOptsFuncCall
	mutex       sync.Mutex
}

// GetTransactionOpts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetTransactionOpts(v0 context.Context, v1 accounts.Account) (*bind.TransactOpts, error) {
	r0, r1 := m.GetTransactionOptsFunc.nextHook()(v0, v1)
	m.GetTransactionOptsFunc.appendCall(ClientGetTransactionOptsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTransactionOpts
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetTransactionOptsFunc) SetDefaultHook(hook func(context.Context, accounts.Account) (*bind.TransactOpts, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTransactionOpts method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientGetTransactionOptsFunc) PushHook(hook func(context.Context, accounts.Account) (*bind.TransactOpts, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetTransactionOptsFunc) SetDefaultReturn(r0 *bind.TransactOpts, r1 error) {
	f.SetDefaultHook(func(context.Context, accounts.Account) (*bind.TransactOpts, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetTransactionOptsFunc) PushReturn(r0 *bind.TransactOpts, r1 error) {
	f.PushHook(func(context.Context, accounts.Account) (*bind.TransactOpts, error) {
		return r0, r1
	})
}

func (f *ClientGetTransactionOptsFunc) nextHook() func(context.Context, accounts.Account) (*bind.TransactOpts, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetTransactionOptsFunc) appendCall(r0 ClientGetTransactionOptsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetTransactionOptsFuncCall objects
// describing the invocations of this function.
func (f *ClientGetTransactionOptsFunc) History() []ClientGetTransactionOptsFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetTransactionOptsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetTransactionOptsFuncCall is an object that describes an
// invocation of method GetTransactionOpts on an instance of MockClient.
type ClientGetTransactionOptsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 accounts.Account
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bind.TransactOpts
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetTransactionOptsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetTransactionOptsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetTransactionReceiptFunc describes the behavior when the
// GetTransactionReceipt method of the parent MockClient instance is
// invoked.
type ClientGetTransactionReceiptFunc struct {
	defaultHook func(context.Context, common.Hash) (*types.Receipt, error)
	hooks       []func(context.Context, common.Hash) (*types.Receipt, error)
	history     []ClientGetTransactionReceiptFuncCall
	mutex       sync.Mutex
}

// GetTransactionReceipt delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) GetTransactionReceipt(v0 context.Context, v1 common.Hash) (*types.Receipt, error) {
	r0, r1 := m.GetTransactionReceiptFunc.nextHook()(v0, v1)
	m.GetTransactionReceiptFunc.appendCall(ClientGetTransactionReceiptFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetTransactionReceipt method of the parent MockClient instance is invoked
// and the hook queue is empty.
func (f *ClientGetTransactionReceiptFunc) SetDefaultHook(hook func(context.Context, common.Hash) (*types.Receipt, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTransactionReceipt method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientGetTransactionReceiptFunc) PushHook(hook func(context.Context, common.Hash) (*types.Receipt, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetTransactionReceiptFunc) SetDefaultReturn(r0 *types.Receipt, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Hash) (*types.Receipt, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetTransactionReceiptFunc) PushReturn(r0 *types.Receipt, r1 error) {
	f.PushHook(func(context.Context, common.Hash) (*types.Receipt, error) {
		return r0, r1
	})
}

func (f *ClientGetTransactionReceiptFunc) nextHook() func(context.Context, common.Hash) (*types.Receipt, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetTransactionReceiptFunc) appendCall(r0 ClientGetTransactionReceiptFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetTransactionReceiptFuncCall objects
// describing the invocations of this function.
func (f *ClientGetTransactionReceiptFunc) History() []ClientGetTransactionReceiptFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetTransactionReceiptFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetTransactionReceiptFuncCall is an object that describes an
// invocation of method GetTransactionReceipt on an instance of MockClient.
type ClientGetTransactionReceiptFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Receipt
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetTransactionReceiptFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetTransactionReceiptFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetTxMaxGasFeeAllowedFunc describes the behavior when the
// GetTxMaxGasFeeAllowed method of the parent MockClient instance is
// invoked.
type ClientGetTxMaxGasFeeAllowedFunc struct {
	defaultHook func() *big.Int
	hooks       []func() *big.Int
	history     []ClientGetTxMaxGasFeeAllowedFuncCall
	mutex       sync.Mutex
}

// GetTxMaxGasFeeAllowed delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) GetTxMaxGasFeeAllowed() *big.Int {
	r0 := m.GetTxMaxGasFeeAllowedFunc.nextHook()()
	m.GetTxMaxGasFeeAllowedFunc.appendCall(ClientGetTxMaxGasFeeAllowedFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetTxMaxGasFeeAllowed method of the parent MockClient instance is invoked
// and the hook queue is empty.
func (f *ClientGetTxMaxGasFeeAllowedFunc) SetDefaultHook(hook func() *big.Int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTxMaxGasFeeAllowed method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientGetTxMaxGasFeeAllowedFunc) PushHook(hook func() *big.Int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetTxMaxGasFeeAllowedFunc) SetDefaultReturn(r0 *big.Int) {
	f.SetDefaultHook(func() *big.Int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetTxMaxGasFeeAllowedFunc) PushReturn(r0 *big.Int) {
	f.PushHook(func() *big.Int {
		return r0
	})
}

func (f *ClientGetTxMaxGasFeeAllowedFunc) nextHook() func() *big.Int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetTxMaxGasFeeAllowedFunc) appendCall(r0 ClientGetTxMaxGasFeeAllowedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetTxMaxGasFeeAllowedFuncCall objects
// describing the invocations of this function.
func (f *ClientGetTxMaxGasFeeAllowedFunc) History() []ClientGetTxMaxGasFeeAllowedFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetTxMaxGasFeeAllowedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetTxMaxGasFeeAllowedFuncCall is an object that describes an
// invocation of method GetTxMaxGasFeeAllowed on an instance of MockClient.
type ClientGetTxMaxGasFeeAllowedFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetTxMaxGasFeeAllowedFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetTxMaxGasFeeAllowedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientGetTxMaxStaleBlocksFunc describes the behavior when the
// GetTxMaxStaleBlocks method of the parent MockClient instance is invoked.
type ClientGetTxMaxStaleBlocksFunc struct {
	defaultHook func() uint64
	hooks       []func() uint64
	history     []ClientGetTxMaxStaleBlocksFuncCall
	mutex       sync.Mutex
}

// GetTxMaxStaleBlocks delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetTxMaxStaleBlocks() uint64 {
	r0 := m.GetTxMaxStaleBlocksFunc.nextHook()()
	m.GetTxMaxStaleBlocksFunc.appendCall(ClientGetTxMaxStaleBlocksFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetTxMaxStaleBlocks
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetTxMaxStaleBlocksFunc) SetDefaultHook(hook func() uint64) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTxMaxStaleBlocks method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientGetTxMaxStaleBlocksFunc) PushHook(hook func() uint64) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetTxMaxStaleBlocksFunc) SetDefaultReturn(r0 uint64) {
	f.SetDefaultHook(func() uint64 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetTxMaxStaleBlocksFunc) PushReturn(r0 uint64) {
	f.PushHook(func() uint64 {
		return r0
	})
}

func (f *ClientGetTxMaxStaleBlocksFunc) nextHook() func() uint64 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetTxMaxStaleBlocksFunc) appendCall(r0 ClientGetTxMaxStaleBlocksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetTxMaxStaleBlocksFuncCall objects
// describing the invocations of this function.
func (f *ClientGetTxMaxStaleBlocksFunc) History() []ClientGetTxMaxStaleBlocksFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetTxMaxStaleBlocksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetTxMaxStaleBlocksFuncCall is an object that describes an
// invocation of method GetTxMaxStaleBlocks on an instance of MockClient.
type ClientGetTxMaxStaleBlocksFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetTxMaxStaleBlocksFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetTxMaxStaleBlocksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientGetTxNotFoundMaxBlocksFunc describes the behavior when the
// GetTxNotFoundMaxBlocks method of the parent MockClient instance is
// invoked.
type ClientGetTxNotFoundMaxBlocksFunc struct {
	defaultHook func() uint64
	hooks       []func() uint64
	history     []ClientGetTxNotFoundMaxBlocksFuncCall
	mutex       sync.Mutex
}

// GetTxNotFoundMaxBlocks delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) GetTxNotFoundMaxBlocks() uint64 {
	r0 := m.GetTxNotFoundMaxBlocksFunc.nextHook()()
	m.GetTxNotFoundMaxBlocksFunc.appendCall(ClientGetTxNotFoundMaxBlocksFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetTxNotFoundMaxBlocks method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientGetTxNotFoundMaxBlocksFunc) SetDefaultHook(hook func() uint64) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTxNotFoundMaxBlocks method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientGetTxNotFoundMaxBlocksFunc) PushHook(hook func() uint64) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetTxNotFoundMaxBlocksFunc) SetDefaultReturn(r0 uint64) {
	f.SetDefaultHook(func() uint64 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetTxNotFoundMaxBlocksFunc) PushReturn(r0 uint64) {
	f.PushHook(func() uint64 {
		return r0
	})
}

func (f *ClientGetTxNotFoundMaxBlocksFunc) nextHook() func() uint64 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetTxNotFoundMaxBlocksFunc) appendCall(r0 ClientGetTxNotFoundMaxBlocksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetTxNotFoundMaxBlocksFuncCall
// objects describing the invocations of this function.
func (f *ClientGetTxNotFoundMaxBlocksFunc) History() []ClientGetTxNotFoundMaxBlocksFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetTxNotFoundMaxBlocksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetTxNotFoundMaxBlocksFuncCall is an object that describes an
// invocation of method GetTxNotFoundMaxBlocks on an instance of MockClient.
type ClientGetTxNotFoundMaxBlocksFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetTxNotFoundMaxBlocksFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetTxNotFoundMaxBlocksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientIsAccessibleFunc describes the behavior when the IsAccessible
// method of the parent MockClient instance is invoked.
type ClientIsAccessibleFunc struct {
	defaultHook func() bool
	hooks       []func() bool
	history     []ClientIsAccessibleFuncCall
	mutex       sync.Mutex
}

// IsAccessible delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) IsAccessible() bool {
	r0 := m.IsAccessibleFunc.nextHook()()
	m.IsAccessibleFunc.appendCall(ClientIsAccessibleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the IsAccessible method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientIsAccessibleFunc) SetDefaultHook(hook func() bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsAccessible method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientIsAccessibleFunc) PushHook(hook func() bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientIsAccessibleFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func() bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientIsAccessibleFunc) PushReturn(r0 bool) {
	f.PushHook(func() bool {
		return r0
	})
}

func (f *ClientIsAccessibleFunc) nextHook() func() bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientIsAccessibleFunc) appendCall(r0 ClientIsAccessibleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientIsAccessibleFuncCall objects
// describing the invocations of this function.
func (f *ClientIsAccessibleFunc) History() []ClientIsAccessibleFuncCall {
	f.mutex.Lock()
	history := make([]ClientIsAccessibleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientIsAccessibleFuncCall is an object that describes an invocation of
// method IsAccessible on an instance of MockClient.
type ClientIsAccessibleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientIsAccessibleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientIsAccessibleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientRetryTransactionFunc describes the behavior when the
// RetryTransaction method of the parent MockClient instance is invoked.
type ClientRetryTransactionFunc struct {
	defaultHook func(context.Context, *types.Transaction, *big.Int, *big.Int) (*types.Transaction, error)
	hooks       []func(context.Context, *types.Transaction, *big.Int, *big.Int) (*types.Transaction, error)
	history     []ClientRetryTransactionFuncCall
	mutex       sync.Mutex
}

// RetryTransaction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) RetryTransaction(v0 context.Context, v1 *types.Transaction, v2 *big.Int, v3 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.RetryTransactionFunc.nextHook()(v0, v1, v2, v3)
	m.RetryTransactionFunc.appendCall(ClientRetryTransactionFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RetryTransaction
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientRetryTransactionFunc) SetDefaultHook(hook func(context.Context, *types.Transaction, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RetryTransaction method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientRetryTransactionFunc) PushHook(hook func(context.Context, *types.Transaction, *big.Int, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientRetryTransactionFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Transaction, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientRetryTransactionFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(context.Context, *types.Transaction, *big.Int, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *ClientRetryTransactionFunc) nextHook() func(context.Context, *types.Transaction, *big.Int, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRetryTransactionFunc) appendCall(r0 ClientRetryTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRetryTransactionFuncCall objects
// describing the invocations of this function.
func (f *ClientRetryTransactionFunc) History() []ClientRetryTransactionFuncCall {
	f.mutex.Lock()
	history := make([]ClientRetryTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRetryTransactionFuncCall is an object that describes an invocation
// of method RetryTransaction on an instance of MockClient.
type ClientRetryTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Transaction
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRetryTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRetryTransactionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientSendTransactionFunc describes the behavior when the SendTransaction
// method of the parent MockClient instance is invoked.
type ClientSendTransactionFunc struct {
	defaultHook func(context.Context, *types.Transaction) error
	hooks       []func(context.Context, *types.Transaction) error
	history     []ClientSendTransactionFuncCall
	mutex       sync.Mutex
}

// SendTransaction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) SendTransaction(v0 context.Context, v1 *types.Transaction) error {
	r0 := m.SendTransactionFunc.nextHook()(v0, v1)
	m.SendTransactionFunc.appendCall(ClientSendTransactionFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendTransaction
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientSendTransactionFunc) SetDefaultHook(hook func(context.Context, *types.Transaction) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendTransaction method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientSendTransactionFunc) PushHook(hook func(context.Context, *types.Transaction) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSendTransactionFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.Transaction) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSendTransactionFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.Transaction) error {
		return r0
	})
}

func (f *ClientSendTransactionFunc) nextHook() func(context.Context, *types.Transaction) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSendTransactionFunc) appendCall(r0 ClientSendTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSendTransactionFuncCall objects
// describing the invocations of this function.
func (f *ClientSendTransactionFunc) History() []ClientSendTransactionFuncCall {
	f.mutex.Lock()
	history := make([]ClientSendTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSendTransactionFuncCall is an object that describes an invocation
// of method SendTransaction on an instance of MockClient.
type ClientSendTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Transaction
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSendTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSendTransactionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientSignTransactionFunc describes the behavior when the SignTransaction
// method of the parent MockClient instance is invoked.
type ClientSignTransactionFunc struct {
	defaultHook func(types.TxData, common.Address) (*types.Transaction, error)
	hooks       []func(types.TxData, common.Address) (*types.Transaction, error)
	history     []ClientSignTransactionFuncCall
	mutex       sync.Mutex
}

// SignTransaction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) SignTransaction(v0 types.TxData, v1 common.Address) (*types.Transaction, error) {
	r0, r1 := m.SignTransactionFunc.nextHook()(v0, v1)
	m.SignTransactionFunc.appendCall(ClientSignTransactionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SignTransaction
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientSignTransactionFunc) SetDefaultHook(hook func(types.TxData, common.Address) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SignTransaction method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientSignTransactionFunc) PushHook(hook func(types.TxData, common.Address) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSignTransactionFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(types.TxData, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSignTransactionFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(types.TxData, common.Address) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *ClientSignTransactionFunc) nextHook() func(types.TxData, common.Address) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSignTransactionFunc) appendCall(r0 ClientSignTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSignTransactionFuncCall objects
// describing the invocations of this function.
func (f *ClientSignTransactionFunc) History() []ClientSignTransactionFuncCall {
	f.mutex.Lock()
	history := make([]ClientSignTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSignTransactionFuncCall is an object that describes an invocation
// of method SignTransaction on an instance of MockClient.
type ClientSignTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 types.TxData
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSignTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSignTransactionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockEthereumContracts is a mock implementation of the EthereumContracts
// interface (from the package github.com/alicenet/alicenet/layer1) used for
// unit testing.
type MockEthereumContracts struct {
	// ALCAFunc is an instance of a mock function object controlling the
	// behavior of the method ALCA.
	ALCAFunc *EthereumContractsALCAFunc
	// ALCAAddressFunc is an instance of a mock function object controlling
	// the behavior of the method ALCAAddress.
	ALCAAddressFunc *EthereumContractsALCAAddressFunc
	// ALCBFunc is an instance of a mock function object controlling the
	// behavior of the method ALCB.
	ALCBFunc *EthereumContractsALCBFunc
	// ALCBAddressFunc is an instance of a mock function object controlling
	// the behavior of the method ALCBAddress.
	ALCBAddressFunc *EthereumContractsALCBAddressFunc
	// ContractFactoryFunc is an instance of a mock function object
	// controlling the behavior of the method ContractFactory.
	ContractFactoryFunc *EthereumContractsContractFactoryFunc
	// ContractFactoryAddressFunc is an instance of a mock function object
	// controlling the behavior of the method ContractFactoryAddress.
	ContractFactoryAddressFunc *EthereumContractsContractFactoryAddressFunc
	// DynamicsFunc is an instance of a mock function object controlling the
	// behavior of the method Dynamics.
	DynamicsFunc *EthereumContractsDynamicsFunc
	// DynamicsAddressFunc is an instance of a mock function object
	// controlling the behavior of the method DynamicsAddress.
	DynamicsAddressFunc *EthereumContractsDynamicsAddressFunc
	// EthdkgFunc is an instance of a mock function object controlling the
	// behavior of the method Ethdkg.
	EthdkgFunc *EthereumContractsEthdkgFunc
	// EthdkgAddressFunc is an instance of a mock function object
	// controlling the behavior of the method EthdkgAddress.
	EthdkgAddressFunc *EthereumContractsEthdkgAddressFunc
	// GetAllAddressesFunc is an instance of a mock function object
	// controlling the behavior of the method GetAllAddresses.
	GetAllAddressesFunc *EthereumContractsGetAllAddressesFunc
	// GovernanceFunc is an instance of a mock function object controlling
	// the behavior of the method Governance.
	GovernanceFunc *EthereumContractsGovernanceFunc
	// GovernanceAddressFunc is an instance of a mock function object
	// controlling the behavior of the method GovernanceAddress.
	GovernanceAddressFunc *EthereumContractsGovernanceAddressFunc
	// PublicStakingFunc is an instance of a mock function object
	// controlling the behavior of the method PublicStaking.
	PublicStakingFunc *EthereumContractsPublicStakingFunc
	// PublicStakingAddressFunc is an instance of a mock function object
	// controlling the behavior of the method PublicStakingAddress.
	PublicStakingAddressFunc *EthereumContractsPublicStakingAddressFunc
	// SnapshotsFunc is an instance of a mock function object controlling
	// the behavior of the method Snapshots.
	SnapshotsFunc *EthereumContractsSnapshotsFunc
	// SnapshotsAddressFunc is an instance of a mock function object
	// controlling the behavior of the method SnapshotsAddress.
	SnapshotsAddressFunc *EthereumContractsSnapshotsAddressFunc
	// ValidatorPoolFunc is an instance of a mock function object
	// controlling the behavior of the method ValidatorPool.
	ValidatorPoolFunc *EthereumContractsValidatorPoolFunc
	// ValidatorPoolAddressFunc is an instance of a mock function object
	// controlling the behavior of the method ValidatorPoolAddress.
	ValidatorPoolAddressFunc *EthereumContractsValidatorPoolAddressFunc
	// ValidatorStakingFunc is an instance of a mock function object
	// controlling the behavior of the method ValidatorStaking.
	ValidatorStakingFunc *EthereumContractsValidatorStakingFunc
	// ValidatorStakingAddressFunc is an instance of a mock function object
	// controlling the behavior of the method ValidatorStakingAddress.
	ValidatorStakingAddressFunc *EthereumContractsValidatorStakingAddressFunc
}

// NewMockEthereumContracts creates a new mock of the EthereumContracts
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockEthereumContracts() *MockEthereumContracts {
	return &MockEthereumContracts{
		ALCAFunc: &EthereumContractsALCAFunc{
			defaultHook: func() (r0 bindings.IALCA) {
				return
			},
		},
		ALCAAddressFunc: &EthereumContractsALCAAddressFunc{
			defaultHook: func() (r0 common.Address) {
				return
			},
		},
		ALCBFunc: &EthereumContractsALCBFunc{
			defaultHook: func() (r0 bindings.IALCB) {
				return
			},
		},
		ALCBAddressFunc: &EthereumContractsALCBAddressFunc{
			defaultHook: func() (r0 common.Address) {
				return
			},
		},
		ContractFactoryFunc: &EthereumContractsContractFactoryFunc{
			defaultHook: func() (r0 bindings.IAliceNetFactory) {
				return
			},
		},
		ContractFactoryAddressFunc: &EthereumContractsContractFactoryAddressFunc{
			defaultHook: func() (r0 common.Address) {
				return
			},
		},
		DynamicsFunc: &EthereumContractsDynamicsFunc{
			defaultHook: func() (r0 bindings.IDynamics) {
				return
			},
		},
		DynamicsAddressFunc: &EthereumContractsDynamicsAddressFunc{
			defaultHook: func() (r0 common.Address) {
				return
			},
		},
		EthdkgFunc: &EthereumContractsEthdkgFunc{
			defaultHook: func() (r0 bindings.IETHDKG) {
				return
			},
		},
		EthdkgAddressFunc: &EthereumContractsEthdkgAddressFunc{
			defaultHook: func() (r0 common.Address) {
				return
			},
		},
		GetAllAddressesFunc: &EthereumContractsGetAllAddressesFunc{
			defaultHook: func() (r0 []common.Address) {
				return
			},
		},
		GovernanceFunc: &EthereumContractsGovernanceFunc{
			defaultHook: func() (r0 bindings.IGovernance) {
				return
			},
		},
		GovernanceAddressFunc: &EthereumContractsGovernanceAddressFunc{
			defaultHook: func() (r0 common.Address) {
				return
			},
		},
		PublicStakingFunc: &EthereumContractsPublicStakingFunc{
			defaultHook: func() (r0 bindings.IPublicStaking) {
				return
			},
		},
		PublicStakingAddressFunc: &EthereumContractsPublicStakingAddressFunc{
			defaultHook: func() (r0 common.Address) {
				return
			},
		},
		SnapshotsFunc: &EthereumContractsSnapshotsFunc{
			defaultHook: func() (r0 bindings.ISnapshots) {
				return
			},
		},
		SnapshotsAddressFunc: &EthereumContractsSnapshotsAddressFunc{
			defaultHook: func() (r0 common.Address) {
				return
			},
		},
		ValidatorPoolFunc: &EthereumContractsValidatorPoolFunc{
			defaultHook: func() (r0 bindings.IValidatorPool) {
				return
			},
		},
		ValidatorPoolAddressFunc: &EthereumContractsValidatorPoolAddressFunc{
			defaultHook: func() (r0 common.Address) {
				return
			},
		},
		ValidatorStakingFunc: &EthereumContractsValidatorStakingFunc{
			defaultHook: func() (r0 bindings.IValidatorStaking) {
				return
			},
		},
		ValidatorStakingAddressFunc: &EthereumContractsValidatorStakingAddressFunc{
			defaultHook: func() (r0 common.Address) {
				return
			},
		},
	}
}

// NewStrictMockEthereumContracts creates a new mock of the
// EthereumContracts interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockEthereumContracts() *MockEthereumContracts {
	return &MockEthereumContracts{
		ALCAFunc: &EthereumContractsALCAFunc{
			defaultHook: func() bindings.IALCA {
				panic("unexpected invocation of MockEthereumContracts.ALCA")
			},
		},
		ALCAAddressFunc: &EthereumContractsALCAAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockEthereumContracts.ALCAAddress")
			},
		},
		ALCBFunc: &EthereumContractsALCBFunc{
			defaultHook: func() bindings.IALCB {
				panic("unexpected invocation of MockEthereumContracts.ALCB")
			},
		},
		ALCBAddressFunc: &EthereumContractsALCBAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockEthereumContracts.ALCBAddress")
			},
		},
		ContractFactoryFunc: &EthereumContractsContractFactoryFunc{
			defaultHook: func() bindings.IAliceNetFactory {
				panic("unexpected invocation of MockEthereumContracts.ContractFactory")
			},
		},
		ContractFactoryAddressFunc: &EthereumContractsContractFactoryAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockEthereumContracts.ContractFactoryAddress")
			},
		},
		DynamicsFunc: &EthereumContractsDynamicsFunc{
			defaultHook: func() bindings.IDynamics {
				panic("unexpected invocation of MockEthereumContracts.Dynamics")
			},
		},
		DynamicsAddressFunc: &EthereumContractsDynamicsAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockEthereumContracts.DynamicsAddress")
			},
		},
		EthdkgFunc: &EthereumContractsEthdkgFunc{
			defaultHook: func() bindings.IETHDKG {
				panic("unexpected invocation of MockEthereumContracts.Ethdkg")
			},
		},
		EthdkgAddressFunc: &EthereumContractsEthdkgAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockEthereumContracts.EthdkgAddress")
			},
		},
		GetAllAddressesFunc: &EthereumContractsGetAllAddressesFunc{
			defaultHook: func() []common.Address {
				panic("unexpected invocation of MockEthereumContracts.GetAllAddresses")
			},
		},
		GovernanceFunc: &EthereumContractsGovernanceFunc{
			defaultHook: func() bindings.IGovernance {
				panic("unexpected invocation of MockEthereumContracts.Governance")
			},
		},
		GovernanceAddressFunc: &EthereumContractsGovernanceAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockEthereumContracts.GovernanceAddress")
			},
		},
		PublicStakingFunc: &EthereumContractsPublicStakingFunc{
			defaultHook: func() bindings.IPublicStaking {
				panic("unexpected invocation of MockEthereumContracts.PublicStaking")
			},
		},
		PublicStakingAddressFunc: &EthereumContractsPublicStakingAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockEthereumContracts.PublicStakingAddress")
			},
		},
		SnapshotsFunc: &EthereumContractsSnapshotsFunc{
			defaultHook: func() bindings.ISnapshots {
				panic("unexpected invocation of MockEthereumContracts.Snapshots")
			},
		},
		SnapshotsAddressFunc: &EthereumContractsSnapshotsAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockEthereumContracts.SnapshotsAddress")
			},
		},
		ValidatorPoolFunc: &EthereumContractsValidatorPoolFunc{
			defaultHook: func() bindings.IValidatorPool {
				panic("unexpected invocation of MockEthereumContracts.ValidatorPool")
			},
		},
		ValidatorPoolAddressFunc: &EthereumContractsValidatorPoolAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockEthereumContracts.ValidatorPoolAddress")
			},
		},
		ValidatorStakingFunc: &EthereumContractsValidatorStakingFunc{
			defaultHook: func() bindings.IValidatorStaking {
				panic("unexpected invocation of MockEthereumContracts.ValidatorStaking")
			},
		},
		ValidatorStakingAddressFunc: &EthereumContractsValidatorStakingAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockEthereumContracts.ValidatorStakingAddress")
			},
		},
	}
}

// NewMockEthereumContractsFrom creates a new mock of the
// MockEthereumContracts interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockEthereumContractsFrom(i layer1.EthereumContracts) *MockEthereumContracts {
	return &MockEthereumContracts{
		ALCAFunc: &EthereumContractsALCAFunc{
			defaultHook: i.ALCA,
		},
		ALCAAddressFunc: &EthereumContractsALCAAddressFunc{
			defaultHook: i.ALCAAddress,
		},
		ALCBFunc: &EthereumContractsALCBFunc{
			defaultHook: i.ALCB,
		},
		ALCBAddressFunc: &EthereumContractsALCBAddressFunc{
			defaultHook: i.ALCBAddress,
		},
		ContractFactoryFunc: &EthereumContractsContractFactoryFunc{
			defaultHook: i.ContractFactory,
		},
		ContractFactoryAddressFunc: &EthereumContractsContractFactoryAddressFunc{
			defaultHook: i.ContractFactoryAddress,
		},
		DynamicsFunc: &EthereumContractsDynamicsFunc{
			defaultHook: i.Dynamics,
		},
		DynamicsAddressFunc: &EthereumContractsDynamicsAddressFunc{
			defaultHook: i.DynamicsAddress,
		},
		EthdkgFunc: &EthereumContractsEthdkgFunc{
			defaultHook: i.Ethdkg,
		},
		EthdkgAddressFunc: &EthereumContractsEthdkgAddressFunc{
			defaultHook: i.EthdkgAddress,
		},
		GetAllAddressesFunc: &EthereumContractsGetAllAddressesFunc{
			defaultHook: i.GetAllAddresses,
		},
		GovernanceFunc: &EthereumContractsGovernanceFunc{
			defaultHook: i.Governance,
		},
		GovernanceAddressFunc: &EthereumContractsGovernanceAddressFunc{
			defaultHook: i.GovernanceAddress,
		},
		PublicStakingFunc: &EthereumContractsPublicStakingFunc{
			defaultHook: i.PublicStaking,
		},
		PublicStakingAddressFunc: &EthereumContractsPublicStakingAddressFunc{
			defaultHook: i.PublicStakingAddress,
		},
		SnapshotsFunc: &EthereumContractsSnapshotsFunc{
			defaultHook: i.Snapshots,
		},
		SnapshotsAddressFunc: &EthereumContractsSnapshotsAddressFunc{
			defaultHook: i.SnapshotsAddress,
		},
		ValidatorPoolFunc: &EthereumContractsValidatorPoolFunc{
			defaultHook: i.ValidatorPool,
		},
		ValidatorPoolAddressFunc: &EthereumContractsValidatorPoolAddressFunc{
			defaultHook: i.ValidatorPoolAddress,
		},
		ValidatorStakingFunc: &EthereumContractsValidatorStakingFunc{
			defaultHook: i.ValidatorStaking,
		},
		ValidatorStakingAddressFunc: &EthereumContractsValidatorStakingAddressFunc{
			defaultHook: i.ValidatorStakingAddress,
		},
	}
}

// EthereumContractsALCAFunc describes the behavior when the ALCA method of
// the parent MockEthereumContracts instance is invoked.
type EthereumContractsALCAFunc struct {
	defaultHook func() bindings.IALCA
	hooks       []func() bindings.IALCA
	history     []EthereumContractsALCAFuncCall
	mutex       sync.Mutex
}

// ALCA delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEthereumContracts) ALCA() bindings.IALCA {
	r0 := m.ALCAFunc.nextHook()()
	m.ALCAFunc.appendCall(EthereumContractsALCAFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ALCA method of the
// parent MockEthereumContracts instance is invoked and the hook queue is
// empty.
func (f *EthereumContractsALCAFunc) SetDefaultHook(hook func() bindings.IALCA) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ALCA method of the parent MockEthereumContracts instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EthereumContractsALCAFunc) PushHook(hook func() bindings.IALCA) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsALCAFunc) SetDefaultReturn(r0 bindings.IALCA) {
	f.SetDefaultHook(func() bindings.IALCA {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsALCAFunc) PushReturn(r0 bindings.IALCA) {
	f.PushHook(func() bindings.IALCA {
		return r0
	})
}

func (f *EthereumContractsALCAFunc) nextHook() func() bindings.IALCA {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsALCAFunc) appendCall(r0 EthereumContractsALCAFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsALCAFuncCall objects
// describing the invocations of this function.
func (f *EthereumContractsALCAFunc) History() []EthereumContractsALCAFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsALCAFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsALCAFuncCall is an object that describes an invocation
// of method ALCA on an instance of MockEthereumContracts.
type EthereumContractsALCAFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IALCA
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsALCAFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsALCAFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsALCAAddressFunc describes the behavior when the
// ALCAAddress method of the parent MockEthereumContracts instance is
// invoked.
type EthereumContractsALCAAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []EthereumContractsALCAAddressFuncCall
	mutex       sync.Mutex
}

// ALCAAddress delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEthereumContracts) ALCAAddress() common.Address {
	r0 := m.ALCAAddressFunc.nextHook()()
	m.ALCAAddressFunc.appendCall(EthereumContractsALCAAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ALCAAddress method
// of the parent MockEthereumContracts instance is invoked and the hook
// queue is empty.
func (f *EthereumContractsALCAAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ALCAAddress method of the parent MockEthereumContracts instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EthereumContractsALCAAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsALCAAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsALCAAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *EthereumContractsALCAAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsALCAAddressFunc) appendCall(r0 EthereumContractsALCAAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsALCAAddressFuncCall
// objects describing the invocations of this function.
func (f *EthereumContractsALCAAddressFunc) History() []EthereumContractsALCAAddressFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsALCAAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsALCAAddressFuncCall is an object that describes an
// invocation of method ALCAAddress on an instance of MockEthereumContracts.
type EthereumContractsALCAAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsALCAAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsALCAAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsALCBFunc describes the behavior when the ALCB method of
// the parent MockEthereumContracts instance is invoked.
type EthereumContractsALCBFunc struct {
	defaultHook func() bindings.IALCB
	hooks       []func() bindings.IALCB
	history     []EthereumContractsALCBFuncCall
	mutex       sync.Mutex
}

// ALCB delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEthereumContracts) ALCB() bindings.IALCB {
	r0 := m.ALCBFunc.nextHook()()
	m.ALCBFunc.appendCall(EthereumContractsALCBFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ALCB method of the
// parent MockEthereumContracts instance is invoked and the hook queue is
// empty.
func (f *EthereumContractsALCBFunc) SetDefaultHook(hook func() bindings.IALCB) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ALCB method of the parent MockEthereumContracts instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EthereumContractsALCBFunc) PushHook(hook func() bindings.IALCB) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsALCBFunc) SetDefaultReturn(r0 bindings.IALCB) {
	f.SetDefaultHook(func() bindings.IALCB {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsALCBFunc) PushReturn(r0 bindings.IALCB) {
	f.PushHook(func() bindings.IALCB {
		return r0
	})
}

func (f *EthereumContractsALCBFunc) nextHook() func() bindings.IALCB {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsALCBFunc) appendCall(r0 EthereumContractsALCBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsALCBFuncCall objects
// describing the invocations of this function.
func (f *EthereumContractsALCBFunc) History() []EthereumContractsALCBFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsALCBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsALCBFuncCall is an object that describes an invocation
// of method ALCB on an instance of MockEthereumContracts.
type EthereumContractsALCBFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IALCB
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsALCBFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsALCBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsALCBAddressFunc describes the behavior when the
// ALCBAddress method of the parent MockEthereumContracts instance is
// invoked.
type EthereumContractsALCBAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []EthereumContractsALCBAddressFuncCall
	mutex       sync.Mutex
}

// ALCBAddress delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEthereumContracts) ALCBAddress() common.Address {
	r0 := m.ALCBAddressFunc.nextHook()()
	m.ALCBAddressFunc.appendCall(EthereumContractsALCBAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ALCBAddress method
// of the parent MockEthereumContracts instance is invoked and the hook
// queue is empty.
func (f *EthereumContractsALCBAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ALCBAddress method of the parent MockEthereumContracts instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EthereumContractsALCBAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsALCBAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsALCBAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *EthereumContractsALCBAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsALCBAddressFunc) appendCall(r0 EthereumContractsALCBAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsALCBAddressFuncCall
// objects describing the invocations of this function.
func (f *EthereumContractsALCBAddressFunc) History() []EthereumContractsALCBAddressFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsALCBAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsALCBAddressFuncCall is an object that describes an
// invocation of method ALCBAddress on an instance of MockEthereumContracts.
type EthereumContractsALCBAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsALCBAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsALCBAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsContractFactoryFunc describes the behavior when the
// ContractFactory method of the parent MockEthereumContracts instance is
// invoked.
type EthereumContractsContractFactoryFunc struct {
	defaultHook func() bindings.IAliceNetFactory
	hooks       []func() bindings.IAliceNetFactory
	history     []EthereumContractsContractFactoryFuncCall
	mutex       sync.Mutex
}

// ContractFactory delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEthereumContracts) ContractFactory() bindings.IAliceNetFactory {
	r0 := m.ContractFactoryFunc.nextHook()()
	m.ContractFactoryFunc.appendCall(EthereumContractsContractFactoryFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ContractFactory
// method of the parent MockEthereumContracts instance is invoked and the
// hook queue is empty.
func (f *EthereumContractsContractFactoryFunc) SetDefaultHook(hook func() bindings.IAliceNetFactory) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ContractFactory method of the parent MockEthereumContracts instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EthereumContractsContractFactoryFunc) PushHook(hook func() bindings.IAliceNetFactory) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsContractFactoryFunc) SetDefaultReturn(r0 bindings.IAliceNetFactory) {
	f.SetDefaultHook(func() bindings.IAliceNetFactory {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsContractFactoryFunc) PushReturn(r0 bindings.IAliceNetFactory) {
	f.PushHook(func() bindings.IAliceNetFactory {
		return r0
	})
}

func (f *EthereumContractsContractFactoryFunc) nextHook() func() bindings.IAliceNetFactory {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsContractFactoryFunc) appendCall(r0 EthereumContractsContractFactoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsContractFactoryFuncCall
// objects describing the invocations of this function.
func (f *EthereumContractsContractFactoryFunc) History() []EthereumContractsContractFactoryFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsContractFactoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsContractFactoryFuncCall is an object that describes an
// invocation of method ContractFactory on an instance of
// MockEthereumContracts.
type EthereumContractsContractFactoryFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IAliceNetFactory
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsContractFactoryFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsContractFactoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsContractFactoryAddressFunc describes the behavior when
// the ContractFactoryAddress method of the parent MockEthereumContracts
// instance is invoked.
type EthereumContractsContractFactoryAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []EthereumContractsContractFactoryAddressFuncCall
	mutex       sync.Mutex
}

// ContractFactoryAddress delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockEthereumContracts) ContractFactoryAddress() common.Address {
	r0 := m.ContractFactoryAddressFunc.nextHook()()
	m.ContractFactoryAddressFunc.appendCall(EthereumContractsContractFactoryAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ContractFactoryAddress method of the parent MockEthereumContracts
// instance is invoked and the hook queue is empty.
func (f *EthereumContractsContractFactoryAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ContractFactoryAddress method of the parent MockEthereumContracts
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EthereumContractsContractFactoryAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsContractFactoryAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsContractFactoryAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *EthereumContractsContractFactoryAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsContractFactoryAddressFunc) appendCall(r0 EthereumContractsContractFactoryAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EthereumContractsContractFactoryAddressFuncCall objects describing the
// invocations of this function.
func (f *EthereumContractsContractFactoryAddressFunc) History() []EthereumContractsContractFactoryAddressFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsContractFactoryAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsContractFactoryAddressFuncCall is an object that
// describes an invocation of method ContractFactoryAddress on an instance
// of MockEthereumContracts.
type EthereumContractsContractFactoryAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsContractFactoryAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsContractFactoryAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsDynamicsFunc describes the behavior when the Dynamics
// method of the parent MockEthereumContracts instance is invoked.
type EthereumContractsDynamicsFunc struct {
	defaultHook func() bindings.IDynamics
	hooks       []func() bindings.IDynamics
	history     []EthereumContractsDynamicsFuncCall
	mutex       sync.Mutex
}

// Dynamics delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEthereumContracts) Dynamics() bindings.IDynamics {
	r0 := m.DynamicsFunc.nextHook()()
	m.DynamicsFunc.appendCall(EthereumContractsDynamicsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Dynamics method of
// the parent MockEthereumContracts instance is invoked and the hook queue
// is empty.
func (f *EthereumContractsDynamicsFunc) SetDefaultHook(hook func() bindings.IDynamics) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Dynamics method of the parent MockEthereumContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EthereumContractsDynamicsFunc) PushHook(hook func() bindings.IDynamics) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsDynamicsFunc) SetDefaultReturn(r0 bindings.IDynamics) {
	f.SetDefaultHook(func() bindings.IDynamics {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsDynamicsFunc) PushReturn(r0 bindings.IDynamics) {
	f.PushHook(func() bindings.IDynamics {
		return r0
	})
}

func (f *EthereumContractsDynamicsFunc) nextHook() func() bindings.IDynamics {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsDynamicsFunc) appendCall(r0 EthereumContractsDynamicsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsDynamicsFuncCall objects
// describing the invocations of this function.
func (f *EthereumContractsDynamicsFunc) History() []EthereumContractsDynamicsFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsDynamicsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsDynamicsFuncCall is an object that describes an
// invocation of method Dynamics on an instance of MockEthereumContracts.
type EthereumContractsDynamicsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IDynamics
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsDynamicsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsDynamicsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsDynamicsAddressFunc describes the behavior when the
// DynamicsAddress method of the parent MockEthereumContracts instance is
// invoked.
type EthereumContractsDynamicsAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []EthereumContractsDynamicsAddressFuncCall
	mutex       sync.Mutex
}

// DynamicsAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEthereumContracts) DynamicsAddress() common.Address {
	r0 := m.DynamicsAddressFunc.nextHook()()
	m.DynamicsAddressFunc.appendCall(EthereumContractsDynamicsAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the DynamicsAddress
// method of the parent MockEthereumContracts instance is invoked and the
// hook queue is empty.
func (f *EthereumContractsDynamicsAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DynamicsAddress method of the parent MockEthereumContracts instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EthereumContractsDynamicsAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsDynamicsAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsDynamicsAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *EthereumContractsDynamicsAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsDynamicsAddressFunc) appendCall(r0 EthereumContractsDynamicsAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsDynamicsAddressFuncCall
// objects describing the invocations of this function.
func (f *EthereumContractsDynamicsAddressFunc) History() []EthereumContractsDynamicsAddressFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsDynamicsAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsDynamicsAddressFuncCall is an object that describes an
// invocation of method DynamicsAddress on an instance of
// MockEthereumContracts.
type EthereumContractsDynamicsAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsDynamicsAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsDynamicsAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsEthdkgFunc describes the behavior when the Ethdkg method
// of the parent MockEthereumContracts instance is invoked.
type EthereumContractsEthdkgFunc struct {
	defaultHook func() bindings.IETHDKG
	hooks       []func() bindings.IETHDKG
	history     []EthereumContractsEthdkgFuncCall
	mutex       sync.Mutex
}

// Ethdkg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEthereumContracts) Ethdkg() bindings.IETHDKG {
	r0 := m.EthdkgFunc.nextHook()()
	m.EthdkgFunc.appendCall(EthereumContractsEthdkgFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Ethdkg method of the
// parent MockEthereumContracts instance is invoked and the hook queue is
// empty.
func (f *EthereumContractsEthdkgFunc) SetDefaultHook(hook func() bindings.IETHDKG) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Ethdkg method of the parent MockEthereumContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EthereumContractsEthdkgFunc) PushHook(hook func() bindings.IETHDKG) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsEthdkgFunc) SetDefaultReturn(r0 bindings.IETHDKG) {
	f.SetDefaultHook(func() bindings.IETHDKG {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsEthdkgFunc) PushReturn(r0 bindings.IETHDKG) {
	f.PushHook(func() bindings.IETHDKG {
		return r0
	})
}

func (f *EthereumContractsEthdkgFunc) nextHook() func() bindings.IETHDKG {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsEthdkgFunc) appendCall(r0 EthereumContractsEthdkgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsEthdkgFuncCall objects
// describing the invocations of this function.
func (f *EthereumContractsEthdkgFunc) History() []EthereumContractsEthdkgFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsEthdkgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsEthdkgFuncCall is an object that describes an invocation
// of method Ethdkg on an instance of MockEthereumContracts.
type EthereumContractsEthdkgFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IETHDKG
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsEthdkgFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsEthdkgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsEthdkgAddressFunc describes the behavior when the
// EthdkgAddress method of the parent MockEthereumContracts instance is
// invoked.
type EthereumContractsEthdkgAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []EthereumContractsEthdkgAddressFuncCall
	mutex       sync.Mutex
}

// EthdkgAddress delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEthereumContracts) EthdkgAddress() common.Address {
	r0 := m.EthdkgAddressFunc.nextHook()()
	m.EthdkgAddressFunc.appendCall(EthereumContractsEthdkgAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the EthdkgAddress method
// of the parent MockEthereumContracts instance is invoked and the hook
// queue is empty.
func (f *EthereumContractsEthdkgAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EthdkgAddress method of the parent MockEthereumContracts instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EthereumContractsEthdkgAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsEthdkgAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsEthdkgAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *EthereumContractsEthdkgAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsEthdkgAddressFunc) appendCall(r0 EthereumContractsEthdkgAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsEthdkgAddressFuncCall
// objects describing the invocations of this function.
func (f *EthereumContractsEthdkgAddressFunc) History() []EthereumContractsEthdkgAddressFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsEthdkgAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsEthdkgAddressFuncCall is an object that describes an
// invocation of method EthdkgAddress on an instance of
// MockEthereumContracts.
type EthereumContractsEthdkgAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsEthdkgAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsEthdkgAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsGetAllAddressesFunc describes the behavior when the
// GetAllAddresses method of the parent MockEthereumContracts instance is
// invoked.
type EthereumContractsGetAllAddressesFunc struct {
	defaultHook func() []common.Address
	hooks       []func() []common.Address
	history     []EthereumContractsGetAllAddressesFuncCall
	mutex       sync.Mutex
}

// GetAllAddresses delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEthereumContracts) GetAllAddresses() []common.Address {
	r0 := m.GetAllAddressesFunc.nextHook()()
	m.GetAllAddressesFunc.appendCall(EthereumContractsGetAllAddressesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetAllAddresses
// method of the parent MockEthereumContracts instance is invoked and the
// hook queue is empty.
func (f *EthereumContractsGetAllAddressesFunc) SetDefaultHook(hook func() []common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAllAddresses method of the parent MockEthereumContracts instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EthereumContractsGetAllAddressesFunc) PushHook(hook func() []common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsGetAllAddressesFunc) SetDefaultReturn(r0 []common.Address) {
	f.SetDefaultHook(func() []common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsGetAllAddressesFunc) PushReturn(r0 []common.Address) {
	f.PushHook(func() []common.Address {
		return r0
	})
}

func (f *EthereumContractsGetAllAddressesFunc) nextHook() func() []common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsGetAllAddressesFunc) appendCall(r0 EthereumContractsGetAllAddressesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsGetAllAddressesFuncCall
// objects describing the invocations of this function.
func (f *EthereumContractsGetAllAddressesFunc) History() []EthereumContractsGetAllAddressesFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsGetAllAddressesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsGetAllAddressesFuncCall is an object that describes an
// invocation of method GetAllAddresses on an instance of
// MockEthereumContracts.
type EthereumContractsGetAllAddressesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsGetAllAddressesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsGetAllAddressesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsGovernanceFunc describes the behavior when the
// Governance method of the parent MockEthereumContracts instance is
// invoked.
type EthereumContractsGovernanceFunc struct {
	defaultHook func() bindings.IGovernance
	hooks       []func() bindings.IGovernance
	history     []EthereumContractsGovernanceFuncCall
	mutex       sync.Mutex
}

// Governance delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEthereumContracts) Governance() bindings.IGovernance {
	r0 := m.GovernanceFunc.nextHook()()
	m.GovernanceFunc.appendCall(EthereumContractsGovernanceFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Governance method of
// the parent MockEthereumContracts instance is invoked and the hook queue
// is empty.
func (f *EthereumContractsGovernanceFunc) SetDefaultHook(hook func() bindings.IGovernance) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Governance method of the parent MockEthereumContracts instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EthereumContractsGovernanceFunc) PushHook(hook func() bindings.IGovernance) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsGovernanceFunc) SetDefaultReturn(r0 bindings.IGovernance) {
	f.SetDefaultHook(func() bindings.IGovernance {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsGovernanceFunc) PushReturn(r0 bindings.IGovernance) {
	f.PushHook(func() bindings.IGovernance {
		return r0
	})
}

func (f *EthereumContractsGovernanceFunc) nextHook() func() bindings.IGovernance {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsGovernanceFunc) appendCall(r0 EthereumContractsGovernanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsGovernanceFuncCall objects
// describing the invocations of this function.
func (f *EthereumContractsGovernanceFunc) History() []EthereumContractsGovernanceFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsGovernanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsGovernanceFuncCall is an object that describes an
// invocation of method Governance on an instance of MockEthereumContracts.
type EthereumContractsGovernanceFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IGovernance
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsGovernanceFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsGovernanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsGovernanceAddressFunc describes the behavior when the
// GovernanceAddress method of the parent MockEthereumContracts instance is
// invoked.
type EthereumContractsGovernanceAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []EthereumContractsGovernanceAddressFuncCall
	mutex       sync.Mutex
}

// GovernanceAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEthereumContracts) GovernanceAddress() common.Address {
	r0 := m.GovernanceAddressFunc.nextHook()()
	m.GovernanceAddressFunc.appendCall(EthereumContractsGovernanceAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GovernanceAddress
// method of the parent MockEthereumContracts instance is invoked and the
// hook queue is empty.
func (f *EthereumContractsGovernanceAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GovernanceAddress method of the parent MockEthereumContracts instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EthereumContractsGovernanceAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsGovernanceAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsGovernanceAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *EthereumContractsGovernanceAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsGovernanceAddressFunc) appendCall(r0 EthereumContractsGovernanceAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsGovernanceAddressFuncCall
// objects describing the invocations of this function.
func (f *EthereumContractsGovernanceAddressFunc) History() []EthereumContractsGovernanceAddressFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsGovernanceAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsGovernanceAddressFuncCall is an object that describes an
// invocation of method GovernanceAddress on an instance of
// MockEthereumContracts.
type EthereumContractsGovernanceAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsGovernanceAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsGovernanceAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsPublicStakingFunc describes the behavior when the
// PublicStaking method of the parent MockEthereumContracts instance is
// invoked.
type EthereumContractsPublicStakingFunc struct {
	defaultHook func() bindings.IPublicStaking
	hooks       []func() bindings.IPublicStaking
	history     []EthereumContractsPublicStakingFuncCall
	mutex       sync.Mutex
}

// PublicStaking delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEthereumContracts) PublicStaking() bindings.IPublicStaking {
	r0 := m.PublicStakingFunc.nextHook()()
	m.PublicStakingFunc.appendCall(EthereumContractsPublicStakingFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the PublicStaking method
// of the parent MockEthereumContracts instance is invoked and the hook
// queue is empty.
func (f *EthereumContractsPublicStakingFunc) SetDefaultHook(hook func() bindings.IPublicStaking) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PublicStaking method of the parent MockEthereumContracts instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EthereumContractsPublicStakingFunc) PushHook(hook func() bindings.IPublicStaking) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsPublicStakingFunc) SetDefaultReturn(r0 bindings.IPublicStaking) {
	f.SetDefaultHook(func() bindings.IPublicStaking {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsPublicStakingFunc) PushReturn(r0 bindings.IPublicStaking) {
	f.PushHook(func() bindings.IPublicStaking {
		return r0
	})
}

func (f *EthereumContractsPublicStakingFunc) nextHook() func() bindings.IPublicStaking {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsPublicStakingFunc) appendCall(r0 EthereumContractsPublicStakingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsPublicStakingFuncCall
// objects describing the invocations of this function.
func (f *EthereumContractsPublicStakingFunc) History() []EthereumContractsPublicStakingFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsPublicStakingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsPublicStakingFuncCall is an object that describes an
// invocation of method PublicStaking on an instance of
// MockEthereumContracts.
type EthereumContractsPublicStakingFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IPublicStaking
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsPublicStakingFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsPublicStakingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsPublicStakingAddressFunc describes the behavior when the
// PublicStakingAddress method of the parent MockEthereumContracts instance
// is invoked.
type EthereumContractsPublicStakingAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []EthereumContractsPublicStakingAddressFuncCall
	mutex       sync.Mutex
}

// PublicStakingAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEthereumContracts) PublicStakingAddress() common.Address {
	r0 := m.PublicStakingAddressFunc.nextHook()()
	m.PublicStakingAddressFunc.appendCall(EthereumContractsPublicStakingAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the PublicStakingAddress
// method of the parent MockEthereumContracts instance is invoked and the
// hook queue is empty.
func (f *EthereumContractsPublicStakingAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PublicStakingAddress method of the parent MockEthereumContracts instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EthereumContractsPublicStakingAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsPublicStakingAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsPublicStakingAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *EthereumContractsPublicStakingAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsPublicStakingAddressFunc) appendCall(r0 EthereumContractsPublicStakingAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EthereumContractsPublicStakingAddressFuncCall objects describing the
// invocations of this function.
func (f *EthereumContractsPublicStakingAddressFunc) History() []EthereumContractsPublicStakingAddressFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsPublicStakingAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsPublicStakingAddressFuncCall is an object that describes
// an invocation of method PublicStakingAddress on an instance of
// MockEthereumContracts.
type EthereumContractsPublicStakingAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsPublicStakingAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsPublicStakingAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsSnapshotsFunc describes the behavior when the Snapshots
// method of the parent MockEthereumContracts instance is invoked.
type EthereumContractsSnapshotsFunc struct {
	defaultHook func() bindings.ISnapshots
	hooks       []func() bindings.ISnapshots
	history     []EthereumContractsSnapshotsFuncCall
	mutex       sync.Mutex
}

// Snapshots delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEthereumContracts) Snapshots() bindings.ISnapshots {
	r0 := m.SnapshotsFunc.nextHook()()
	m.SnapshotsFunc.appendCall(EthereumContractsSnapshotsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Snapshots method of
// the parent MockEthereumContracts instance is invoked and the hook queue
// is empty.
func (f *EthereumContractsSnapshotsFunc) SetDefaultHook(hook func() bindings.ISnapshots) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Snapshots method of the parent MockEthereumContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EthereumContractsSnapshotsFunc) PushHook(hook func() bindings.ISnapshots) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsSnapshotsFunc) SetDefaultReturn(r0 bindings.ISnapshots) {
	f.SetDefaultHook(func() bindings.ISnapshots {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsSnapshotsFunc) PushReturn(r0 bindings.ISnapshots) {
	f.PushHook(func() bindings.ISnapshots {
		return r0
	})
}

func (f *EthereumContractsSnapshotsFunc) nextHook() func() bindings.ISnapshots {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsSnapshotsFunc) appendCall(r0 EthereumContractsSnapshotsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsSnapshotsFuncCall objects
// describing the invocations of this function.
func (f *EthereumContractsSnapshotsFunc) History() []EthereumContractsSnapshotsFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsSnapshotsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsSnapshotsFuncCall is an object that describes an
// invocation of method Snapshots on an instance of MockEthereumContracts.
type EthereumContractsSnapshotsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.ISnapshots
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsSnapshotsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsSnapshotsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsSnapshotsAddressFunc describes the behavior when the
// SnapshotsAddress method of the parent MockEthereumContracts instance is
// invoked.
type EthereumContractsSnapshotsAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []EthereumContractsSnapshotsAddressFuncCall
	mutex       sync.Mutex
}

// SnapshotsAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEthereumContracts) SnapshotsAddress() common.Address {
	r0 := m.SnapshotsAddressFunc.nextHook()()
	m.SnapshotsAddressFunc.appendCall(EthereumContractsSnapshotsAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SnapshotsAddress
// method of the parent MockEthereumContracts instance is invoked and the
// hook queue is empty.
func (f *EthereumContractsSnapshotsAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SnapshotsAddress method of the parent MockEthereumContracts instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EthereumContractsSnapshotsAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsSnapshotsAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsSnapshotsAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *EthereumContractsSnapshotsAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsSnapshotsAddressFunc) appendCall(r0 EthereumContractsSnapshotsAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsSnapshotsAddressFuncCall
// objects describing the invocations of this function.
func (f *EthereumContractsSnapshotsAddressFunc) History() []EthereumContractsSnapshotsAddressFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsSnapshotsAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsSnapshotsAddressFuncCall is an object that describes an
// invocation of method SnapshotsAddress on an instance of
// MockEthereumContracts.
type EthereumContractsSnapshotsAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsSnapshotsAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsSnapshotsAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsValidatorPoolFunc describes the behavior when the
// ValidatorPool method of the parent MockEthereumContracts instance is
// invoked.
type EthereumContractsValidatorPoolFunc struct {
	defaultHook func() bindings.IValidatorPool
	hooks       []func() bindings.IValidatorPool
	history     []EthereumContractsValidatorPoolFuncCall
	mutex       sync.Mutex
}

// ValidatorPool delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEthereumContracts) ValidatorPool() bindings.IValidatorPool {
	r0 := m.ValidatorPoolFunc.nextHook()()
	m.ValidatorPoolFunc.appendCall(EthereumContractsValidatorPoolFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ValidatorPool method
// of the parent MockEthereumContracts instance is invoked and the hook
// queue is empty.
func (f *EthereumContractsValidatorPoolFunc) SetDefaultHook(hook func() bindings.IValidatorPool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidatorPool method of the parent MockEthereumContracts instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EthereumContractsValidatorPoolFunc) PushHook(hook func() bindings.IValidatorPool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsValidatorPoolFunc) SetDefaultReturn(r0 bindings.IValidatorPool) {
	f.SetDefaultHook(func() bindings.IValidatorPool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsValidatorPoolFunc) PushReturn(r0 bindings.IValidatorPool) {
	f.PushHook(func() bindings.IValidatorPool {
		return r0
	})
}

func (f *EthereumContractsValidatorPoolFunc) nextHook() func() bindings.IValidatorPool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsValidatorPoolFunc) appendCall(r0 EthereumContractsValidatorPoolFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsValidatorPoolFuncCall
// objects describing the invocations of this function.
func (f *EthereumContractsValidatorPoolFunc) History() []EthereumContractsValidatorPoolFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsValidatorPoolFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsValidatorPoolFuncCall is an object that describes an
// invocation of method ValidatorPool on an instance of
// MockEthereumContracts.
type EthereumContractsValidatorPoolFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IValidatorPool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsValidatorPoolFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsValidatorPoolFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsValidatorPoolAddressFunc describes the behavior when the
// ValidatorPoolAddress method of the parent MockEthereumContracts instance
// is invoked.
type EthereumContractsValidatorPoolAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []EthereumContractsValidatorPoolAddressFuncCall
	mutex       sync.Mutex
}

// ValidatorPoolAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEthereumContracts) ValidatorPoolAddress() common.Address {
	r0 := m.ValidatorPoolAddressFunc.nextHook()()
	m.ValidatorPoolAddressFunc.appendCall(EthereumContractsValidatorPoolAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ValidatorPoolAddress
// method of the parent MockEthereumContracts instance is invoked and the
// hook queue is empty.
func (f *EthereumContractsValidatorPoolAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidatorPoolAddress method of the parent MockEthereumContracts instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EthereumContractsValidatorPoolAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsValidatorPoolAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsValidatorPoolAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *EthereumContractsValidatorPoolAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsValidatorPoolAddressFunc) appendCall(r0 EthereumContractsValidatorPoolAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EthereumContractsValidatorPoolAddressFuncCall objects describing the
// invocations of this function.
func (f *EthereumContractsValidatorPoolAddressFunc) History() []EthereumContractsValidatorPoolAddressFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsValidatorPoolAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsValidatorPoolAddressFuncCall is an object that describes
// an invocation of method ValidatorPoolAddress on an instance of
// MockEthereumContracts.
type EthereumContractsValidatorPoolAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsValidatorPoolAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsValidatorPoolAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsValidatorStakingFunc describes the behavior when the
// ValidatorStaking method of the parent MockEthereumContracts instance is
// invoked.
type EthereumContractsValidatorStakingFunc struct {
	defaultHook func() bindings.IValidatorStaking
	hooks       []func() bindings.IValidatorStaking
	history     []EthereumContractsValidatorStakingFuncCall
	mutex       sync.Mutex
}

// ValidatorStaking delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEthereumContracts) ValidatorStaking() bindings.IValidatorStaking {
	r0 := m.ValidatorStakingFunc.nextHook()()
	m.ValidatorStakingFunc.appendCall(EthereumContractsValidatorStakingFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ValidatorStaking
// method of the parent MockEthereumContracts instance is invoked and the
// hook queue is empty.
func (f *EthereumContractsValidatorStakingFunc) SetDefaultHook(hook func() bindings.IValidatorStaking) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidatorStaking method of the parent MockEthereumContracts instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EthereumContractsValidatorStakingFunc) PushHook(hook func() bindings.IValidatorStaking) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsValidatorStakingFunc) SetDefaultReturn(r0 bindings.IValidatorStaking) {
	f.SetDefaultHook(func() bindings.IValidatorStaking {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsValidatorStakingFunc) PushReturn(r0 bindings.IValidatorStaking) {
	f.PushHook(func() bindings.IValidatorStaking {
		return r0
	})
}

func (f *EthereumContractsValidatorStakingFunc) nextHook() func() bindings.IValidatorStaking {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsValidatorStakingFunc) appendCall(r0 EthereumContractsValidatorStakingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EthereumContractsValidatorStakingFuncCall
// objects describing the invocations of this function.
func (f *EthereumContractsValidatorStakingFunc) History() []EthereumContractsValidatorStakingFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsValidatorStakingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsValidatorStakingFuncCall is an object that describes an
// invocation of method ValidatorStaking on an instance of
// MockEthereumContracts.
type EthereumContractsValidatorStakingFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IValidatorStaking
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsValidatorStakingFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsValidatorStakingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EthereumContractsValidatorStakingAddressFunc describes the behavior when
// the ValidatorStakingAddress method of the parent MockEthereumContracts
// instance is invoked.
type EthereumContractsValidatorStakingAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []EthereumContractsValidatorStakingAddressFuncCall
	mutex       sync.Mutex
}

// ValidatorStakingAddress delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockEthereumContracts) ValidatorStakingAddress() common.Address {
	r0 := m.ValidatorStakingAddressFunc.nextHook()()
	m.ValidatorStakingAddressFunc.appendCall(EthereumContractsValidatorStakingAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ValidatorStakingAddress method of the parent MockEthereumContracts
// instance is invoked and the hook queue is empty.
func (f *EthereumContractsValidatorStakingAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidatorStakingAddress method of the parent MockEthereumContracts
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EthereumContractsValidatorStakingAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EthereumContractsValidatorStakingAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EthereumContractsValidatorStakingAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *EthereumContractsValidatorStakingAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EthereumContractsValidatorStakingAddressFunc) appendCall(r0 EthereumContractsValidatorStakingAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EthereumContractsValidatorStakingAddressFuncCall objects describing the
// invocations of this function.
func (f *EthereumContractsValidatorStakingAddressFunc) History() []EthereumContractsValidatorStakingAddressFuncCall {
	f.mutex.Lock()
	history := make([]EthereumContractsValidatorStakingAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EthereumContractsValidatorStakingAddressFuncCall is an object that
// describes an invocation of method ValidatorStakingAddress on an instance
// of MockEthereumContracts.
type EthereumContractsValidatorStakingAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EthereumContractsValidatorStakingAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EthereumContractsValidatorStakingAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
