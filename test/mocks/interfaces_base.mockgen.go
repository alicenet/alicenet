// Code generated by go-mockgen 1.3.3; DO NOT EDIT.

package mocks

import (
	"context"
	"math/big"
	"sync"
	"time"

	interfaces "github.com/alicenet/alicenet/blockchain/interfaces"
	goethereum "github.com/ethereum/go-ethereum"
	accounts "github.com/ethereum/go-ethereum/accounts"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	keystore "github.com/ethereum/go-ethereum/accounts/keystore"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
)

// MockBaseEthereum is a mock implementation of the Ethereum interface (from
// the package github.com/alicenet/alicenet/blockchain/interfaces) used for
// unit testing.
type MockBaseEthereum struct {
	// ChainIDFunc is an instance of a mock function object controlling the
	// behavior of the method ChainID.
	ChainIDFunc *BaseEthereumChainIDFunc
	// CloseFunc is an instance of a mock function object controlling the
	// behavior of the method Close.
	CloseFunc *BaseEthereumCloseFunc
	// CommitFunc is an instance of a mock function object controlling the
	// behavior of the method Commit.
	CommitFunc *BaseEthereumCommitFunc
	// ContractsFunc is an instance of a mock function object controlling
	// the behavior of the method Contracts.
	ContractsFunc *BaseEthereumContractsFunc
	// GetAccountFunc is an instance of a mock function object controlling
	// the behavior of the method GetAccount.
	GetAccountFunc *BaseEthereumGetAccountFunc
	// GetAccountKeysFunc is an instance of a mock function object
	// controlling the behavior of the method GetAccountKeys.
	GetAccountKeysFunc *BaseEthereumGetAccountKeysFunc
	// GetBalanceFunc is an instance of a mock function object controlling
	// the behavior of the method GetBalance.
	GetBalanceFunc *BaseEthereumGetBalanceFunc
	// GetCallOptsFunc is an instance of a mock function object controlling
	// the behavior of the method GetCallOpts.
	GetCallOptsFunc *BaseEthereumGetCallOptsFunc
	// GetCoinbaseAddressFunc is an instance of a mock function object
	// controlling the behavior of the method GetCoinbaseAddress.
	GetCoinbaseAddressFunc *BaseEthereumGetCoinbaseAddressFunc
	// GetCurrentHeightFunc is an instance of a mock function object
	// controlling the behavior of the method GetCurrentHeight.
	GetCurrentHeightFunc *BaseEthereumGetCurrentHeightFunc
	// GetDefaultAccountFunc is an instance of a mock function object
	// controlling the behavior of the method GetDefaultAccount.
	GetDefaultAccountFunc *BaseEthereumGetDefaultAccountFunc
	// GetEndpointFunc is an instance of a mock function object controlling
	// the behavior of the method GetEndpoint.
	GetEndpointFunc *BaseEthereumGetEndpointFunc
	// GetEventsFunc is an instance of a mock function object controlling
	// the behavior of the method GetEvents.
	GetEventsFunc *BaseEthereumGetEventsFunc
	// GetFinalityDelayFunc is an instance of a mock function object
	// controlling the behavior of the method GetFinalityDelay.
	GetFinalityDelayFunc *BaseEthereumGetFinalityDelayFunc
	// GetFinalizedHeightFunc is an instance of a mock function object
	// controlling the behavior of the method GetFinalizedHeight.
	GetFinalizedHeightFunc *BaseEthereumGetFinalizedHeightFunc
	// GetGethClientFunc is an instance of a mock function object
	// controlling the behavior of the method GetGethClient.
	GetGethClientFunc *BaseEthereumGetGethClientFunc
	// GetKnownAccountsFunc is an instance of a mock function object
	// controlling the behavior of the method GetKnownAccounts.
	GetKnownAccountsFunc *BaseEthereumGetKnownAccountsFunc
	// GetPeerCountFunc is an instance of a mock function object controlling
	// the behavior of the method GetPeerCount.
	GetPeerCountFunc *BaseEthereumGetPeerCountFunc
	// GetSnapshotFunc is an instance of a mock function object controlling
	// the behavior of the method GetSnapshot.
	GetSnapshotFunc *BaseEthereumGetSnapshotFunc
	// GetSyncProgressFunc is an instance of a mock function object
	// controlling the behavior of the method GetSyncProgress.
	GetSyncProgressFunc *BaseEthereumGetSyncProgressFunc
	// GetTimeoutContextFunc is an instance of a mock function object
	// controlling the behavior of the method GetTimeoutContext.
	GetTimeoutContextFunc *BaseEthereumGetTimeoutContextFunc
	// GetTransactionOptsFunc is an instance of a mock function object
	// controlling the behavior of the method GetTransactionOpts.
	GetTransactionOptsFunc *BaseEthereumGetTransactionOptsFunc
	// GetTxCheckFrequencyFunc is an instance of a mock function object
	// controlling the behavior of the method GetTxCheckFrequency.
	GetTxCheckFrequencyFunc *BaseEthereumGetTxCheckFrequencyFunc
	// GetTxFeePercentageToIncreaseFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetTxFeePercentageToIncrease.
	GetTxFeePercentageToIncreaseFunc *BaseEthereumGetTxFeePercentageToIncreaseFunc
	// GetTxMaxFeeThresholdInGweiFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetTxMaxFeeThresholdInGwei.
	GetTxMaxFeeThresholdInGweiFunc *BaseEthereumGetTxMaxFeeThresholdInGweiFunc
	// GetTxTimeoutForReplacementFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetTxTimeoutForReplacement.
	GetTxTimeoutForReplacementFunc *BaseEthereumGetTxTimeoutForReplacementFunc
	// GetValidatorsFunc is an instance of a mock function object
	// controlling the behavior of the method GetValidators.
	GetValidatorsFunc *BaseEthereumGetValidatorsFunc
	// IsEthereumAccessibleFunc is an instance of a mock function object
	// controlling the behavior of the method IsEthereumAccessible.
	IsEthereumAccessibleFunc *BaseEthereumIsEthereumAccessibleFunc
	// KnownSelectorsFunc is an instance of a mock function object
	// controlling the behavior of the method KnownSelectors.
	KnownSelectorsFunc *BaseEthereumKnownSelectorsFunc
	// QueueFunc is an instance of a mock function object controlling the
	// behavior of the method Queue.
	QueueFunc *BaseEthereumQueueFunc
	// RetryCountFunc is an instance of a mock function object controlling
	// the behavior of the method RetryCount.
	RetryCountFunc *BaseEthereumRetryCountFunc
	// RetryDelayFunc is an instance of a mock function object controlling
	// the behavior of the method RetryDelay.
	RetryDelayFunc *BaseEthereumRetryDelayFunc
	// TimeoutFunc is an instance of a mock function object controlling the
	// behavior of the method Timeout.
	TimeoutFunc *BaseEthereumTimeoutFunc
	// TransferEtherFunc is an instance of a mock function object
	// controlling the behavior of the method TransferEther.
	TransferEtherFunc *BaseEthereumTransferEtherFunc
	// UnlockAccountFunc is an instance of a mock function object
	// controlling the behavior of the method UnlockAccount.
	UnlockAccountFunc *BaseEthereumUnlockAccountFunc
	// UnlockAccountWithPasscodeFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UnlockAccountWithPasscode.
	UnlockAccountWithPasscodeFunc *BaseEthereumUnlockAccountWithPasscodeFunc
}

// NewMockBaseEthereum creates a new mock of the Ethereum interface. All
// methods return zero values for all results, unless overwritten.
func NewMockBaseEthereum() *MockBaseEthereum {
	return &MockBaseEthereum{
		ChainIDFunc: &BaseEthereumChainIDFunc{
			defaultHook: func() (r0 *big.Int) {
				return
			},
		},
		CloseFunc: &BaseEthereumCloseFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		CommitFunc: &BaseEthereumCommitFunc{
			defaultHook: func() {
				return
			},
		},
		ContractsFunc: &BaseEthereumContractsFunc{
			defaultHook: func() (r0 interfaces.Contracts) {
				return
			},
		},
		GetAccountFunc: &BaseEthereumGetAccountFunc{
			defaultHook: func(common.Address) (r0 accounts.Account, r1 error) {
				return
			},
		},
		GetAccountKeysFunc: &BaseEthereumGetAccountKeysFunc{
			defaultHook: func(common.Address) (r0 *keystore.Key, r1 error) {
				return
			},
		},
		GetBalanceFunc: &BaseEthereumGetBalanceFunc{
			defaultHook: func(common.Address) (r0 *big.Int, r1 error) {
				return
			},
		},
		GetCallOptsFunc: &BaseEthereumGetCallOptsFunc{
			defaultHook: func(context.Context, accounts.Account) (r0 *bind.CallOpts) {
				return
			},
		},
		GetCoinbaseAddressFunc: &BaseEthereumGetCoinbaseAddressFunc{
			defaultHook: func() (r0 common.Address) {
				return
			},
		},
		GetCurrentHeightFunc: &BaseEthereumGetCurrentHeightFunc{
			defaultHook: func(context.Context) (r0 uint64, r1 error) {
				return
			},
		},
		GetDefaultAccountFunc: &BaseEthereumGetDefaultAccountFunc{
			defaultHook: func() (r0 accounts.Account) {
				return
			},
		},
		GetEndpointFunc: &BaseEthereumGetEndpointFunc{
			defaultHook: func() (r0 string) {
				return
			},
		},
		GetEventsFunc: &BaseEthereumGetEventsFunc{
			defaultHook: func(context.Context, uint64, uint64, []common.Address) (r0 []types.Log, r1 error) {
				return
			},
		},
		GetFinalityDelayFunc: &BaseEthereumGetFinalityDelayFunc{
			defaultHook: func() (r0 uint64) {
				return
			},
		},
		GetFinalizedHeightFunc: &BaseEthereumGetFinalizedHeightFunc{
			defaultHook: func(context.Context) (r0 uint64, r1 error) {
				return
			},
		},
		GetGethClientFunc: &BaseEthereumGetGethClientFunc{
			defaultHook: func() (r0 interfaces.GethClient) {
				return
			},
		},
		GetKnownAccountsFunc: &BaseEthereumGetKnownAccountsFunc{
			defaultHook: func() (r0 []accounts.Account) {
				return
			},
		},
		GetPeerCountFunc: &BaseEthereumGetPeerCountFunc{
			defaultHook: func(context.Context) (r0 uint64, r1 error) {
				return
			},
		},
		GetSnapshotFunc: &BaseEthereumGetSnapshotFunc{
			defaultHook: func() (r0 []byte, r1 error) {
				return
			},
		},
		GetSyncProgressFunc: &BaseEthereumGetSyncProgressFunc{
			defaultHook: func() (r0 bool, r1 *goethereum.SyncProgress, r2 error) {
				return
			},
		},
		GetTimeoutContextFunc: &BaseEthereumGetTimeoutContextFunc{
			defaultHook: func() (r0 context.Context, r1 context.CancelFunc) {
				return
			},
		},
		GetTransactionOptsFunc: &BaseEthereumGetTransactionOptsFunc{
			defaultHook: func(context.Context, accounts.Account) (r0 *bind.TransactOpts, r1 error) {
				return
			},
		},
		GetTxCheckFrequencyFunc: &BaseEthereumGetTxCheckFrequencyFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetTxFeePercentageToIncreaseFunc: &BaseEthereumGetTxFeePercentageToIncreaseFunc{
			defaultHook: func() (r0 int) {
				return
			},
		},
		GetTxMaxFeeThresholdInGweiFunc: &BaseEthereumGetTxMaxFeeThresholdInGweiFunc{
			defaultHook: func() (r0 uint64) {
				return
			},
		},
		GetTxTimeoutForReplacementFunc: &BaseEthereumGetTxTimeoutForReplacementFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetValidatorsFunc: &BaseEthereumGetValidatorsFunc{
			defaultHook: func(context.Context) (r0 []common.Address, r1 error) {
				return
			},
		},
		IsEthereumAccessibleFunc: &BaseEthereumIsEthereumAccessibleFunc{
			defaultHook: func() (r0 bool) {
				return
			},
		},
		KnownSelectorsFunc: &BaseEthereumKnownSelectorsFunc{
			defaultHook: func() (r0 interfaces.SelectorMap) {
				return
			},
		},
		QueueFunc: &BaseEthereumQueueFunc{
			defaultHook: func() (r0 interfaces.TxnQueue) {
				return
			},
		},
		RetryCountFunc: &BaseEthereumRetryCountFunc{
			defaultHook: func() (r0 int) {
				return
			},
		},
		RetryDelayFunc: &BaseEthereumRetryDelayFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		TimeoutFunc: &BaseEthereumTimeoutFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		TransferEtherFunc: &BaseEthereumTransferEtherFunc{
			defaultHook: func(common.Address, common.Address, *big.Int) (r0 *types.Transaction, r1 error) {
				return
			},
		},
		UnlockAccountFunc: &BaseEthereumUnlockAccountFunc{
			defaultHook: func(accounts.Account) (r0 error) {
				return
			},
		},
		UnlockAccountWithPasscodeFunc: &BaseEthereumUnlockAccountWithPasscodeFunc{
			defaultHook: func(accounts.Account, string) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockBaseEthereum creates a new mock of the Ethereum interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockBaseEthereum() *MockBaseEthereum {
	return &MockBaseEthereum{
		ChainIDFunc: &BaseEthereumChainIDFunc{
			defaultHook: func() *big.Int {
				panic("unexpected invocation of MockBaseEthereum.ChainID")
			},
		},
		CloseFunc: &BaseEthereumCloseFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockBaseEthereum.Close")
			},
		},
		CommitFunc: &BaseEthereumCommitFunc{
			defaultHook: func() {
				panic("unexpected invocation of MockBaseEthereum.Commit")
			},
		},
		ContractsFunc: &BaseEthereumContractsFunc{
			defaultHook: func() interfaces.Contracts {
				panic("unexpected invocation of MockBaseEthereum.Contracts")
			},
		},
		GetAccountFunc: &BaseEthereumGetAccountFunc{
			defaultHook: func(common.Address) (accounts.Account, error) {
				panic("unexpected invocation of MockBaseEthereum.GetAccount")
			},
		},
		GetAccountKeysFunc: &BaseEthereumGetAccountKeysFunc{
			defaultHook: func(common.Address) (*keystore.Key, error) {
				panic("unexpected invocation of MockBaseEthereum.GetAccountKeys")
			},
		},
		GetBalanceFunc: &BaseEthereumGetBalanceFunc{
			defaultHook: func(common.Address) (*big.Int, error) {
				panic("unexpected invocation of MockBaseEthereum.GetBalance")
			},
		},
		GetCallOptsFunc: &BaseEthereumGetCallOptsFunc{
			defaultHook: func(context.Context, accounts.Account) *bind.CallOpts {
				panic("unexpected invocation of MockBaseEthereum.GetCallOpts")
			},
		},
		GetCoinbaseAddressFunc: &BaseEthereumGetCoinbaseAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockBaseEthereum.GetCoinbaseAddress")
			},
		},
		GetCurrentHeightFunc: &BaseEthereumGetCurrentHeightFunc{
			defaultHook: func(context.Context) (uint64, error) {
				panic("unexpected invocation of MockBaseEthereum.GetCurrentHeight")
			},
		},
		GetDefaultAccountFunc: &BaseEthereumGetDefaultAccountFunc{
			defaultHook: func() accounts.Account {
				panic("unexpected invocation of MockBaseEthereum.GetDefaultAccount")
			},
		},
		GetEndpointFunc: &BaseEthereumGetEndpointFunc{
			defaultHook: func() string {
				panic("unexpected invocation of MockBaseEthereum.GetEndpoint")
			},
		},
		GetEventsFunc: &BaseEthereumGetEventsFunc{
			defaultHook: func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error) {
				panic("unexpected invocation of MockBaseEthereum.GetEvents")
			},
		},
		GetFinalityDelayFunc: &BaseEthereumGetFinalityDelayFunc{
			defaultHook: func() uint64 {
				panic("unexpected invocation of MockBaseEthereum.GetFinalityDelay")
			},
		},
		GetFinalizedHeightFunc: &BaseEthereumGetFinalizedHeightFunc{
			defaultHook: func(context.Context) (uint64, error) {
				panic("unexpected invocation of MockBaseEthereum.GetFinalizedHeight")
			},
		},
		GetGethClientFunc: &BaseEthereumGetGethClientFunc{
			defaultHook: func() interfaces.GethClient {
				panic("unexpected invocation of MockBaseEthereum.GetGethClient")
			},
		},
		GetKnownAccountsFunc: &BaseEthereumGetKnownAccountsFunc{
			defaultHook: func() []accounts.Account {
				panic("unexpected invocation of MockBaseEthereum.GetKnownAccounts")
			},
		},
		GetPeerCountFunc: &BaseEthereumGetPeerCountFunc{
			defaultHook: func(context.Context) (uint64, error) {
				panic("unexpected invocation of MockBaseEthereum.GetPeerCount")
			},
		},
		GetSnapshotFunc: &BaseEthereumGetSnapshotFunc{
			defaultHook: func() ([]byte, error) {
				panic("unexpected invocation of MockBaseEthereum.GetSnapshot")
			},
		},
		GetSyncProgressFunc: &BaseEthereumGetSyncProgressFunc{
			defaultHook: func() (bool, *goethereum.SyncProgress, error) {
				panic("unexpected invocation of MockBaseEthereum.GetSyncProgress")
			},
		},
		GetTimeoutContextFunc: &BaseEthereumGetTimeoutContextFunc{
			defaultHook: func() (context.Context, context.CancelFunc) {
				panic("unexpected invocation of MockBaseEthereum.GetTimeoutContext")
			},
		},
		GetTransactionOptsFunc: &BaseEthereumGetTransactionOptsFunc{
			defaultHook: func(context.Context, accounts.Account) (*bind.TransactOpts, error) {
				panic("unexpected invocation of MockBaseEthereum.GetTransactionOpts")
			},
		},
		GetTxCheckFrequencyFunc: &BaseEthereumGetTxCheckFrequencyFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockBaseEthereum.GetTxCheckFrequency")
			},
		},
		GetTxFeePercentageToIncreaseFunc: &BaseEthereumGetTxFeePercentageToIncreaseFunc{
			defaultHook: func() int {
				panic("unexpected invocation of MockBaseEthereum.GetTxFeePercentageToIncrease")
			},
		},
		GetTxMaxFeeThresholdInGweiFunc: &BaseEthereumGetTxMaxFeeThresholdInGweiFunc{
			defaultHook: func() uint64 {
				panic("unexpected invocation of MockBaseEthereum.GetTxMaxFeeThresholdInGwei")
			},
		},
		GetTxTimeoutForReplacementFunc: &BaseEthereumGetTxTimeoutForReplacementFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockBaseEthereum.GetTxTimeoutForReplacement")
			},
		},
		GetValidatorsFunc: &BaseEthereumGetValidatorsFunc{
			defaultHook: func(context.Context) ([]common.Address, error) {
				panic("unexpected invocation of MockBaseEthereum.GetValidators")
			},
		},
		IsEthereumAccessibleFunc: &BaseEthereumIsEthereumAccessibleFunc{
			defaultHook: func() bool {
				panic("unexpected invocation of MockBaseEthereum.IsEthereumAccessible")
			},
		},
		KnownSelectorsFunc: &BaseEthereumKnownSelectorsFunc{
			defaultHook: func() interfaces.SelectorMap {
				panic("unexpected invocation of MockBaseEthereum.KnownSelectors")
			},
		},
		QueueFunc: &BaseEthereumQueueFunc{
			defaultHook: func() interfaces.TxnQueue {
				panic("unexpected invocation of MockBaseEthereum.Queue")
			},
		},
		RetryCountFunc: &BaseEthereumRetryCountFunc{
			defaultHook: func() int {
				panic("unexpected invocation of MockBaseEthereum.RetryCount")
			},
		},
		RetryDelayFunc: &BaseEthereumRetryDelayFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockBaseEthereum.RetryDelay")
			},
		},
		TimeoutFunc: &BaseEthereumTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockBaseEthereum.Timeout")
			},
		},
		TransferEtherFunc: &BaseEthereumTransferEtherFunc{
			defaultHook: func(common.Address, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockBaseEthereum.TransferEther")
			},
		},
		UnlockAccountFunc: &BaseEthereumUnlockAccountFunc{
			defaultHook: func(accounts.Account) error {
				panic("unexpected invocation of MockBaseEthereum.UnlockAccount")
			},
		},
		UnlockAccountWithPasscodeFunc: &BaseEthereumUnlockAccountWithPasscodeFunc{
			defaultHook: func(accounts.Account, string) error {
				panic("unexpected invocation of MockBaseEthereum.UnlockAccountWithPasscode")
			},
		},
	}
}

// NewMockBaseEthereumFrom creates a new mock of the MockBaseEthereum
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockBaseEthereumFrom(i interfaces.Ethereum) *MockBaseEthereum {
	return &MockBaseEthereum{
		ChainIDFunc: &BaseEthereumChainIDFunc{
			defaultHook: i.ChainID,
		},
		CloseFunc: &BaseEthereumCloseFunc{
			defaultHook: i.Close,
		},
		CommitFunc: &BaseEthereumCommitFunc{
			defaultHook: i.Commit,
		},
		ContractsFunc: &BaseEthereumContractsFunc{
			defaultHook: i.Contracts,
		},
		GetAccountFunc: &BaseEthereumGetAccountFunc{
			defaultHook: i.GetAccount,
		},
		GetAccountKeysFunc: &BaseEthereumGetAccountKeysFunc{
			defaultHook: i.GetAccountKeys,
		},
		GetBalanceFunc: &BaseEthereumGetBalanceFunc{
			defaultHook: i.GetBalance,
		},
		GetCallOptsFunc: &BaseEthereumGetCallOptsFunc{
			defaultHook: i.GetCallOpts,
		},
		GetCoinbaseAddressFunc: &BaseEthereumGetCoinbaseAddressFunc{
			defaultHook: i.GetCoinbaseAddress,
		},
		GetCurrentHeightFunc: &BaseEthereumGetCurrentHeightFunc{
			defaultHook: i.GetCurrentHeight,
		},
		GetDefaultAccountFunc: &BaseEthereumGetDefaultAccountFunc{
			defaultHook: i.GetDefaultAccount,
		},
		GetEndpointFunc: &BaseEthereumGetEndpointFunc{
			defaultHook: i.GetEndpoint,
		},
		GetEventsFunc: &BaseEthereumGetEventsFunc{
			defaultHook: i.GetEvents,
		},
		GetFinalityDelayFunc: &BaseEthereumGetFinalityDelayFunc{
			defaultHook: i.GetFinalityDelay,
		},
		GetFinalizedHeightFunc: &BaseEthereumGetFinalizedHeightFunc{
			defaultHook: i.GetFinalizedHeight,
		},
		GetGethClientFunc: &BaseEthereumGetGethClientFunc{
			defaultHook: i.GetGethClient,
		},
		GetKnownAccountsFunc: &BaseEthereumGetKnownAccountsFunc{
			defaultHook: i.GetKnownAccounts,
		},
		GetPeerCountFunc: &BaseEthereumGetPeerCountFunc{
			defaultHook: i.GetPeerCount,
		},
		GetSnapshotFunc: &BaseEthereumGetSnapshotFunc{
			defaultHook: i.GetSnapshot,
		},
		GetSyncProgressFunc: &BaseEthereumGetSyncProgressFunc{
			defaultHook: i.GetSyncProgress,
		},
		GetTimeoutContextFunc: &BaseEthereumGetTimeoutContextFunc{
			defaultHook: i.GetTimeoutContext,
		},
		GetTransactionOptsFunc: &BaseEthereumGetTransactionOptsFunc{
			defaultHook: i.GetTransactionOpts,
		},
		GetTxCheckFrequencyFunc: &BaseEthereumGetTxCheckFrequencyFunc{
			defaultHook: i.GetTxCheckFrequency,
		},
		GetTxFeePercentageToIncreaseFunc: &BaseEthereumGetTxFeePercentageToIncreaseFunc{
			defaultHook: i.GetTxFeePercentageToIncrease,
		},
		GetTxMaxFeeThresholdInGweiFunc: &BaseEthereumGetTxMaxFeeThresholdInGweiFunc{
			defaultHook: i.GetTxMaxFeeThresholdInGwei,
		},
		GetTxTimeoutForReplacementFunc: &BaseEthereumGetTxTimeoutForReplacementFunc{
			defaultHook: i.GetTxTimeoutForReplacement,
		},
		GetValidatorsFunc: &BaseEthereumGetValidatorsFunc{
			defaultHook: i.GetValidators,
		},
		IsEthereumAccessibleFunc: &BaseEthereumIsEthereumAccessibleFunc{
			defaultHook: i.IsEthereumAccessible,
		},
		KnownSelectorsFunc: &BaseEthereumKnownSelectorsFunc{
			defaultHook: i.KnownSelectors,
		},
		QueueFunc: &BaseEthereumQueueFunc{
			defaultHook: i.Queue,
		},
		RetryCountFunc: &BaseEthereumRetryCountFunc{
			defaultHook: i.RetryCount,
		},
		RetryDelayFunc: &BaseEthereumRetryDelayFunc{
			defaultHook: i.RetryDelay,
		},
		TimeoutFunc: &BaseEthereumTimeoutFunc{
			defaultHook: i.Timeout,
		},
		TransferEtherFunc: &BaseEthereumTransferEtherFunc{
			defaultHook: i.TransferEther,
		},
		UnlockAccountFunc: &BaseEthereumUnlockAccountFunc{
			defaultHook: i.UnlockAccount,
		},
		UnlockAccountWithPasscodeFunc: &BaseEthereumUnlockAccountWithPasscodeFunc{
			defaultHook: i.UnlockAccountWithPasscode,
		},
	}
}

// BaseEthereumChainIDFunc describes the behavior when the ChainID method of
// the parent MockBaseEthereum instance is invoked.
type BaseEthereumChainIDFunc struct {
	defaultHook func() *big.Int
	hooks       []func() *big.Int
	history     []BaseEthereumChainIDFuncCall
	mutex       sync.Mutex
}

// ChainID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBaseEthereum) ChainID() *big.Int {
	r0 := m.ChainIDFunc.nextHook()()
	m.ChainIDFunc.appendCall(BaseEthereumChainIDFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ChainID method of
// the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumChainIDFunc) SetDefaultHook(hook func() *big.Int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ChainID method of the parent MockBaseEthereum instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BaseEthereumChainIDFunc) PushHook(hook func() *big.Int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumChainIDFunc) SetDefaultReturn(r0 *big.Int) {
	f.SetDefaultHook(func() *big.Int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumChainIDFunc) PushReturn(r0 *big.Int) {
	f.PushHook(func() *big.Int {
		return r0
	})
}

func (f *BaseEthereumChainIDFunc) nextHook() func() *big.Int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumChainIDFunc) appendCall(r0 BaseEthereumChainIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumChainIDFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumChainIDFunc) History() []BaseEthereumChainIDFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumChainIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumChainIDFuncCall is an object that describes an invocation of
// method ChainID on an instance of MockBaseEthereum.
type BaseEthereumChainIDFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumChainIDFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumChainIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumCloseFunc describes the behavior when the Close method of the
// parent MockBaseEthereum instance is invoked.
type BaseEthereumCloseFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []BaseEthereumCloseFuncCall
	mutex       sync.Mutex
}

// Close delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBaseEthereum) Close() error {
	r0 := m.CloseFunc.nextHook()()
	m.CloseFunc.appendCall(BaseEthereumCloseFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Close method of the
// parent MockBaseEthereum instance is invoked and the hook queue is empty.
func (f *BaseEthereumCloseFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Close method of the parent MockBaseEthereum instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BaseEthereumCloseFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumCloseFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumCloseFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *BaseEthereumCloseFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumCloseFunc) appendCall(r0 BaseEthereumCloseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumCloseFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumCloseFunc) History() []BaseEthereumCloseFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumCloseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumCloseFuncCall is an object that describes an invocation of
// method Close on an instance of MockBaseEthereum.
type BaseEthereumCloseFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumCloseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumCloseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumCommitFunc describes the behavior when the Commit method of
// the parent MockBaseEthereum instance is invoked.
type BaseEthereumCommitFunc struct {
	defaultHook func()
	hooks       []func()
	history     []BaseEthereumCommitFuncCall
	mutex       sync.Mutex
}

// Commit delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBaseEthereum) Commit() {
	m.CommitFunc.nextHook()()
	m.CommitFunc.appendCall(BaseEthereumCommitFuncCall{})
	return
}

// SetDefaultHook sets function that is called when the Commit method of the
// parent MockBaseEthereum instance is invoked and the hook queue is empty.
func (f *BaseEthereumCommitFunc) SetDefaultHook(hook func()) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Commit method of the parent MockBaseEthereum instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BaseEthereumCommitFunc) PushHook(hook func()) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumCommitFunc) SetDefaultReturn() {
	f.SetDefaultHook(func() {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumCommitFunc) PushReturn() {
	f.PushHook(func() {
		return
	})
}

func (f *BaseEthereumCommitFunc) nextHook() func() {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumCommitFunc) appendCall(r0 BaseEthereumCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumCommitFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumCommitFunc) History() []BaseEthereumCommitFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumCommitFuncCall is an object that describes an invocation of
// method Commit on an instance of MockBaseEthereum.
type BaseEthereumCommitFuncCall struct{}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumCommitFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumCommitFuncCall) Results() []interface{} {
	return []interface{}{}
}

// BaseEthereumContractsFunc describes the behavior when the Contracts
// method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumContractsFunc struct {
	defaultHook func() interfaces.Contracts
	hooks       []func() interfaces.Contracts
	history     []BaseEthereumContractsFuncCall
	mutex       sync.Mutex
}

// Contracts delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBaseEthereum) Contracts() interfaces.Contracts {
	r0 := m.ContractsFunc.nextHook()()
	m.ContractsFunc.appendCall(BaseEthereumContractsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Contracts method of
// the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumContractsFunc) SetDefaultHook(hook func() interfaces.Contracts) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Contracts method of the parent MockBaseEthereum instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BaseEthereumContractsFunc) PushHook(hook func() interfaces.Contracts) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumContractsFunc) SetDefaultReturn(r0 interfaces.Contracts) {
	f.SetDefaultHook(func() interfaces.Contracts {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumContractsFunc) PushReturn(r0 interfaces.Contracts) {
	f.PushHook(func() interfaces.Contracts {
		return r0
	})
}

func (f *BaseEthereumContractsFunc) nextHook() func() interfaces.Contracts {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumContractsFunc) appendCall(r0 BaseEthereumContractsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumContractsFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumContractsFunc) History() []BaseEthereumContractsFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumContractsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumContractsFuncCall is an object that describes an invocation
// of method Contracts on an instance of MockBaseEthereum.
type BaseEthereumContractsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 interfaces.Contracts
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumContractsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumContractsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumGetAccountFunc describes the behavior when the GetAccount
// method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumGetAccountFunc struct {
	defaultHook func(common.Address) (accounts.Account, error)
	hooks       []func(common.Address) (accounts.Account, error)
	history     []BaseEthereumGetAccountFuncCall
	mutex       sync.Mutex
}

// GetAccount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetAccount(v0 common.Address) (accounts.Account, error) {
	r0, r1 := m.GetAccountFunc.nextHook()(v0)
	m.GetAccountFunc.appendCall(BaseEthereumGetAccountFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAccount method of
// the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumGetAccountFunc) SetDefaultHook(hook func(common.Address) (accounts.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAccount method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumGetAccountFunc) PushHook(hook func(common.Address) (accounts.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetAccountFunc) SetDefaultReturn(r0 accounts.Account, r1 error) {
	f.SetDefaultHook(func(common.Address) (accounts.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetAccountFunc) PushReturn(r0 accounts.Account, r1 error) {
	f.PushHook(func(common.Address) (accounts.Account, error) {
		return r0, r1
	})
}

func (f *BaseEthereumGetAccountFunc) nextHook() func(common.Address) (accounts.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetAccountFunc) appendCall(r0 BaseEthereumGetAccountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetAccountFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumGetAccountFunc) History() []BaseEthereumGetAccountFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetAccountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetAccountFuncCall is an object that describes an invocation
// of method GetAccount on an instance of MockBaseEthereum.
type BaseEthereumGetAccountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 accounts.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetAccountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetAccountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BaseEthereumGetAccountKeysFunc describes the behavior when the
// GetAccountKeys method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumGetAccountKeysFunc struct {
	defaultHook func(common.Address) (*keystore.Key, error)
	hooks       []func(common.Address) (*keystore.Key, error)
	history     []BaseEthereumGetAccountKeysFuncCall
	mutex       sync.Mutex
}

// GetAccountKeys delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetAccountKeys(v0 common.Address) (*keystore.Key, error) {
	r0, r1 := m.GetAccountKeysFunc.nextHook()(v0)
	m.GetAccountKeysFunc.appendCall(BaseEthereumGetAccountKeysFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAccountKeys
// method of the parent MockBaseEthereum instance is invoked and the hook
// queue is empty.
func (f *BaseEthereumGetAccountKeysFunc) SetDefaultHook(hook func(common.Address) (*keystore.Key, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAccountKeys method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumGetAccountKeysFunc) PushHook(hook func(common.Address) (*keystore.Key, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetAccountKeysFunc) SetDefaultReturn(r0 *keystore.Key, r1 error) {
	f.SetDefaultHook(func(common.Address) (*keystore.Key, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetAccountKeysFunc) PushReturn(r0 *keystore.Key, r1 error) {
	f.PushHook(func(common.Address) (*keystore.Key, error) {
		return r0, r1
	})
}

func (f *BaseEthereumGetAccountKeysFunc) nextHook() func(common.Address) (*keystore.Key, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetAccountKeysFunc) appendCall(r0 BaseEthereumGetAccountKeysFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetAccountKeysFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumGetAccountKeysFunc) History() []BaseEthereumGetAccountKeysFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetAccountKeysFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetAccountKeysFuncCall is an object that describes an
// invocation of method GetAccountKeys on an instance of MockBaseEthereum.
type BaseEthereumGetAccountKeysFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *keystore.Key
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetAccountKeysFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetAccountKeysFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BaseEthereumGetBalanceFunc describes the behavior when the GetBalance
// method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumGetBalanceFunc struct {
	defaultHook func(common.Address) (*big.Int, error)
	hooks       []func(common.Address) (*big.Int, error)
	history     []BaseEthereumGetBalanceFuncCall
	mutex       sync.Mutex
}

// GetBalance delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetBalance(v0 common.Address) (*big.Int, error) {
	r0, r1 := m.GetBalanceFunc.nextHook()(v0)
	m.GetBalanceFunc.appendCall(BaseEthereumGetBalanceFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetBalance method of
// the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumGetBalanceFunc) SetDefaultHook(hook func(common.Address) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBalance method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumGetBalanceFunc) PushHook(hook func(common.Address) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetBalanceFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(common.Address) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetBalanceFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(common.Address) (*big.Int, error) {
		return r0, r1
	})
}

func (f *BaseEthereumGetBalanceFunc) nextHook() func(common.Address) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetBalanceFunc) appendCall(r0 BaseEthereumGetBalanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetBalanceFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumGetBalanceFunc) History() []BaseEthereumGetBalanceFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetBalanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetBalanceFuncCall is an object that describes an invocation
// of method GetBalance on an instance of MockBaseEthereum.
type BaseEthereumGetBalanceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetBalanceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetBalanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BaseEthereumGetCallOptsFunc describes the behavior when the GetCallOpts
// method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumGetCallOptsFunc struct {
	defaultHook func(context.Context, accounts.Account) *bind.CallOpts
	hooks       []func(context.Context, accounts.Account) *bind.CallOpts
	history     []BaseEthereumGetCallOptsFuncCall
	mutex       sync.Mutex
}

// GetCallOpts delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetCallOpts(v0 context.Context, v1 accounts.Account) *bind.CallOpts {
	r0 := m.GetCallOptsFunc.nextHook()(v0, v1)
	m.GetCallOptsFunc.appendCall(BaseEthereumGetCallOptsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetCallOpts method
// of the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumGetCallOptsFunc) SetDefaultHook(hook func(context.Context, accounts.Account) *bind.CallOpts) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCallOpts method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumGetCallOptsFunc) PushHook(hook func(context.Context, accounts.Account) *bind.CallOpts) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetCallOptsFunc) SetDefaultReturn(r0 *bind.CallOpts) {
	f.SetDefaultHook(func(context.Context, accounts.Account) *bind.CallOpts {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetCallOptsFunc) PushReturn(r0 *bind.CallOpts) {
	f.PushHook(func(context.Context, accounts.Account) *bind.CallOpts {
		return r0
	})
}

func (f *BaseEthereumGetCallOptsFunc) nextHook() func(context.Context, accounts.Account) *bind.CallOpts {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetCallOptsFunc) appendCall(r0 BaseEthereumGetCallOptsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetCallOptsFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumGetCallOptsFunc) History() []BaseEthereumGetCallOptsFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetCallOptsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetCallOptsFuncCall is an object that describes an invocation
// of method GetCallOpts on an instance of MockBaseEthereum.
type BaseEthereumGetCallOptsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 accounts.Account
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bind.CallOpts
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetCallOptsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetCallOptsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumGetCoinbaseAddressFunc describes the behavior when the
// GetCoinbaseAddress method of the parent MockBaseEthereum instance is
// invoked.
type BaseEthereumGetCoinbaseAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []BaseEthereumGetCoinbaseAddressFuncCall
	mutex       sync.Mutex
}

// GetCoinbaseAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetCoinbaseAddress() common.Address {
	r0 := m.GetCoinbaseAddressFunc.nextHook()()
	m.GetCoinbaseAddressFunc.appendCall(BaseEthereumGetCoinbaseAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetCoinbaseAddress
// method of the parent MockBaseEthereum instance is invoked and the hook
// queue is empty.
func (f *BaseEthereumGetCoinbaseAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCoinbaseAddress method of the parent MockBaseEthereum instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *BaseEthereumGetCoinbaseAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetCoinbaseAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetCoinbaseAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *BaseEthereumGetCoinbaseAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetCoinbaseAddressFunc) appendCall(r0 BaseEthereumGetCoinbaseAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetCoinbaseAddressFuncCall
// objects describing the invocations of this function.
func (f *BaseEthereumGetCoinbaseAddressFunc) History() []BaseEthereumGetCoinbaseAddressFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetCoinbaseAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetCoinbaseAddressFuncCall is an object that describes an
// invocation of method GetCoinbaseAddress on an instance of
// MockBaseEthereum.
type BaseEthereumGetCoinbaseAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetCoinbaseAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetCoinbaseAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumGetCurrentHeightFunc describes the behavior when the
// GetCurrentHeight method of the parent MockBaseEthereum instance is
// invoked.
type BaseEthereumGetCurrentHeightFunc struct {
	defaultHook func(context.Context) (uint64, error)
	hooks       []func(context.Context) (uint64, error)
	history     []BaseEthereumGetCurrentHeightFuncCall
	mutex       sync.Mutex
}

// GetCurrentHeight delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetCurrentHeight(v0 context.Context) (uint64, error) {
	r0, r1 := m.GetCurrentHeightFunc.nextHook()(v0)
	m.GetCurrentHeightFunc.appendCall(BaseEthereumGetCurrentHeightFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCurrentHeight
// method of the parent MockBaseEthereum instance is invoked and the hook
// queue is empty.
func (f *BaseEthereumGetCurrentHeightFunc) SetDefaultHook(hook func(context.Context) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCurrentHeight method of the parent MockBaseEthereum instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *BaseEthereumGetCurrentHeightFunc) PushHook(hook func(context.Context) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetCurrentHeightFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetCurrentHeightFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

func (f *BaseEthereumGetCurrentHeightFunc) nextHook() func(context.Context) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetCurrentHeightFunc) appendCall(r0 BaseEthereumGetCurrentHeightFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetCurrentHeightFuncCall
// objects describing the invocations of this function.
func (f *BaseEthereumGetCurrentHeightFunc) History() []BaseEthereumGetCurrentHeightFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetCurrentHeightFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetCurrentHeightFuncCall is an object that describes an
// invocation of method GetCurrentHeight on an instance of MockBaseEthereum.
type BaseEthereumGetCurrentHeightFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetCurrentHeightFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetCurrentHeightFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BaseEthereumGetDefaultAccountFunc describes the behavior when the
// GetDefaultAccount method of the parent MockBaseEthereum instance is
// invoked.
type BaseEthereumGetDefaultAccountFunc struct {
	defaultHook func() accounts.Account
	hooks       []func() accounts.Account
	history     []BaseEthereumGetDefaultAccountFuncCall
	mutex       sync.Mutex
}

// GetDefaultAccount delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetDefaultAccount() accounts.Account {
	r0 := m.GetDefaultAccountFunc.nextHook()()
	m.GetDefaultAccountFunc.appendCall(BaseEthereumGetDefaultAccountFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetDefaultAccount
// method of the parent MockBaseEthereum instance is invoked and the hook
// queue is empty.
func (f *BaseEthereumGetDefaultAccountFunc) SetDefaultHook(hook func() accounts.Account) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDefaultAccount method of the parent MockBaseEthereum instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *BaseEthereumGetDefaultAccountFunc) PushHook(hook func() accounts.Account) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetDefaultAccountFunc) SetDefaultReturn(r0 accounts.Account) {
	f.SetDefaultHook(func() accounts.Account {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetDefaultAccountFunc) PushReturn(r0 accounts.Account) {
	f.PushHook(func() accounts.Account {
		return r0
	})
}

func (f *BaseEthereumGetDefaultAccountFunc) nextHook() func() accounts.Account {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetDefaultAccountFunc) appendCall(r0 BaseEthereumGetDefaultAccountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetDefaultAccountFuncCall
// objects describing the invocations of this function.
func (f *BaseEthereumGetDefaultAccountFunc) History() []BaseEthereumGetDefaultAccountFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetDefaultAccountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetDefaultAccountFuncCall is an object that describes an
// invocation of method GetDefaultAccount on an instance of
// MockBaseEthereum.
type BaseEthereumGetDefaultAccountFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 accounts.Account
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetDefaultAccountFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetDefaultAccountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumGetEndpointFunc describes the behavior when the GetEndpoint
// method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumGetEndpointFunc struct {
	defaultHook func() string
	hooks       []func() string
	history     []BaseEthereumGetEndpointFuncCall
	mutex       sync.Mutex
}

// GetEndpoint delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetEndpoint() string {
	r0 := m.GetEndpointFunc.nextHook()()
	m.GetEndpointFunc.appendCall(BaseEthereumGetEndpointFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetEndpoint method
// of the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumGetEndpointFunc) SetDefaultHook(hook func() string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEndpoint method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumGetEndpointFunc) PushHook(hook func() string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetEndpointFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func() string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetEndpointFunc) PushReturn(r0 string) {
	f.PushHook(func() string {
		return r0
	})
}

func (f *BaseEthereumGetEndpointFunc) nextHook() func() string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetEndpointFunc) appendCall(r0 BaseEthereumGetEndpointFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetEndpointFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumGetEndpointFunc) History() []BaseEthereumGetEndpointFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetEndpointFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetEndpointFuncCall is an object that describes an invocation
// of method GetEndpoint on an instance of MockBaseEthereum.
type BaseEthereumGetEndpointFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetEndpointFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetEndpointFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumGetEventsFunc describes the behavior when the GetEvents
// method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumGetEventsFunc struct {
	defaultHook func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)
	hooks       []func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)
	history     []BaseEthereumGetEventsFuncCall
	mutex       sync.Mutex
}

// GetEvents delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBaseEthereum) GetEvents(v0 context.Context, v1 uint64, v2 uint64, v3 []common.Address) ([]types.Log, error) {
	r0, r1 := m.GetEventsFunc.nextHook()(v0, v1, v2, v3)
	m.GetEventsFunc.appendCall(BaseEthereumGetEventsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetEvents method of
// the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumGetEventsFunc) SetDefaultHook(hook func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEvents method of the parent MockBaseEthereum instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BaseEthereumGetEventsFunc) PushHook(hook func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetEventsFunc) SetDefaultReturn(r0 []types.Log, r1 error) {
	f.SetDefaultHook(func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetEventsFunc) PushReturn(r0 []types.Log, r1 error) {
	f.PushHook(func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error) {
		return r0, r1
	})
}

func (f *BaseEthereumGetEventsFunc) nextHook() func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetEventsFunc) appendCall(r0 BaseEthereumGetEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetEventsFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumGetEventsFunc) History() []BaseEthereumGetEventsFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetEventsFuncCall is an object that describes an invocation
// of method GetEvents on an instance of MockBaseEthereum.
type BaseEthereumGetEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 uint64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Log
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BaseEthereumGetFinalityDelayFunc describes the behavior when the
// GetFinalityDelay method of the parent MockBaseEthereum instance is
// invoked.
type BaseEthereumGetFinalityDelayFunc struct {
	defaultHook func() uint64
	hooks       []func() uint64
	history     []BaseEthereumGetFinalityDelayFuncCall
	mutex       sync.Mutex
}

// GetFinalityDelay delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetFinalityDelay() uint64 {
	r0 := m.GetFinalityDelayFunc.nextHook()()
	m.GetFinalityDelayFunc.appendCall(BaseEthereumGetFinalityDelayFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetFinalityDelay
// method of the parent MockBaseEthereum instance is invoked and the hook
// queue is empty.
func (f *BaseEthereumGetFinalityDelayFunc) SetDefaultHook(hook func() uint64) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFinalityDelay method of the parent MockBaseEthereum instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *BaseEthereumGetFinalityDelayFunc) PushHook(hook func() uint64) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetFinalityDelayFunc) SetDefaultReturn(r0 uint64) {
	f.SetDefaultHook(func() uint64 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetFinalityDelayFunc) PushReturn(r0 uint64) {
	f.PushHook(func() uint64 {
		return r0
	})
}

func (f *BaseEthereumGetFinalityDelayFunc) nextHook() func() uint64 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetFinalityDelayFunc) appendCall(r0 BaseEthereumGetFinalityDelayFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetFinalityDelayFuncCall
// objects describing the invocations of this function.
func (f *BaseEthereumGetFinalityDelayFunc) History() []BaseEthereumGetFinalityDelayFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetFinalityDelayFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetFinalityDelayFuncCall is an object that describes an
// invocation of method GetFinalityDelay on an instance of MockBaseEthereum.
type BaseEthereumGetFinalityDelayFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetFinalityDelayFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetFinalityDelayFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumGetFinalizedHeightFunc describes the behavior when the
// GetFinalizedHeight method of the parent MockBaseEthereum instance is
// invoked.
type BaseEthereumGetFinalizedHeightFunc struct {
	defaultHook func(context.Context) (uint64, error)
	hooks       []func(context.Context) (uint64, error)
	history     []BaseEthereumGetFinalizedHeightFuncCall
	mutex       sync.Mutex
}

// GetFinalizedHeight delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetFinalizedHeight(v0 context.Context) (uint64, error) {
	r0, r1 := m.GetFinalizedHeightFunc.nextHook()(v0)
	m.GetFinalizedHeightFunc.appendCall(BaseEthereumGetFinalizedHeightFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetFinalizedHeight
// method of the parent MockBaseEthereum instance is invoked and the hook
// queue is empty.
func (f *BaseEthereumGetFinalizedHeightFunc) SetDefaultHook(hook func(context.Context) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFinalizedHeight method of the parent MockBaseEthereum instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *BaseEthereumGetFinalizedHeightFunc) PushHook(hook func(context.Context) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetFinalizedHeightFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetFinalizedHeightFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

func (f *BaseEthereumGetFinalizedHeightFunc) nextHook() func(context.Context) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetFinalizedHeightFunc) appendCall(r0 BaseEthereumGetFinalizedHeightFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetFinalizedHeightFuncCall
// objects describing the invocations of this function.
func (f *BaseEthereumGetFinalizedHeightFunc) History() []BaseEthereumGetFinalizedHeightFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetFinalizedHeightFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetFinalizedHeightFuncCall is an object that describes an
// invocation of method GetFinalizedHeight on an instance of
// MockBaseEthereum.
type BaseEthereumGetFinalizedHeightFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetFinalizedHeightFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetFinalizedHeightFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BaseEthereumGetGethClientFunc describes the behavior when the
// GetGethClient method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumGetGethClientFunc struct {
	defaultHook func() interfaces.GethClient
	hooks       []func() interfaces.GethClient
	history     []BaseEthereumGetGethClientFuncCall
	mutex       sync.Mutex
}

// GetGethClient delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetGethClient() interfaces.GethClient {
	r0 := m.GetGethClientFunc.nextHook()()
	m.GetGethClientFunc.appendCall(BaseEthereumGetGethClientFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetGethClient method
// of the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumGetGethClientFunc) SetDefaultHook(hook func() interfaces.GethClient) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetGethClient method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumGetGethClientFunc) PushHook(hook func() interfaces.GethClient) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetGethClientFunc) SetDefaultReturn(r0 interfaces.GethClient) {
	f.SetDefaultHook(func() interfaces.GethClient {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetGethClientFunc) PushReturn(r0 interfaces.GethClient) {
	f.PushHook(func() interfaces.GethClient {
		return r0
	})
}

func (f *BaseEthereumGetGethClientFunc) nextHook() func() interfaces.GethClient {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetGethClientFunc) appendCall(r0 BaseEthereumGetGethClientFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetGethClientFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumGetGethClientFunc) History() []BaseEthereumGetGethClientFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetGethClientFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetGethClientFuncCall is an object that describes an
// invocation of method GetGethClient on an instance of MockBaseEthereum.
type BaseEthereumGetGethClientFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 interfaces.GethClient
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetGethClientFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetGethClientFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumGetKnownAccountsFunc describes the behavior when the
// GetKnownAccounts method of the parent MockBaseEthereum instance is
// invoked.
type BaseEthereumGetKnownAccountsFunc struct {
	defaultHook func() []accounts.Account
	hooks       []func() []accounts.Account
	history     []BaseEthereumGetKnownAccountsFuncCall
	mutex       sync.Mutex
}

// GetKnownAccounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetKnownAccounts() []accounts.Account {
	r0 := m.GetKnownAccountsFunc.nextHook()()
	m.GetKnownAccountsFunc.appendCall(BaseEthereumGetKnownAccountsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetKnownAccounts
// method of the parent MockBaseEthereum instance is invoked and the hook
// queue is empty.
func (f *BaseEthereumGetKnownAccountsFunc) SetDefaultHook(hook func() []accounts.Account) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetKnownAccounts method of the parent MockBaseEthereum instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *BaseEthereumGetKnownAccountsFunc) PushHook(hook func() []accounts.Account) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetKnownAccountsFunc) SetDefaultReturn(r0 []accounts.Account) {
	f.SetDefaultHook(func() []accounts.Account {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetKnownAccountsFunc) PushReturn(r0 []accounts.Account) {
	f.PushHook(func() []accounts.Account {
		return r0
	})
}

func (f *BaseEthereumGetKnownAccountsFunc) nextHook() func() []accounts.Account {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetKnownAccountsFunc) appendCall(r0 BaseEthereumGetKnownAccountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetKnownAccountsFuncCall
// objects describing the invocations of this function.
func (f *BaseEthereumGetKnownAccountsFunc) History() []BaseEthereumGetKnownAccountsFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetKnownAccountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetKnownAccountsFuncCall is an object that describes an
// invocation of method GetKnownAccounts on an instance of MockBaseEthereum.
type BaseEthereumGetKnownAccountsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []accounts.Account
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetKnownAccountsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetKnownAccountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumGetPeerCountFunc describes the behavior when the GetPeerCount
// method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumGetPeerCountFunc struct {
	defaultHook func(context.Context) (uint64, error)
	hooks       []func(context.Context) (uint64, error)
	history     []BaseEthereumGetPeerCountFuncCall
	mutex       sync.Mutex
}

// GetPeerCount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetPeerCount(v0 context.Context) (uint64, error) {
	r0, r1 := m.GetPeerCountFunc.nextHook()(v0)
	m.GetPeerCountFunc.appendCall(BaseEthereumGetPeerCountFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPeerCount method
// of the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumGetPeerCountFunc) SetDefaultHook(hook func(context.Context) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPeerCount method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumGetPeerCountFunc) PushHook(hook func(context.Context) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetPeerCountFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetPeerCountFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

func (f *BaseEthereumGetPeerCountFunc) nextHook() func(context.Context) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetPeerCountFunc) appendCall(r0 BaseEthereumGetPeerCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetPeerCountFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumGetPeerCountFunc) History() []BaseEthereumGetPeerCountFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetPeerCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetPeerCountFuncCall is an object that describes an
// invocation of method GetPeerCount on an instance of MockBaseEthereum.
type BaseEthereumGetPeerCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetPeerCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetPeerCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BaseEthereumGetSnapshotFunc describes the behavior when the GetSnapshot
// method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumGetSnapshotFunc struct {
	defaultHook func() ([]byte, error)
	hooks       []func() ([]byte, error)
	history     []BaseEthereumGetSnapshotFuncCall
	mutex       sync.Mutex
}

// GetSnapshot delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetSnapshot() ([]byte, error) {
	r0, r1 := m.GetSnapshotFunc.nextHook()()
	m.GetSnapshotFunc.appendCall(BaseEthereumGetSnapshotFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSnapshot method
// of the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumGetSnapshotFunc) SetDefaultHook(hook func() ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSnapshot method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumGetSnapshotFunc) PushHook(hook func() ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetSnapshotFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func() ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetSnapshotFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func() ([]byte, error) {
		return r0, r1
	})
}

func (f *BaseEthereumGetSnapshotFunc) nextHook() func() ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetSnapshotFunc) appendCall(r0 BaseEthereumGetSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetSnapshotFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumGetSnapshotFunc) History() []BaseEthereumGetSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetSnapshotFuncCall is an object that describes an invocation
// of method GetSnapshot on an instance of MockBaseEthereum.
type BaseEthereumGetSnapshotFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetSnapshotFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BaseEthereumGetSyncProgressFunc describes the behavior when the
// GetSyncProgress method of the parent MockBaseEthereum instance is
// invoked.
type BaseEthereumGetSyncProgressFunc struct {
	defaultHook func() (bool, *goethereum.SyncProgress, error)
	hooks       []func() (bool, *goethereum.SyncProgress, error)
	history     []BaseEthereumGetSyncProgressFuncCall
	mutex       sync.Mutex
}

// GetSyncProgress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetSyncProgress() (bool, *goethereum.SyncProgress, error) {
	r0, r1, r2 := m.GetSyncProgressFunc.nextHook()()
	m.GetSyncProgressFunc.appendCall(BaseEthereumGetSyncProgressFuncCall{r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetSyncProgress
// method of the parent MockBaseEthereum instance is invoked and the hook
// queue is empty.
func (f *BaseEthereumGetSyncProgressFunc) SetDefaultHook(hook func() (bool, *goethereum.SyncProgress, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSyncProgress method of the parent MockBaseEthereum instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *BaseEthereumGetSyncProgressFunc) PushHook(hook func() (bool, *goethereum.SyncProgress, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetSyncProgressFunc) SetDefaultReturn(r0 bool, r1 *goethereum.SyncProgress, r2 error) {
	f.SetDefaultHook(func() (bool, *goethereum.SyncProgress, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetSyncProgressFunc) PushReturn(r0 bool, r1 *goethereum.SyncProgress, r2 error) {
	f.PushHook(func() (bool, *goethereum.SyncProgress, error) {
		return r0, r1, r2
	})
}

func (f *BaseEthereumGetSyncProgressFunc) nextHook() func() (bool, *goethereum.SyncProgress, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetSyncProgressFunc) appendCall(r0 BaseEthereumGetSyncProgressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetSyncProgressFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumGetSyncProgressFunc) History() []BaseEthereumGetSyncProgressFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetSyncProgressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetSyncProgressFuncCall is an object that describes an
// invocation of method GetSyncProgress on an instance of MockBaseEthereum.
type BaseEthereumGetSyncProgressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *goethereum.SyncProgress
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetSyncProgressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetSyncProgressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// BaseEthereumGetTimeoutContextFunc describes the behavior when the
// GetTimeoutContext method of the parent MockBaseEthereum instance is
// invoked.
type BaseEthereumGetTimeoutContextFunc struct {
	defaultHook func() (context.Context, context.CancelFunc)
	hooks       []func() (context.Context, context.CancelFunc)
	history     []BaseEthereumGetTimeoutContextFuncCall
	mutex       sync.Mutex
}

// GetTimeoutContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetTimeoutContext() (context.Context, context.CancelFunc) {
	r0, r1 := m.GetTimeoutContextFunc.nextHook()()
	m.GetTimeoutContextFunc.appendCall(BaseEthereumGetTimeoutContextFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTimeoutContext
// method of the parent MockBaseEthereum instance is invoked and the hook
// queue is empty.
func (f *BaseEthereumGetTimeoutContextFunc) SetDefaultHook(hook func() (context.Context, context.CancelFunc)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTimeoutContext method of the parent MockBaseEthereum instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *BaseEthereumGetTimeoutContextFunc) PushHook(hook func() (context.Context, context.CancelFunc)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetTimeoutContextFunc) SetDefaultReturn(r0 context.Context, r1 context.CancelFunc) {
	f.SetDefaultHook(func() (context.Context, context.CancelFunc) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetTimeoutContextFunc) PushReturn(r0 context.Context, r1 context.CancelFunc) {
	f.PushHook(func() (context.Context, context.CancelFunc) {
		return r0, r1
	})
}

func (f *BaseEthereumGetTimeoutContextFunc) nextHook() func() (context.Context, context.CancelFunc) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetTimeoutContextFunc) appendCall(r0 BaseEthereumGetTimeoutContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetTimeoutContextFuncCall
// objects describing the invocations of this function.
func (f *BaseEthereumGetTimeoutContextFunc) History() []BaseEthereumGetTimeoutContextFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetTimeoutContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetTimeoutContextFuncCall is an object that describes an
// invocation of method GetTimeoutContext on an instance of
// MockBaseEthereum.
type BaseEthereumGetTimeoutContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 context.CancelFunc
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetTimeoutContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetTimeoutContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BaseEthereumGetTransactionOptsFunc describes the behavior when the
// GetTransactionOpts method of the parent MockBaseEthereum instance is
// invoked.
type BaseEthereumGetTransactionOptsFunc struct {
	defaultHook func(context.Context, accounts.Account) (*bind.TransactOpts, error)
	hooks       []func(context.Context, accounts.Account) (*bind.TransactOpts, error)
	history     []BaseEthereumGetTransactionOptsFuncCall
	mutex       sync.Mutex
}

// GetTransactionOpts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetTransactionOpts(v0 context.Context, v1 accounts.Account) (*bind.TransactOpts, error) {
	r0, r1 := m.GetTransactionOptsFunc.nextHook()(v0, v1)
	m.GetTransactionOptsFunc.appendCall(BaseEthereumGetTransactionOptsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTransactionOpts
// method of the parent MockBaseEthereum instance is invoked and the hook
// queue is empty.
func (f *BaseEthereumGetTransactionOptsFunc) SetDefaultHook(hook func(context.Context, accounts.Account) (*bind.TransactOpts, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTransactionOpts method of the parent MockBaseEthereum instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *BaseEthereumGetTransactionOptsFunc) PushHook(hook func(context.Context, accounts.Account) (*bind.TransactOpts, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetTransactionOptsFunc) SetDefaultReturn(r0 *bind.TransactOpts, r1 error) {
	f.SetDefaultHook(func(context.Context, accounts.Account) (*bind.TransactOpts, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetTransactionOptsFunc) PushReturn(r0 *bind.TransactOpts, r1 error) {
	f.PushHook(func(context.Context, accounts.Account) (*bind.TransactOpts, error) {
		return r0, r1
	})
}

func (f *BaseEthereumGetTransactionOptsFunc) nextHook() func(context.Context, accounts.Account) (*bind.TransactOpts, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetTransactionOptsFunc) appendCall(r0 BaseEthereumGetTransactionOptsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetTransactionOptsFuncCall
// objects describing the invocations of this function.
func (f *BaseEthereumGetTransactionOptsFunc) History() []BaseEthereumGetTransactionOptsFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetTransactionOptsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetTransactionOptsFuncCall is an object that describes an
// invocation of method GetTransactionOpts on an instance of
// MockBaseEthereum.
type BaseEthereumGetTransactionOptsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 accounts.Account
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bind.TransactOpts
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetTransactionOptsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetTransactionOptsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BaseEthereumGetTxCheckFrequencyFunc describes the behavior when the
// GetTxCheckFrequency method of the parent MockBaseEthereum instance is
// invoked.
type BaseEthereumGetTxCheckFrequencyFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []BaseEthereumGetTxCheckFrequencyFuncCall
	mutex       sync.Mutex
}

// GetTxCheckFrequency delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetTxCheckFrequency() time.Duration {
	r0 := m.GetTxCheckFrequencyFunc.nextHook()()
	m.GetTxCheckFrequencyFunc.appendCall(BaseEthereumGetTxCheckFrequencyFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetTxCheckFrequency
// method of the parent MockBaseEthereum instance is invoked and the hook
// queue is empty.
func (f *BaseEthereumGetTxCheckFrequencyFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTxCheckFrequency method of the parent MockBaseEthereum instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BaseEthereumGetTxCheckFrequencyFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetTxCheckFrequencyFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetTxCheckFrequencyFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *BaseEthereumGetTxCheckFrequencyFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetTxCheckFrequencyFunc) appendCall(r0 BaseEthereumGetTxCheckFrequencyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetTxCheckFrequencyFuncCall
// objects describing the invocations of this function.
func (f *BaseEthereumGetTxCheckFrequencyFunc) History() []BaseEthereumGetTxCheckFrequencyFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetTxCheckFrequencyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetTxCheckFrequencyFuncCall is an object that describes an
// invocation of method GetTxCheckFrequency on an instance of
// MockBaseEthereum.
type BaseEthereumGetTxCheckFrequencyFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetTxCheckFrequencyFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetTxCheckFrequencyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumGetTxFeePercentageToIncreaseFunc describes the behavior when
// the GetTxFeePercentageToIncrease method of the parent MockBaseEthereum
// instance is invoked.
type BaseEthereumGetTxFeePercentageToIncreaseFunc struct {
	defaultHook func() int
	hooks       []func() int
	history     []BaseEthereumGetTxFeePercentageToIncreaseFuncCall
	mutex       sync.Mutex
}

// GetTxFeePercentageToIncrease delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetTxFeePercentageToIncrease() int {
	r0 := m.GetTxFeePercentageToIncreaseFunc.nextHook()()
	m.GetTxFeePercentageToIncreaseFunc.appendCall(BaseEthereumGetTxFeePercentageToIncreaseFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetTxFeePercentageToIncrease method of the parent MockBaseEthereum
// instance is invoked and the hook queue is empty.
func (f *BaseEthereumGetTxFeePercentageToIncreaseFunc) SetDefaultHook(hook func() int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTxFeePercentageToIncrease method of the parent MockBaseEthereum
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BaseEthereumGetTxFeePercentageToIncreaseFunc) PushHook(hook func() int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetTxFeePercentageToIncreaseFunc) SetDefaultReturn(r0 int) {
	f.SetDefaultHook(func() int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetTxFeePercentageToIncreaseFunc) PushReturn(r0 int) {
	f.PushHook(func() int {
		return r0
	})
}

func (f *BaseEthereumGetTxFeePercentageToIncreaseFunc) nextHook() func() int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetTxFeePercentageToIncreaseFunc) appendCall(r0 BaseEthereumGetTxFeePercentageToIncreaseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BaseEthereumGetTxFeePercentageToIncreaseFuncCall objects describing the
// invocations of this function.
func (f *BaseEthereumGetTxFeePercentageToIncreaseFunc) History() []BaseEthereumGetTxFeePercentageToIncreaseFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetTxFeePercentageToIncreaseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetTxFeePercentageToIncreaseFuncCall is an object that
// describes an invocation of method GetTxFeePercentageToIncrease on an
// instance of MockBaseEthereum.
type BaseEthereumGetTxFeePercentageToIncreaseFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetTxFeePercentageToIncreaseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetTxFeePercentageToIncreaseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumGetTxMaxFeeThresholdInGweiFunc describes the behavior when
// the GetTxMaxFeeThresholdInGwei method of the parent MockBaseEthereum
// instance is invoked.
type BaseEthereumGetTxMaxFeeThresholdInGweiFunc struct {
	defaultHook func() uint64
	hooks       []func() uint64
	history     []BaseEthereumGetTxMaxFeeThresholdInGweiFuncCall
	mutex       sync.Mutex
}

// GetTxMaxFeeThresholdInGwei delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetTxMaxFeeThresholdInGwei() uint64 {
	r0 := m.GetTxMaxFeeThresholdInGweiFunc.nextHook()()
	m.GetTxMaxFeeThresholdInGweiFunc.appendCall(BaseEthereumGetTxMaxFeeThresholdInGweiFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetTxMaxFeeThresholdInGwei method of the parent MockBaseEthereum instance
// is invoked and the hook queue is empty.
func (f *BaseEthereumGetTxMaxFeeThresholdInGweiFunc) SetDefaultHook(hook func() uint64) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTxMaxFeeThresholdInGwei method of the parent MockBaseEthereum instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BaseEthereumGetTxMaxFeeThresholdInGweiFunc) PushHook(hook func() uint64) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetTxMaxFeeThresholdInGweiFunc) SetDefaultReturn(r0 uint64) {
	f.SetDefaultHook(func() uint64 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetTxMaxFeeThresholdInGweiFunc) PushReturn(r0 uint64) {
	f.PushHook(func() uint64 {
		return r0
	})
}

func (f *BaseEthereumGetTxMaxFeeThresholdInGweiFunc) nextHook() func() uint64 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetTxMaxFeeThresholdInGweiFunc) appendCall(r0 BaseEthereumGetTxMaxFeeThresholdInGweiFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BaseEthereumGetTxMaxFeeThresholdInGweiFuncCall objects describing the
// invocations of this function.
func (f *BaseEthereumGetTxMaxFeeThresholdInGweiFunc) History() []BaseEthereumGetTxMaxFeeThresholdInGweiFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetTxMaxFeeThresholdInGweiFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetTxMaxFeeThresholdInGweiFuncCall is an object that
// describes an invocation of method GetTxMaxFeeThresholdInGwei on an
// instance of MockBaseEthereum.
type BaseEthereumGetTxMaxFeeThresholdInGweiFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetTxMaxFeeThresholdInGweiFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetTxMaxFeeThresholdInGweiFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumGetTxTimeoutForReplacementFunc describes the behavior when
// the GetTxTimeoutForReplacement method of the parent MockBaseEthereum
// instance is invoked.
type BaseEthereumGetTxTimeoutForReplacementFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []BaseEthereumGetTxTimeoutForReplacementFuncCall
	mutex       sync.Mutex
}

// GetTxTimeoutForReplacement delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetTxTimeoutForReplacement() time.Duration {
	r0 := m.GetTxTimeoutForReplacementFunc.nextHook()()
	m.GetTxTimeoutForReplacementFunc.appendCall(BaseEthereumGetTxTimeoutForReplacementFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetTxTimeoutForReplacement method of the parent MockBaseEthereum instance
// is invoked and the hook queue is empty.
func (f *BaseEthereumGetTxTimeoutForReplacementFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTxTimeoutForReplacement method of the parent MockBaseEthereum instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BaseEthereumGetTxTimeoutForReplacementFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetTxTimeoutForReplacementFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetTxTimeoutForReplacementFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *BaseEthereumGetTxTimeoutForReplacementFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetTxTimeoutForReplacementFunc) appendCall(r0 BaseEthereumGetTxTimeoutForReplacementFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BaseEthereumGetTxTimeoutForReplacementFuncCall objects describing the
// invocations of this function.
func (f *BaseEthereumGetTxTimeoutForReplacementFunc) History() []BaseEthereumGetTxTimeoutForReplacementFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetTxTimeoutForReplacementFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetTxTimeoutForReplacementFuncCall is an object that
// describes an invocation of method GetTxTimeoutForReplacement on an
// instance of MockBaseEthereum.
type BaseEthereumGetTxTimeoutForReplacementFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetTxTimeoutForReplacementFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetTxTimeoutForReplacementFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumGetValidatorsFunc describes the behavior when the
// GetValidators method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumGetValidatorsFunc struct {
	defaultHook func(context.Context) ([]common.Address, error)
	hooks       []func(context.Context) ([]common.Address, error)
	history     []BaseEthereumGetValidatorsFuncCall
	mutex       sync.Mutex
}

// GetValidators delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBaseEthereum) GetValidators(v0 context.Context) ([]common.Address, error) {
	r0, r1 := m.GetValidatorsFunc.nextHook()(v0)
	m.GetValidatorsFunc.appendCall(BaseEthereumGetValidatorsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetValidators method
// of the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumGetValidatorsFunc) SetDefaultHook(hook func(context.Context) ([]common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetValidators method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumGetValidatorsFunc) PushHook(hook func(context.Context) ([]common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumGetValidatorsFunc) SetDefaultReturn(r0 []common.Address, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumGetValidatorsFunc) PushReturn(r0 []common.Address, r1 error) {
	f.PushHook(func(context.Context) ([]common.Address, error) {
		return r0, r1
	})
}

func (f *BaseEthereumGetValidatorsFunc) nextHook() func(context.Context) ([]common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumGetValidatorsFunc) appendCall(r0 BaseEthereumGetValidatorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumGetValidatorsFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumGetValidatorsFunc) History() []BaseEthereumGetValidatorsFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumGetValidatorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumGetValidatorsFuncCall is an object that describes an
// invocation of method GetValidators on an instance of MockBaseEthereum.
type BaseEthereumGetValidatorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumGetValidatorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumGetValidatorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BaseEthereumIsEthereumAccessibleFunc describes the behavior when the
// IsEthereumAccessible method of the parent MockBaseEthereum instance is
// invoked.
type BaseEthereumIsEthereumAccessibleFunc struct {
	defaultHook func() bool
	hooks       []func() bool
	history     []BaseEthereumIsEthereumAccessibleFuncCall
	mutex       sync.Mutex
}

// IsEthereumAccessible delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) IsEthereumAccessible() bool {
	r0 := m.IsEthereumAccessibleFunc.nextHook()()
	m.IsEthereumAccessibleFunc.appendCall(BaseEthereumIsEthereumAccessibleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the IsEthereumAccessible
// method of the parent MockBaseEthereum instance is invoked and the hook
// queue is empty.
func (f *BaseEthereumIsEthereumAccessibleFunc) SetDefaultHook(hook func() bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsEthereumAccessible method of the parent MockBaseEthereum instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BaseEthereumIsEthereumAccessibleFunc) PushHook(hook func() bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumIsEthereumAccessibleFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func() bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumIsEthereumAccessibleFunc) PushReturn(r0 bool) {
	f.PushHook(func() bool {
		return r0
	})
}

func (f *BaseEthereumIsEthereumAccessibleFunc) nextHook() func() bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumIsEthereumAccessibleFunc) appendCall(r0 BaseEthereumIsEthereumAccessibleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumIsEthereumAccessibleFuncCall
// objects describing the invocations of this function.
func (f *BaseEthereumIsEthereumAccessibleFunc) History() []BaseEthereumIsEthereumAccessibleFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumIsEthereumAccessibleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumIsEthereumAccessibleFuncCall is an object that describes an
// invocation of method IsEthereumAccessible on an instance of
// MockBaseEthereum.
type BaseEthereumIsEthereumAccessibleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumIsEthereumAccessibleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumIsEthereumAccessibleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumKnownSelectorsFunc describes the behavior when the
// KnownSelectors method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumKnownSelectorsFunc struct {
	defaultHook func() interfaces.SelectorMap
	hooks       []func() interfaces.SelectorMap
	history     []BaseEthereumKnownSelectorsFuncCall
	mutex       sync.Mutex
}

// KnownSelectors delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) KnownSelectors() interfaces.SelectorMap {
	r0 := m.KnownSelectorsFunc.nextHook()()
	m.KnownSelectorsFunc.appendCall(BaseEthereumKnownSelectorsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the KnownSelectors
// method of the parent MockBaseEthereum instance is invoked and the hook
// queue is empty.
func (f *BaseEthereumKnownSelectorsFunc) SetDefaultHook(hook func() interfaces.SelectorMap) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// KnownSelectors method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumKnownSelectorsFunc) PushHook(hook func() interfaces.SelectorMap) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumKnownSelectorsFunc) SetDefaultReturn(r0 interfaces.SelectorMap) {
	f.SetDefaultHook(func() interfaces.SelectorMap {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumKnownSelectorsFunc) PushReturn(r0 interfaces.SelectorMap) {
	f.PushHook(func() interfaces.SelectorMap {
		return r0
	})
}

func (f *BaseEthereumKnownSelectorsFunc) nextHook() func() interfaces.SelectorMap {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumKnownSelectorsFunc) appendCall(r0 BaseEthereumKnownSelectorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumKnownSelectorsFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumKnownSelectorsFunc) History() []BaseEthereumKnownSelectorsFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumKnownSelectorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumKnownSelectorsFuncCall is an object that describes an
// invocation of method KnownSelectors on an instance of MockBaseEthereum.
type BaseEthereumKnownSelectorsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 interfaces.SelectorMap
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumKnownSelectorsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumKnownSelectorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumQueueFunc describes the behavior when the Queue method of the
// parent MockBaseEthereum instance is invoked.
type BaseEthereumQueueFunc struct {
	defaultHook func() interfaces.TxnQueue
	hooks       []func() interfaces.TxnQueue
	history     []BaseEthereumQueueFuncCall
	mutex       sync.Mutex
}

// Queue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBaseEthereum) Queue() interfaces.TxnQueue {
	r0 := m.QueueFunc.nextHook()()
	m.QueueFunc.appendCall(BaseEthereumQueueFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Queue method of the
// parent MockBaseEthereum instance is invoked and the hook queue is empty.
func (f *BaseEthereumQueueFunc) SetDefaultHook(hook func() interfaces.TxnQueue) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Queue method of the parent MockBaseEthereum instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BaseEthereumQueueFunc) PushHook(hook func() interfaces.TxnQueue) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumQueueFunc) SetDefaultReturn(r0 interfaces.TxnQueue) {
	f.SetDefaultHook(func() interfaces.TxnQueue {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumQueueFunc) PushReturn(r0 interfaces.TxnQueue) {
	f.PushHook(func() interfaces.TxnQueue {
		return r0
	})
}

func (f *BaseEthereumQueueFunc) nextHook() func() interfaces.TxnQueue {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumQueueFunc) appendCall(r0 BaseEthereumQueueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumQueueFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumQueueFunc) History() []BaseEthereumQueueFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumQueueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumQueueFuncCall is an object that describes an invocation of
// method Queue on an instance of MockBaseEthereum.
type BaseEthereumQueueFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 interfaces.TxnQueue
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumQueueFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumQueueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumRetryCountFunc describes the behavior when the RetryCount
// method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumRetryCountFunc struct {
	defaultHook func() int
	hooks       []func() int
	history     []BaseEthereumRetryCountFuncCall
	mutex       sync.Mutex
}

// RetryCount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBaseEthereum) RetryCount() int {
	r0 := m.RetryCountFunc.nextHook()()
	m.RetryCountFunc.appendCall(BaseEthereumRetryCountFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RetryCount method of
// the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumRetryCountFunc) SetDefaultHook(hook func() int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RetryCount method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumRetryCountFunc) PushHook(hook func() int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumRetryCountFunc) SetDefaultReturn(r0 int) {
	f.SetDefaultHook(func() int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumRetryCountFunc) PushReturn(r0 int) {
	f.PushHook(func() int {
		return r0
	})
}

func (f *BaseEthereumRetryCountFunc) nextHook() func() int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumRetryCountFunc) appendCall(r0 BaseEthereumRetryCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumRetryCountFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumRetryCountFunc) History() []BaseEthereumRetryCountFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumRetryCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumRetryCountFuncCall is an object that describes an invocation
// of method RetryCount on an instance of MockBaseEthereum.
type BaseEthereumRetryCountFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumRetryCountFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumRetryCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumRetryDelayFunc describes the behavior when the RetryDelay
// method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumRetryDelayFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []BaseEthereumRetryDelayFuncCall
	mutex       sync.Mutex
}

// RetryDelay delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBaseEthereum) RetryDelay() time.Duration {
	r0 := m.RetryDelayFunc.nextHook()()
	m.RetryDelayFunc.appendCall(BaseEthereumRetryDelayFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RetryDelay method of
// the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumRetryDelayFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RetryDelay method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumRetryDelayFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumRetryDelayFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumRetryDelayFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *BaseEthereumRetryDelayFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumRetryDelayFunc) appendCall(r0 BaseEthereumRetryDelayFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumRetryDelayFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumRetryDelayFunc) History() []BaseEthereumRetryDelayFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumRetryDelayFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumRetryDelayFuncCall is an object that describes an invocation
// of method RetryDelay on an instance of MockBaseEthereum.
type BaseEthereumRetryDelayFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumRetryDelayFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumRetryDelayFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumTimeoutFunc describes the behavior when the Timeout method of
// the parent MockBaseEthereum instance is invoked.
type BaseEthereumTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []BaseEthereumTimeoutFuncCall
	mutex       sync.Mutex
}

// Timeout delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBaseEthereum) Timeout() time.Duration {
	r0 := m.TimeoutFunc.nextHook()()
	m.TimeoutFunc.appendCall(BaseEthereumTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Timeout method of
// the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Timeout method of the parent MockBaseEthereum instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BaseEthereumTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *BaseEthereumTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumTimeoutFunc) appendCall(r0 BaseEthereumTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumTimeoutFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumTimeoutFunc) History() []BaseEthereumTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumTimeoutFuncCall is an object that describes an invocation of
// method Timeout on an instance of MockBaseEthereum.
type BaseEthereumTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumTransferEtherFunc describes the behavior when the
// TransferEther method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumTransferEtherFunc struct {
	defaultHook func(common.Address, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(common.Address, common.Address, *big.Int) (*types.Transaction, error)
	history     []BaseEthereumTransferEtherFuncCall
	mutex       sync.Mutex
}

// TransferEther delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBaseEthereum) TransferEther(v0 common.Address, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.TransferEtherFunc.nextHook()(v0, v1, v2)
	m.TransferEtherFunc.appendCall(BaseEthereumTransferEtherFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TransferEther method
// of the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumTransferEtherFunc) SetDefaultHook(hook func(common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransferEther method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumTransferEtherFunc) PushHook(hook func(common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumTransferEtherFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumTransferEtherFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *BaseEthereumTransferEtherFunc) nextHook() func(common.Address, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumTransferEtherFunc) appendCall(r0 BaseEthereumTransferEtherFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumTransferEtherFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumTransferEtherFunc) History() []BaseEthereumTransferEtherFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumTransferEtherFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumTransferEtherFuncCall is an object that describes an
// invocation of method TransferEther on an instance of MockBaseEthereum.
type BaseEthereumTransferEtherFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 common.Address
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumTransferEtherFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumTransferEtherFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BaseEthereumUnlockAccountFunc describes the behavior when the
// UnlockAccount method of the parent MockBaseEthereum instance is invoked.
type BaseEthereumUnlockAccountFunc struct {
	defaultHook func(accounts.Account) error
	hooks       []func(accounts.Account) error
	history     []BaseEthereumUnlockAccountFuncCall
	mutex       sync.Mutex
}

// UnlockAccount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBaseEthereum) UnlockAccount(v0 accounts.Account) error {
	r0 := m.UnlockAccountFunc.nextHook()(v0)
	m.UnlockAccountFunc.appendCall(BaseEthereumUnlockAccountFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UnlockAccount method
// of the parent MockBaseEthereum instance is invoked and the hook queue is
// empty.
func (f *BaseEthereumUnlockAccountFunc) SetDefaultHook(hook func(accounts.Account) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UnlockAccount method of the parent MockBaseEthereum instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BaseEthereumUnlockAccountFunc) PushHook(hook func(accounts.Account) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumUnlockAccountFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(accounts.Account) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumUnlockAccountFunc) PushReturn(r0 error) {
	f.PushHook(func(accounts.Account) error {
		return r0
	})
}

func (f *BaseEthereumUnlockAccountFunc) nextHook() func(accounts.Account) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumUnlockAccountFunc) appendCall(r0 BaseEthereumUnlockAccountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BaseEthereumUnlockAccountFuncCall objects
// describing the invocations of this function.
func (f *BaseEthereumUnlockAccountFunc) History() []BaseEthereumUnlockAccountFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumUnlockAccountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumUnlockAccountFuncCall is an object that describes an
// invocation of method UnlockAccount on an instance of MockBaseEthereum.
type BaseEthereumUnlockAccountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 accounts.Account
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumUnlockAccountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumUnlockAccountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BaseEthereumUnlockAccountWithPasscodeFunc describes the behavior when the
// UnlockAccountWithPasscode method of the parent MockBaseEthereum instance
// is invoked.
type BaseEthereumUnlockAccountWithPasscodeFunc struct {
	defaultHook func(accounts.Account, string) error
	hooks       []func(accounts.Account, string) error
	history     []BaseEthereumUnlockAccountWithPasscodeFuncCall
	mutex       sync.Mutex
}

// UnlockAccountWithPasscode delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockBaseEthereum) UnlockAccountWithPasscode(v0 accounts.Account, v1 string) error {
	r0 := m.UnlockAccountWithPasscodeFunc.nextHook()(v0, v1)
	m.UnlockAccountWithPasscodeFunc.appendCall(BaseEthereumUnlockAccountWithPasscodeFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UnlockAccountWithPasscode method of the parent MockBaseEthereum instance
// is invoked and the hook queue is empty.
func (f *BaseEthereumUnlockAccountWithPasscodeFunc) SetDefaultHook(hook func(accounts.Account, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UnlockAccountWithPasscode method of the parent MockBaseEthereum instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BaseEthereumUnlockAccountWithPasscodeFunc) PushHook(hook func(accounts.Account, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BaseEthereumUnlockAccountWithPasscodeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(accounts.Account, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BaseEthereumUnlockAccountWithPasscodeFunc) PushReturn(r0 error) {
	f.PushHook(func(accounts.Account, string) error {
		return r0
	})
}

func (f *BaseEthereumUnlockAccountWithPasscodeFunc) nextHook() func(accounts.Account, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BaseEthereumUnlockAccountWithPasscodeFunc) appendCall(r0 BaseEthereumUnlockAccountWithPasscodeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BaseEthereumUnlockAccountWithPasscodeFuncCall objects describing the
// invocations of this function.
func (f *BaseEthereumUnlockAccountWithPasscodeFunc) History() []BaseEthereumUnlockAccountWithPasscodeFuncCall {
	f.mutex.Lock()
	history := make([]BaseEthereumUnlockAccountWithPasscodeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BaseEthereumUnlockAccountWithPasscodeFuncCall is an object that describes
// an invocation of method UnlockAccountWithPasscode on an instance of
// MockBaseEthereum.
type BaseEthereumUnlockAccountWithPasscodeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 accounts.Account
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BaseEthereumUnlockAccountWithPasscodeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BaseEthereumUnlockAccountWithPasscodeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
