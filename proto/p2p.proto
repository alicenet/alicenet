syntax = "proto3";

package proto;

// The P2P service definition.
service P2P {
  rpc Status(StatusRequest) returns (StatusResponse) {}

  rpc GetBlockHeaders(GetBlockHeadersRequest) returns (GetBlockHeadersResponse) {}
  rpc GetMinedTxs(GetMinedTxsRequest) returns (GetMinedTxsResponse) {}
  rpc GetPendingTxs(GetPendingTxsRequest) returns (GetPendingTxsResponse) {}
  rpc GetSnapShotNode(GetSnapShotNodeRequest) returns (GetSnapShotNodeResponse) {}
  rpc GetSnapShotStateData(GetSnapShotStateDataRequest) returns (GetSnapShotStateDataResponse) {}
  rpc GetSnapShotHdrNode(GetSnapShotHdrNodeRequest) returns (GetSnapShotHdrNodeResponse) {}

  rpc GossipTransaction(GossipTransactionMessage) returns (GossipTransactionAck) {}

  rpc GossipProposal(GossipProposalMessage) returns (GossipProposalAck) {}
  rpc GossipPreVote(GossipPreVoteMessage) returns (GossipPreVoteAck) {}
  rpc GossipPreVoteNil(GossipPreVoteNilMessage) returns (GossipPreVoteNilAck) {}
  rpc GossipPreCommit(GossipPreCommitMessage) returns (GossipPreCommitAck) {}
  rpc GossipPreCommitNil(GossipPreCommitNilMessage) returns (GossipPreCommitNilAck) {}
  rpc GossipNextRound(GossipNextRoundMessage) returns (GossipNextRoundAck) {}
  rpc GossipNextHeight(GossipNextHeightMessage) returns (GossipNextHeightAck) {}
  rpc GossipBlockHeader(GossipBlockHeaderMessage) returns (GossipBlockHeaderAck) {}

  rpc GetPeers(GetPeersRequest) returns (GetPeersResponse) {}
}

service P2PDiscovery {
  rpc GetPeers(GetPeersRequest) returns (GetPeersResponse) {}
}

message GetPeersRequest {
  string Target = 1;
}

message GetPeersResponse {
  repeated string Peers = 1;
}

message StatusRequest {}
message StatusResponse {
  uint32 SyncToBlockHeight = 1;
  uint32 MaxBlockHeightSeen = 2;
}

message GetBlockHeadersRequest {
  repeated uint32 BlockNumbers = 1;
}
message GetBlockHeadersResponse {
  repeated bytes BlockHeaders = 1;
}

message GetPendingTxsRequest {
  repeated bytes TxHashes = 1;
}
message GetPendingTxsResponse {
  repeated bytes Txs = 1;
}

message GetMinedTxsRequest {
  repeated bytes TxHashes = 1;
}
message GetMinedTxsResponse {
  repeated bytes Txs = 1;
}

message GetSnapShotNodeRequest {
  uint32 Height = 1;
  bytes NodeHash = 2;
}
message GetSnapShotNodeResponse {
  bytes Node = 1;
}

message GetSnapShotStateDataRequest {
  bytes Key = 1;
}
message GetSnapShotStateDataResponse {
  bytes Data = 1;
}

message GetSnapShotHdrNodeRequest {
  bytes NodeHash = 2;
}
message GetSnapShotHdrNodeResponse {
  bytes Node = 1;
}

message GossipProposalMessage {
  bytes Proposal = 1;
}
message GossipProposalAck {}

message GossipPreVoteMessage {
  bytes PreVote = 1;
}
message GossipPreVoteAck {}

message GossipPreVoteNilMessage {
  bytes PreVoteNil = 1;
}
message GossipPreVoteNilAck {}

message GossipPreCommitMessage {
  bytes PreCommit = 1;
}
message GossipPreCommitAck {}

message GossipPreCommitNilMessage {
  bytes PreCommitNil = 1;
}
message GossipPreCommitNilAck {}

message GossipNextRoundMessage {
  bytes NextRound = 1;
}
message GossipNextRoundAck {}

message GossipNextHeightMessage {
  bytes NextHeight = 1;
}
message GossipNextHeightAck {}

message GossipBlockHeaderMessage {
  bytes BlockHeader = 1;
}
message GossipBlockHeaderAck {}

message GossipTransactionMessage {
  bytes Transaction = 1;
}
message GossipTransactionAck {}
