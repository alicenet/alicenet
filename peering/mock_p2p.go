// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alicenet/alicenet/interfaces (interfaces: P2PClient)

// Package mock_interfaces is a generated GoMock package.
package peering

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/alicenet/alicenet/interfaces"
	proto "github.com/alicenet/alicenet/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockP2PClient is a mock of P2PClient interface
type MockP2PClient struct {
	ctrl     *gomock.Controller
	recorder *MockP2PClientMockRecorder
}

// MockP2PClientMockRecorder is the mock recorder for MockP2PClient
type MockP2PClientMockRecorder struct {
	mock *MockP2PClient
}

// NewMockP2PClient creates a new mock instance
func NewMockP2PClient(ctrl *gomock.Controller) *MockP2PClient {
	mock := &MockP2PClient{ctrl: ctrl}
	mock.recorder = &MockP2PClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockP2PClient) EXPECT() *MockP2PClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockP2PClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockP2PClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockP2PClient)(nil).Close))
}

// CloseChan mocks base method
func (m *MockP2PClient) CloseChan() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseChan")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// CloseChan indicates an expected call of CloseChan
func (mr *MockP2PClientMockRecorder) CloseChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseChan", reflect.TypeOf((*MockP2PClient)(nil).CloseChan))
}

// GetBlockHeaders mocks base method
func (m *MockP2PClient) GetBlockHeaders(arg0 context.Context, arg1 *proto.GetBlockHeadersRequest, arg2 ...grpc.CallOption) (*proto.GetBlockHeadersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockHeaders", varargs...)
	ret0, _ := ret[0].(*proto.GetBlockHeadersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeaders indicates an expected call of GetBlockHeaders
func (mr *MockP2PClientMockRecorder) GetBlockHeaders(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeaders", reflect.TypeOf((*MockP2PClient)(nil).GetBlockHeaders), varargs...)
}

// GetMinedTxs mocks base method
func (m *MockP2PClient) GetMinedTxs(arg0 context.Context, arg1 *proto.GetMinedTxsRequest, arg2 ...grpc.CallOption) (*proto.GetMinedTxsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMinedTxs", varargs...)
	ret0, _ := ret[0].(*proto.GetMinedTxsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinedTxs indicates an expected call of GetMinedTxs
func (mr *MockP2PClientMockRecorder) GetMinedTxs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinedTxs", reflect.TypeOf((*MockP2PClient)(nil).GetMinedTxs), varargs...)
}

// GetPeers mocks base method
func (m *MockP2PClient) GetPeers(arg0 context.Context, arg1 *proto.GetPeersRequest, arg2 ...grpc.CallOption) (*proto.GetPeersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPeers", varargs...)
	ret0, _ := ret[0].(*proto.GetPeersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeers indicates an expected call of GetPeers
func (mr *MockP2PClientMockRecorder) GetPeers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockP2PClient)(nil).GetPeers), varargs...)
}

// GetPendingTxs mocks base method
func (m *MockP2PClient) GetPendingTxs(arg0 context.Context, arg1 *proto.GetPendingTxsRequest, arg2 ...grpc.CallOption) (*proto.GetPendingTxsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPendingTxs", varargs...)
	ret0, _ := ret[0].(*proto.GetPendingTxsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingTxs indicates an expected call of GetPendingTxs
func (mr *MockP2PClientMockRecorder) GetPendingTxs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTxs", reflect.TypeOf((*MockP2PClient)(nil).GetPendingTxs), varargs...)
}

// GetSnapShotLeaves mocks base method
func (m *MockP2PClient) GetSnapShotStateData(arg0 context.Context, arg1 *proto.GetSnapShotStateDataRequest, arg2 ...grpc.CallOption) (*proto.GetSnapShotStateDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSnapShotLeaves", varargs...)
	ret0, _ := ret[0].(*proto.GetSnapShotStateDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapShotLeaves indicates an expected call of GetSnapShotLeaves
func (mr *MockP2PClientMockRecorder) GetSnapShotStateData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapShotLeaves", reflect.TypeOf((*MockP2PClient)(nil).GetSnapShotStateData), varargs...)
}

// GetSnapShotNodes mocks base method
func (m *MockP2PClient) GetSnapShotNode(arg0 context.Context, arg1 *proto.GetSnapShotNodeRequest, arg2 ...grpc.CallOption) (*proto.GetSnapShotNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSnapShotNodes", varargs...)
	ret0, _ := ret[0].(*proto.GetSnapShotNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapShotNodes indicates an expected call of GetSnapShotNodes
func (mr *MockP2PClientMockRecorder) GetSnapShotNodes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapShotNodes", reflect.TypeOf((*MockP2PClient)(nil).GetSnapShotNode), varargs...)
}

// GossipBlockHeader mocks base method
func (m *MockP2PClient) GossipBlockHeader(arg0 context.Context, arg1 *proto.GossipBlockHeaderMessage, arg2 ...grpc.CallOption) (*proto.GossipBlockHeaderAck, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GossipBlockHeader", varargs...)
	ret0, _ := ret[0].(*proto.GossipBlockHeaderAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GossipBlockHeader indicates an expected call of GossipBlockHeader
func (mr *MockP2PClientMockRecorder) GossipBlockHeader(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GossipBlockHeader", reflect.TypeOf((*MockP2PClient)(nil).GossipBlockHeader), varargs...)
}

// GossipNextHeight mocks base method
func (m *MockP2PClient) GossipNextHeight(arg0 context.Context, arg1 *proto.GossipNextHeightMessage, arg2 ...grpc.CallOption) (*proto.GossipNextHeightAck, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GossipNextHeight", varargs...)
	ret0, _ := ret[0].(*proto.GossipNextHeightAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GossipNextHeight indicates an expected call of GossipNextHeight
func (mr *MockP2PClientMockRecorder) GossipNextHeight(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GossipNextHeight", reflect.TypeOf((*MockP2PClient)(nil).GossipNextHeight), varargs...)
}

// GossipNextRound mocks base method
func (m *MockP2PClient) GossipNextRound(arg0 context.Context, arg1 *proto.GossipNextRoundMessage, arg2 ...grpc.CallOption) (*proto.GossipNextRoundAck, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GossipNextRound", varargs...)
	ret0, _ := ret[0].(*proto.GossipNextRoundAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GossipNextRound indicates an expected call of GossipNextRound
func (mr *MockP2PClientMockRecorder) GossipNextRound(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GossipNextRound", reflect.TypeOf((*MockP2PClient)(nil).GossipNextRound), varargs...)
}

// GossipPreCommit mocks base method
func (m *MockP2PClient) GossipPreCommit(arg0 context.Context, arg1 *proto.GossipPreCommitMessage, arg2 ...grpc.CallOption) (*proto.GossipPreCommitAck, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GossipPreCommit", varargs...)
	ret0, _ := ret[0].(*proto.GossipPreCommitAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GossipPreCommit indicates an expected call of GossipPreCommit
func (mr *MockP2PClientMockRecorder) GossipPreCommit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GossipPreCommit", reflect.TypeOf((*MockP2PClient)(nil).GossipPreCommit), varargs...)
}

// GossipPreCommitNil mocks base method
func (m *MockP2PClient) GossipPreCommitNil(arg0 context.Context, arg1 *proto.GossipPreCommitNilMessage, arg2 ...grpc.CallOption) (*proto.GossipPreCommitNilAck, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GossipPreCommitNil", varargs...)
	ret0, _ := ret[0].(*proto.GossipPreCommitNilAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GossipPreCommitNil indicates an expected call of GossipPreCommitNil
func (mr *MockP2PClientMockRecorder) GossipPreCommitNil(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GossipPreCommitNil", reflect.TypeOf((*MockP2PClient)(nil).GossipPreCommitNil), varargs...)
}

// GossipPreVote mocks base method
func (m *MockP2PClient) GossipPreVote(arg0 context.Context, arg1 *proto.GossipPreVoteMessage, arg2 ...grpc.CallOption) (*proto.GossipPreVoteAck, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GossipPreVote", varargs...)
	ret0, _ := ret[0].(*proto.GossipPreVoteAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GossipPreVote indicates an expected call of GossipPreVote
func (mr *MockP2PClientMockRecorder) GossipPreVote(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GossipPreVote", reflect.TypeOf((*MockP2PClient)(nil).GossipPreVote), varargs...)
}

// GossipPreVoteNil mocks base method
func (m *MockP2PClient) GossipPreVoteNil(arg0 context.Context, arg1 *proto.GossipPreVoteNilMessage, arg2 ...grpc.CallOption) (*proto.GossipPreVoteNilAck, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GossipPreVoteNil", varargs...)
	ret0, _ := ret[0].(*proto.GossipPreVoteNilAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GossipPreVoteNil indicates an expected call of GossipPreVoteNil
func (mr *MockP2PClientMockRecorder) GossipPreVoteNil(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GossipPreVoteNil", reflect.TypeOf((*MockP2PClient)(nil).GossipPreVoteNil), varargs...)
}

// GossipProposal mocks base method
func (m *MockP2PClient) GossipProposal(arg0 context.Context, arg1 *proto.GossipProposalMessage, arg2 ...grpc.CallOption) (*proto.GossipProposalAck, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GossipProposal", varargs...)
	ret0, _ := ret[0].(*proto.GossipProposalAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GossipProposal indicates an expected call of GossipProposal
func (mr *MockP2PClientMockRecorder) GossipProposal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GossipProposal", reflect.TypeOf((*MockP2PClient)(nil).GossipProposal), varargs...)
}

// GossipTransaction mocks base method
func (m *MockP2PClient) GossipTransaction(arg0 context.Context, arg1 *proto.GossipTransactionMessage, arg2 ...grpc.CallOption) (*proto.GossipTransactionAck, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GossipTransaction", varargs...)
	ret0, _ := ret[0].(*proto.GossipTransactionAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GossipTransaction indicates an expected call of GossipTransaction
func (mr *MockP2PClientMockRecorder) GossipTransaction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GossipTransaction", reflect.TypeOf((*MockP2PClient)(nil).GossipTransaction), varargs...)
}

// NodeAddr mocks base method
func (m *MockP2PClient) NodeAddr() interfaces.NodeAddr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeAddr")
	ret0, _ := ret[0].(interfaces.NodeAddr)
	return ret0
}

// NodeAddr indicates an expected call of NodeAddr
func (mr *MockP2PClientMockRecorder) NodeAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeAddr", reflect.TypeOf((*MockP2PClient)(nil).NodeAddr))
}

// Status mocks base method
func (m *MockP2PClient) Status(arg0 context.Context, arg1 *proto.StatusRequest, arg2 ...grpc.CallOption) (*proto.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*proto.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockP2PClientMockRecorder) Status(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockP2PClient)(nil).Status), varargs...)
}
