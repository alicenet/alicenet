// Code generated by go-mockgen 1.3.6; DO NOT EDIT.

package mocks

import (
	"math/big"
	"sync"
	"time"

	dynamics "github.com/alicenet/alicenet/dynamics"
	v2 "github.com/dgraph-io/badger/v2"
)

// MockStorageGetter is a mock implementation of the StorageGetter interface
// (from the package github.com/alicenet/alicenet/dynamics) used for unit
// testing.
type MockStorageGetter struct {
	// GetDataStoreEpochFeeFunc is an instance of a mock function object
	// controlling the behavior of the method GetDataStoreEpochFee.
	GetDataStoreEpochFeeFunc *StorageGetterGetDataStoreEpochFeeFunc
	// GetDataStoreValidVersionFunc is an instance of a mock function object
	// controlling the behavior of the method GetDataStoreValidVersion.
	GetDataStoreValidVersionFunc *StorageGetterGetDataStoreValidVersionFunc
	// GetDeadBlockRoundNextRoundTimeoutFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetDeadBlockRoundNextRoundTimeout.
	GetDeadBlockRoundNextRoundTimeoutFunc *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc
	// GetDownloadTimeoutFunc is an instance of a mock function object
	// controlling the behavior of the method GetDownloadTimeout.
	GetDownloadTimeoutFunc *StorageGetterGetDownloadTimeoutFunc
	// GetMaxBytesFunc is an instance of a mock function object controlling
	// the behavior of the method GetMaxBytes.
	GetMaxBytesFunc *StorageGetterGetMaxBytesFunc
	// GetMaxProposalSizeFunc is an instance of a mock function object
	// controlling the behavior of the method GetMaxProposalSize.
	GetMaxProposalSizeFunc *StorageGetterGetMaxProposalSizeFunc
	// GetMinTxFeeFunc is an instance of a mock function object controlling
	// the behavior of the method GetMinTxFee.
	GetMinTxFeeFunc *StorageGetterGetMinTxFeeFunc
	// GetMsgTimeoutFunc is an instance of a mock function object
	// controlling the behavior of the method GetMsgTimeout.
	GetMsgTimeoutFunc *StorageGetterGetMsgTimeoutFunc
	// GetPreCommitStepTimeoutFunc is an instance of a mock function object
	// controlling the behavior of the method GetPreCommitStepTimeout.
	GetPreCommitStepTimeoutFunc *StorageGetterGetPreCommitStepTimeoutFunc
	// GetPreVoteStepTimeoutFunc is an instance of a mock function object
	// controlling the behavior of the method GetPreVoteStepTimeout.
	GetPreVoteStepTimeoutFunc *StorageGetterGetPreVoteStepTimeoutFunc
	// GetProposalStepTimeoutFunc is an instance of a mock function object
	// controlling the behavior of the method GetProposalStepTimeout.
	GetProposalStepTimeoutFunc *StorageGetterGetProposalStepTimeoutFunc
	// GetSrvrMsgTimeoutFunc is an instance of a mock function object
	// controlling the behavior of the method GetSrvrMsgTimeout.
	GetSrvrMsgTimeoutFunc *StorageGetterGetSrvrMsgTimeoutFunc
	// GetTxValidVersionFunc is an instance of a mock function object
	// controlling the behavior of the method GetTxValidVersion.
	GetTxValidVersionFunc *StorageGetterGetTxValidVersionFunc
	// GetValueStoreFeeFunc is an instance of a mock function object
	// controlling the behavior of the method GetValueStoreFee.
	GetValueStoreFeeFunc *StorageGetterGetValueStoreFeeFunc
	// GetValueStoreValidVersionFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetValueStoreValidVersion.
	GetValueStoreValidVersionFunc *StorageGetterGetValueStoreValidVersionFunc
	// LoadStorageFunc is an instance of a mock function object controlling
	// the behavior of the method LoadStorage.
	LoadStorageFunc *StorageGetterLoadStorageFunc
	// UpdateStorageFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateStorage.
	UpdateStorageFunc *StorageGetterUpdateStorageFunc
}

// NewMockStorageGetter creates a new mock of the StorageGetter interface.
// All methods return zero values for all results, unless overwritten.
func NewMockStorageGetter() *MockStorageGetter {
	return &MockStorageGetter{
		GetDataStoreEpochFeeFunc: &StorageGetterGetDataStoreEpochFeeFunc{
			defaultHook: func() (r0 *big.Int) {
				return
			},
		},
		GetDataStoreValidVersionFunc: &StorageGetterGetDataStoreValidVersionFunc{
			defaultHook: func() (r0 uint32) {
				return
			},
		},
		GetDeadBlockRoundNextRoundTimeoutFunc: &StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetDownloadTimeoutFunc: &StorageGetterGetDownloadTimeoutFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetMaxBytesFunc: &StorageGetterGetMaxBytesFunc{
			defaultHook: func() (r0 uint32) {
				return
			},
		},
		GetMaxProposalSizeFunc: &StorageGetterGetMaxProposalSizeFunc{
			defaultHook: func() (r0 uint32) {
				return
			},
		},
		GetMinTxFeeFunc: &StorageGetterGetMinTxFeeFunc{
			defaultHook: func() (r0 *big.Int) {
				return
			},
		},
		GetMsgTimeoutFunc: &StorageGetterGetMsgTimeoutFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetPreCommitStepTimeoutFunc: &StorageGetterGetPreCommitStepTimeoutFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetPreVoteStepTimeoutFunc: &StorageGetterGetPreVoteStepTimeoutFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetProposalStepTimeoutFunc: &StorageGetterGetProposalStepTimeoutFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetSrvrMsgTimeoutFunc: &StorageGetterGetSrvrMsgTimeoutFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetTxValidVersionFunc: &StorageGetterGetTxValidVersionFunc{
			defaultHook: func() (r0 uint32) {
				return
			},
		},
		GetValueStoreFeeFunc: &StorageGetterGetValueStoreFeeFunc{
			defaultHook: func() (r0 *big.Int) {
				return
			},
		},
		GetValueStoreValidVersionFunc: &StorageGetterGetValueStoreValidVersionFunc{
			defaultHook: func() (r0 uint32) {
				return
			},
		},
		LoadStorageFunc: &StorageGetterLoadStorageFunc{
			defaultHook: func(*v2.Txn, uint32) (r0 error) {
				return
			},
		},
		UpdateStorageFunc: &StorageGetterUpdateStorageFunc{
			defaultHook: func(*v2.Txn, dynamics.Updater) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockStorageGetter creates a new mock of the StorageGetter
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockStorageGetter() *MockStorageGetter {
	return &MockStorageGetter{
		GetDataStoreEpochFeeFunc: &StorageGetterGetDataStoreEpochFeeFunc{
			defaultHook: func() *big.Int {
				panic("unexpected invocation of MockStorageGetter.GetDataStoreEpochFee")
			},
		},
		GetDataStoreValidVersionFunc: &StorageGetterGetDataStoreValidVersionFunc{
			defaultHook: func() uint32 {
				panic("unexpected invocation of MockStorageGetter.GetDataStoreValidVersion")
			},
		},
		GetDeadBlockRoundNextRoundTimeoutFunc: &StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockStorageGetter.GetDeadBlockRoundNextRoundTimeout")
			},
		},
		GetDownloadTimeoutFunc: &StorageGetterGetDownloadTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockStorageGetter.GetDownloadTimeout")
			},
		},
		GetMaxBytesFunc: &StorageGetterGetMaxBytesFunc{
			defaultHook: func() uint32 {
				panic("unexpected invocation of MockStorageGetter.GetMaxBytes")
			},
		},
		GetMaxProposalSizeFunc: &StorageGetterGetMaxProposalSizeFunc{
			defaultHook: func() uint32 {
				panic("unexpected invocation of MockStorageGetter.GetMaxProposalSize")
			},
		},
		GetMinTxFeeFunc: &StorageGetterGetMinTxFeeFunc{
			defaultHook: func() *big.Int {
				panic("unexpected invocation of MockStorageGetter.GetMinTxFee")
			},
		},
		GetMsgTimeoutFunc: &StorageGetterGetMsgTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockStorageGetter.GetMsgTimeout")
			},
		},
		GetPreCommitStepTimeoutFunc: &StorageGetterGetPreCommitStepTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockStorageGetter.GetPreCommitStepTimeout")
			},
		},
		GetPreVoteStepTimeoutFunc: &StorageGetterGetPreVoteStepTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockStorageGetter.GetPreVoteStepTimeout")
			},
		},
		GetProposalStepTimeoutFunc: &StorageGetterGetProposalStepTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockStorageGetter.GetProposalStepTimeout")
			},
		},
		GetSrvrMsgTimeoutFunc: &StorageGetterGetSrvrMsgTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockStorageGetter.GetSrvrMsgTimeout")
			},
		},
		GetTxValidVersionFunc: &StorageGetterGetTxValidVersionFunc{
			defaultHook: func() uint32 {
				panic("unexpected invocation of MockStorageGetter.GetTxValidVersion")
			},
		},
		GetValueStoreFeeFunc: &StorageGetterGetValueStoreFeeFunc{
			defaultHook: func() *big.Int {
				panic("unexpected invocation of MockStorageGetter.GetValueStoreFee")
			},
		},
		GetValueStoreValidVersionFunc: &StorageGetterGetValueStoreValidVersionFunc{
			defaultHook: func() uint32 {
				panic("unexpected invocation of MockStorageGetter.GetValueStoreValidVersion")
			},
		},
		LoadStorageFunc: &StorageGetterLoadStorageFunc{
			defaultHook: func(*v2.Txn, uint32) error {
				panic("unexpected invocation of MockStorageGetter.LoadStorage")
			},
		},
		UpdateStorageFunc: &StorageGetterUpdateStorageFunc{
			defaultHook: func(*v2.Txn, dynamics.Updater) error {
				panic("unexpected invocation of MockStorageGetter.UpdateStorage")
			},
		},
	}
}

// NewMockStorageGetterFrom creates a new mock of the MockStorageGetter
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockStorageGetterFrom(i dynamics.StorageGetter) *MockStorageGetter {
	return &MockStorageGetter{
		GetDataStoreEpochFeeFunc: &StorageGetterGetDataStoreEpochFeeFunc{
			defaultHook: i.GetDataStoreEpochFee,
		},
		GetDataStoreValidVersionFunc: &StorageGetterGetDataStoreValidVersionFunc{
			defaultHook: i.GetDataStoreValidVersion,
		},
		GetDeadBlockRoundNextRoundTimeoutFunc: &StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc{
			defaultHook: i.GetDeadBlockRoundNextRoundTimeout,
		},
		GetDownloadTimeoutFunc: &StorageGetterGetDownloadTimeoutFunc{
			defaultHook: i.GetDownloadTimeout,
		},
		GetMaxBytesFunc: &StorageGetterGetMaxBytesFunc{
			defaultHook: i.GetMaxBytes,
		},
		GetMaxProposalSizeFunc: &StorageGetterGetMaxProposalSizeFunc{
			defaultHook: i.GetMaxProposalSize,
		},
		GetMinTxFeeFunc: &StorageGetterGetMinTxFeeFunc{
			defaultHook: i.GetMinTxFee,
		},
		GetMsgTimeoutFunc: &StorageGetterGetMsgTimeoutFunc{
			defaultHook: i.GetMsgTimeout,
		},
		GetPreCommitStepTimeoutFunc: &StorageGetterGetPreCommitStepTimeoutFunc{
			defaultHook: i.GetPreCommitStepTimeout,
		},
		GetPreVoteStepTimeoutFunc: &StorageGetterGetPreVoteStepTimeoutFunc{
			defaultHook: i.GetPreVoteStepTimeout,
		},
		GetProposalStepTimeoutFunc: &StorageGetterGetProposalStepTimeoutFunc{
			defaultHook: i.GetProposalStepTimeout,
		},
		GetSrvrMsgTimeoutFunc: &StorageGetterGetSrvrMsgTimeoutFunc{
			defaultHook: i.GetSrvrMsgTimeout,
		},
		GetTxValidVersionFunc: &StorageGetterGetTxValidVersionFunc{
			defaultHook: i.GetTxValidVersion,
		},
		GetValueStoreFeeFunc: &StorageGetterGetValueStoreFeeFunc{
			defaultHook: i.GetValueStoreFee,
		},
		GetValueStoreValidVersionFunc: &StorageGetterGetValueStoreValidVersionFunc{
			defaultHook: i.GetValueStoreValidVersion,
		},
		LoadStorageFunc: &StorageGetterLoadStorageFunc{
			defaultHook: i.LoadStorage,
		},
		UpdateStorageFunc: &StorageGetterUpdateStorageFunc{
			defaultHook: i.UpdateStorage,
		},
	}
}

// StorageGetterGetDataStoreEpochFeeFunc describes the behavior when the
// GetDataStoreEpochFee method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetDataStoreEpochFeeFunc struct {
	defaultHook func() *big.Int
	hooks       []func() *big.Int
	history     []StorageGetterGetDataStoreEpochFeeFuncCall
	mutex       sync.Mutex
}

// GetDataStoreEpochFee delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetDataStoreEpochFee() *big.Int {
	r0 := m.GetDataStoreEpochFeeFunc.nextHook()()
	m.GetDataStoreEpochFeeFunc.appendCall(StorageGetterGetDataStoreEpochFeeFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetDataStoreEpochFee
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetDataStoreEpochFeeFunc) SetDefaultHook(hook func() *big.Int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDataStoreEpochFee method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterGetDataStoreEpochFeeFunc) PushHook(hook func() *big.Int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetDataStoreEpochFeeFunc) SetDefaultReturn(r0 *big.Int) {
	f.SetDefaultHook(func() *big.Int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetDataStoreEpochFeeFunc) PushReturn(r0 *big.Int) {
	f.PushHook(func() *big.Int {
		return r0
	})
}

func (f *StorageGetterGetDataStoreEpochFeeFunc) nextHook() func() *big.Int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetDataStoreEpochFeeFunc) appendCall(r0 StorageGetterGetDataStoreEpochFeeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetDataStoreEpochFeeFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetDataStoreEpochFeeFunc) History() []StorageGetterGetDataStoreEpochFeeFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetDataStoreEpochFeeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetDataStoreEpochFeeFuncCall is an object that describes an
// invocation of method GetDataStoreEpochFee on an instance of
// MockStorageGetter.
type StorageGetterGetDataStoreEpochFeeFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetDataStoreEpochFeeFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetDataStoreEpochFeeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetDataStoreValidVersionFunc describes the behavior when the
// GetDataStoreValidVersion method of the parent MockStorageGetter instance
// is invoked.
type StorageGetterGetDataStoreValidVersionFunc struct {
	defaultHook func() uint32
	hooks       []func() uint32
	history     []StorageGetterGetDataStoreValidVersionFuncCall
	mutex       sync.Mutex
}

// GetDataStoreValidVersion delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetDataStoreValidVersion() uint32 {
	r0 := m.GetDataStoreValidVersionFunc.nextHook()()
	m.GetDataStoreValidVersionFunc.appendCall(StorageGetterGetDataStoreValidVersionFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetDataStoreValidVersion method of the parent MockStorageGetter instance
// is invoked and the hook queue is empty.
func (f *StorageGetterGetDataStoreValidVersionFunc) SetDefaultHook(hook func() uint32) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDataStoreValidVersion method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterGetDataStoreValidVersionFunc) PushHook(hook func() uint32) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetDataStoreValidVersionFunc) SetDefaultReturn(r0 uint32) {
	f.SetDefaultHook(func() uint32 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetDataStoreValidVersionFunc) PushReturn(r0 uint32) {
	f.PushHook(func() uint32 {
		return r0
	})
}

func (f *StorageGetterGetDataStoreValidVersionFunc) nextHook() func() uint32 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetDataStoreValidVersionFunc) appendCall(r0 StorageGetterGetDataStoreValidVersionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StorageGetterGetDataStoreValidVersionFuncCall objects describing the
// invocations of this function.
func (f *StorageGetterGetDataStoreValidVersionFunc) History() []StorageGetterGetDataStoreValidVersionFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetDataStoreValidVersionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetDataStoreValidVersionFuncCall is an object that describes
// an invocation of method GetDataStoreValidVersion on an instance of
// MockStorageGetter.
type StorageGetterGetDataStoreValidVersionFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint32
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetDataStoreValidVersionFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetDataStoreValidVersionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc describes the behavior
// when the GetDeadBlockRoundNextRoundTimeout method of the parent
// MockStorageGetter instance is invoked.
type StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall
	mutex       sync.Mutex
}

// GetDeadBlockRoundNextRoundTimeout delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetDeadBlockRoundNextRoundTimeout() time.Duration {
	r0 := m.GetDeadBlockRoundNextRoundTimeoutFunc.nextHook()()
	m.GetDeadBlockRoundNextRoundTimeoutFunc.appendCall(StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetDeadBlockRoundNextRoundTimeout method of the parent MockStorageGetter
// instance is invoked and the hook queue is empty.
func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDeadBlockRoundNextRoundTimeout method of the parent MockStorageGetter
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) appendCall(r0 StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall objects describing
// the invocations of this function.
func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) History() []StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall is an object that
// describes an invocation of method GetDeadBlockRoundNextRoundTimeout on an
// instance of MockStorageGetter.
type StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetDownloadTimeoutFunc describes the behavior when the
// GetDownloadTimeout method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetDownloadTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []StorageGetterGetDownloadTimeoutFuncCall
	mutex       sync.Mutex
}

// GetDownloadTimeout delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetDownloadTimeout() time.Duration {
	r0 := m.GetDownloadTimeoutFunc.nextHook()()
	m.GetDownloadTimeoutFunc.appendCall(StorageGetterGetDownloadTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetDownloadTimeout
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetDownloadTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDownloadTimeout method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterGetDownloadTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetDownloadTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetDownloadTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *StorageGetterGetDownloadTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetDownloadTimeoutFunc) appendCall(r0 StorageGetterGetDownloadTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetDownloadTimeoutFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetDownloadTimeoutFunc) History() []StorageGetterGetDownloadTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetDownloadTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetDownloadTimeoutFuncCall is an object that describes an
// invocation of method GetDownloadTimeout on an instance of
// MockStorageGetter.
type StorageGetterGetDownloadTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetDownloadTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetDownloadTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetMaxBytesFunc describes the behavior when the GetMaxBytes
// method of the parent MockStorageGetter instance is invoked.
type StorageGetterGetMaxBytesFunc struct {
	defaultHook func() uint32
	hooks       []func() uint32
	history     []StorageGetterGetMaxBytesFuncCall
	mutex       sync.Mutex
}

// GetMaxBytes delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStorageGetter) GetMaxBytes() uint32 {
	r0 := m.GetMaxBytesFunc.nextHook()()
	m.GetMaxBytesFunc.appendCall(StorageGetterGetMaxBytesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetMaxBytes method
// of the parent MockStorageGetter instance is invoked and the hook queue is
// empty.
func (f *StorageGetterGetMaxBytesFunc) SetDefaultHook(hook func() uint32) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMaxBytes method of the parent MockStorageGetter instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StorageGetterGetMaxBytesFunc) PushHook(hook func() uint32) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetMaxBytesFunc) SetDefaultReturn(r0 uint32) {
	f.SetDefaultHook(func() uint32 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetMaxBytesFunc) PushReturn(r0 uint32) {
	f.PushHook(func() uint32 {
		return r0
	})
}

func (f *StorageGetterGetMaxBytesFunc) nextHook() func() uint32 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetMaxBytesFunc) appendCall(r0 StorageGetterGetMaxBytesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetMaxBytesFuncCall objects
// describing the invocations of this function.
func (f *StorageGetterGetMaxBytesFunc) History() []StorageGetterGetMaxBytesFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetMaxBytesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetMaxBytesFuncCall is an object that describes an
// invocation of method GetMaxBytes on an instance of MockStorageGetter.
type StorageGetterGetMaxBytesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint32
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetMaxBytesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetMaxBytesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetMaxProposalSizeFunc describes the behavior when the
// GetMaxProposalSize method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetMaxProposalSizeFunc struct {
	defaultHook func() uint32
	hooks       []func() uint32
	history     []StorageGetterGetMaxProposalSizeFuncCall
	mutex       sync.Mutex
}

// GetMaxProposalSize delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetMaxProposalSize() uint32 {
	r0 := m.GetMaxProposalSizeFunc.nextHook()()
	m.GetMaxProposalSizeFunc.appendCall(StorageGetterGetMaxProposalSizeFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetMaxProposalSize
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetMaxProposalSizeFunc) SetDefaultHook(hook func() uint32) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMaxProposalSize method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterGetMaxProposalSizeFunc) PushHook(hook func() uint32) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetMaxProposalSizeFunc) SetDefaultReturn(r0 uint32) {
	f.SetDefaultHook(func() uint32 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetMaxProposalSizeFunc) PushReturn(r0 uint32) {
	f.PushHook(func() uint32 {
		return r0
	})
}

func (f *StorageGetterGetMaxProposalSizeFunc) nextHook() func() uint32 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetMaxProposalSizeFunc) appendCall(r0 StorageGetterGetMaxProposalSizeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetMaxProposalSizeFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetMaxProposalSizeFunc) History() []StorageGetterGetMaxProposalSizeFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetMaxProposalSizeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetMaxProposalSizeFuncCall is an object that describes an
// invocation of method GetMaxProposalSize on an instance of
// MockStorageGetter.
type StorageGetterGetMaxProposalSizeFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint32
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetMaxProposalSizeFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetMaxProposalSizeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetMinTxFeeFunc describes the behavior when the GetMinTxFee
// method of the parent MockStorageGetter instance is invoked.
type StorageGetterGetMinTxFeeFunc struct {
	defaultHook func() *big.Int
	hooks       []func() *big.Int
	history     []StorageGetterGetMinTxFeeFuncCall
	mutex       sync.Mutex
}

// GetMinTxFee delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStorageGetter) GetMinTxFee() *big.Int {
	r0 := m.GetMinTxFeeFunc.nextHook()()
	m.GetMinTxFeeFunc.appendCall(StorageGetterGetMinTxFeeFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetMinTxFee method
// of the parent MockStorageGetter instance is invoked and the hook queue is
// empty.
func (f *StorageGetterGetMinTxFeeFunc) SetDefaultHook(hook func() *big.Int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMinTxFee method of the parent MockStorageGetter instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StorageGetterGetMinTxFeeFunc) PushHook(hook func() *big.Int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetMinTxFeeFunc) SetDefaultReturn(r0 *big.Int) {
	f.SetDefaultHook(func() *big.Int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetMinTxFeeFunc) PushReturn(r0 *big.Int) {
	f.PushHook(func() *big.Int {
		return r0
	})
}

func (f *StorageGetterGetMinTxFeeFunc) nextHook() func() *big.Int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetMinTxFeeFunc) appendCall(r0 StorageGetterGetMinTxFeeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetMinTxFeeFuncCall objects
// describing the invocations of this function.
func (f *StorageGetterGetMinTxFeeFunc) History() []StorageGetterGetMinTxFeeFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetMinTxFeeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetMinTxFeeFuncCall is an object that describes an
// invocation of method GetMinTxFee on an instance of MockStorageGetter.
type StorageGetterGetMinTxFeeFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetMinTxFeeFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetMinTxFeeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetMsgTimeoutFunc describes the behavior when the
// GetMsgTimeout method of the parent MockStorageGetter instance is invoked.
type StorageGetterGetMsgTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []StorageGetterGetMsgTimeoutFuncCall
	mutex       sync.Mutex
}

// GetMsgTimeout delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStorageGetter) GetMsgTimeout() time.Duration {
	r0 := m.GetMsgTimeoutFunc.nextHook()()
	m.GetMsgTimeoutFunc.appendCall(StorageGetterGetMsgTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetMsgTimeout method
// of the parent MockStorageGetter instance is invoked and the hook queue is
// empty.
func (f *StorageGetterGetMsgTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMsgTimeout method of the parent MockStorageGetter instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StorageGetterGetMsgTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetMsgTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetMsgTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *StorageGetterGetMsgTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetMsgTimeoutFunc) appendCall(r0 StorageGetterGetMsgTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetMsgTimeoutFuncCall objects
// describing the invocations of this function.
func (f *StorageGetterGetMsgTimeoutFunc) History() []StorageGetterGetMsgTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetMsgTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetMsgTimeoutFuncCall is an object that describes an
// invocation of method GetMsgTimeout on an instance of MockStorageGetter.
type StorageGetterGetMsgTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetMsgTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetMsgTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetPreCommitStepTimeoutFunc describes the behavior when the
// GetPreCommitStepTimeout method of the parent MockStorageGetter instance
// is invoked.
type StorageGetterGetPreCommitStepTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []StorageGetterGetPreCommitStepTimeoutFuncCall
	mutex       sync.Mutex
}

// GetPreCommitStepTimeout delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetPreCommitStepTimeout() time.Duration {
	r0 := m.GetPreCommitStepTimeoutFunc.nextHook()()
	m.GetPreCommitStepTimeoutFunc.appendCall(StorageGetterGetPreCommitStepTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetPreCommitStepTimeout method of the parent MockStorageGetter instance
// is invoked and the hook queue is empty.
func (f *StorageGetterGetPreCommitStepTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPreCommitStepTimeout method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterGetPreCommitStepTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetPreCommitStepTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetPreCommitStepTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *StorageGetterGetPreCommitStepTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetPreCommitStepTimeoutFunc) appendCall(r0 StorageGetterGetPreCommitStepTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StorageGetterGetPreCommitStepTimeoutFuncCall objects describing the
// invocations of this function.
func (f *StorageGetterGetPreCommitStepTimeoutFunc) History() []StorageGetterGetPreCommitStepTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetPreCommitStepTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetPreCommitStepTimeoutFuncCall is an object that describes
// an invocation of method GetPreCommitStepTimeout on an instance of
// MockStorageGetter.
type StorageGetterGetPreCommitStepTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetPreCommitStepTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetPreCommitStepTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetPreVoteStepTimeoutFunc describes the behavior when the
// GetPreVoteStepTimeout method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetPreVoteStepTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []StorageGetterGetPreVoteStepTimeoutFuncCall
	mutex       sync.Mutex
}

// GetPreVoteStepTimeout delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetPreVoteStepTimeout() time.Duration {
	r0 := m.GetPreVoteStepTimeoutFunc.nextHook()()
	m.GetPreVoteStepTimeoutFunc.appendCall(StorageGetterGetPreVoteStepTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetPreVoteStepTimeout method of the parent MockStorageGetter instance is
// invoked and the hook queue is empty.
func (f *StorageGetterGetPreVoteStepTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPreVoteStepTimeout method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterGetPreVoteStepTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetPreVoteStepTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetPreVoteStepTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *StorageGetterGetPreVoteStepTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetPreVoteStepTimeoutFunc) appendCall(r0 StorageGetterGetPreVoteStepTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetPreVoteStepTimeoutFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetPreVoteStepTimeoutFunc) History() []StorageGetterGetPreVoteStepTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetPreVoteStepTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetPreVoteStepTimeoutFuncCall is an object that describes an
// invocation of method GetPreVoteStepTimeout on an instance of
// MockStorageGetter.
type StorageGetterGetPreVoteStepTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetPreVoteStepTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetPreVoteStepTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetProposalStepTimeoutFunc describes the behavior when the
// GetProposalStepTimeout method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetProposalStepTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []StorageGetterGetProposalStepTimeoutFuncCall
	mutex       sync.Mutex
}

// GetProposalStepTimeout delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetProposalStepTimeout() time.Duration {
	r0 := m.GetProposalStepTimeoutFunc.nextHook()()
	m.GetProposalStepTimeoutFunc.appendCall(StorageGetterGetProposalStepTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetProposalStepTimeout method of the parent MockStorageGetter instance is
// invoked and the hook queue is empty.
func (f *StorageGetterGetProposalStepTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetProposalStepTimeout method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterGetProposalStepTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetProposalStepTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetProposalStepTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *StorageGetterGetProposalStepTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetProposalStepTimeoutFunc) appendCall(r0 StorageGetterGetProposalStepTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetProposalStepTimeoutFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetProposalStepTimeoutFunc) History() []StorageGetterGetProposalStepTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetProposalStepTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetProposalStepTimeoutFuncCall is an object that describes
// an invocation of method GetProposalStepTimeout on an instance of
// MockStorageGetter.
type StorageGetterGetProposalStepTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetProposalStepTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetProposalStepTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetSrvrMsgTimeoutFunc describes the behavior when the
// GetSrvrMsgTimeout method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetSrvrMsgTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []StorageGetterGetSrvrMsgTimeoutFuncCall
	mutex       sync.Mutex
}

// GetSrvrMsgTimeout delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetSrvrMsgTimeout() time.Duration {
	r0 := m.GetSrvrMsgTimeoutFunc.nextHook()()
	m.GetSrvrMsgTimeoutFunc.appendCall(StorageGetterGetSrvrMsgTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetSrvrMsgTimeout
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetSrvrMsgTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSrvrMsgTimeout method of the parent MockStorageGetter instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StorageGetterGetSrvrMsgTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetSrvrMsgTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetSrvrMsgTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *StorageGetterGetSrvrMsgTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetSrvrMsgTimeoutFunc) appendCall(r0 StorageGetterGetSrvrMsgTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetSrvrMsgTimeoutFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetSrvrMsgTimeoutFunc) History() []StorageGetterGetSrvrMsgTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetSrvrMsgTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetSrvrMsgTimeoutFuncCall is an object that describes an
// invocation of method GetSrvrMsgTimeout on an instance of
// MockStorageGetter.
type StorageGetterGetSrvrMsgTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetSrvrMsgTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetSrvrMsgTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetTxValidVersionFunc describes the behavior when the
// GetTxValidVersion method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetTxValidVersionFunc struct {
	defaultHook func() uint32
	hooks       []func() uint32
	history     []StorageGetterGetTxValidVersionFuncCall
	mutex       sync.Mutex
}

// GetTxValidVersion delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetTxValidVersion() uint32 {
	r0 := m.GetTxValidVersionFunc.nextHook()()
	m.GetTxValidVersionFunc.appendCall(StorageGetterGetTxValidVersionFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetTxValidVersion
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetTxValidVersionFunc) SetDefaultHook(hook func() uint32) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTxValidVersion method of the parent MockStorageGetter instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StorageGetterGetTxValidVersionFunc) PushHook(hook func() uint32) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetTxValidVersionFunc) SetDefaultReturn(r0 uint32) {
	f.SetDefaultHook(func() uint32 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetTxValidVersionFunc) PushReturn(r0 uint32) {
	f.PushHook(func() uint32 {
		return r0
	})
}

func (f *StorageGetterGetTxValidVersionFunc) nextHook() func() uint32 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetTxValidVersionFunc) appendCall(r0 StorageGetterGetTxValidVersionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetTxValidVersionFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetTxValidVersionFunc) History() []StorageGetterGetTxValidVersionFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetTxValidVersionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetTxValidVersionFuncCall is an object that describes an
// invocation of method GetTxValidVersion on an instance of
// MockStorageGetter.
type StorageGetterGetTxValidVersionFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint32
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetTxValidVersionFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetTxValidVersionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetValueStoreFeeFunc describes the behavior when the
// GetValueStoreFee method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetValueStoreFeeFunc struct {
	defaultHook func() *big.Int
	hooks       []func() *big.Int
	history     []StorageGetterGetValueStoreFeeFuncCall
	mutex       sync.Mutex
}

// GetValueStoreFee delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetValueStoreFee() *big.Int {
	r0 := m.GetValueStoreFeeFunc.nextHook()()
	m.GetValueStoreFeeFunc.appendCall(StorageGetterGetValueStoreFeeFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetValueStoreFee
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetValueStoreFeeFunc) SetDefaultHook(hook func() *big.Int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetValueStoreFee method of the parent MockStorageGetter instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StorageGetterGetValueStoreFeeFunc) PushHook(hook func() *big.Int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetValueStoreFeeFunc) SetDefaultReturn(r0 *big.Int) {
	f.SetDefaultHook(func() *big.Int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetValueStoreFeeFunc) PushReturn(r0 *big.Int) {
	f.PushHook(func() *big.Int {
		return r0
	})
}

func (f *StorageGetterGetValueStoreFeeFunc) nextHook() func() *big.Int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetValueStoreFeeFunc) appendCall(r0 StorageGetterGetValueStoreFeeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetValueStoreFeeFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetValueStoreFeeFunc) History() []StorageGetterGetValueStoreFeeFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetValueStoreFeeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetValueStoreFeeFuncCall is an object that describes an
// invocation of method GetValueStoreFee on an instance of
// MockStorageGetter.
type StorageGetterGetValueStoreFeeFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetValueStoreFeeFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetValueStoreFeeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetValueStoreValidVersionFunc describes the behavior when
// the GetValueStoreValidVersion method of the parent MockStorageGetter
// instance is invoked.
type StorageGetterGetValueStoreValidVersionFunc struct {
	defaultHook func() uint32
	hooks       []func() uint32
	history     []StorageGetterGetValueStoreValidVersionFuncCall
	mutex       sync.Mutex
}

// GetValueStoreValidVersion delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetValueStoreValidVersion() uint32 {
	r0 := m.GetValueStoreValidVersionFunc.nextHook()()
	m.GetValueStoreValidVersionFunc.appendCall(StorageGetterGetValueStoreValidVersionFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetValueStoreValidVersion method of the parent MockStorageGetter instance
// is invoked and the hook queue is empty.
func (f *StorageGetterGetValueStoreValidVersionFunc) SetDefaultHook(hook func() uint32) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetValueStoreValidVersion method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterGetValueStoreValidVersionFunc) PushHook(hook func() uint32) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetValueStoreValidVersionFunc) SetDefaultReturn(r0 uint32) {
	f.SetDefaultHook(func() uint32 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetValueStoreValidVersionFunc) PushReturn(r0 uint32) {
	f.PushHook(func() uint32 {
		return r0
	})
}

func (f *StorageGetterGetValueStoreValidVersionFunc) nextHook() func() uint32 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetValueStoreValidVersionFunc) appendCall(r0 StorageGetterGetValueStoreValidVersionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StorageGetterGetValueStoreValidVersionFuncCall objects describing the
// invocations of this function.
func (f *StorageGetterGetValueStoreValidVersionFunc) History() []StorageGetterGetValueStoreValidVersionFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetValueStoreValidVersionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetValueStoreValidVersionFuncCall is an object that
// describes an invocation of method GetValueStoreValidVersion on an
// instance of MockStorageGetter.
type StorageGetterGetValueStoreValidVersionFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint32
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetValueStoreValidVersionFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetValueStoreValidVersionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterLoadStorageFunc describes the behavior when the LoadStorage
// method of the parent MockStorageGetter instance is invoked.
type StorageGetterLoadStorageFunc struct {
	defaultHook func(*v2.Txn, uint32) error
	hooks       []func(*v2.Txn, uint32) error
	history     []StorageGetterLoadStorageFuncCall
	mutex       sync.Mutex
}

// LoadStorage delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStorageGetter) LoadStorage(v0 *v2.Txn, v1 uint32) error {
	r0 := m.LoadStorageFunc.nextHook()(v0, v1)
	m.LoadStorageFunc.appendCall(StorageGetterLoadStorageFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LoadStorage method
// of the parent MockStorageGetter instance is invoked and the hook queue is
// empty.
func (f *StorageGetterLoadStorageFunc) SetDefaultHook(hook func(*v2.Txn, uint32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadStorage method of the parent MockStorageGetter instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StorageGetterLoadStorageFunc) PushHook(hook func(*v2.Txn, uint32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterLoadStorageFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*v2.Txn, uint32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterLoadStorageFunc) PushReturn(r0 error) {
	f.PushHook(func(*v2.Txn, uint32) error {
		return r0
	})
}

func (f *StorageGetterLoadStorageFunc) nextHook() func(*v2.Txn, uint32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterLoadStorageFunc) appendCall(r0 StorageGetterLoadStorageFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterLoadStorageFuncCall objects
// describing the invocations of this function.
func (f *StorageGetterLoadStorageFunc) History() []StorageGetterLoadStorageFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterLoadStorageFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterLoadStorageFuncCall is an object that describes an
// invocation of method LoadStorage on an instance of MockStorageGetter.
type StorageGetterLoadStorageFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *v2.Txn
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterLoadStorageFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterLoadStorageFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterUpdateStorageFunc describes the behavior when the
// UpdateStorage method of the parent MockStorageGetter instance is invoked.
type StorageGetterUpdateStorageFunc struct {
	defaultHook func(*v2.Txn, dynamics.Updater) error
	hooks       []func(*v2.Txn, dynamics.Updater) error
	history     []StorageGetterUpdateStorageFuncCall
	mutex       sync.Mutex
}

// UpdateStorage delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStorageGetter) UpdateStorage(v0 *v2.Txn, v1 dynamics.Updater) error {
	r0 := m.UpdateStorageFunc.nextHook()(v0, v1)
	m.UpdateStorageFunc.appendCall(StorageGetterUpdateStorageFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateStorage method
// of the parent MockStorageGetter instance is invoked and the hook queue is
// empty.
func (f *StorageGetterUpdateStorageFunc) SetDefaultHook(hook func(*v2.Txn, dynamics.Updater) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateStorage method of the parent MockStorageGetter instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StorageGetterUpdateStorageFunc) PushHook(hook func(*v2.Txn, dynamics.Updater) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterUpdateStorageFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*v2.Txn, dynamics.Updater) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterUpdateStorageFunc) PushReturn(r0 error) {
	f.PushHook(func(*v2.Txn, dynamics.Updater) error {
		return r0
	})
}

func (f *StorageGetterUpdateStorageFunc) nextHook() func(*v2.Txn, dynamics.Updater) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterUpdateStorageFunc) appendCall(r0 StorageGetterUpdateStorageFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterUpdateStorageFuncCall objects
// describing the invocations of this function.
func (f *StorageGetterUpdateStorageFunc) History() []StorageGetterUpdateStorageFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterUpdateStorageFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterUpdateStorageFuncCall is an object that describes an
// invocation of method UpdateStorage on an instance of MockStorageGetter.
type StorageGetterUpdateStorageFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *v2.Txn
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 dynamics.Updater
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterUpdateStorageFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterUpdateStorageFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
