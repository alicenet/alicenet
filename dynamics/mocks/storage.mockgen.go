// Code generated by go-mockgen 1.3.7; DO NOT EDIT.

package mocks

import (
	"math/big"
	"sync"
	"time"

	dynamics "github.com/alicenet/alicenet/dynamics"
	v2 "github.com/dgraph-io/badger/v2"
)

// MockStorageGetter is a mock implementation of the StorageGetter interface
// (from the package github.com/alicenet/alicenet/dynamics) used for unit
// testing.
type MockStorageGetter struct {
	// ChangeDynamicValuesFunc is an instance of a mock function object
	// controlling the behavior of the method ChangeDynamicValues.
	ChangeDynamicValuesFunc *StorageGetterChangeDynamicValuesFunc
	// GetDataStoreFeeFunc is an instance of a mock function object
	// controlling the behavior of the method GetDataStoreFee.
	GetDataStoreFeeFunc *StorageGetterGetDataStoreFeeFunc
	// GetDeadBlockRoundNextRoundTimeoutFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetDeadBlockRoundNextRoundTimeout.
	GetDeadBlockRoundNextRoundTimeoutFunc *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc
	// GetDownloadTimeoutFunc is an instance of a mock function object
	// controlling the behavior of the method GetDownloadTimeout.
	GetDownloadTimeoutFunc *StorageGetterGetDownloadTimeoutFunc
	// GetDynamicValueInThePastFunc is an instance of a mock function object
	// controlling the behavior of the method GetDynamicValueInThePast.
	GetDynamicValueInThePastFunc *StorageGetterGetDynamicValueInThePastFunc
	// GetMaxBlockSizeFunc is an instance of a mock function object
	// controlling the behavior of the method GetMaxBlockSize.
	GetMaxBlockSizeFunc *StorageGetterGetMaxBlockSizeFunc
	// GetMaxProposalSizeFunc is an instance of a mock function object
	// controlling the behavior of the method GetMaxProposalSize.
	GetMaxProposalSizeFunc *StorageGetterGetMaxProposalSizeFunc
	// GetMinScaledTransactionFeeFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetMinScaledTransactionFee.
	GetMinScaledTransactionFeeFunc *StorageGetterGetMinScaledTransactionFeeFunc
	// GetPreCommitTimeoutFunc is an instance of a mock function object
	// controlling the behavior of the method GetPreCommitTimeout.
	GetPreCommitTimeoutFunc *StorageGetterGetPreCommitTimeoutFunc
	// GetPreVoteTimeoutFunc is an instance of a mock function object
	// controlling the behavior of the method GetPreVoteTimeout.
	GetPreVoteTimeoutFunc *StorageGetterGetPreVoteTimeoutFunc
	// GetProposalTimeoutFunc is an instance of a mock function object
	// controlling the behavior of the method GetProposalTimeout.
	GetProposalTimeoutFunc *StorageGetterGetProposalTimeoutFunc
	// GetValueStoreFeeFunc is an instance of a mock function object
	// controlling the behavior of the method GetValueStoreFee.
	GetValueStoreFeeFunc *StorageGetterGetValueStoreFeeFunc
	// UpdateCurrentDynamicValueFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpdateCurrentDynamicValue.
	UpdateCurrentDynamicValueFunc *StorageGetterUpdateCurrentDynamicValueFunc
}

// NewMockStorageGetter creates a new mock of the StorageGetter interface.
// All methods return zero values for all results, unless overwritten.
func NewMockStorageGetter() *MockStorageGetter {
	return &MockStorageGetter{
		ChangeDynamicValuesFunc: &StorageGetterChangeDynamicValuesFunc{
			defaultHook: func(*v2.Txn, uint32, []byte) (r0 error) {
				return
			},
		},
		GetDataStoreFeeFunc: &StorageGetterGetDataStoreFeeFunc{
			defaultHook: func() (r0 *big.Int) {
				return
			},
		},
		GetDeadBlockRoundNextRoundTimeoutFunc: &StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetDownloadTimeoutFunc: &StorageGetterGetDownloadTimeoutFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetDynamicValueInThePastFunc: &StorageGetterGetDynamicValueInThePastFunc{
			defaultHook: func(*v2.Txn, uint32) (r0 uint32, r1 *dynamics.DynamicValues, r2 error) {
				return
			},
		},
		GetMaxBlockSizeFunc: &StorageGetterGetMaxBlockSizeFunc{
			defaultHook: func() (r0 uint32) {
				return
			},
		},
		GetMaxProposalSizeFunc: &StorageGetterGetMaxProposalSizeFunc{
			defaultHook: func() (r0 uint32) {
				return
			},
		},
		GetMinScaledTransactionFeeFunc: &StorageGetterGetMinScaledTransactionFeeFunc{
			defaultHook: func() (r0 *big.Int) {
				return
			},
		},
		GetPreCommitTimeoutFunc: &StorageGetterGetPreCommitTimeoutFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetPreVoteTimeoutFunc: &StorageGetterGetPreVoteTimeoutFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetProposalTimeoutFunc: &StorageGetterGetProposalTimeoutFunc{
			defaultHook: func() (r0 time.Duration) {
				return
			},
		},
		GetValueStoreFeeFunc: &StorageGetterGetValueStoreFeeFunc{
			defaultHook: func() (r0 *big.Int) {
				return
			},
		},
		UpdateCurrentDynamicValueFunc: &StorageGetterUpdateCurrentDynamicValueFunc{
			defaultHook: func(*v2.Txn, uint32) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockStorageGetter creates a new mock of the StorageGetter
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockStorageGetter() *MockStorageGetter {
	return &MockStorageGetter{
		ChangeDynamicValuesFunc: &StorageGetterChangeDynamicValuesFunc{
			defaultHook: func(*v2.Txn, uint32, []byte) error {
				panic("unexpected invocation of MockStorageGetter.ChangeDynamicValues")
			},
		},
		GetDataStoreFeeFunc: &StorageGetterGetDataStoreFeeFunc{
			defaultHook: func() *big.Int {
				panic("unexpected invocation of MockStorageGetter.GetDataStoreFee")
			},
		},
		GetDeadBlockRoundNextRoundTimeoutFunc: &StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockStorageGetter.GetDeadBlockRoundNextRoundTimeout")
			},
		},
		GetDownloadTimeoutFunc: &StorageGetterGetDownloadTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockStorageGetter.GetDownloadTimeout")
			},
		},
		GetDynamicValueInThePastFunc: &StorageGetterGetDynamicValueInThePastFunc{
			defaultHook: func(*v2.Txn, uint32) (uint32, *dynamics.DynamicValues, error) {
				panic("unexpected invocation of MockStorageGetter.GetDynamicValueInThePast")
			},
		},
		GetMaxBlockSizeFunc: &StorageGetterGetMaxBlockSizeFunc{
			defaultHook: func() uint32 {
				panic("unexpected invocation of MockStorageGetter.GetMaxBlockSize")
			},
		},
		GetMaxProposalSizeFunc: &StorageGetterGetMaxProposalSizeFunc{
			defaultHook: func() uint32 {
				panic("unexpected invocation of MockStorageGetter.GetMaxProposalSize")
			},
		},
		GetMinScaledTransactionFeeFunc: &StorageGetterGetMinScaledTransactionFeeFunc{
			defaultHook: func() *big.Int {
				panic("unexpected invocation of MockStorageGetter.GetMinScaledTransactionFee")
			},
		},
		GetPreCommitTimeoutFunc: &StorageGetterGetPreCommitTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockStorageGetter.GetPreCommitTimeout")
			},
		},
		GetPreVoteTimeoutFunc: &StorageGetterGetPreVoteTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockStorageGetter.GetPreVoteTimeout")
			},
		},
		GetProposalTimeoutFunc: &StorageGetterGetProposalTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockStorageGetter.GetProposalTimeout")
			},
		},
		GetValueStoreFeeFunc: &StorageGetterGetValueStoreFeeFunc{
			defaultHook: func() *big.Int {
				panic("unexpected invocation of MockStorageGetter.GetValueStoreFee")
			},
		},
		UpdateCurrentDynamicValueFunc: &StorageGetterUpdateCurrentDynamicValueFunc{
			defaultHook: func(*v2.Txn, uint32) error {
				panic("unexpected invocation of MockStorageGetter.UpdateCurrentDynamicValue")
			},
		},
	}
}

// NewMockStorageGetterFrom creates a new mock of the MockStorageGetter
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockStorageGetterFrom(i dynamics.StorageGetter) *MockStorageGetter {
	return &MockStorageGetter{
		ChangeDynamicValuesFunc: &StorageGetterChangeDynamicValuesFunc{
			defaultHook: i.ChangeDynamicValues,
		},
		GetDataStoreFeeFunc: &StorageGetterGetDataStoreFeeFunc{
			defaultHook: i.GetDataStoreFee,
		},
		GetDeadBlockRoundNextRoundTimeoutFunc: &StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc{
			defaultHook: i.GetDeadBlockRoundNextRoundTimeout,
		},
		GetDownloadTimeoutFunc: &StorageGetterGetDownloadTimeoutFunc{
			defaultHook: i.GetDownloadTimeout,
		},
		GetDynamicValueInThePastFunc: &StorageGetterGetDynamicValueInThePastFunc{
			defaultHook: i.GetDynamicValueInThePast,
		},
		GetMaxBlockSizeFunc: &StorageGetterGetMaxBlockSizeFunc{
			defaultHook: i.GetMaxBlockSize,
		},
		GetMaxProposalSizeFunc: &StorageGetterGetMaxProposalSizeFunc{
			defaultHook: i.GetMaxProposalSize,
		},
		GetMinScaledTransactionFeeFunc: &StorageGetterGetMinScaledTransactionFeeFunc{
			defaultHook: i.GetMinScaledTransactionFee,
		},
		GetPreCommitTimeoutFunc: &StorageGetterGetPreCommitTimeoutFunc{
			defaultHook: i.GetPreCommitTimeout,
		},
		GetPreVoteTimeoutFunc: &StorageGetterGetPreVoteTimeoutFunc{
			defaultHook: i.GetPreVoteTimeout,
		},
		GetProposalTimeoutFunc: &StorageGetterGetProposalTimeoutFunc{
			defaultHook: i.GetProposalTimeout,
		},
		GetValueStoreFeeFunc: &StorageGetterGetValueStoreFeeFunc{
			defaultHook: i.GetValueStoreFee,
		},
		UpdateCurrentDynamicValueFunc: &StorageGetterUpdateCurrentDynamicValueFunc{
			defaultHook: i.UpdateCurrentDynamicValue,
		},
	}
}

// StorageGetterChangeDynamicValuesFunc describes the behavior when the
// ChangeDynamicValues method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterChangeDynamicValuesFunc struct {
	defaultHook func(*v2.Txn, uint32, []byte) error
	hooks       []func(*v2.Txn, uint32, []byte) error
	history     []StorageGetterChangeDynamicValuesFuncCall
	mutex       sync.Mutex
}

// ChangeDynamicValues delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) ChangeDynamicValues(v0 *v2.Txn, v1 uint32, v2 []byte) error {
	r0 := m.ChangeDynamicValuesFunc.nextHook()(v0, v1, v2)
	m.ChangeDynamicValuesFunc.appendCall(StorageGetterChangeDynamicValuesFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ChangeDynamicValues
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterChangeDynamicValuesFunc) SetDefaultHook(hook func(*v2.Txn, uint32, []byte) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ChangeDynamicValues method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterChangeDynamicValuesFunc) PushHook(hook func(*v2.Txn, uint32, []byte) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterChangeDynamicValuesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*v2.Txn, uint32, []byte) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterChangeDynamicValuesFunc) PushReturn(r0 error) {
	f.PushHook(func(*v2.Txn, uint32, []byte) error {
		return r0
	})
}

func (f *StorageGetterChangeDynamicValuesFunc) nextHook() func(*v2.Txn, uint32, []byte) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterChangeDynamicValuesFunc) appendCall(r0 StorageGetterChangeDynamicValuesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterChangeDynamicValuesFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterChangeDynamicValuesFunc) History() []StorageGetterChangeDynamicValuesFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterChangeDynamicValuesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterChangeDynamicValuesFuncCall is an object that describes an
// invocation of method ChangeDynamicValues on an instance of
// MockStorageGetter.
type StorageGetterChangeDynamicValuesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *v2.Txn
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterChangeDynamicValuesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterChangeDynamicValuesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetDataStoreFeeFunc describes the behavior when the
// GetDataStoreFee method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetDataStoreFeeFunc struct {
	defaultHook func() *big.Int
	hooks       []func() *big.Int
	history     []StorageGetterGetDataStoreFeeFuncCall
	mutex       sync.Mutex
}

// GetDataStoreFee delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetDataStoreFee() *big.Int {
	r0 := m.GetDataStoreFeeFunc.nextHook()()
	m.GetDataStoreFeeFunc.appendCall(StorageGetterGetDataStoreFeeFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetDataStoreFee
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetDataStoreFeeFunc) SetDefaultHook(hook func() *big.Int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDataStoreFee method of the parent MockStorageGetter instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StorageGetterGetDataStoreFeeFunc) PushHook(hook func() *big.Int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetDataStoreFeeFunc) SetDefaultReturn(r0 *big.Int) {
	f.SetDefaultHook(func() *big.Int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetDataStoreFeeFunc) PushReturn(r0 *big.Int) {
	f.PushHook(func() *big.Int {
		return r0
	})
}

func (f *StorageGetterGetDataStoreFeeFunc) nextHook() func() *big.Int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetDataStoreFeeFunc) appendCall(r0 StorageGetterGetDataStoreFeeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetDataStoreFeeFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetDataStoreFeeFunc) History() []StorageGetterGetDataStoreFeeFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetDataStoreFeeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetDataStoreFeeFuncCall is an object that describes an
// invocation of method GetDataStoreFee on an instance of MockStorageGetter.
type StorageGetterGetDataStoreFeeFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetDataStoreFeeFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetDataStoreFeeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc describes the behavior
// when the GetDeadBlockRoundNextRoundTimeout method of the parent
// MockStorageGetter instance is invoked.
type StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall
	mutex       sync.Mutex
}

// GetDeadBlockRoundNextRoundTimeout delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetDeadBlockRoundNextRoundTimeout() time.Duration {
	r0 := m.GetDeadBlockRoundNextRoundTimeoutFunc.nextHook()()
	m.GetDeadBlockRoundNextRoundTimeoutFunc.appendCall(StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetDeadBlockRoundNextRoundTimeout method of the parent MockStorageGetter
// instance is invoked and the hook queue is empty.
func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDeadBlockRoundNextRoundTimeout method of the parent MockStorageGetter
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) appendCall(r0 StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall objects describing
// the invocations of this function.
func (f *StorageGetterGetDeadBlockRoundNextRoundTimeoutFunc) History() []StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall is an object that
// describes an invocation of method GetDeadBlockRoundNextRoundTimeout on an
// instance of MockStorageGetter.
type StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetDeadBlockRoundNextRoundTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetDownloadTimeoutFunc describes the behavior when the
// GetDownloadTimeout method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetDownloadTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []StorageGetterGetDownloadTimeoutFuncCall
	mutex       sync.Mutex
}

// GetDownloadTimeout delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetDownloadTimeout() time.Duration {
	r0 := m.GetDownloadTimeoutFunc.nextHook()()
	m.GetDownloadTimeoutFunc.appendCall(StorageGetterGetDownloadTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetDownloadTimeout
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetDownloadTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDownloadTimeout method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterGetDownloadTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetDownloadTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetDownloadTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *StorageGetterGetDownloadTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetDownloadTimeoutFunc) appendCall(r0 StorageGetterGetDownloadTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetDownloadTimeoutFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetDownloadTimeoutFunc) History() []StorageGetterGetDownloadTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetDownloadTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetDownloadTimeoutFuncCall is an object that describes an
// invocation of method GetDownloadTimeout on an instance of
// MockStorageGetter.
type StorageGetterGetDownloadTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetDownloadTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetDownloadTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetDynamicValueInThePastFunc describes the behavior when the
// GetDynamicValueInThePast method of the parent MockStorageGetter instance
// is invoked.
type StorageGetterGetDynamicValueInThePastFunc struct {
	defaultHook func(*v2.Txn, uint32) (uint32, *dynamics.DynamicValues, error)
	hooks       []func(*v2.Txn, uint32) (uint32, *dynamics.DynamicValues, error)
	history     []StorageGetterGetDynamicValueInThePastFuncCall
	mutex       sync.Mutex
}

// GetDynamicValueInThePast delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetDynamicValueInThePast(v0 *v2.Txn, v1 uint32) (uint32, *dynamics.DynamicValues, error) {
	r0, r1, r2 := m.GetDynamicValueInThePastFunc.nextHook()(v0, v1)
	m.GetDynamicValueInThePastFunc.appendCall(StorageGetterGetDynamicValueInThePastFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetDynamicValueInThePast method of the parent MockStorageGetter instance
// is invoked and the hook queue is empty.
func (f *StorageGetterGetDynamicValueInThePastFunc) SetDefaultHook(hook func(*v2.Txn, uint32) (uint32, *dynamics.DynamicValues, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDynamicValueInThePast method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterGetDynamicValueInThePastFunc) PushHook(hook func(*v2.Txn, uint32) (uint32, *dynamics.DynamicValues, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetDynamicValueInThePastFunc) SetDefaultReturn(r0 uint32, r1 *dynamics.DynamicValues, r2 error) {
	f.SetDefaultHook(func(*v2.Txn, uint32) (uint32, *dynamics.DynamicValues, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetDynamicValueInThePastFunc) PushReturn(r0 uint32, r1 *dynamics.DynamicValues, r2 error) {
	f.PushHook(func(*v2.Txn, uint32) (uint32, *dynamics.DynamicValues, error) {
		return r0, r1, r2
	})
}

func (f *StorageGetterGetDynamicValueInThePastFunc) nextHook() func(*v2.Txn, uint32) (uint32, *dynamics.DynamicValues, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetDynamicValueInThePastFunc) appendCall(r0 StorageGetterGetDynamicValueInThePastFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StorageGetterGetDynamicValueInThePastFuncCall objects describing the
// invocations of this function.
func (f *StorageGetterGetDynamicValueInThePastFunc) History() []StorageGetterGetDynamicValueInThePastFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetDynamicValueInThePastFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetDynamicValueInThePastFuncCall is an object that describes
// an invocation of method GetDynamicValueInThePast on an instance of
// MockStorageGetter.
type StorageGetterGetDynamicValueInThePastFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *v2.Txn
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *dynamics.DynamicValues
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetDynamicValueInThePastFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetDynamicValueInThePastFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StorageGetterGetMaxBlockSizeFunc describes the behavior when the
// GetMaxBlockSize method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetMaxBlockSizeFunc struct {
	defaultHook func() uint32
	hooks       []func() uint32
	history     []StorageGetterGetMaxBlockSizeFuncCall
	mutex       sync.Mutex
}

// GetMaxBlockSize delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetMaxBlockSize() uint32 {
	r0 := m.GetMaxBlockSizeFunc.nextHook()()
	m.GetMaxBlockSizeFunc.appendCall(StorageGetterGetMaxBlockSizeFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetMaxBlockSize
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetMaxBlockSizeFunc) SetDefaultHook(hook func() uint32) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMaxBlockSize method of the parent MockStorageGetter instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StorageGetterGetMaxBlockSizeFunc) PushHook(hook func() uint32) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetMaxBlockSizeFunc) SetDefaultReturn(r0 uint32) {
	f.SetDefaultHook(func() uint32 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetMaxBlockSizeFunc) PushReturn(r0 uint32) {
	f.PushHook(func() uint32 {
		return r0
	})
}

func (f *StorageGetterGetMaxBlockSizeFunc) nextHook() func() uint32 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetMaxBlockSizeFunc) appendCall(r0 StorageGetterGetMaxBlockSizeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetMaxBlockSizeFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetMaxBlockSizeFunc) History() []StorageGetterGetMaxBlockSizeFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetMaxBlockSizeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetMaxBlockSizeFuncCall is an object that describes an
// invocation of method GetMaxBlockSize on an instance of MockStorageGetter.
type StorageGetterGetMaxBlockSizeFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint32
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetMaxBlockSizeFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetMaxBlockSizeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetMaxProposalSizeFunc describes the behavior when the
// GetMaxProposalSize method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetMaxProposalSizeFunc struct {
	defaultHook func() uint32
	hooks       []func() uint32
	history     []StorageGetterGetMaxProposalSizeFuncCall
	mutex       sync.Mutex
}

// GetMaxProposalSize delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetMaxProposalSize() uint32 {
	r0 := m.GetMaxProposalSizeFunc.nextHook()()
	m.GetMaxProposalSizeFunc.appendCall(StorageGetterGetMaxProposalSizeFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetMaxProposalSize
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetMaxProposalSizeFunc) SetDefaultHook(hook func() uint32) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMaxProposalSize method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterGetMaxProposalSizeFunc) PushHook(hook func() uint32) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetMaxProposalSizeFunc) SetDefaultReturn(r0 uint32) {
	f.SetDefaultHook(func() uint32 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetMaxProposalSizeFunc) PushReturn(r0 uint32) {
	f.PushHook(func() uint32 {
		return r0
	})
}

func (f *StorageGetterGetMaxProposalSizeFunc) nextHook() func() uint32 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetMaxProposalSizeFunc) appendCall(r0 StorageGetterGetMaxProposalSizeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetMaxProposalSizeFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetMaxProposalSizeFunc) History() []StorageGetterGetMaxProposalSizeFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetMaxProposalSizeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetMaxProposalSizeFuncCall is an object that describes an
// invocation of method GetMaxProposalSize on an instance of
// MockStorageGetter.
type StorageGetterGetMaxProposalSizeFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint32
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetMaxProposalSizeFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetMaxProposalSizeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetMinScaledTransactionFeeFunc describes the behavior when
// the GetMinScaledTransactionFee method of the parent MockStorageGetter
// instance is invoked.
type StorageGetterGetMinScaledTransactionFeeFunc struct {
	defaultHook func() *big.Int
	hooks       []func() *big.Int
	history     []StorageGetterGetMinScaledTransactionFeeFuncCall
	mutex       sync.Mutex
}

// GetMinScaledTransactionFee delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetMinScaledTransactionFee() *big.Int {
	r0 := m.GetMinScaledTransactionFeeFunc.nextHook()()
	m.GetMinScaledTransactionFeeFunc.appendCall(StorageGetterGetMinScaledTransactionFeeFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetMinScaledTransactionFee method of the parent MockStorageGetter
// instance is invoked and the hook queue is empty.
func (f *StorageGetterGetMinScaledTransactionFeeFunc) SetDefaultHook(hook func() *big.Int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMinScaledTransactionFee method of the parent MockStorageGetter
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StorageGetterGetMinScaledTransactionFeeFunc) PushHook(hook func() *big.Int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetMinScaledTransactionFeeFunc) SetDefaultReturn(r0 *big.Int) {
	f.SetDefaultHook(func() *big.Int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetMinScaledTransactionFeeFunc) PushReturn(r0 *big.Int) {
	f.PushHook(func() *big.Int {
		return r0
	})
}

func (f *StorageGetterGetMinScaledTransactionFeeFunc) nextHook() func() *big.Int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetMinScaledTransactionFeeFunc) appendCall(r0 StorageGetterGetMinScaledTransactionFeeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StorageGetterGetMinScaledTransactionFeeFuncCall objects describing the
// invocations of this function.
func (f *StorageGetterGetMinScaledTransactionFeeFunc) History() []StorageGetterGetMinScaledTransactionFeeFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetMinScaledTransactionFeeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetMinScaledTransactionFeeFuncCall is an object that
// describes an invocation of method GetMinScaledTransactionFee on an
// instance of MockStorageGetter.
type StorageGetterGetMinScaledTransactionFeeFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetMinScaledTransactionFeeFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetMinScaledTransactionFeeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetPreCommitTimeoutFunc describes the behavior when the
// GetPreCommitTimeout method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetPreCommitTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []StorageGetterGetPreCommitTimeoutFuncCall
	mutex       sync.Mutex
}

// GetPreCommitTimeout delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetPreCommitTimeout() time.Duration {
	r0 := m.GetPreCommitTimeoutFunc.nextHook()()
	m.GetPreCommitTimeoutFunc.appendCall(StorageGetterGetPreCommitTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetPreCommitTimeout
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetPreCommitTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPreCommitTimeout method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterGetPreCommitTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetPreCommitTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetPreCommitTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *StorageGetterGetPreCommitTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetPreCommitTimeoutFunc) appendCall(r0 StorageGetterGetPreCommitTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetPreCommitTimeoutFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetPreCommitTimeoutFunc) History() []StorageGetterGetPreCommitTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetPreCommitTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetPreCommitTimeoutFuncCall is an object that describes an
// invocation of method GetPreCommitTimeout on an instance of
// MockStorageGetter.
type StorageGetterGetPreCommitTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetPreCommitTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetPreCommitTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetPreVoteTimeoutFunc describes the behavior when the
// GetPreVoteTimeout method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetPreVoteTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []StorageGetterGetPreVoteTimeoutFuncCall
	mutex       sync.Mutex
}

// GetPreVoteTimeout delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetPreVoteTimeout() time.Duration {
	r0 := m.GetPreVoteTimeoutFunc.nextHook()()
	m.GetPreVoteTimeoutFunc.appendCall(StorageGetterGetPreVoteTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetPreVoteTimeout
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetPreVoteTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPreVoteTimeout method of the parent MockStorageGetter instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StorageGetterGetPreVoteTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetPreVoteTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetPreVoteTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *StorageGetterGetPreVoteTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetPreVoteTimeoutFunc) appendCall(r0 StorageGetterGetPreVoteTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetPreVoteTimeoutFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetPreVoteTimeoutFunc) History() []StorageGetterGetPreVoteTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetPreVoteTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetPreVoteTimeoutFuncCall is an object that describes an
// invocation of method GetPreVoteTimeout on an instance of
// MockStorageGetter.
type StorageGetterGetPreVoteTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetPreVoteTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetPreVoteTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetProposalTimeoutFunc describes the behavior when the
// GetProposalTimeout method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetProposalTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []StorageGetterGetProposalTimeoutFuncCall
	mutex       sync.Mutex
}

// GetProposalTimeout delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetProposalTimeout() time.Duration {
	r0 := m.GetProposalTimeoutFunc.nextHook()()
	m.GetProposalTimeoutFunc.appendCall(StorageGetterGetProposalTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetProposalTimeout
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetProposalTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetProposalTimeout method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterGetProposalTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetProposalTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetProposalTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *StorageGetterGetProposalTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetProposalTimeoutFunc) appendCall(r0 StorageGetterGetProposalTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetProposalTimeoutFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetProposalTimeoutFunc) History() []StorageGetterGetProposalTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetProposalTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetProposalTimeoutFuncCall is an object that describes an
// invocation of method GetProposalTimeout on an instance of
// MockStorageGetter.
type StorageGetterGetProposalTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetProposalTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetProposalTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterGetValueStoreFeeFunc describes the behavior when the
// GetValueStoreFee method of the parent MockStorageGetter instance is
// invoked.
type StorageGetterGetValueStoreFeeFunc struct {
	defaultHook func() *big.Int
	hooks       []func() *big.Int
	history     []StorageGetterGetValueStoreFeeFuncCall
	mutex       sync.Mutex
}

// GetValueStoreFee delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStorageGetter) GetValueStoreFee() *big.Int {
	r0 := m.GetValueStoreFeeFunc.nextHook()()
	m.GetValueStoreFeeFunc.appendCall(StorageGetterGetValueStoreFeeFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetValueStoreFee
// method of the parent MockStorageGetter instance is invoked and the hook
// queue is empty.
func (f *StorageGetterGetValueStoreFeeFunc) SetDefaultHook(hook func() *big.Int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetValueStoreFee method of the parent MockStorageGetter instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StorageGetterGetValueStoreFeeFunc) PushHook(hook func() *big.Int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterGetValueStoreFeeFunc) SetDefaultReturn(r0 *big.Int) {
	f.SetDefaultHook(func() *big.Int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterGetValueStoreFeeFunc) PushReturn(r0 *big.Int) {
	f.PushHook(func() *big.Int {
		return r0
	})
}

func (f *StorageGetterGetValueStoreFeeFunc) nextHook() func() *big.Int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterGetValueStoreFeeFunc) appendCall(r0 StorageGetterGetValueStoreFeeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetterGetValueStoreFeeFuncCall
// objects describing the invocations of this function.
func (f *StorageGetterGetValueStoreFeeFunc) History() []StorageGetterGetValueStoreFeeFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterGetValueStoreFeeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterGetValueStoreFeeFuncCall is an object that describes an
// invocation of method GetValueStoreFee on an instance of
// MockStorageGetter.
type StorageGetterGetValueStoreFeeFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterGetValueStoreFeeFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterGetValueStoreFeeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetterUpdateCurrentDynamicValueFunc describes the behavior when
// the UpdateCurrentDynamicValue method of the parent MockStorageGetter
// instance is invoked.
type StorageGetterUpdateCurrentDynamicValueFunc struct {
	defaultHook func(*v2.Txn, uint32) error
	hooks       []func(*v2.Txn, uint32) error
	history     []StorageGetterUpdateCurrentDynamicValueFuncCall
	mutex       sync.Mutex
}

// UpdateCurrentDynamicValue delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStorageGetter) UpdateCurrentDynamicValue(v0 *v2.Txn, v1 uint32) error {
	r0 := m.UpdateCurrentDynamicValueFunc.nextHook()(v0, v1)
	m.UpdateCurrentDynamicValueFunc.appendCall(StorageGetterUpdateCurrentDynamicValueFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateCurrentDynamicValue method of the parent MockStorageGetter instance
// is invoked and the hook queue is empty.
func (f *StorageGetterUpdateCurrentDynamicValueFunc) SetDefaultHook(hook func(*v2.Txn, uint32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateCurrentDynamicValue method of the parent MockStorageGetter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StorageGetterUpdateCurrentDynamicValueFunc) PushHook(hook func(*v2.Txn, uint32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetterUpdateCurrentDynamicValueFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*v2.Txn, uint32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetterUpdateCurrentDynamicValueFunc) PushReturn(r0 error) {
	f.PushHook(func(*v2.Txn, uint32) error {
		return r0
	})
}

func (f *StorageGetterUpdateCurrentDynamicValueFunc) nextHook() func(*v2.Txn, uint32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetterUpdateCurrentDynamicValueFunc) appendCall(r0 StorageGetterUpdateCurrentDynamicValueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StorageGetterUpdateCurrentDynamicValueFuncCall objects describing the
// invocations of this function.
func (f *StorageGetterUpdateCurrentDynamicValueFunc) History() []StorageGetterUpdateCurrentDynamicValueFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetterUpdateCurrentDynamicValueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetterUpdateCurrentDynamicValueFuncCall is an object that
// describes an invocation of method UpdateCurrentDynamicValue on an
// instance of MockStorageGetter.
type StorageGetterUpdateCurrentDynamicValueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *v2.Txn
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetterUpdateCurrentDynamicValueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetterUpdateCurrentDynamicValueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
