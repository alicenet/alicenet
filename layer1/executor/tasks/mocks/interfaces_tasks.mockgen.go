// Code generated by go-mockgen 1.3.3; DO NOT EDIT.

package mocks

import (
	"context"
	"sync"

	db "github.com/alicenet/alicenet/consensus/db"
	layer1 "github.com/alicenet/alicenet/layer1"
	tasks "github.com/alicenet/alicenet/layer1/executor/tasks"
	transaction "github.com/alicenet/alicenet/layer1/transaction"
	types "github.com/ethereum/go-ethereum/core/types"
	logrus "github.com/sirupsen/logrus"
)

// MockTask is a mock implementation of the Task interface (from the package
// github.com/alicenet/alicenet/layer1/executor/tasks) used for unit
// testing.
type MockTask struct {
	// CloseFunc is an instance of a mock function object controlling the
	// behavior of the method Close.
	CloseFunc *TaskCloseFunc
	// ExecuteFunc is an instance of a mock function object controlling the
	// behavior of the method Execute.
	ExecuteFunc *TaskExecuteFunc
	// FinishFunc is an instance of a mock function object controlling the
	// behavior of the method Finish.
	FinishFunc *TaskFinishFunc
	// GetAllowMultiExecutionFunc is an instance of a mock function object
	// controlling the behavior of the method GetAllowMultiExecution.
	GetAllowMultiExecutionFunc *TaskGetAllowMultiExecutionFunc
	// GetClientFunc is an instance of a mock function object controlling
	// the behavior of the method GetClient.
	GetClientFunc *TaskGetClientFunc
	// GetContractsHandlerFunc is an instance of a mock function object
	// controlling the behavior of the method GetContractsHandler.
	GetContractsHandlerFunc *TaskGetContractsHandlerFunc
	// GetCtxFunc is an instance of a mock function object controlling the
	// behavior of the method GetCtx.
	GetCtxFunc *TaskGetCtxFunc
	// GetEndFunc is an instance of a mock function object controlling the
	// behavior of the method GetEnd.
	GetEndFunc *TaskGetEndFunc
	// GetIdFunc is an instance of a mock function object controlling the
	// behavior of the method GetId.
	GetIdFunc *TaskGetIdFunc
	// GetLoggerFunc is an instance of a mock function object controlling
	// the behavior of the method GetLogger.
	GetLoggerFunc *TaskGetLoggerFunc
	// GetNameFunc is an instance of a mock function object controlling the
	// behavior of the method GetName.
	GetNameFunc *TaskGetNameFunc
	// GetStartFunc is an instance of a mock function object controlling the
	// behavior of the method GetStart.
	GetStartFunc *TaskGetStartFunc
	// GetSubscribeOptionsFunc is an instance of a mock function object
	// controlling the behavior of the method GetSubscribeOptions.
	GetSubscribeOptionsFunc *TaskGetSubscribeOptionsFunc
	// InitializeFunc is an instance of a mock function object controlling
	// the behavior of the method Initialize.
	InitializeFunc *TaskInitializeFunc
	// PrepareFunc is an instance of a mock function object controlling the
	// behavior of the method Prepare.
	PrepareFunc *TaskPrepareFunc
	// ShouldExecuteFunc is an instance of a mock function object
	// controlling the behavior of the method ShouldExecute.
	ShouldExecuteFunc *TaskShouldExecuteFunc
	// WasKilledFunc is an instance of a mock function object controlling
	// the behavior of the method WasKilled.
	WasKilledFunc *TaskWasKilledFunc
}

// NewMockTask creates a new mock of the Task interface. All methods return
// zero values for all results, unless overwritten.
func NewMockTask() *MockTask {
	return &MockTask{
		CloseFunc: &TaskCloseFunc{
			defaultHook: func() {
				return
			},
		},
		ExecuteFunc: &TaskExecuteFunc{
			defaultHook: func(context.Context) (r0 *types.Transaction, r1 *tasks.TaskErr) {
				return
			},
		},
		FinishFunc: &TaskFinishFunc{
			defaultHook: func(error) {
				return
			},
		},
		GetAllowMultiExecutionFunc: &TaskGetAllowMultiExecutionFunc{
			defaultHook: func() (r0 bool) {
				return
			},
		},
		GetClientFunc: &TaskGetClientFunc{
			defaultHook: func() (r0 layer1.Client) {
				return
			},
		},
		GetContractsHandlerFunc: &TaskGetContractsHandlerFunc{
			defaultHook: func() (r0 layer1.AllSmartContracts) {
				return
			},
		},
		GetCtxFunc: &TaskGetCtxFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		GetEndFunc: &TaskGetEndFunc{
			defaultHook: func() (r0 uint64) {
				return
			},
		},
		GetIdFunc: &TaskGetIdFunc{
			defaultHook: func() (r0 string) {
				return
			},
		},
		GetLoggerFunc: &TaskGetLoggerFunc{
			defaultHook: func() (r0 *logrus.Entry) {
				return
			},
		},
		GetNameFunc: &TaskGetNameFunc{
			defaultHook: func() (r0 string) {
				return
			},
		},
		GetStartFunc: &TaskGetStartFunc{
			defaultHook: func() (r0 uint64) {
				return
			},
		},
		GetSubscribeOptionsFunc: &TaskGetSubscribeOptionsFunc{
			defaultHook: func() (r0 *transaction.SubscribeOptions) {
				return
			},
		},
		InitializeFunc: &TaskInitializeFunc{
			defaultHook: func(context.Context, context.CancelFunc, *db.Database, *logrus.Entry, layer1.Client, layer1.AllSmartContracts, string, string, tasks.TaskResponseChan) (r0 error) {
				return
			},
		},
		PrepareFunc: &TaskPrepareFunc{
			defaultHook: func(context.Context) (r0 *tasks.TaskErr) {
				return
			},
		},
		ShouldExecuteFunc: &TaskShouldExecuteFunc{
			defaultHook: func(context.Context) (r0 bool, r1 *tasks.TaskErr) {
				return
			},
		},
		WasKilledFunc: &TaskWasKilledFunc{
			defaultHook: func() (r0 bool) {
				return
			},
		},
	}
}

// NewStrictMockTask creates a new mock of the Task interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockTask() *MockTask {
	return &MockTask{
		CloseFunc: &TaskCloseFunc{
			defaultHook: func() {
				panic("unexpected invocation of MockTask.Close")
			},
		},
		ExecuteFunc: &TaskExecuteFunc{
			defaultHook: func(context.Context) (*types.Transaction, *tasks.TaskErr) {
				panic("unexpected invocation of MockTask.Execute")
			},
		},
		FinishFunc: &TaskFinishFunc{
			defaultHook: func(error) {
				panic("unexpected invocation of MockTask.Finish")
			},
		},
		GetAllowMultiExecutionFunc: &TaskGetAllowMultiExecutionFunc{
			defaultHook: func() bool {
				panic("unexpected invocation of MockTask.GetAllowMultiExecution")
			},
		},
		GetClientFunc: &TaskGetClientFunc{
			defaultHook: func() layer1.Client {
				panic("unexpected invocation of MockTask.GetClient")
			},
		},
		GetContractsHandlerFunc: &TaskGetContractsHandlerFunc{
			defaultHook: func() layer1.AllSmartContracts {
				panic("unexpected invocation of MockTask.GetContractsHandler")
			},
		},
		GetCtxFunc: &TaskGetCtxFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockTask.GetCtx")
			},
		},
		GetEndFunc: &TaskGetEndFunc{
			defaultHook: func() uint64 {
				panic("unexpected invocation of MockTask.GetEnd")
			},
		},
		GetIdFunc: &TaskGetIdFunc{
			defaultHook: func() string {
				panic("unexpected invocation of MockTask.GetId")
			},
		},
		GetLoggerFunc: &TaskGetLoggerFunc{
			defaultHook: func() *logrus.Entry {
				panic("unexpected invocation of MockTask.GetLogger")
			},
		},
		GetNameFunc: &TaskGetNameFunc{
			defaultHook: func() string {
				panic("unexpected invocation of MockTask.GetName")
			},
		},
		GetStartFunc: &TaskGetStartFunc{
			defaultHook: func() uint64 {
				panic("unexpected invocation of MockTask.GetStart")
			},
		},
		GetSubscribeOptionsFunc: &TaskGetSubscribeOptionsFunc{
			defaultHook: func() *transaction.SubscribeOptions {
				panic("unexpected invocation of MockTask.GetSubscribeOptions")
			},
		},
		InitializeFunc: &TaskInitializeFunc{
			defaultHook: func(context.Context, context.CancelFunc, *db.Database, *logrus.Entry, layer1.Client, layer1.AllSmartContracts, string, string, tasks.TaskResponseChan) error {
				panic("unexpected invocation of MockTask.Initialize")
			},
		},
		PrepareFunc: &TaskPrepareFunc{
			defaultHook: func(context.Context) *tasks.TaskErr {
				panic("unexpected invocation of MockTask.Prepare")
			},
		},
		ShouldExecuteFunc: &TaskShouldExecuteFunc{
			defaultHook: func(context.Context) (bool, *tasks.TaskErr) {
				panic("unexpected invocation of MockTask.ShouldExecute")
			},
		},
		WasKilledFunc: &TaskWasKilledFunc{
			defaultHook: func() bool {
				panic("unexpected invocation of MockTask.WasKilled")
			},
		},
	}
}

// NewMockTaskFrom creates a new mock of the MockTask interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockTaskFrom(i tasks.Task) *MockTask {
	return &MockTask{
		CloseFunc: &TaskCloseFunc{
			defaultHook: i.Close,
		},
		ExecuteFunc: &TaskExecuteFunc{
			defaultHook: i.Execute,
		},
		FinishFunc: &TaskFinishFunc{
			defaultHook: i.Finish,
		},
		GetAllowMultiExecutionFunc: &TaskGetAllowMultiExecutionFunc{
			defaultHook: i.GetAllowMultiExecution,
		},
		GetClientFunc: &TaskGetClientFunc{
			defaultHook: i.GetClient,
		},
		GetContractsHandlerFunc: &TaskGetContractsHandlerFunc{
			defaultHook: i.GetContractsHandler,
		},
		GetCtxFunc: &TaskGetCtxFunc{
			defaultHook: i.GetCtx,
		},
		GetEndFunc: &TaskGetEndFunc{
			defaultHook: i.GetEnd,
		},
		GetIdFunc: &TaskGetIdFunc{
			defaultHook: i.GetId,
		},
		GetLoggerFunc: &TaskGetLoggerFunc{
			defaultHook: i.GetLogger,
		},
		GetNameFunc: &TaskGetNameFunc{
			defaultHook: i.GetName,
		},
		GetStartFunc: &TaskGetStartFunc{
			defaultHook: i.GetStart,
		},
		GetSubscribeOptionsFunc: &TaskGetSubscribeOptionsFunc{
			defaultHook: i.GetSubscribeOptions,
		},
		InitializeFunc: &TaskInitializeFunc{
			defaultHook: i.Initialize,
		},
		PrepareFunc: &TaskPrepareFunc{
			defaultHook: i.Prepare,
		},
		ShouldExecuteFunc: &TaskShouldExecuteFunc{
			defaultHook: i.ShouldExecute,
		},
		WasKilledFunc: &TaskWasKilledFunc{
			defaultHook: i.WasKilled,
		},
	}
}

// TaskCloseFunc describes the behavior when the Close method of the parent
// MockTask instance is invoked.
type TaskCloseFunc struct {
	defaultHook func()
	hooks       []func()
	history     []TaskCloseFuncCall
	mutex       sync.Mutex
}

// Close delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) Close() {
	m.CloseFunc.nextHook()()
	m.CloseFunc.appendCall(TaskCloseFuncCall{})
	return
}

// SetDefaultHook sets function that is called when the Close method of the
// parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskCloseFunc) SetDefaultHook(hook func()) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Close method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskCloseFunc) PushHook(hook func()) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskCloseFunc) SetDefaultReturn() {
	f.SetDefaultHook(func() {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskCloseFunc) PushReturn() {
	f.PushHook(func() {
		return
	})
}

func (f *TaskCloseFunc) nextHook() func() {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskCloseFunc) appendCall(r0 TaskCloseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskCloseFuncCall objects describing the
// invocations of this function.
func (f *TaskCloseFunc) History() []TaskCloseFuncCall {
	f.mutex.Lock()
	history := make([]TaskCloseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskCloseFuncCall is an object that describes an invocation of method
// Close on an instance of MockTask.
type TaskCloseFuncCall struct{}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskCloseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskCloseFuncCall) Results() []interface{} {
	return []interface{}{}
}

// TaskExecuteFunc describes the behavior when the Execute method of the
// parent MockTask instance is invoked.
type TaskExecuteFunc struct {
	defaultHook func(context.Context) (*types.Transaction, *tasks.TaskErr)
	hooks       []func(context.Context) (*types.Transaction, *tasks.TaskErr)
	history     []TaskExecuteFuncCall
	mutex       sync.Mutex
}

// Execute delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) Execute(v0 context.Context) (*types.Transaction, *tasks.TaskErr) {
	r0, r1 := m.ExecuteFunc.nextHook()(v0)
	m.ExecuteFunc.appendCall(TaskExecuteFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Execute method of
// the parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskExecuteFunc) SetDefaultHook(hook func(context.Context) (*types.Transaction, *tasks.TaskErr)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Execute method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskExecuteFunc) PushHook(hook func(context.Context) (*types.Transaction, *tasks.TaskErr)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskExecuteFunc) SetDefaultReturn(r0 *types.Transaction, r1 *tasks.TaskErr) {
	f.SetDefaultHook(func(context.Context) (*types.Transaction, *tasks.TaskErr) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskExecuteFunc) PushReturn(r0 *types.Transaction, r1 *tasks.TaskErr) {
	f.PushHook(func(context.Context) (*types.Transaction, *tasks.TaskErr) {
		return r0, r1
	})
}

func (f *TaskExecuteFunc) nextHook() func(context.Context) (*types.Transaction, *tasks.TaskErr) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskExecuteFunc) appendCall(r0 TaskExecuteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskExecuteFuncCall objects describing the
// invocations of this function.
func (f *TaskExecuteFunc) History() []TaskExecuteFuncCall {
	f.mutex.Lock()
	history := make([]TaskExecuteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskExecuteFuncCall is an object that describes an invocation of method
// Execute on an instance of MockTask.
type TaskExecuteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *tasks.TaskErr
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskExecuteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskExecuteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TaskFinishFunc describes the behavior when the Finish method of the
// parent MockTask instance is invoked.
type TaskFinishFunc struct {
	defaultHook func(error)
	hooks       []func(error)
	history     []TaskFinishFuncCall
	mutex       sync.Mutex
}

// Finish delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) Finish(v0 error) {
	m.FinishFunc.nextHook()(v0)
	m.FinishFunc.appendCall(TaskFinishFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the Finish method of the
// parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskFinishFunc) SetDefaultHook(hook func(error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Finish method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskFinishFunc) PushHook(hook func(error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskFinishFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(error) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskFinishFunc) PushReturn() {
	f.PushHook(func(error) {
		return
	})
}

func (f *TaskFinishFunc) nextHook() func(error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskFinishFunc) appendCall(r0 TaskFinishFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskFinishFuncCall objects describing the
// invocations of this function.
func (f *TaskFinishFunc) History() []TaskFinishFuncCall {
	f.mutex.Lock()
	history := make([]TaskFinishFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskFinishFuncCall is an object that describes an invocation of method
// Finish on an instance of MockTask.
type TaskFinishFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskFinishFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskFinishFuncCall) Results() []interface{} {
	return []interface{}{}
}

// TaskGetAllowMultiExecutionFunc describes the behavior when the
// GetAllowMultiExecution method of the parent MockTask instance is invoked.
type TaskGetAllowMultiExecutionFunc struct {
	defaultHook func() bool
	hooks       []func() bool
	history     []TaskGetAllowMultiExecutionFuncCall
	mutex       sync.Mutex
}

// GetAllowMultiExecution delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockTask) GetAllowMultiExecution() bool {
	r0 := m.GetAllowMultiExecutionFunc.nextHook()()
	m.GetAllowMultiExecutionFunc.appendCall(TaskGetAllowMultiExecutionFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetAllowMultiExecution method of the parent MockTask instance is invoked
// and the hook queue is empty.
func (f *TaskGetAllowMultiExecutionFunc) SetDefaultHook(hook func() bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAllowMultiExecution method of the parent MockTask instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TaskGetAllowMultiExecutionFunc) PushHook(hook func() bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskGetAllowMultiExecutionFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func() bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskGetAllowMultiExecutionFunc) PushReturn(r0 bool) {
	f.PushHook(func() bool {
		return r0
	})
}

func (f *TaskGetAllowMultiExecutionFunc) nextHook() func() bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskGetAllowMultiExecutionFunc) appendCall(r0 TaskGetAllowMultiExecutionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskGetAllowMultiExecutionFuncCall objects
// describing the invocations of this function.
func (f *TaskGetAllowMultiExecutionFunc) History() []TaskGetAllowMultiExecutionFuncCall {
	f.mutex.Lock()
	history := make([]TaskGetAllowMultiExecutionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskGetAllowMultiExecutionFuncCall is an object that describes an
// invocation of method GetAllowMultiExecution on an instance of MockTask.
type TaskGetAllowMultiExecutionFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskGetAllowMultiExecutionFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskGetAllowMultiExecutionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskGetClientFunc describes the behavior when the GetClient method of the
// parent MockTask instance is invoked.
type TaskGetClientFunc struct {
	defaultHook func() layer1.Client
	hooks       []func() layer1.Client
	history     []TaskGetClientFuncCall
	mutex       sync.Mutex
}

// GetClient delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) GetClient() layer1.Client {
	r0 := m.GetClientFunc.nextHook()()
	m.GetClientFunc.appendCall(TaskGetClientFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetClient method of
// the parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskGetClientFunc) SetDefaultHook(hook func() layer1.Client) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetClient method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskGetClientFunc) PushHook(hook func() layer1.Client) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskGetClientFunc) SetDefaultReturn(r0 layer1.Client) {
	f.SetDefaultHook(func() layer1.Client {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskGetClientFunc) PushReturn(r0 layer1.Client) {
	f.PushHook(func() layer1.Client {
		return r0
	})
}

func (f *TaskGetClientFunc) nextHook() func() layer1.Client {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskGetClientFunc) appendCall(r0 TaskGetClientFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskGetClientFuncCall objects describing
// the invocations of this function.
func (f *TaskGetClientFunc) History() []TaskGetClientFuncCall {
	f.mutex.Lock()
	history := make([]TaskGetClientFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskGetClientFuncCall is an object that describes an invocation of method
// GetClient on an instance of MockTask.
type TaskGetClientFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 layer1.Client
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskGetClientFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskGetClientFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskGetContractsHandlerFunc describes the behavior when the
// GetContractsHandler method of the parent MockTask instance is invoked.
type TaskGetContractsHandlerFunc struct {
	defaultHook func() layer1.AllSmartContracts
	hooks       []func() layer1.AllSmartContracts
	history     []TaskGetContractsHandlerFuncCall
	mutex       sync.Mutex
}

// GetContractsHandler delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockTask) GetContractsHandler() layer1.AllSmartContracts {
	r0 := m.GetContractsHandlerFunc.nextHook()()
	m.GetContractsHandlerFunc.appendCall(TaskGetContractsHandlerFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetContractsHandler
// method of the parent MockTask instance is invoked and the hook queue is
// empty.
func (f *TaskGetContractsHandlerFunc) SetDefaultHook(hook func() layer1.AllSmartContracts) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetContractsHandler method of the parent MockTask instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TaskGetContractsHandlerFunc) PushHook(hook func() layer1.AllSmartContracts) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskGetContractsHandlerFunc) SetDefaultReturn(r0 layer1.AllSmartContracts) {
	f.SetDefaultHook(func() layer1.AllSmartContracts {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskGetContractsHandlerFunc) PushReturn(r0 layer1.AllSmartContracts) {
	f.PushHook(func() layer1.AllSmartContracts {
		return r0
	})
}

func (f *TaskGetContractsHandlerFunc) nextHook() func() layer1.AllSmartContracts {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskGetContractsHandlerFunc) appendCall(r0 TaskGetContractsHandlerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskGetContractsHandlerFuncCall objects
// describing the invocations of this function.
func (f *TaskGetContractsHandlerFunc) History() []TaskGetContractsHandlerFuncCall {
	f.mutex.Lock()
	history := make([]TaskGetContractsHandlerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskGetContractsHandlerFuncCall is an object that describes an invocation
// of method GetContractsHandler on an instance of MockTask.
type TaskGetContractsHandlerFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 layer1.AllSmartContracts
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskGetContractsHandlerFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskGetContractsHandlerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskGetCtxFunc describes the behavior when the GetCtx method of the
// parent MockTask instance is invoked.
type TaskGetCtxFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []TaskGetCtxFuncCall
	mutex       sync.Mutex
}

// GetCtx delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) GetCtx() context.Context {
	r0 := m.GetCtxFunc.nextHook()()
	m.GetCtxFunc.appendCall(TaskGetCtxFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetCtx method of the
// parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskGetCtxFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCtx method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskGetCtxFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskGetCtxFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskGetCtxFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *TaskGetCtxFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskGetCtxFunc) appendCall(r0 TaskGetCtxFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskGetCtxFuncCall objects describing the
// invocations of this function.
func (f *TaskGetCtxFunc) History() []TaskGetCtxFuncCall {
	f.mutex.Lock()
	history := make([]TaskGetCtxFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskGetCtxFuncCall is an object that describes an invocation of method
// GetCtx on an instance of MockTask.
type TaskGetCtxFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskGetCtxFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskGetCtxFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskGetEndFunc describes the behavior when the GetEnd method of the
// parent MockTask instance is invoked.
type TaskGetEndFunc struct {
	defaultHook func() uint64
	hooks       []func() uint64
	history     []TaskGetEndFuncCall
	mutex       sync.Mutex
}

// GetEnd delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) GetEnd() uint64 {
	r0 := m.GetEndFunc.nextHook()()
	m.GetEndFunc.appendCall(TaskGetEndFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetEnd method of the
// parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskGetEndFunc) SetDefaultHook(hook func() uint64) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEnd method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskGetEndFunc) PushHook(hook func() uint64) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskGetEndFunc) SetDefaultReturn(r0 uint64) {
	f.SetDefaultHook(func() uint64 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskGetEndFunc) PushReturn(r0 uint64) {
	f.PushHook(func() uint64 {
		return r0
	})
}

func (f *TaskGetEndFunc) nextHook() func() uint64 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskGetEndFunc) appendCall(r0 TaskGetEndFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskGetEndFuncCall objects describing the
// invocations of this function.
func (f *TaskGetEndFunc) History() []TaskGetEndFuncCall {
	f.mutex.Lock()
	history := make([]TaskGetEndFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskGetEndFuncCall is an object that describes an invocation of method
// GetEnd on an instance of MockTask.
type TaskGetEndFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskGetEndFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskGetEndFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskGetIdFunc describes the behavior when the GetId method of the parent
// MockTask instance is invoked.
type TaskGetIdFunc struct {
	defaultHook func() string
	hooks       []func() string
	history     []TaskGetIdFuncCall
	mutex       sync.Mutex
}

// GetId delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) GetId() string {
	r0 := m.GetIdFunc.nextHook()()
	m.GetIdFunc.appendCall(TaskGetIdFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetId method of the
// parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskGetIdFunc) SetDefaultHook(hook func() string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetId method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskGetIdFunc) PushHook(hook func() string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskGetIdFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func() string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskGetIdFunc) PushReturn(r0 string) {
	f.PushHook(func() string {
		return r0
	})
}

func (f *TaskGetIdFunc) nextHook() func() string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskGetIdFunc) appendCall(r0 TaskGetIdFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskGetIdFuncCall objects describing the
// invocations of this function.
func (f *TaskGetIdFunc) History() []TaskGetIdFuncCall {
	f.mutex.Lock()
	history := make([]TaskGetIdFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskGetIdFuncCall is an object that describes an invocation of method
// GetId on an instance of MockTask.
type TaskGetIdFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskGetIdFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskGetIdFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskGetLoggerFunc describes the behavior when the GetLogger method of the
// parent MockTask instance is invoked.
type TaskGetLoggerFunc struct {
	defaultHook func() *logrus.Entry
	hooks       []func() *logrus.Entry
	history     []TaskGetLoggerFuncCall
	mutex       sync.Mutex
}

// GetLogger delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) GetLogger() *logrus.Entry {
	r0 := m.GetLoggerFunc.nextHook()()
	m.GetLoggerFunc.appendCall(TaskGetLoggerFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetLogger method of
// the parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskGetLoggerFunc) SetDefaultHook(hook func() *logrus.Entry) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLogger method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskGetLoggerFunc) PushHook(hook func() *logrus.Entry) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskGetLoggerFunc) SetDefaultReturn(r0 *logrus.Entry) {
	f.SetDefaultHook(func() *logrus.Entry {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskGetLoggerFunc) PushReturn(r0 *logrus.Entry) {
	f.PushHook(func() *logrus.Entry {
		return r0
	})
}

func (f *TaskGetLoggerFunc) nextHook() func() *logrus.Entry {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskGetLoggerFunc) appendCall(r0 TaskGetLoggerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskGetLoggerFuncCall objects describing
// the invocations of this function.
func (f *TaskGetLoggerFunc) History() []TaskGetLoggerFuncCall {
	f.mutex.Lock()
	history := make([]TaskGetLoggerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskGetLoggerFuncCall is an object that describes an invocation of method
// GetLogger on an instance of MockTask.
type TaskGetLoggerFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *logrus.Entry
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskGetLoggerFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskGetLoggerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskGetNameFunc describes the behavior when the GetName method of the
// parent MockTask instance is invoked.
type TaskGetNameFunc struct {
	defaultHook func() string
	hooks       []func() string
	history     []TaskGetNameFuncCall
	mutex       sync.Mutex
}

// GetName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) GetName() string {
	r0 := m.GetNameFunc.nextHook()()
	m.GetNameFunc.appendCall(TaskGetNameFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetName method of
// the parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskGetNameFunc) SetDefaultHook(hook func() string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetName method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskGetNameFunc) PushHook(hook func() string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskGetNameFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func() string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskGetNameFunc) PushReturn(r0 string) {
	f.PushHook(func() string {
		return r0
	})
}

func (f *TaskGetNameFunc) nextHook() func() string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskGetNameFunc) appendCall(r0 TaskGetNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskGetNameFuncCall objects describing the
// invocations of this function.
func (f *TaskGetNameFunc) History() []TaskGetNameFuncCall {
	f.mutex.Lock()
	history := make([]TaskGetNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskGetNameFuncCall is an object that describes an invocation of method
// GetName on an instance of MockTask.
type TaskGetNameFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskGetNameFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskGetNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskGetStartFunc describes the behavior when the GetStart method of the
// parent MockTask instance is invoked.
type TaskGetStartFunc struct {
	defaultHook func() uint64
	hooks       []func() uint64
	history     []TaskGetStartFuncCall
	mutex       sync.Mutex
}

// GetStart delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) GetStart() uint64 {
	r0 := m.GetStartFunc.nextHook()()
	m.GetStartFunc.appendCall(TaskGetStartFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetStart method of
// the parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskGetStartFunc) SetDefaultHook(hook func() uint64) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStart method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskGetStartFunc) PushHook(hook func() uint64) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskGetStartFunc) SetDefaultReturn(r0 uint64) {
	f.SetDefaultHook(func() uint64 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskGetStartFunc) PushReturn(r0 uint64) {
	f.PushHook(func() uint64 {
		return r0
	})
}

func (f *TaskGetStartFunc) nextHook() func() uint64 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskGetStartFunc) appendCall(r0 TaskGetStartFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskGetStartFuncCall objects describing the
// invocations of this function.
func (f *TaskGetStartFunc) History() []TaskGetStartFuncCall {
	f.mutex.Lock()
	history := make([]TaskGetStartFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskGetStartFuncCall is an object that describes an invocation of method
// GetStart on an instance of MockTask.
type TaskGetStartFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskGetStartFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskGetStartFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskGetSubscribeOptionsFunc describes the behavior when the
// GetSubscribeOptions method of the parent MockTask instance is invoked.
type TaskGetSubscribeOptionsFunc struct {
	defaultHook func() *transaction.SubscribeOptions
	hooks       []func() *transaction.SubscribeOptions
	history     []TaskGetSubscribeOptionsFuncCall
	mutex       sync.Mutex
}

// GetSubscribeOptions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockTask) GetSubscribeOptions() *transaction.SubscribeOptions {
	r0 := m.GetSubscribeOptionsFunc.nextHook()()
	m.GetSubscribeOptionsFunc.appendCall(TaskGetSubscribeOptionsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetSubscribeOptions
// method of the parent MockTask instance is invoked and the hook queue is
// empty.
func (f *TaskGetSubscribeOptionsFunc) SetDefaultHook(hook func() *transaction.SubscribeOptions) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSubscribeOptions method of the parent MockTask instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TaskGetSubscribeOptionsFunc) PushHook(hook func() *transaction.SubscribeOptions) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskGetSubscribeOptionsFunc) SetDefaultReturn(r0 *transaction.SubscribeOptions) {
	f.SetDefaultHook(func() *transaction.SubscribeOptions {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskGetSubscribeOptionsFunc) PushReturn(r0 *transaction.SubscribeOptions) {
	f.PushHook(func() *transaction.SubscribeOptions {
		return r0
	})
}

func (f *TaskGetSubscribeOptionsFunc) nextHook() func() *transaction.SubscribeOptions {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskGetSubscribeOptionsFunc) appendCall(r0 TaskGetSubscribeOptionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskGetSubscribeOptionsFuncCall objects
// describing the invocations of this function.
func (f *TaskGetSubscribeOptionsFunc) History() []TaskGetSubscribeOptionsFuncCall {
	f.mutex.Lock()
	history := make([]TaskGetSubscribeOptionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskGetSubscribeOptionsFuncCall is an object that describes an invocation
// of method GetSubscribeOptions on an instance of MockTask.
type TaskGetSubscribeOptionsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *transaction.SubscribeOptions
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskGetSubscribeOptionsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskGetSubscribeOptionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskInitializeFunc describes the behavior when the Initialize method of
// the parent MockTask instance is invoked.
type TaskInitializeFunc struct {
	defaultHook func(context.Context, context.CancelFunc, *db.Database, *logrus.Entry, layer1.Client, layer1.AllSmartContracts, string, string, tasks.TaskResponseChan) error
	hooks       []func(context.Context, context.CancelFunc, *db.Database, *logrus.Entry, layer1.Client, layer1.AllSmartContracts, string, string, tasks.TaskResponseChan) error
	history     []TaskInitializeFuncCall
	mutex       sync.Mutex
}

// Initialize delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTask) Initialize(v0 context.Context, v1 context.CancelFunc, v2 *db.Database, v3 *logrus.Entry, v4 layer1.Client, v5 layer1.AllSmartContracts, v6 string, v7 string, v8 tasks.TaskResponseChan) error {
	r0 := m.InitializeFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6, v7, v8)
	m.InitializeFunc.appendCall(TaskInitializeFuncCall{v0, v1, v2, v3, v4, v5, v6, v7, v8, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Initialize method of
// the parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskInitializeFunc) SetDefaultHook(hook func(context.Context, context.CancelFunc, *db.Database, *logrus.Entry, layer1.Client, layer1.AllSmartContracts, string, string, tasks.TaskResponseChan) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Initialize method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskInitializeFunc) PushHook(hook func(context.Context, context.CancelFunc, *db.Database, *logrus.Entry, layer1.Client, layer1.AllSmartContracts, string, string, tasks.TaskResponseChan) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskInitializeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, context.CancelFunc, *db.Database, *logrus.Entry, layer1.Client, layer1.AllSmartContracts, string, string, tasks.TaskResponseChan) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskInitializeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, context.CancelFunc, *db.Database, *logrus.Entry, layer1.Client, layer1.AllSmartContracts, string, string, tasks.TaskResponseChan) error {
		return r0
	})
}

func (f *TaskInitializeFunc) nextHook() func(context.Context, context.CancelFunc, *db.Database, *logrus.Entry, layer1.Client, layer1.AllSmartContracts, string, string, tasks.TaskResponseChan) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskInitializeFunc) appendCall(r0 TaskInitializeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskInitializeFuncCall objects describing
// the invocations of this function.
func (f *TaskInitializeFunc) History() []TaskInitializeFuncCall {
	f.mutex.Lock()
	history := make([]TaskInitializeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskInitializeFuncCall is an object that describes an invocation of
// method Initialize on an instance of MockTask.
type TaskInitializeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 context.CancelFunc
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *db.Database
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *logrus.Entry
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 layer1.Client
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 layer1.AllSmartContracts
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 string
	// Arg7 is the value of the 8th argument passed to this method
	// invocation.
	Arg7 string
	// Arg8 is the value of the 9th argument passed to this method
	// invocation.
	Arg8 tasks.TaskResponseChan
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskInitializeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6, c.Arg7, c.Arg8}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskInitializeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskPrepareFunc describes the behavior when the Prepare method of the
// parent MockTask instance is invoked.
type TaskPrepareFunc struct {
	defaultHook func(context.Context) *tasks.TaskErr
	hooks       []func(context.Context) *tasks.TaskErr
	history     []TaskPrepareFuncCall
	mutex       sync.Mutex
}

// Prepare delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) Prepare(v0 context.Context) *tasks.TaskErr {
	r0 := m.PrepareFunc.nextHook()(v0)
	m.PrepareFunc.appendCall(TaskPrepareFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Prepare method of
// the parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskPrepareFunc) SetDefaultHook(hook func(context.Context) *tasks.TaskErr) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Prepare method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskPrepareFunc) PushHook(hook func(context.Context) *tasks.TaskErr) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskPrepareFunc) SetDefaultReturn(r0 *tasks.TaskErr) {
	f.SetDefaultHook(func(context.Context) *tasks.TaskErr {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskPrepareFunc) PushReturn(r0 *tasks.TaskErr) {
	f.PushHook(func(context.Context) *tasks.TaskErr {
		return r0
	})
}

func (f *TaskPrepareFunc) nextHook() func(context.Context) *tasks.TaskErr {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskPrepareFunc) appendCall(r0 TaskPrepareFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskPrepareFuncCall objects describing the
// invocations of this function.
func (f *TaskPrepareFunc) History() []TaskPrepareFuncCall {
	f.mutex.Lock()
	history := make([]TaskPrepareFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskPrepareFuncCall is an object that describes an invocation of method
// Prepare on an instance of MockTask.
type TaskPrepareFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *tasks.TaskErr
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskPrepareFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskPrepareFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TaskShouldExecuteFunc describes the behavior when the ShouldExecute
// method of the parent MockTask instance is invoked.
type TaskShouldExecuteFunc struct {
	defaultHook func(context.Context) (bool, *tasks.TaskErr)
	hooks       []func(context.Context) (bool, *tasks.TaskErr)
	history     []TaskShouldExecuteFuncCall
	mutex       sync.Mutex
}

// ShouldExecute delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTask) ShouldExecute(v0 context.Context) (bool, *tasks.TaskErr) {
	r0, r1 := m.ShouldExecuteFunc.nextHook()(v0)
	m.ShouldExecuteFunc.appendCall(TaskShouldExecuteFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ShouldExecute method
// of the parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskShouldExecuteFunc) SetDefaultHook(hook func(context.Context) (bool, *tasks.TaskErr)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ShouldExecute method of the parent MockTask instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TaskShouldExecuteFunc) PushHook(hook func(context.Context) (bool, *tasks.TaskErr)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskShouldExecuteFunc) SetDefaultReturn(r0 bool, r1 *tasks.TaskErr) {
	f.SetDefaultHook(func(context.Context) (bool, *tasks.TaskErr) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskShouldExecuteFunc) PushReturn(r0 bool, r1 *tasks.TaskErr) {
	f.PushHook(func(context.Context) (bool, *tasks.TaskErr) {
		return r0, r1
	})
}

func (f *TaskShouldExecuteFunc) nextHook() func(context.Context) (bool, *tasks.TaskErr) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskShouldExecuteFunc) appendCall(r0 TaskShouldExecuteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskShouldExecuteFuncCall objects
// describing the invocations of this function.
func (f *TaskShouldExecuteFunc) History() []TaskShouldExecuteFuncCall {
	f.mutex.Lock()
	history := make([]TaskShouldExecuteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskShouldExecuteFuncCall is an object that describes an invocation of
// method ShouldExecute on an instance of MockTask.
type TaskShouldExecuteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *tasks.TaskErr
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskShouldExecuteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskShouldExecuteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TaskWasKilledFunc describes the behavior when the WasKilled method of the
// parent MockTask instance is invoked.
type TaskWasKilledFunc struct {
	defaultHook func() bool
	hooks       []func() bool
	history     []TaskWasKilledFuncCall
	mutex       sync.Mutex
}

// WasKilled delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTask) WasKilled() bool {
	r0 := m.WasKilledFunc.nextHook()()
	m.WasKilledFunc.appendCall(TaskWasKilledFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the WasKilled method of
// the parent MockTask instance is invoked and the hook queue is empty.
func (f *TaskWasKilledFunc) SetDefaultHook(hook func() bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WasKilled method of the parent MockTask instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TaskWasKilledFunc) PushHook(hook func() bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TaskWasKilledFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func() bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TaskWasKilledFunc) PushReturn(r0 bool) {
	f.PushHook(func() bool {
		return r0
	})
}

func (f *TaskWasKilledFunc) nextHook() func() bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TaskWasKilledFunc) appendCall(r0 TaskWasKilledFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TaskWasKilledFuncCall objects describing
// the invocations of this function.
func (f *TaskWasKilledFunc) History() []TaskWasKilledFuncCall {
	f.mutex.Lock()
	history := make([]TaskWasKilledFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TaskWasKilledFuncCall is an object that describes an invocation of method
// WasKilled on an instance of MockTask.
type TaskWasKilledFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TaskWasKilledFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TaskWasKilledFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
