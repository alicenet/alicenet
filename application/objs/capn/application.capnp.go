// Code generated by capnpc-go. DO NOT EDIT.

package capn

import (
	capnp "github.com/MadBase/go-capnproto2/v2"
	text "github.com/MadBase/go-capnproto2/v2/encoding/text"
	schemas "github.com/MadBase/go-capnproto2/v2/schemas"
	strconv "strconv"
)

// Constants defined in application.capnp.
var (
	DefaultDSPreImage   = DSPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[0:144]).Struct()}
	DefaultDSLinker     = DSLinker{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[144:312]).Struct()}
	DefaultVSPreImage   = VSPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[312:416]).Struct()}
	DefaultTXInPreImage = TXInPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[416:456]).Struct()}
	DefaultTXInLinker   = TXInLinker{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[456:520]).Struct()}
)

func init() {
	// Set traversal limit for constants as Uint64Max since they're safe from amplification attacks.
	DefaultDSPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultDSLinker.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultVSPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultTXInPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultTXInLinker.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
}

type DSPreImage struct{ capnp.Struct }

// DSPreImage_TypeID is the unique identifier for the type DSPreImage.
const DSPreImage_TypeID = 0xd4eb3c212b8dbb26

func NewDSPreImage(s *capnp.Segment) (DSPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 3})
	return DSPreImage{st}, err
}

func NewRootDSPreImage(s *capnp.Segment) (DSPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 3})
	return DSPreImage{st}, err
}

func ReadRootDSPreImage(msg *capnp.Message) (DSPreImage, error) {
	root, err := msg.RootPtr()
	return DSPreImage{root.Struct()}, err
}

func (s DSPreImage) String() string {
	str, _ := text.Marshal(0xd4eb3c212b8dbb26, s.Struct)
	return str
}

func (s DSPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s DSPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s DSPreImage) Index() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSPreImage) HasIndex() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DSPreImage) SetIndex(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s DSPreImage) IssuedAt() uint32 {
	return s.Struct.Uint32(4)
}

func (s DSPreImage) SetIssuedAt(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s DSPreImage) RawData() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSPreImage) HasRawData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DSPreImage) SetRawData(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s DSPreImage) TXOutIdx() uint32 {
	return s.Struct.Uint32(12)
}

func (s DSPreImage) SetTXOutIdx(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s DSPreImage) Owner() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSPreImage) HasOwner() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s DSPreImage) SetOwner(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}
func (s DSPreImage) Deposit() uint32 {
	return s.Struct.Uint32(8)
}

func (s DSPreImage) SetDeposit(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s DSPreImage) Deposit1() uint32 {
	return s.Struct.Uint32(16)
}

func (s DSPreImage) SetDeposit1(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s DSPreImage) Deposit2() uint32 {
	return s.Struct.Uint32(20)
}

func (s DSPreImage) SetDeposit2(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s DSPreImage) Deposit3() uint32 {
	return s.Struct.Uint32(24)
}

func (s DSPreImage) SetDeposit3(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s DSPreImage) Deposit4() uint32 {
	return s.Struct.Uint32(28)
}

func (s DSPreImage) SetDeposit4(v uint32) {
	s.Struct.SetUint32(28, v)
}

func (s DSPreImage) Deposit5() uint32 {
	return s.Struct.Uint32(32)
}

func (s DSPreImage) SetDeposit5(v uint32) {
	s.Struct.SetUint32(32, v)
}

func (s DSPreImage) Deposit6() uint32 {
	return s.Struct.Uint32(36)
}

func (s DSPreImage) SetDeposit6(v uint32) {
	s.Struct.SetUint32(36, v)
}

func (s DSPreImage) Deposit7() uint32 {
	return s.Struct.Uint32(40)
}

func (s DSPreImage) SetDeposit7(v uint32) {
	s.Struct.SetUint32(40, v)
}

func (s DSPreImage) Fee0() uint32 {
	return s.Struct.Uint32(44)
}

func (s DSPreImage) SetFee0(v uint32) {
	s.Struct.SetUint32(44, v)
}

func (s DSPreImage) Fee1() uint32 {
	return s.Struct.Uint32(48)
}

func (s DSPreImage) SetFee1(v uint32) {
	s.Struct.SetUint32(48, v)
}

func (s DSPreImage) Fee2() uint32 {
	return s.Struct.Uint32(52)
}

func (s DSPreImage) SetFee2(v uint32) {
	s.Struct.SetUint32(52, v)
}

func (s DSPreImage) Fee3() uint32 {
	return s.Struct.Uint32(56)
}

func (s DSPreImage) SetFee3(v uint32) {
	s.Struct.SetUint32(56, v)
}

func (s DSPreImage) Fee4() uint32 {
	return s.Struct.Uint32(60)
}

func (s DSPreImage) SetFee4(v uint32) {
	s.Struct.SetUint32(60, v)
}

func (s DSPreImage) Fee5() uint32 {
	return s.Struct.Uint32(64)
}

func (s DSPreImage) SetFee5(v uint32) {
	s.Struct.SetUint32(64, v)
}

func (s DSPreImage) Fee6() uint32 {
	return s.Struct.Uint32(68)
}

func (s DSPreImage) SetFee6(v uint32) {
	s.Struct.SetUint32(68, v)
}

func (s DSPreImage) Fee7() uint32 {
	return s.Struct.Uint32(72)
}

func (s DSPreImage) SetFee7(v uint32) {
	s.Struct.SetUint32(72, v)
}

// DSPreImage_List is a list of DSPreImage.
type DSPreImage_List struct{ capnp.List }

// NewDSPreImage creates a new list of DSPreImage.
func NewDSPreImage_List(s *capnp.Segment, sz int32) (DSPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 3}, sz)
	return DSPreImage_List{l}, err
}

func (s DSPreImage_List) At(i int) DSPreImage { return DSPreImage{s.List.Struct(i)} }

func (s DSPreImage_List) Set(i int, v DSPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s DSPreImage_List) String() string {
	str, _ := text.MarshalList(0xd4eb3c212b8dbb26, s.List)
	return str
}

// DSPreImage_Promise is a wrapper for a DSPreImage promised by a client call.
type DSPreImage_Promise struct{ *capnp.Pipeline }

func (p DSPreImage_Promise) Struct() (DSPreImage, error) {
	s, err := p.Pipeline.Struct()
	return DSPreImage{s}, err
}

type DSLinker struct{ capnp.Struct }

// DSLinker_TypeID is the unique identifier for the type DSLinker.
const DSLinker_TypeID = 0x91989c51606be6c8

func NewDSLinker(s *capnp.Segment) (DSLinker, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DSLinker{st}, err
}

func NewRootDSLinker(s *capnp.Segment) (DSLinker, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DSLinker{st}, err
}

func ReadRootDSLinker(msg *capnp.Message) (DSLinker, error) {
	root, err := msg.RootPtr()
	return DSLinker{root.Struct()}, err
}

func (s DSLinker) String() string {
	str, _ := text.Marshal(0x91989c51606be6c8, s.Struct)
	return str
}

func (s DSLinker) DSPreImage() DSPreImage {
	if !s.HasDSPreImage() {
		s.NewDSPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[520:664])
	return DSPreImage{Struct: ss}
}

func (s DSLinker) HasDSPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DSLinker) SetDSPreImage(v DSPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDSPreImage sets the dSPreImage field to a newly
// allocated DSPreImage struct, preferring placement in s's segment.
func (s DSLinker) NewDSPreImage() (DSPreImage, error) {
	ss, err := NewDSPreImage(s.Struct.Segment())
	if err != nil {
		return DSPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s DSLinker) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSLinker) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DSLinker) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// DSLinker_List is a list of DSLinker.
type DSLinker_List struct{ capnp.List }

// NewDSLinker creates a new list of DSLinker.
func NewDSLinker_List(s *capnp.Segment, sz int32) (DSLinker_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DSLinker_List{l}, err
}

func (s DSLinker_List) At(i int) DSLinker { return DSLinker{s.List.Struct(i)} }

func (s DSLinker_List) Set(i int, v DSLinker) error { return s.List.SetStruct(i, v.Struct) }

func (s DSLinker_List) String() string {
	str, _ := text.MarshalList(0x91989c51606be6c8, s.List)
	return str
}

// DSLinker_Promise is a wrapper for a DSLinker promised by a client call.
type DSLinker_Promise struct{ *capnp.Pipeline }

func (p DSLinker_Promise) Struct() (DSLinker, error) {
	s, err := p.Pipeline.Struct()
	return DSLinker{s}, err
}

func (p DSLinker_Promise) DSPreImage() DSPreImage_Promise {
	return DSPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[664:808])}
}

type DataStore struct{ capnp.Struct }

// DataStore_TypeID is the unique identifier for the type DataStore.
const DataStore_TypeID = 0x9843dfb8f1386b20

func NewDataStore(s *capnp.Segment) (DataStore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataStore{st}, err
}

func NewRootDataStore(s *capnp.Segment) (DataStore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataStore{st}, err
}

func ReadRootDataStore(msg *capnp.Message) (DataStore, error) {
	root, err := msg.RootPtr()
	return DataStore{root.Struct()}, err
}

func (s DataStore) String() string {
	str, _ := text.Marshal(0x9843dfb8f1386b20, s.Struct)
	return str
}

func (s DataStore) DSLinker() DSLinker {
	if !s.HasDSLinker() {
		s.NewDSLinker()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[808:976])
	return DSLinker{Struct: ss}
}

func (s DataStore) HasDSLinker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DataStore) SetDSLinker(v DSLinker) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDSLinker sets the dSLinker field to a newly
// allocated DSLinker struct, preferring placement in s's segment.
func (s DataStore) NewDSLinker() (DSLinker, error) {
	ss, err := NewDSLinker(s.Struct.Segment())
	if err != nil {
		return DSLinker{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s DataStore) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DataStore) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DataStore) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// DataStore_List is a list of DataStore.
type DataStore_List struct{ capnp.List }

// NewDataStore creates a new list of DataStore.
func NewDataStore_List(s *capnp.Segment, sz int32) (DataStore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DataStore_List{l}, err
}

func (s DataStore_List) At(i int) DataStore { return DataStore{s.List.Struct(i)} }

func (s DataStore_List) Set(i int, v DataStore) error { return s.List.SetStruct(i, v.Struct) }

func (s DataStore_List) String() string {
	str, _ := text.MarshalList(0x9843dfb8f1386b20, s.List)
	return str
}

// DataStore_Promise is a wrapper for a DataStore promised by a client call.
type DataStore_Promise struct{ *capnp.Pipeline }

func (p DataStore_Promise) Struct() (DataStore, error) {
	s, err := p.Pipeline.Struct()
	return DataStore{s}, err
}

func (p DataStore_Promise) DSLinker() DSLinker_Promise {
	return DSLinker_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[976:1144])}
}

type VSPreImage struct{ capnp.Struct }

// VSPreImage_TypeID is the unique identifier for the type VSPreImage.
const VSPreImage_TypeID = 0xf8c203f305398e1b

func NewVSPreImage(s *capnp.Segment) (VSPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return VSPreImage{st}, err
}

func NewRootVSPreImage(s *capnp.Segment) (VSPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return VSPreImage{st}, err
}

func ReadRootVSPreImage(msg *capnp.Message) (VSPreImage, error) {
	root, err := msg.RootPtr()
	return VSPreImage{root.Struct()}, err
}

func (s VSPreImage) String() string {
	str, _ := text.Marshal(0xf8c203f305398e1b, s.Struct)
	return str
}

func (s VSPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s VSPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s VSPreImage) TXOutIdx() uint32 {
	return s.Struct.Uint32(8)
}

func (s VSPreImage) SetTXOutIdx(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s VSPreImage) Owner() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s VSPreImage) HasOwner() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VSPreImage) SetOwner(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s VSPreImage) Value() uint32 {
	return s.Struct.Uint32(4)
}

func (s VSPreImage) SetValue(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s VSPreImage) Value1() uint32 {
	return s.Struct.Uint32(12)
}

func (s VSPreImage) SetValue1(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s VSPreImage) Value2() uint32 {
	return s.Struct.Uint32(16)
}

func (s VSPreImage) SetValue2(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s VSPreImage) Value3() uint32 {
	return s.Struct.Uint32(20)
}

func (s VSPreImage) SetValue3(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s VSPreImage) Value4() uint32 {
	return s.Struct.Uint32(24)
}

func (s VSPreImage) SetValue4(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s VSPreImage) Value5() uint32 {
	return s.Struct.Uint32(28)
}

func (s VSPreImage) SetValue5(v uint32) {
	s.Struct.SetUint32(28, v)
}

func (s VSPreImage) Value6() uint32 {
	return s.Struct.Uint32(32)
}

func (s VSPreImage) SetValue6(v uint32) {
	s.Struct.SetUint32(32, v)
}

func (s VSPreImage) Value7() uint32 {
	return s.Struct.Uint32(36)
}

func (s VSPreImage) SetValue7(v uint32) {
	s.Struct.SetUint32(36, v)
}

func (s VSPreImage) Fee0() uint32 {
	return s.Struct.Uint32(40)
}

func (s VSPreImage) SetFee0(v uint32) {
	s.Struct.SetUint32(40, v)
}

func (s VSPreImage) Fee1() uint32 {
	return s.Struct.Uint32(44)
}

func (s VSPreImage) SetFee1(v uint32) {
	s.Struct.SetUint32(44, v)
}

func (s VSPreImage) Fee2() uint32 {
	return s.Struct.Uint32(48)
}

func (s VSPreImage) SetFee2(v uint32) {
	s.Struct.SetUint32(48, v)
}

func (s VSPreImage) Fee3() uint32 {
	return s.Struct.Uint32(52)
}

func (s VSPreImage) SetFee3(v uint32) {
	s.Struct.SetUint32(52, v)
}

func (s VSPreImage) Fee4() uint32 {
	return s.Struct.Uint32(56)
}

func (s VSPreImage) SetFee4(v uint32) {
	s.Struct.SetUint32(56, v)
}

func (s VSPreImage) Fee5() uint32 {
	return s.Struct.Uint32(60)
}

func (s VSPreImage) SetFee5(v uint32) {
	s.Struct.SetUint32(60, v)
}

func (s VSPreImage) Fee6() uint32 {
	return s.Struct.Uint32(64)
}

func (s VSPreImage) SetFee6(v uint32) {
	s.Struct.SetUint32(64, v)
}

func (s VSPreImage) Fee7() uint32 {
	return s.Struct.Uint32(68)
}

func (s VSPreImage) SetFee7(v uint32) {
	s.Struct.SetUint32(68, v)
}

// VSPreImage_List is a list of VSPreImage.
type VSPreImage_List struct{ capnp.List }

// NewVSPreImage creates a new list of VSPreImage.
func NewVSPreImage_List(s *capnp.Segment, sz int32) (VSPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1}, sz)
	return VSPreImage_List{l}, err
}

func (s VSPreImage_List) At(i int) VSPreImage { return VSPreImage{s.List.Struct(i)} }

func (s VSPreImage_List) Set(i int, v VSPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s VSPreImage_List) String() string {
	str, _ := text.MarshalList(0xf8c203f305398e1b, s.List)
	return str
}

// VSPreImage_Promise is a wrapper for a VSPreImage promised by a client call.
type VSPreImage_Promise struct{ *capnp.Pipeline }

func (p VSPreImage_Promise) Struct() (VSPreImage, error) {
	s, err := p.Pipeline.Struct()
	return VSPreImage{s}, err
}

type ValueStore struct{ capnp.Struct }

// ValueStore_TypeID is the unique identifier for the type ValueStore.
const ValueStore_TypeID = 0xa031328fb2fcc743

func NewValueStore(s *capnp.Segment) (ValueStore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ValueStore{st}, err
}

func NewRootValueStore(s *capnp.Segment) (ValueStore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ValueStore{st}, err
}

func ReadRootValueStore(msg *capnp.Message) (ValueStore, error) {
	root, err := msg.RootPtr()
	return ValueStore{root.Struct()}, err
}

func (s ValueStore) String() string {
	str, _ := text.Marshal(0xa031328fb2fcc743, s.Struct)
	return str
}

func (s ValueStore) VSPreImage() VSPreImage {
	if !s.HasVSPreImage() {
		s.NewVSPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1144:1248])
	return VSPreImage{Struct: ss}
}

func (s ValueStore) HasVSPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ValueStore) SetVSPreImage(v VSPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVSPreImage sets the vSPreImage field to a newly
// allocated VSPreImage struct, preferring placement in s's segment.
func (s ValueStore) NewVSPreImage() (VSPreImage, error) {
	ss, err := NewVSPreImage(s.Struct.Segment())
	if err != nil {
		return VSPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s ValueStore) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s ValueStore) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ValueStore) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// ValueStore_List is a list of ValueStore.
type ValueStore_List struct{ capnp.List }

// NewValueStore creates a new list of ValueStore.
func NewValueStore_List(s *capnp.Segment, sz int32) (ValueStore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ValueStore_List{l}, err
}

func (s ValueStore_List) At(i int) ValueStore { return ValueStore{s.List.Struct(i)} }

func (s ValueStore_List) Set(i int, v ValueStore) error { return s.List.SetStruct(i, v.Struct) }

func (s ValueStore_List) String() string {
	str, _ := text.MarshalList(0xa031328fb2fcc743, s.List)
	return str
}

// ValueStore_Promise is a wrapper for a ValueStore promised by a client call.
type ValueStore_Promise struct{ *capnp.Pipeline }

func (p ValueStore_Promise) Struct() (ValueStore, error) {
	s, err := p.Pipeline.Struct()
	return ValueStore{s}, err
}

func (p ValueStore_Promise) VSPreImage() VSPreImage_Promise {
	return VSPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1248:1352])}
}

type TXInPreImage struct{ capnp.Struct }

// TXInPreImage_TypeID is the unique identifier for the type TXInPreImage.
const TXInPreImage_TypeID = 0xbb0225ef96e5ba9f

func NewTXInPreImage(s *capnp.Segment) (TXInPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXInPreImage{st}, err
}

func NewRootTXInPreImage(s *capnp.Segment) (TXInPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXInPreImage{st}, err
}

func ReadRootTXInPreImage(msg *capnp.Message) (TXInPreImage, error) {
	root, err := msg.RootPtr()
	return TXInPreImage{root.Struct()}, err
}

func (s TXInPreImage) String() string {
	str, _ := text.Marshal(0xbb0225ef96e5ba9f, s.Struct)
	return str
}

func (s TXInPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s TXInPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s TXInPreImage) ConsumedTxIdx() uint32 {
	return s.Struct.Uint32(4)
}

func (s TXInPreImage) SetConsumedTxIdx(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s TXInPreImage) ConsumedTxHash() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s TXInPreImage) HasConsumedTxHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXInPreImage) SetConsumedTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}

// TXInPreImage_List is a list of TXInPreImage.
type TXInPreImage_List struct{ capnp.List }

// NewTXInPreImage creates a new list of TXInPreImage.
func NewTXInPreImage_List(s *capnp.Segment, sz int32) (TXInPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TXInPreImage_List{l}, err
}

func (s TXInPreImage_List) At(i int) TXInPreImage { return TXInPreImage{s.List.Struct(i)} }

func (s TXInPreImage_List) Set(i int, v TXInPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s TXInPreImage_List) String() string {
	str, _ := text.MarshalList(0xbb0225ef96e5ba9f, s.List)
	return str
}

// TXInPreImage_Promise is a wrapper for a TXInPreImage promised by a client call.
type TXInPreImage_Promise struct{ *capnp.Pipeline }

func (p TXInPreImage_Promise) Struct() (TXInPreImage, error) {
	s, err := p.Pipeline.Struct()
	return TXInPreImage{s}, err
}

type TXInLinker struct{ capnp.Struct }

// TXInLinker_TypeID is the unique identifier for the type TXInLinker.
const TXInLinker_TypeID = 0x958c34c871381d2c

func NewTXInLinker(s *capnp.Segment) (TXInLinker, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXInLinker{st}, err
}

func NewRootTXInLinker(s *capnp.Segment) (TXInLinker, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXInLinker{st}, err
}

func ReadRootTXInLinker(msg *capnp.Message) (TXInLinker, error) {
	root, err := msg.RootPtr()
	return TXInLinker{root.Struct()}, err
}

func (s TXInLinker) String() string {
	str, _ := text.Marshal(0x958c34c871381d2c, s.Struct)
	return str
}

func (s TXInLinker) TXInPreImage() TXInPreImage {
	if !s.HasTXInPreImage() {
		s.NewTXInPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1352:1392])
	return TXInPreImage{Struct: ss}
}

func (s TXInLinker) HasTXInPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXInLinker) SetTXInPreImage(v TXInPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTXInPreImage sets the tXInPreImage field to a newly
// allocated TXInPreImage struct, preferring placement in s's segment.
func (s TXInLinker) NewTXInPreImage() (TXInPreImage, error) {
	ss, err := NewTXInPreImage(s.Struct.Segment())
	if err != nil {
		return TXInPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXInLinker) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s TXInLinker) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TXInLinker) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// TXInLinker_List is a list of TXInLinker.
type TXInLinker_List struct{ capnp.List }

// NewTXInLinker creates a new list of TXInLinker.
func NewTXInLinker_List(s *capnp.Segment, sz int32) (TXInLinker_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TXInLinker_List{l}, err
}

func (s TXInLinker_List) At(i int) TXInLinker { return TXInLinker{s.List.Struct(i)} }

func (s TXInLinker_List) Set(i int, v TXInLinker) error { return s.List.SetStruct(i, v.Struct) }

func (s TXInLinker_List) String() string {
	str, _ := text.MarshalList(0x958c34c871381d2c, s.List)
	return str
}

// TXInLinker_Promise is a wrapper for a TXInLinker promised by a client call.
type TXInLinker_Promise struct{ *capnp.Pipeline }

func (p TXInLinker_Promise) Struct() (TXInLinker, error) {
	s, err := p.Pipeline.Struct()
	return TXInLinker{s}, err
}

func (p TXInLinker_Promise) TXInPreImage() TXInPreImage_Promise {
	return TXInPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1392:1432])}
}

type TXIn struct{ capnp.Struct }

// TXIn_TypeID is the unique identifier for the type TXIn.
const TXIn_TypeID = 0xb105e7dd5c44b39c

func NewTXIn(s *capnp.Segment) (TXIn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXIn{st}, err
}

func NewRootTXIn(s *capnp.Segment) (TXIn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXIn{st}, err
}

func ReadRootTXIn(msg *capnp.Message) (TXIn, error) {
	root, err := msg.RootPtr()
	return TXIn{root.Struct()}, err
}

func (s TXIn) String() string {
	str, _ := text.Marshal(0xb105e7dd5c44b39c, s.Struct)
	return str
}

func (s TXIn) TXInLinker() TXInLinker {
	if !s.HasTXInLinker() {
		s.NewTXInLinker()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1432:1496])
	return TXInLinker{Struct: ss}
}

func (s TXIn) HasTXInLinker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXIn) SetTXInLinker(v TXInLinker) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTXInLinker sets the tXInLinker field to a newly
// allocated TXInLinker struct, preferring placement in s's segment.
func (s TXIn) NewTXInLinker() (TXInLinker, error) {
	ss, err := NewTXInLinker(s.Struct.Segment())
	if err != nil {
		return TXInLinker{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXIn) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s TXIn) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TXIn) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// TXIn_List is a list of TXIn.
type TXIn_List struct{ capnp.List }

// NewTXIn creates a new list of TXIn.
func NewTXIn_List(s *capnp.Segment, sz int32) (TXIn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TXIn_List{l}, err
}

func (s TXIn_List) At(i int) TXIn { return TXIn{s.List.Struct(i)} }

func (s TXIn_List) Set(i int, v TXIn) error { return s.List.SetStruct(i, v.Struct) }

func (s TXIn_List) String() string {
	str, _ := text.MarshalList(0xb105e7dd5c44b39c, s.List)
	return str
}

// TXIn_Promise is a wrapper for a TXIn promised by a client call.
type TXIn_Promise struct{ *capnp.Pipeline }

func (p TXIn_Promise) Struct() (TXIn, error) {
	s, err := p.Pipeline.Struct()
	return TXIn{s}, err
}

func (p TXIn_Promise) TXInLinker() TXInLinker_Promise {
	return TXInLinker_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1496:1560])}
}

type TXOut struct{ capnp.Struct }
type TXOut_Which uint16

const (
	TXOut_Which_dataStore  TXOut_Which = 0
	TXOut_Which_valueStore TXOut_Which = 1
)

func (w TXOut_Which) String() string {
	const s = "dataStorevalueStore"
	switch w {
	case TXOut_Which_dataStore:
		return s[0:9]
	case TXOut_Which_valueStore:
		return s[9:19]

	}
	return "TXOut_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TXOut_TypeID is the unique identifier for the type TXOut.
const TXOut_TypeID = 0xfb4425cca53d7224

func NewTXOut(s *capnp.Segment) (TXOut, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXOut{st}, err
}

func NewRootTXOut(s *capnp.Segment) (TXOut, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXOut{st}, err
}

func ReadRootTXOut(msg *capnp.Message) (TXOut, error) {
	root, err := msg.RootPtr()
	return TXOut{root.Struct()}, err
}

func (s TXOut) String() string {
	str, _ := text.Marshal(0xfb4425cca53d7224, s.Struct)
	return str
}

func (s TXOut) Which() TXOut_Which {
	return TXOut_Which(s.Struct.Uint16(0))
}
func (s TXOut) DataStore() (DataStore, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != dataStore")
	}
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return DataStore{}, err
	}
	return DataStore{Struct: p.Struct()}, err
}

func (s TXOut) HasDataStore() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXOut) SetDataStore(v DataStore) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDataStore sets the dataStore field to a newly
// allocated DataStore struct, preferring placement in s's segment.
func (s TXOut) NewDataStore() (DataStore, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewDataStore(s.Struct.Segment())
	if err != nil {
		return DataStore{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXOut) ValueStore() (ValueStore, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != valueStore")
	}
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return ValueStore{}, err
	}
	return ValueStore{Struct: p.Struct()}, err
}

func (s TXOut) HasValueStore() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXOut) SetValueStore(v ValueStore) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValueStore sets the valueStore field to a newly
// allocated ValueStore struct, preferring placement in s's segment.
func (s TXOut) NewValueStore() (ValueStore, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewValueStore(s.Struct.Segment())
	if err != nil {
		return ValueStore{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// TXOut_List is a list of TXOut.
type TXOut_List struct{ capnp.List }

// NewTXOut creates a new list of TXOut.
func NewTXOut_List(s *capnp.Segment, sz int32) (TXOut_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TXOut_List{l}, err
}

func (s TXOut_List) At(i int) TXOut { return TXOut{s.List.Struct(i)} }

func (s TXOut_List) Set(i int, v TXOut) error { return s.List.SetStruct(i, v.Struct) }

func (s TXOut_List) String() string {
	str, _ := text.MarshalList(0xfb4425cca53d7224, s.List)
	return str
}

// TXOut_Promise is a wrapper for a TXOut promised by a client call.
type TXOut_Promise struct{ *capnp.Pipeline }

func (p TXOut_Promise) Struct() (TXOut, error) {
	s, err := p.Pipeline.Struct()
	return TXOut{s}, err
}

func (p TXOut_Promise) DataStore() DataStore_Promise {
	return DataStore_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p TXOut_Promise) ValueStore() ValueStore_Promise {
	return ValueStore_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Tx struct{ capnp.Struct }

// Tx_TypeID is the unique identifier for the type Tx.
const Tx_TypeID = 0x97ffa3012c4f6a3e

func NewTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 3})
	return Tx{st}, err
}

func NewRootTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 3})
	return Tx{st}, err
}

func ReadRootTx(msg *capnp.Message) (Tx, error) {
	root, err := msg.RootPtr()
	return Tx{root.Struct()}, err
}

func (s Tx) String() string {
	str, _ := text.Marshal(0x97ffa3012c4f6a3e, s.Struct)
	return str
}

func (s Tx) Vin() (TXIn_List, error) {
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return TXIn_List{}, err
	}
	l, err := p.ListDefault(x_b99093b7d2518300[1560:1584])
	return TXIn_List{List: l}, err
}

func (s Tx) HasVin() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Tx) SetVin(v TXIn_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVin sets the vin field to a newly
// allocated TXIn_List, preferring placement in s's segment.
func (s Tx) NewVin(n int32) (TXIn_List, error) {
	l, err := NewTXIn_List(s.Struct.Segment(), n)
	if err != nil {
		return TXIn_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Tx) Vout() (TXOut_List, error) {
	p, err := s.Struct.Ptr(1)
	if err != nil {
		return TXOut_List{}, err
	}
	l, err := p.ListDefault(x_b99093b7d2518300[1584:1608])
	return TXOut_List{List: l}, err
}

func (s Tx) HasVout() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Tx) SetVout(v TXOut_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewVout sets the vout field to a newly
// allocated TXOut_List, preferring placement in s's segment.
func (s Tx) NewVout(n int32) (TXOut_List, error) {
	l, err := NewTXOut_List(s.Struct.Segment(), n)
	if err != nil {
		return TXOut_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Tx) Fee0() uint32 {
	return s.Struct.Uint32(0)
}

func (s Tx) SetFee0(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Tx) Fee1() uint32 {
	return s.Struct.Uint32(4)
}

func (s Tx) SetFee1(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s Tx) Fee2() uint32 {
	return s.Struct.Uint32(8)
}

func (s Tx) SetFee2(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s Tx) Fee3() uint32 {
	return s.Struct.Uint32(12)
}

func (s Tx) SetFee3(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s Tx) Fee4() uint32 {
	return s.Struct.Uint32(16)
}

func (s Tx) SetFee4(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s Tx) Fee5() uint32 {
	return s.Struct.Uint32(20)
}

func (s Tx) SetFee5(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s Tx) Fee6() uint32 {
	return s.Struct.Uint32(24)
}

func (s Tx) SetFee6(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s Tx) Fee7() uint32 {
	return s.Struct.Uint32(28)
}

func (s Tx) SetFee7(v uint32) {
	s.Struct.SetUint32(28, v)
}

func (s Tx) Type() uint32 {
	return s.Struct.Uint32(32)
}

func (s Tx) SetType(v uint32) {
	s.Struct.SetUint32(32, v)
}

func (s Tx) Data() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s Tx) HasData() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Tx) SetData(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}

// Tx_List is a list of Tx.
type Tx_List struct{ capnp.List }

// NewTx creates a new list of Tx.
func NewTx_List(s *capnp.Segment, sz int32) (Tx_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 3}, sz)
	return Tx_List{l}, err
}

func (s Tx_List) At(i int) Tx { return Tx{s.List.Struct(i)} }

func (s Tx_List) Set(i int, v Tx) error { return s.List.SetStruct(i, v.Struct) }

func (s Tx_List) String() string {
	str, _ := text.MarshalList(0x97ffa3012c4f6a3e, s.List)
	return str
}

// Tx_Promise is a wrapper for a Tx promised by a client call.
type Tx_Promise struct{ *capnp.Pipeline }

func (p Tx_Promise) Struct() (Tx, error) {
	s, err := p.Pipeline.Struct()
	return Tx{s}, err
}

const schema_b99093b7d2518300 = "x\xda\xcc\x97}l[W\x19\xc6\xcfs\xae?\xae\x1d" +
	";\xb6s\xeeP%6u\xadZ\xd4\x8c\xc0\xe2\xc4i" +
	"\xd3*!\xc9\xe6J\xf5\x94j\xbe\xb5\x19\x19\xea\xa4Y" +
	"\xf5]\xeb5q\\\xe7\xbauQ\xab\x15\xb5\x95R)" +
	"\x1b\xa9\xd6B&e\xa3\x15\x0c( `0i\xebV" +
	"\xa4m\xda H\x9d4P\xabm\x88\x09\x84`\x88\"" +
	"\x04\x08!\xf1\xa5\x1a\xbd\xef\xf5g\xec~\xf0\x0fB\xaa" +
	"\xaa\xfb\xfe\xf2\xf8\xfa\xb9\xe7\xbe\xcf{\x8e\xfb_r\x8f" +
	"\xcb\xa8\xfb^\xb7\x10\xe6\x88\xdbSY\xf9p\xff\xa3\xe6" +
	"\xf2\xd2i\x11\xe9\xc1\xf5\xe3\xe6\xcf^zz\xf1\xa2[" +
	"z\x85PG\xe5\xcf\xd5)\xbe:)\x0f\x09T\xfa\xee" +
	"\x1a>\xb0\x12[8\xdb\xae\xec\xd5\xae\xa9!\x8d\xae\xa2" +
	"\x1a)?\xf5\xf8\x83}\xf8J\xe5K\xc2\xec\x81\xbb." +
	"e\xc1y\xed\x9b\xea\x02]\x0d>\xaf}]\x0aT\x16" +
	"F>|6\xf6\xf4G\x96D\xa4\xc7U\x93\x0a\x0c\x9e" +
	"\xf4\xac\x87:\xeb\xf1\x0a\x91Z\xf4hH-{$\x84" +
	"\xa8\xdc\xbd\x7f\xf8//\xff\xf2\xfe\xa5v\x0fo{~" +
	"\xad\xde'\xbd\xba\xea!\x0f\xf7\xff\xf8\xdf\xdf\xff\xc2@" +
	"\xf4\\\xbb\xf2\x94\xf7\x9a:\xeb\xa5\xab\xd3^R\xde\x93" +
	"\xbd\xfe\xad\xf1\xcf\x1c?\xb7\xca\xc1:\xbd\x07*\xaa\x93" +
	"\x83>]CjXg\x07g\xb6\x8f\xbe{\xfc\xcf\xb1" +
	"\xaf\xadR\x97\xf4\xf5P'Y}\x8c\xd4\x0b\x8e\xfa\xf7" +
	"\xbd\x9b\x9f\xfb\xd1S\x87\xbf\xb3J}A\x1f\x80\xba\xc8" +
	"\xea\x17I\xfd\x9a\xa3^\xfeA|\xf7\x07\xbfs\xbf\xd0" +
	"\xee\xf9\x87\xfa+\xea-\xd2\xab\xd7u\xf2\xfc\xe5W~" +
	"\xfb\xc5?m\x94\xaf\xd2\x0a7\xa4 \xc1\x84\xef\x9fj" +
	"\xa7\x8f\xae\x12\xbe\xef\x0aT>\xf6\xea\x93\x1f_7\xf2" +
	"\x87+$\xf5\xb7\xbe\x8c?\xfa\xae\xa9\x7f\x90t\xf0o" +
	"\xbew]\x02\x95\x8f>\xb5\xd5\xfdW\xed\x8d\xbf\x93\xd6" +
	"\xd7z\xdbh\xe8\x9a\x1a\x0d\x91vk\xe8^\xd2n(" +
	"\x8e>\x7fyc\xfc_-\x16\xb6\xc3+\x85P\xcf\xa8" +
	"7\xd4yE\x1f{V\x91\xdduW/-\xee\\y" +
	"\xae\xb2j\x19`\xac\x87\x8a\x18\xb4\x0c\x01CCj\x8d" +
	"\xc1\xcb\x90)\x14\xa6s{2\xb6\xcc\xcd\xe6?\xb9'" +
	"S\xc8\x17\xb6\xc5S\x93\xb9\xfc~\xcd*&\x01S\xd7" +
	"\\B\xb8\x00Dz?+\x84\xb9I\x83\x19\x93\x88\x00" +
	"\x06\x08\x1e\xd8&\x849\xad\xc1,KT\xb2\xa9d\xd1" +
	"J\xccd\x84\xb6\xd7B\xb8\xb1\x18\x02\x08\x0b\x91\xf4k" +
	"\xc2\x17\xf1\xf9\x9d\x7fB\x8e\xd9\xe5\x1d\x99\xb9}\x08\x0a" +
	"\x89\xa0\x10\x11\xf8;\xdbIO%\xf2\x93\xb9P~\x7f" +
	"\x9b\xa1\xc7;\x18\x1a%C\xc3\x1a\xcc\xb8D\xc5\x9eJ" +
	"\xe4\xc9\x92\x08\xcdd\xd8R\xfdUV-\x01\xd5/\xbe" +
	"\xa9\x19\xd4\xcc\x84\x0a\xdb\xd2e2\xd1_3\xa1&\xb0" +
	"^\x88\xd4\x084\xa4\xa6\xd0\xf0\xa1\x1e\xc6=B\xa4\xd2" +
	"\xc4\x0b\x90\x804\xe8\x7fu\x80\xf14\xe12\xc95\x18" +
	"\xd0\x00Ub^ ~\x84\xb8K\x1ap\x01\xea0s" +
	"\x9b\xf81\xe2n\xcd\x80\x1bPG\x99\x97\x89\x9f \xee" +
	"q\x19\xf0\x00\xea\xf3\xcc\x8f\x10\x9f'\xeeu\x1b\xf0\x02" +
	"\xea$\xf3c\xc4\x17\x88\xeb\x1e\x03:\xa0N1?A" +
	"|\x91\xb8\xcfk\xc0\x07\xa8'\x99\xcf\x13?C\xdc\xaf" +
	"\x1b\xf0\x03\xea4\xf3\x05\xe2K\xc4\xbb\xa4\x81.@\x9d" +
	"e\xbeH|\x19\x12\xde\x83\xb9<\xba\x05\x92\x1a\x10n" +
	"DM\x00\xdd\xb4\xb8\xdeq\x19:8[\xb2\x1b\x92z" +
	"\x83\xd7%I \xf4\x98e\xf5C\x17\x12\xba\xe0\"\xda" +
	"\\\x0c4\x17\x83\xcdE\xac\xb9\x18j.67\x17[" +
	"\xea\x85}\xb8`\xd5\x8bl\xc6\xcet\xee\x03\xad\xd1\x94" +
	"Y\xeb\xb1Li\xda\x8e;\x1d\xef\xcd\xec\xb5\x92\xc0\xad" +
	"{\xbec\xdc2v&e{g\x8b\xd6\xaa\xf6~\xa0" +
	"C{\x1f\xdd%\x84yD\x839\xcfy\xa3\xa0ZE" +
	"!\x04\xc2\x8d\xcd\xc5\xf9\xeaqi\xba\xfcZd\xc2\xdf" +
	"l@\xab\xcc\xe5\xf6\xe63v\xa9(`\xdd2y\x0f" +
	"e\xa6KV*d\xb7[\xeb4\x0a\x1e\xa1\xe4Mi" +
	"0\xb3\x12\x95\x83\xad\xa3\xa0>\xeb\xaa\xcb\xe2\x83\xd0o" +
	"\x9d\xbbN\xeb\xcdO\x8c\xa2\xb3\xda\xb7\xf7\xc87\xbe\xdd" +
	"C\xab_\xdf\x0d}\xde\xe4&ig\xc8\xacM\xcc\xd4" +
	"os\xc31\xd3>R\xc6\x9c\x01w\x1b\xeb\x9b\xa0W" +
	"\xbfC\x83\x99\xaeN6Z\x0a\xa1YE\x84\x1b\xc7\x85" +
	"\xc6B\x00\x91\xa0\xdf\xf9Z\xfcWo\xddy\x9e1\xab" +
	"\xf6<f\xa0\xeek\xfb}B\x98\xe3\x1a\xcc\xc9f_" +
	"\xc5\x86\xaf\xea\x98\x8b\x98\x9f\x13\xc2Lj0wK<" +
	"\xb1g_&\x97O\xc4k\x01\xab\xec\x99\xcd\xcf\x95f" +
	"\xac\xacX\x9b.'\xb2\xe5v>\x96\xbe\xbd\x9d\xc1I" +
	"_\xa8\xe6s\xaa>\x94\x1f\x96\xf7\xd1\xf0\x95\x1aR\x8f" +
	"J\x89\xdaL~D\x0e\x08\x91\x9a\"\x9c\x95\x12\x11\x09" +
	"g([\xf2\x01!RY\xe2\x05\xe2\x1e\xe9\x0c\xe5\x19" +
	"\xbe\xcd>\xe2\xb6\xac\x0ek\x1a\xca\x07\x98O\x13/\x13" +
	"wU\x87\xf2a\xbeO\x99\xf8\x09\xe2nY\x1d\xca\xfc" +
	"\xbdG\x88\xcf\x13\xf7\xba\x9c\xa1|\x8a\xf5\xf3\xc4\xcf\x10" +
	"\xd7\xdd\xceP>\xcd|\x91\xf82q\x9f\xc7\x19\xca\xcf" +
	"0_\"\xfeU\xe2~\xaf3\x94\xcf3?G\xfc\xdb" +
	"\xc4\xbbtg(_`\xfe\x0d\xe2/\x12\x0f\xf8\x0c\x04" +
	"\x00\xf5\x02\xf3\xef\x11\xbfD<\xe87\x10\x04\xd4E\xe6" +
	"/\x13\x7f\x93xw\x97\x81n@\xbd.i\xb8_\"" +
	"\xbeB<\x140\x10\x02\xd4[\xcc_#~\x99x8" +
	"h \x0c\xa8\x9f0\x7f\x93\xf8;\xc4#\xdd\x06\xb5\x8b" +
	"z\x9b\xf9\x0a\xf1+\xc4{B\x06z\x00\xf5S\xe6\x97" +
	"\x89\xbfG\\\x85\x0d(@]e\xfe\x0e\xf1_\x107" +
	"\"\x06\xbdI\xf5>\xf3+\xc4\x7fE\xfc\x8e\x1e\x03w" +
	"\x00\xea\x03\xe6\xef\x11\xff\x8dlo\xbc\xb5\xb9|\xd6*" +
	"\xb7vUnn\xaede'l\x1a\xa1U\xd9\x13Y" +
	"\xab0;\x97\xb3\xebu1s(\xde\xb6'\xd8S\x0f" +
	"\x96\xecD\xb6\xdc\xf4\xc1\xb5\xb3\x87\xf2V\xb1UV\xbd" +
	"W\xb4IVc\x03\x1d\xd8`\x07\x16\xeb\xc0\x86:\xb0" +
	"\xcd\x1d\xd8\x96&\xf6\xbf\xdaM;\xee$\xadI\x9d\xac" +
	"'\xd5MQ\xdaEo,PK\x18a\x1f'\xc6E" +
	"<L\xbcv|\x0ar\x87\x06\x88\xaf\x91\xce\xb8\xa1\xa0" +
	"\xde\xc1\xf20\xe1;k\x81\xa4\xa0\xde%\xb7\x09\x91Z" +
	"C|\x03\x07\xd2\xe5\x04u\x1d\xf3;\x89o\xe2\xc0\xbb" +
	"\x9d\xa0nd~7\xf1>\x0e\xaa\xc7\x09j/\xf3\x0d" +
	"\xc4\xfb9\xa8^'\xa8\x9f`\xbe\x89x\x8c\x83\xaa;" +
	"A\x8d2\xef#>\xccA\xf59A\x1db\xdeO|" +
	"\x84\x83\xeaw\x82\xba\x95\x1b7F|\x9c\x83\xda\xe5\x04" +
	"u\x94\xf90\xf18\x075\xe0\x04u\x82\xf9\x08\xf1\x1d" +
	"\x1c\xd4\xa0\x13\xd4\xed\xcc\xc7\x89OrP\xbb\x9d\xa0&" +
	"\x98\xc7\x89'9\xa8!'\xa8;\x99\xef \x9e\xe6\xa0" +
	"\x86\x9d\xa0\x9a\xcc'\x89OqP#NP?\xcd<" +
	"I|w\xa7\x80\x1d\xa4\x03C\xbd\x0fn/\"c\xfc" +
	"\xa1z/:\xe5@k9\xd8Z\xc6Z\xcb\xa1\xd6r" +
	"sk\xb9\xe5\xff\xa1\xff\xd3\xb4\x14\xa2\xba\xc9\x07*\x15" +
	"\x17\x1d\x08zw5v\xf9 \xaeW\x0c>&Di" +
	"\xef\xef\xd7`\x8e\xd0\x09\x8f\xcf\x86\xb3\xbco\x87\x1b?" +
	"\xc8y\x97G\x85\x9f/e\xcf\x0a\xadH\x7f\xae\xff\x0a" +
	"\xaf\xfe\xf9\xe6G\x96\xc9\\\xde\xeb\xfc\xa4\xba\xf5\xf9\xe1" +
	"?\x01\x00\x00\xff\xff\x12\xf4R\x16"

func init() {
	schemas.Register(schema_b99093b7d2518300,
		0x91989c51606be6c8,
		0x958c34c871381d2c,
		0x97ffa3012c4f6a3e,
		0x981693349de63c8c,
		0x9843dfb8f1386b20,
		0xa031328fb2fcc743,
		0xa0835740abfe642a,
		0xa634f083d73d4594,
		0xae798ec69e3629e9,
		0xb105e7dd5c44b39c,
		0xbb0225ef96e5ba9f,
		0xd4eb3c212b8dbb26,
		0xf8c203f305398e1b,
		0xfb4425cca53d7224,
		0xff9ec84d90bcd521)
}

var x_b99093b7d2518300 = []byte{
	0, 0, 0, 0, 17, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 10, 0, 3, 0,
	65, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 12, 0, 0, 0,
	0, 0, 0, 0, 9, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 1, 0, 1, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 17, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 17, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 10, 0, 3, 0,
	65, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 10, 0, 3, 0,
	65, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 12, 0, 0, 0,
	0, 0, 0, 0, 9, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 12, 0, 0, 0,
	0, 0, 0, 0, 9, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 1, 0, 1, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 1, 0, 1, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 0, 0,
	1, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 2, 0, 0, 0,
	1, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
}
