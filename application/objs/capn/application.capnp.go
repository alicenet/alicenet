// Code generated by capnpc-go. DO NOT EDIT.

package capn

import (
	capnp "github.com/MadBase/go-capnproto2/v2"
	text "github.com/MadBase/go-capnproto2/v2/encoding/text"
	schemas "github.com/MadBase/go-capnproto2/v2/schemas"
	strconv "strconv"
)

// Constants defined in application.capnp.
var (
	DefaultDSPreImage   = DSPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[0:144]).Struct()}
	DefaultDSLinker     = DSLinker{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[144:312]).Struct()}
	DefaultVSPreImage   = VSPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[312:416]).Struct()}
	DefaultTXInPreImage = TXInPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[416:456]).Struct()}
	DefaultTXInLinker   = TXInLinker{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[456:520]).Struct()}
)

func init() {
	// Set traversal limit for constants as Uint64Max since they're safe from amplification attacks.
	DefaultDSPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultDSLinker.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultVSPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultTXInPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultTXInLinker.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
}

type DSPreImage struct{ capnp.Struct }

// DSPreImage_TypeID is the unique identifier for the type DSPreImage.
const DSPreImage_TypeID = 0xd4eb3c212b8dbb26

func NewDSPreImage(s *capnp.Segment) (DSPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 3})
	return DSPreImage{st}, err
}

func NewRootDSPreImage(s *capnp.Segment) (DSPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 3})
	return DSPreImage{st}, err
}

func ReadRootDSPreImage(msg *capnp.Message) (DSPreImage, error) {
	root, err := msg.RootPtr()
	return DSPreImage{root.Struct()}, err
}

func (s DSPreImage) String() string {
	str, _ := text.Marshal(0xd4eb3c212b8dbb26, s.Struct)
	return str
}

func (s DSPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s DSPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s DSPreImage) Index() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSPreImage) HasIndex() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DSPreImage) SetIndex(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s DSPreImage) IssuedAt() uint32 {
	return s.Struct.Uint32(4)
}

func (s DSPreImage) SetIssuedAt(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s DSPreImage) RawData() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSPreImage) HasRawData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DSPreImage) SetRawData(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s DSPreImage) TXOutIdx() uint32 {
	return s.Struct.Uint32(12)
}

func (s DSPreImage) SetTXOutIdx(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s DSPreImage) Owner() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSPreImage) HasOwner() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s DSPreImage) SetOwner(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}
func (s DSPreImage) Deposit() uint32 {
	return s.Struct.Uint32(8)
}

func (s DSPreImage) SetDeposit(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s DSPreImage) Deposit1() uint32 {
	return s.Struct.Uint32(16)
}

func (s DSPreImage) SetDeposit1(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s DSPreImage) Deposit2() uint32 {
	return s.Struct.Uint32(20)
}

func (s DSPreImage) SetDeposit2(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s DSPreImage) Deposit3() uint32 {
	return s.Struct.Uint32(24)
}

func (s DSPreImage) SetDeposit3(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s DSPreImage) Deposit4() uint32 {
	return s.Struct.Uint32(28)
}

func (s DSPreImage) SetDeposit4(v uint32) {
	s.Struct.SetUint32(28, v)
}

func (s DSPreImage) Deposit5() uint32 {
	return s.Struct.Uint32(32)
}

func (s DSPreImage) SetDeposit5(v uint32) {
	s.Struct.SetUint32(32, v)
}

func (s DSPreImage) Deposit6() uint32 {
	return s.Struct.Uint32(36)
}

func (s DSPreImage) SetDeposit6(v uint32) {
	s.Struct.SetUint32(36, v)
}

func (s DSPreImage) Deposit7() uint32 {
	return s.Struct.Uint32(40)
}

func (s DSPreImage) SetDeposit7(v uint32) {
	s.Struct.SetUint32(40, v)
}

func (s DSPreImage) Fee0() uint32 {
	return s.Struct.Uint32(44)
}

func (s DSPreImage) SetFee0(v uint32) {
	s.Struct.SetUint32(44, v)
}

func (s DSPreImage) Fee1() uint32 {
	return s.Struct.Uint32(48)
}

func (s DSPreImage) SetFee1(v uint32) {
	s.Struct.SetUint32(48, v)
}

func (s DSPreImage) Fee2() uint32 {
	return s.Struct.Uint32(52)
}

func (s DSPreImage) SetFee2(v uint32) {
	s.Struct.SetUint32(52, v)
}

func (s DSPreImage) Fee3() uint32 {
	return s.Struct.Uint32(56)
}

func (s DSPreImage) SetFee3(v uint32) {
	s.Struct.SetUint32(56, v)
}

func (s DSPreImage) Fee4() uint32 {
	return s.Struct.Uint32(60)
}

func (s DSPreImage) SetFee4(v uint32) {
	s.Struct.SetUint32(60, v)
}

func (s DSPreImage) Fee5() uint32 {
	return s.Struct.Uint32(64)
}

func (s DSPreImage) SetFee5(v uint32) {
	s.Struct.SetUint32(64, v)
}

func (s DSPreImage) Fee6() uint32 {
	return s.Struct.Uint32(68)
}

func (s DSPreImage) SetFee6(v uint32) {
	s.Struct.SetUint32(68, v)
}

func (s DSPreImage) Fee7() uint32 {
	return s.Struct.Uint32(72)
}

func (s DSPreImage) SetFee7(v uint32) {
	s.Struct.SetUint32(72, v)
}

// DSPreImage_List is a list of DSPreImage.
type DSPreImage_List struct{ capnp.List }

// NewDSPreImage creates a new list of DSPreImage.
func NewDSPreImage_List(s *capnp.Segment, sz int32) (DSPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 3}, sz)
	return DSPreImage_List{l}, err
}

func (s DSPreImage_List) At(i int) DSPreImage { return DSPreImage{s.List.Struct(i)} }

func (s DSPreImage_List) Set(i int, v DSPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s DSPreImage_List) String() string {
	str, _ := text.MarshalList(0xd4eb3c212b8dbb26, s.List)
	return str
}

// DSPreImage_Promise is a wrapper for a DSPreImage promised by a client call.
type DSPreImage_Promise struct{ *capnp.Pipeline }

func (p DSPreImage_Promise) Struct() (DSPreImage, error) {
	s, err := p.Pipeline.Struct()
	return DSPreImage{s}, err
}

type DSLinker struct{ capnp.Struct }

// DSLinker_TypeID is the unique identifier for the type DSLinker.
const DSLinker_TypeID = 0x91989c51606be6c8

func NewDSLinker(s *capnp.Segment) (DSLinker, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DSLinker{st}, err
}

func NewRootDSLinker(s *capnp.Segment) (DSLinker, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DSLinker{st}, err
}

func ReadRootDSLinker(msg *capnp.Message) (DSLinker, error) {
	root, err := msg.RootPtr()
	return DSLinker{root.Struct()}, err
}

func (s DSLinker) String() string {
	str, _ := text.Marshal(0x91989c51606be6c8, s.Struct)
	return str
}

func (s DSLinker) DSPreImage() DSPreImage {
	if !s.HasDSPreImage() {
		s.NewDSPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[520:664])
	return DSPreImage{Struct: ss}
}

func (s DSLinker) HasDSPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DSLinker) SetDSPreImage(v DSPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDSPreImage sets the dSPreImage field to a newly
// allocated DSPreImage struct, preferring placement in s's segment.
func (s DSLinker) NewDSPreImage() (DSPreImage, error) {
	ss, err := NewDSPreImage(s.Struct.Segment())
	if err != nil {
		return DSPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s DSLinker) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSLinker) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DSLinker) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// DSLinker_List is a list of DSLinker.
type DSLinker_List struct{ capnp.List }

// NewDSLinker creates a new list of DSLinker.
func NewDSLinker_List(s *capnp.Segment, sz int32) (DSLinker_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DSLinker_List{l}, err
}

func (s DSLinker_List) At(i int) DSLinker { return DSLinker{s.List.Struct(i)} }

func (s DSLinker_List) Set(i int, v DSLinker) error { return s.List.SetStruct(i, v.Struct) }

func (s DSLinker_List) String() string {
	str, _ := text.MarshalList(0x91989c51606be6c8, s.List)
	return str
}

// DSLinker_Promise is a wrapper for a DSLinker promised by a client call.
type DSLinker_Promise struct{ *capnp.Pipeline }

func (p DSLinker_Promise) Struct() (DSLinker, error) {
	s, err := p.Pipeline.Struct()
	return DSLinker{s}, err
}

func (p DSLinker_Promise) DSPreImage() DSPreImage_Promise {
	return DSPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[664:808])}
}

type DataStore struct{ capnp.Struct }

// DataStore_TypeID is the unique identifier for the type DataStore.
const DataStore_TypeID = 0x9843dfb8f1386b20

func NewDataStore(s *capnp.Segment) (DataStore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataStore{st}, err
}

func NewRootDataStore(s *capnp.Segment) (DataStore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataStore{st}, err
}

func ReadRootDataStore(msg *capnp.Message) (DataStore, error) {
	root, err := msg.RootPtr()
	return DataStore{root.Struct()}, err
}

func (s DataStore) String() string {
	str, _ := text.Marshal(0x9843dfb8f1386b20, s.Struct)
	return str
}

func (s DataStore) DSLinker() DSLinker {
	if !s.HasDSLinker() {
		s.NewDSLinker()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[808:976])
	return DSLinker{Struct: ss}
}

func (s DataStore) HasDSLinker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DataStore) SetDSLinker(v DSLinker) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDSLinker sets the dSLinker field to a newly
// allocated DSLinker struct, preferring placement in s's segment.
func (s DataStore) NewDSLinker() (DSLinker, error) {
	ss, err := NewDSLinker(s.Struct.Segment())
	if err != nil {
		return DSLinker{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s DataStore) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DataStore) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DataStore) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// DataStore_List is a list of DataStore.
type DataStore_List struct{ capnp.List }

// NewDataStore creates a new list of DataStore.
func NewDataStore_List(s *capnp.Segment, sz int32) (DataStore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DataStore_List{l}, err
}

func (s DataStore_List) At(i int) DataStore { return DataStore{s.List.Struct(i)} }

func (s DataStore_List) Set(i int, v DataStore) error { return s.List.SetStruct(i, v.Struct) }

func (s DataStore_List) String() string {
	str, _ := text.MarshalList(0x9843dfb8f1386b20, s.List)
	return str
}

// DataStore_Promise is a wrapper for a DataStore promised by a client call.
type DataStore_Promise struct{ *capnp.Pipeline }

func (p DataStore_Promise) Struct() (DataStore, error) {
	s, err := p.Pipeline.Struct()
	return DataStore{s}, err
}

func (p DataStore_Promise) DSLinker() DSLinker_Promise {
	return DSLinker_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[976:1144])}
}

type VSPreImage struct{ capnp.Struct }

// VSPreImage_TypeID is the unique identifier for the type VSPreImage.
const VSPreImage_TypeID = 0xf8c203f305398e1b

func NewVSPreImage(s *capnp.Segment) (VSPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return VSPreImage{st}, err
}

func NewRootVSPreImage(s *capnp.Segment) (VSPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return VSPreImage{st}, err
}

func ReadRootVSPreImage(msg *capnp.Message) (VSPreImage, error) {
	root, err := msg.RootPtr()
	return VSPreImage{root.Struct()}, err
}

func (s VSPreImage) String() string {
	str, _ := text.Marshal(0xf8c203f305398e1b, s.Struct)
	return str
}

func (s VSPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s VSPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s VSPreImage) TXOutIdx() uint32 {
	return s.Struct.Uint32(8)
}

func (s VSPreImage) SetTXOutIdx(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s VSPreImage) Owner() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s VSPreImage) HasOwner() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VSPreImage) SetOwner(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s VSPreImage) Value() uint32 {
	return s.Struct.Uint32(4)
}

func (s VSPreImage) SetValue(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s VSPreImage) Value1() uint32 {
	return s.Struct.Uint32(12)
}

func (s VSPreImage) SetValue1(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s VSPreImage) Value2() uint32 {
	return s.Struct.Uint32(16)
}

func (s VSPreImage) SetValue2(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s VSPreImage) Value3() uint32 {
	return s.Struct.Uint32(20)
}

func (s VSPreImage) SetValue3(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s VSPreImage) Value4() uint32 {
	return s.Struct.Uint32(24)
}

func (s VSPreImage) SetValue4(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s VSPreImage) Value5() uint32 {
	return s.Struct.Uint32(28)
}

func (s VSPreImage) SetValue5(v uint32) {
	s.Struct.SetUint32(28, v)
}

func (s VSPreImage) Value6() uint32 {
	return s.Struct.Uint32(32)
}

func (s VSPreImage) SetValue6(v uint32) {
	s.Struct.SetUint32(32, v)
}

func (s VSPreImage) Value7() uint32 {
	return s.Struct.Uint32(36)
}

func (s VSPreImage) SetValue7(v uint32) {
	s.Struct.SetUint32(36, v)
}

func (s VSPreImage) Fee0() uint32 {
	return s.Struct.Uint32(40)
}

func (s VSPreImage) SetFee0(v uint32) {
	s.Struct.SetUint32(40, v)
}

func (s VSPreImage) Fee1() uint32 {
	return s.Struct.Uint32(44)
}

func (s VSPreImage) SetFee1(v uint32) {
	s.Struct.SetUint32(44, v)
}

func (s VSPreImage) Fee2() uint32 {
	return s.Struct.Uint32(48)
}

func (s VSPreImage) SetFee2(v uint32) {
	s.Struct.SetUint32(48, v)
}

func (s VSPreImage) Fee3() uint32 {
	return s.Struct.Uint32(52)
}

func (s VSPreImage) SetFee3(v uint32) {
	s.Struct.SetUint32(52, v)
}

func (s VSPreImage) Fee4() uint32 {
	return s.Struct.Uint32(56)
}

func (s VSPreImage) SetFee4(v uint32) {
	s.Struct.SetUint32(56, v)
}

func (s VSPreImage) Fee5() uint32 {
	return s.Struct.Uint32(60)
}

func (s VSPreImage) SetFee5(v uint32) {
	s.Struct.SetUint32(60, v)
}

func (s VSPreImage) Fee6() uint32 {
	return s.Struct.Uint32(64)
}

func (s VSPreImage) SetFee6(v uint32) {
	s.Struct.SetUint32(64, v)
}

func (s VSPreImage) Fee7() uint32 {
	return s.Struct.Uint32(68)
}

func (s VSPreImage) SetFee7(v uint32) {
	s.Struct.SetUint32(68, v)
}

// VSPreImage_List is a list of VSPreImage.
type VSPreImage_List struct{ capnp.List }

// NewVSPreImage creates a new list of VSPreImage.
func NewVSPreImage_List(s *capnp.Segment, sz int32) (VSPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1}, sz)
	return VSPreImage_List{l}, err
}

func (s VSPreImage_List) At(i int) VSPreImage { return VSPreImage{s.List.Struct(i)} }

func (s VSPreImage_List) Set(i int, v VSPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s VSPreImage_List) String() string {
	str, _ := text.MarshalList(0xf8c203f305398e1b, s.List)
	return str
}

// VSPreImage_Promise is a wrapper for a VSPreImage promised by a client call.
type VSPreImage_Promise struct{ *capnp.Pipeline }

func (p VSPreImage_Promise) Struct() (VSPreImage, error) {
	s, err := p.Pipeline.Struct()
	return VSPreImage{s}, err
}

type ValueStore struct{ capnp.Struct }

// ValueStore_TypeID is the unique identifier for the type ValueStore.
const ValueStore_TypeID = 0xa031328fb2fcc743

func NewValueStore(s *capnp.Segment) (ValueStore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ValueStore{st}, err
}

func NewRootValueStore(s *capnp.Segment) (ValueStore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ValueStore{st}, err
}

func ReadRootValueStore(msg *capnp.Message) (ValueStore, error) {
	root, err := msg.RootPtr()
	return ValueStore{root.Struct()}, err
}

func (s ValueStore) String() string {
	str, _ := text.Marshal(0xa031328fb2fcc743, s.Struct)
	return str
}

func (s ValueStore) VSPreImage() VSPreImage {
	if !s.HasVSPreImage() {
		s.NewVSPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1144:1248])
	return VSPreImage{Struct: ss}
}

func (s ValueStore) HasVSPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ValueStore) SetVSPreImage(v VSPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVSPreImage sets the vSPreImage field to a newly
// allocated VSPreImage struct, preferring placement in s's segment.
func (s ValueStore) NewVSPreImage() (VSPreImage, error) {
	ss, err := NewVSPreImage(s.Struct.Segment())
	if err != nil {
		return VSPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s ValueStore) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s ValueStore) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ValueStore) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// ValueStore_List is a list of ValueStore.
type ValueStore_List struct{ capnp.List }

// NewValueStore creates a new list of ValueStore.
func NewValueStore_List(s *capnp.Segment, sz int32) (ValueStore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ValueStore_List{l}, err
}

func (s ValueStore_List) At(i int) ValueStore { return ValueStore{s.List.Struct(i)} }

func (s ValueStore_List) Set(i int, v ValueStore) error { return s.List.SetStruct(i, v.Struct) }

func (s ValueStore_List) String() string {
	str, _ := text.MarshalList(0xa031328fb2fcc743, s.List)
	return str
}

// ValueStore_Promise is a wrapper for a ValueStore promised by a client call.
type ValueStore_Promise struct{ *capnp.Pipeline }

func (p ValueStore_Promise) Struct() (ValueStore, error) {
	s, err := p.Pipeline.Struct()
	return ValueStore{s}, err
}

func (p ValueStore_Promise) VSPreImage() VSPreImage_Promise {
	return VSPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1248:1352])}
}

type TXInPreImage struct{ capnp.Struct }

// TXInPreImage_TypeID is the unique identifier for the type TXInPreImage.
const TXInPreImage_TypeID = 0xbb0225ef96e5ba9f

func NewTXInPreImage(s *capnp.Segment) (TXInPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXInPreImage{st}, err
}

func NewRootTXInPreImage(s *capnp.Segment) (TXInPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXInPreImage{st}, err
}

func ReadRootTXInPreImage(msg *capnp.Message) (TXInPreImage, error) {
	root, err := msg.RootPtr()
	return TXInPreImage{root.Struct()}, err
}

func (s TXInPreImage) String() string {
	str, _ := text.Marshal(0xbb0225ef96e5ba9f, s.Struct)
	return str
}

func (s TXInPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s TXInPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s TXInPreImage) ConsumedTxIdx() uint32 {
	return s.Struct.Uint32(4)
}

func (s TXInPreImage) SetConsumedTxIdx(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s TXInPreImage) ConsumedTxHash() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s TXInPreImage) HasConsumedTxHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXInPreImage) SetConsumedTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}

// TXInPreImage_List is a list of TXInPreImage.
type TXInPreImage_List struct{ capnp.List }

// NewTXInPreImage creates a new list of TXInPreImage.
func NewTXInPreImage_List(s *capnp.Segment, sz int32) (TXInPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TXInPreImage_List{l}, err
}

func (s TXInPreImage_List) At(i int) TXInPreImage { return TXInPreImage{s.List.Struct(i)} }

func (s TXInPreImage_List) Set(i int, v TXInPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s TXInPreImage_List) String() string {
	str, _ := text.MarshalList(0xbb0225ef96e5ba9f, s.List)
	return str
}

// TXInPreImage_Promise is a wrapper for a TXInPreImage promised by a client call.
type TXInPreImage_Promise struct{ *capnp.Pipeline }

func (p TXInPreImage_Promise) Struct() (TXInPreImage, error) {
	s, err := p.Pipeline.Struct()
	return TXInPreImage{s}, err
}

type TXInLinker struct{ capnp.Struct }

// TXInLinker_TypeID is the unique identifier for the type TXInLinker.
const TXInLinker_TypeID = 0x958c34c871381d2c

func NewTXInLinker(s *capnp.Segment) (TXInLinker, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXInLinker{st}, err
}

func NewRootTXInLinker(s *capnp.Segment) (TXInLinker, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXInLinker{st}, err
}

func ReadRootTXInLinker(msg *capnp.Message) (TXInLinker, error) {
	root, err := msg.RootPtr()
	return TXInLinker{root.Struct()}, err
}

func (s TXInLinker) String() string {
	str, _ := text.Marshal(0x958c34c871381d2c, s.Struct)
	return str
}

func (s TXInLinker) TXInPreImage() TXInPreImage {
	if !s.HasTXInPreImage() {
		s.NewTXInPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1352:1392])
	return TXInPreImage{Struct: ss}
}

func (s TXInLinker) HasTXInPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXInLinker) SetTXInPreImage(v TXInPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTXInPreImage sets the tXInPreImage field to a newly
// allocated TXInPreImage struct, preferring placement in s's segment.
func (s TXInLinker) NewTXInPreImage() (TXInPreImage, error) {
	ss, err := NewTXInPreImage(s.Struct.Segment())
	if err != nil {
		return TXInPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXInLinker) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s TXInLinker) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TXInLinker) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// TXInLinker_List is a list of TXInLinker.
type TXInLinker_List struct{ capnp.List }

// NewTXInLinker creates a new list of TXInLinker.
func NewTXInLinker_List(s *capnp.Segment, sz int32) (TXInLinker_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TXInLinker_List{l}, err
}

func (s TXInLinker_List) At(i int) TXInLinker { return TXInLinker{s.List.Struct(i)} }

func (s TXInLinker_List) Set(i int, v TXInLinker) error { return s.List.SetStruct(i, v.Struct) }

func (s TXInLinker_List) String() string {
	str, _ := text.MarshalList(0x958c34c871381d2c, s.List)
	return str
}

// TXInLinker_Promise is a wrapper for a TXInLinker promised by a client call.
type TXInLinker_Promise struct{ *capnp.Pipeline }

func (p TXInLinker_Promise) Struct() (TXInLinker, error) {
	s, err := p.Pipeline.Struct()
	return TXInLinker{s}, err
}

func (p TXInLinker_Promise) TXInPreImage() TXInPreImage_Promise {
	return TXInPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1392:1432])}
}

type TXIn struct{ capnp.Struct }

// TXIn_TypeID is the unique identifier for the type TXIn.
const TXIn_TypeID = 0xb105e7dd5c44b39c

func NewTXIn(s *capnp.Segment) (TXIn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXIn{st}, err
}

func NewRootTXIn(s *capnp.Segment) (TXIn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXIn{st}, err
}

func ReadRootTXIn(msg *capnp.Message) (TXIn, error) {
	root, err := msg.RootPtr()
	return TXIn{root.Struct()}, err
}

func (s TXIn) String() string {
	str, _ := text.Marshal(0xb105e7dd5c44b39c, s.Struct)
	return str
}

func (s TXIn) TXInLinker() TXInLinker {
	if !s.HasTXInLinker() {
		s.NewTXInLinker()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1432:1496])
	return TXInLinker{Struct: ss}
}

func (s TXIn) HasTXInLinker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXIn) SetTXInLinker(v TXInLinker) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTXInLinker sets the tXInLinker field to a newly
// allocated TXInLinker struct, preferring placement in s's segment.
func (s TXIn) NewTXInLinker() (TXInLinker, error) {
	ss, err := NewTXInLinker(s.Struct.Segment())
	if err != nil {
		return TXInLinker{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXIn) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s TXIn) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TXIn) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// TXIn_List is a list of TXIn.
type TXIn_List struct{ capnp.List }

// NewTXIn creates a new list of TXIn.
func NewTXIn_List(s *capnp.Segment, sz int32) (TXIn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TXIn_List{l}, err
}

func (s TXIn_List) At(i int) TXIn { return TXIn{s.List.Struct(i)} }

func (s TXIn_List) Set(i int, v TXIn) error { return s.List.SetStruct(i, v.Struct) }

func (s TXIn_List) String() string {
	str, _ := text.MarshalList(0xb105e7dd5c44b39c, s.List)
	return str
}

// TXIn_Promise is a wrapper for a TXIn promised by a client call.
type TXIn_Promise struct{ *capnp.Pipeline }

func (p TXIn_Promise) Struct() (TXIn, error) {
	s, err := p.Pipeline.Struct()
	return TXIn{s}, err
}

func (p TXIn_Promise) TXInLinker() TXInLinker_Promise {
	return TXInLinker_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1496:1560])}
}

type TXOut struct{ capnp.Struct }
type TXOut_Which uint16

const (
	TXOut_Which_dataStore  TXOut_Which = 0
	TXOut_Which_valueStore TXOut_Which = 1
)

func (w TXOut_Which) String() string {
	const s = "dataStorevalueStore"
	switch w {
	case TXOut_Which_dataStore:
		return s[0:9]
	case TXOut_Which_valueStore:
		return s[9:19]

	}
	return "TXOut_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TXOut_TypeID is the unique identifier for the type TXOut.
const TXOut_TypeID = 0xfb4425cca53d7224

func NewTXOut(s *capnp.Segment) (TXOut, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXOut{st}, err
}

func NewRootTXOut(s *capnp.Segment) (TXOut, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXOut{st}, err
}

func ReadRootTXOut(msg *capnp.Message) (TXOut, error) {
	root, err := msg.RootPtr()
	return TXOut{root.Struct()}, err
}

func (s TXOut) String() string {
	str, _ := text.Marshal(0xfb4425cca53d7224, s.Struct)
	return str
}

func (s TXOut) Which() TXOut_Which {
	return TXOut_Which(s.Struct.Uint16(0))
}
func (s TXOut) DataStore() (DataStore, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != dataStore")
	}
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return DataStore{}, err
	}
	return DataStore{Struct: p.Struct()}, err
}

func (s TXOut) HasDataStore() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXOut) SetDataStore(v DataStore) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDataStore sets the dataStore field to a newly
// allocated DataStore struct, preferring placement in s's segment.
func (s TXOut) NewDataStore() (DataStore, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewDataStore(s.Struct.Segment())
	if err != nil {
		return DataStore{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXOut) ValueStore() (ValueStore, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != valueStore")
	}
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return ValueStore{}, err
	}
	return ValueStore{Struct: p.Struct()}, err
}

func (s TXOut) HasValueStore() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXOut) SetValueStore(v ValueStore) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValueStore sets the valueStore field to a newly
// allocated ValueStore struct, preferring placement in s's segment.
func (s TXOut) NewValueStore() (ValueStore, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewValueStore(s.Struct.Segment())
	if err != nil {
		return ValueStore{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// TXOut_List is a list of TXOut.
type TXOut_List struct{ capnp.List }

// NewTXOut creates a new list of TXOut.
func NewTXOut_List(s *capnp.Segment, sz int32) (TXOut_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TXOut_List{l}, err
}

func (s TXOut_List) At(i int) TXOut { return TXOut{s.List.Struct(i)} }

func (s TXOut_List) Set(i int, v TXOut) error { return s.List.SetStruct(i, v.Struct) }

func (s TXOut_List) String() string {
	str, _ := text.MarshalList(0xfb4425cca53d7224, s.List)
	return str
}

// TXOut_Promise is a wrapper for a TXOut promised by a client call.
type TXOut_Promise struct{ *capnp.Pipeline }

func (p TXOut_Promise) Struct() (TXOut, error) {
	s, err := p.Pipeline.Struct()
	return TXOut{s}, err
}

func (p TXOut_Promise) DataStore() DataStore_Promise {
	return DataStore_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p TXOut_Promise) ValueStore() ValueStore_Promise {
	return ValueStore_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Tx struct{ capnp.Struct }

// Tx_TypeID is the unique identifier for the type Tx.
const Tx_TypeID = 0x97ffa3012c4f6a3e

func NewTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return Tx{st}, err
}

func NewRootTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return Tx{st}, err
}

func ReadRootTx(msg *capnp.Message) (Tx, error) {
	root, err := msg.RootPtr()
	return Tx{root.Struct()}, err
}

func (s Tx) String() string {
	str, _ := text.Marshal(0x97ffa3012c4f6a3e, s.Struct)
	return str
}

func (s Tx) Vin() (TXIn_List, error) {
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return TXIn_List{}, err
	}
	l, err := p.ListDefault(x_b99093b7d2518300[1560:1584])
	return TXIn_List{List: l}, err
}

func (s Tx) HasVin() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Tx) SetVin(v TXIn_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVin sets the vin field to a newly
// allocated TXIn_List, preferring placement in s's segment.
func (s Tx) NewVin(n int32) (TXIn_List, error) {
	l, err := NewTXIn_List(s.Struct.Segment(), n)
	if err != nil {
		return TXIn_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Tx) Vout() (TXOut_List, error) {
	p, err := s.Struct.Ptr(1)
	if err != nil {
		return TXOut_List{}, err
	}
	l, err := p.ListDefault(x_b99093b7d2518300[1584:1608])
	return TXOut_List{List: l}, err
}

func (s Tx) HasVout() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Tx) SetVout(v TXOut_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewVout sets the vout field to a newly
// allocated TXOut_List, preferring placement in s's segment.
func (s Tx) NewVout(n int32) (TXOut_List, error) {
	l, err := NewTXOut_List(s.Struct.Segment(), n)
	if err != nil {
		return TXOut_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Tx) Fee0() uint32 {
	return s.Struct.Uint32(0)
}

func (s Tx) SetFee0(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Tx) Fee1() uint32 {
	return s.Struct.Uint32(4)
}

func (s Tx) SetFee1(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s Tx) Fee2() uint32 {
	return s.Struct.Uint32(8)
}

func (s Tx) SetFee2(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s Tx) Fee3() uint32 {
	return s.Struct.Uint32(12)
}

func (s Tx) SetFee3(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s Tx) Fee4() uint32 {
	return s.Struct.Uint32(16)
}

func (s Tx) SetFee4(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s Tx) Fee5() uint32 {
	return s.Struct.Uint32(20)
}

func (s Tx) SetFee5(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s Tx) Fee6() uint32 {
	return s.Struct.Uint32(24)
}

func (s Tx) SetFee6(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s Tx) Fee7() uint32 {
	return s.Struct.Uint32(28)
}

func (s Tx) SetFee7(v uint32) {
	s.Struct.SetUint32(28, v)
}

// Tx_List is a list of Tx.
type Tx_List struct{ capnp.List }

// NewTx creates a new list of Tx.
func NewTx_List(s *capnp.Segment, sz int32) (Tx_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return Tx_List{l}, err
}

func (s Tx_List) At(i int) Tx { return Tx{s.List.Struct(i)} }

func (s Tx_List) Set(i int, v Tx) error { return s.List.SetStruct(i, v.Struct) }

func (s Tx_List) String() string {
	str, _ := text.MarshalList(0x97ffa3012c4f6a3e, s.List)
	return str
}

// Tx_Promise is a wrapper for a Tx promised by a client call.
type Tx_Promise struct{ *capnp.Pipeline }

func (p Tx_Promise) Struct() (Tx, error) {
	s, err := p.Pipeline.Struct()
	return Tx{s}, err
}

const schema_b99093b7d2518300 = "x\xda\xcc\x97ml[W\x19\xc7\xcf\xff\\\xdb\xf7\xda" +
	"\x8dc;\xe7\x16m\xa2U\x9b\xaaE\xcd\xe8X^\x9c" +
	"6\xad\x12\xe2l\x8e\x14O\xae\xe6\xdb\xeb\x8d\x0c\xb5\xd2" +
	"\xac\xfa\xae\xf5\x9a8\xa9\xe3\xb4.Z5\xa12\xa9\x93" +
	"\xc6\xe8\xb4\x0d\x82TF'(b\x80`\x03&\xf6R" +
	"$6m\x10\xa4N\xdaP\xa7\x0d\xc4\x04B0D\xf9" +
	"\x00\x88/\xbc\xa9F\xcfs\xfc\x1a\xbb/|A\x93\xa2" +
	"\xe8>?\xff\xef\xb9\xcf=\xe7\xf9?\xe7\xdc\xc1\x15\x7f" +
	"B\x0e\xf9o\xf3\x0b\xe1\x8c\xfb\x03\xd5\xd5\x0f\x8e\xdc\xe7" +
	"\x9c]y\\\xc4\xfap\xe5\x94\xf3\x8b\x1f=q\xe6%" +
	"\xbf4\x85P'\xe5\xaf\xd4#|\xf5\xb0<.P\xdd" +
	"\xb1q\xec\xe8j\xfc\xd1\xa7:\x95\x03\xc6e5j\xd0" +
	"\xd5\x90A\xcaO>p\xd7\x0e|\xad\xfa%\xe1\xf4\xc1" +
	"\xd7.}\xc6\xf8\x96z\x96\xa4#\xe7\x8d]R\xa0\xfa" +
	"\xe8\xf8\x07_\x89?\xf1\x91\x15\x11\xebkH\x05F\x82" +
	"\x81-P7\x07L!\\;`\xc0\xdd\x1c\x90\x10\xa2" +
	"\xba\xf9\xc8\xd8\xdf^\xfc\xcd\x1d+\x9d98\x81\xdf\xa9" +
	"\x03\xa4W\xf7\x06(\x87;~\xf6\x9f\xef\x7fax\xe8" +
	"\\\xa72l^V7\x9bt\xb5\xde$\xe5-\xf9+" +
	"\xdfN|\xea\xd4\xb95\x19\x9c7\xfb\xa0^ \x9d\xfb" +
	"\x9ci\xc0\xbd`r\x06ONO\xbc{\xea\xaf\xf1o" +
	"\xacQ\xff\xd3\xdc\x02\x15\xb4H\xed\xb3\x0c\xb8Q\x8b\xd5" +
	"\x7f\x1a\xd8\xf9\xf4O\x1f;\xf1\xdd5\xea[\xada\xa8" +
	"\x09V\x8f\x91:\xa9\xd5g\x7f\x90\xdc\xff\xfe\x1f\xfd\xcf" +
	"w\xe6<e\xbd\xacR\xa4W\xd3\x16\xe5\xfc\xd5\x97\xff" +
	"\xf0\xc5\xbfl\x93\xaf\xd0\x0c7\xa5 \xc1\x1b\xd6\xbf\xd4" +
	"\xdb,}\xd3\xfa\x9e@\xf5c\xaf|\xfe\xe3\xfd\xe3\x7f" +
	"\xbeD\xd2PC\xca\xabu4xY\x9d\x0c\xd2b\x9c" +
	"\x08\xbe\xeb\x13\xa8~\xf4\xb1\xdd\xfe\xbf\x1b\xaf\xfd\x83\xb4" +
	"\xc1\xf6a_\xe8\xbd\xac^\xed%\xed\x8f{o#\xed" +
	"\xd6\xd2\xc4\xf9\x8b\xdb\x92\xffnKa\x1a\xa6\x14Bm" +
	"T\xaf\xa9m\x8an\xebW\x94n\xff;\x17\xce\xec]" +
	"}\xba\xbaf\x1a\x1eV[\xa0\x9e\"\x9d{F\x19p" +
	"\xcf*\x9e\x86\xdc\xe2\xe2\\\xe1`\xae,\x0b\x0b\xc5O" +
	"\x1c\xcc-\x16\x17\xf7$\xddt\xa1x\xc4\xf0J\x19\xc0" +
	"\xb1\x0c\x9f\x10>\x00\xb1\x81O\x0b\xe1l7\xe0\xc4%" +
	"b\x80\x0d\x82G\xf7\x08\xe1\xcc\x19p*\x12\xd5\xbc\x9b" +
	")y\xa9\xf9\x9c0\x0ey\x886'C\x00Q!2" +
	"!C\x04c\xc1\x90\xfe\x13r\xb2\\\x99\xc9-\x1dF" +
	"XH\x84\x85\x88!\xd4=\x9d\xecl\xaa\x98.D\x8a" +
	"G:\x12z\xa0KB\x13\x94\xd0\x98\x01')Q-" +
	"\xcf\xa6\x8a\x94\x92\x88\xcc\xe78\xa5\xc6R\xd6R\x02j" +
	"\x0f\xbef2\xa8'\x13Y\xdc\x93\xadP\x12\xdb\xebI" +
	"\xa8 \xb6P\x19\x82l\x83f\x1e\xaa\x1f\xb7\x08\xe1n" +
	" >\x06\x09H\x9b\xfe\xab\xdd\x8c\xe3\x84\x13$7`" +
	"\xc3\x00\xd4\x04\xf31\xe2I\xe2>i\xc3\x07\xa8)\xe6" +
	"\xe3\xc4g\x88\xfb\x0d\x1b~@M3O\x10O\x13\x0f" +
	"\xf8l\x04\x00\x95b\x9e$\x9e!n\xfam\x98\x80\xda" +
	"\xcb|\x86x\x96\xb8\x15\xb0a\x01\xcaa\x9e&>K" +
	"<h\xda\x08\x02\xean\xe6\x19\xe2\xfb!a\x1e+\x14" +
	"\xd1+\x901\x80h\xd3:\x02\xe8\xa5\xc92\x132r" +
	"la\xb9\xdc\x944\x0a\xb6!\xc9\x00\x91\xfb=o\x10" +
	"\x96\x90\xb0\x04\x07C\xad\xc1pk0\xd2\x1a\xc4[\x83" +
	"\xd1\xd6`gk\xb0\xab\x1e4\x16\xcehVQ\xde\xbb" +
	"?\xb7<WN\xea\x125s\x87\xbc\x0cp\xfd\"\xed" +
	"\xea\x8f\\9\xe7\x96\xcd\x85\x92\xb7\xa6\x1e\xef\xecR\x8f" +
	"'\xf7\x09\xe1<h\xc09\xcd\x06!gy%!\x04" +
	"\xa2\xcd\xdd@?:!\x1d_\xc8\x88M\x85Z\x130" +
	"\xaaK\x85C\xc5\\y\xb9$\xe0]\xd7*\xf7\xe4\xe6" +
	"\x96=7R\xeeL\xad\x9bw\x0f\x90Uf\x0d8y" +
	"\x89\xea\xb1v\xef6\x9aSmZ\x82\x10\xd6\xf5\x8d\xd2" +
	"m\xbe\xf9\x8dQ\xd2\xb3}c\xaf|\xf5\xe1\xeeY\xbb" +
	"|W\xcd\xf3\x1a\x83duW\xd8\x94\x9ao\x0cs\xd5" +
	"\xbe\xd0\xd9\x03&uG\xba\x81\xf9M\xd1\xd2\xcf\x18p" +
	"\xb2\xb5VDS!\x0c\xaf\x84hs\x7foN\x04\x10" +
	"\x0b\x87\xf4c\xf1?\xad\xba~\x9fI\xaf\xfe>NO" +
	"#\xaf\xe9\xdb\x85p\x12\x06\x9ctk^\xa5f^\xb5" +
	"\xbe\x14s>#\x84\x931\xe0\xec\x97x\xe8\xe0\xe1\\" +
	"\xa1\x98J6\xectp\xa1\xb8\xb4<\xef\xe5\xc5\xa6l" +
	"%\x95\xaft\xf2\xc9\xec\x8d\xb5r\xed\xbeH=\xcf\xd9" +
	"F\x17\xbdW\xde.\x84\x9b\x95\x06\xdc\xfb\xa4D\xbd\x89" +
	"\x1e\x90\xc3B\xb8\xb3\x84\xf3R\"&\xa1\xbb\xa8'\xef" +
	"\x14\xc2\xcd\x13_$\x1e\x90\xba\x8b\xce\xf30\x87\x89\x97" +
	"e\xad\xbbR\x17=\xca|\x8ex\x85\xb8\xaf\xd6EO" +
	"\xf08\x15\xe2\x9f#\xee\x97\xba\x8b~\x96\x9f\xfb \xf1" +
	"\xd3\xc4M\x9f\xee\xa2\x8f\xb0\xfe4\xf1'\x89[~\xdd" +
	"E\x1fg~\x86\xf8Y\xe2\xc1\x80\xee\xa2_f\xbeB" +
	"\xfc\xeb\xc4C\xa6\x8d\x10\xa0\x9ea~\x8e\xf8w\x88\xaf" +
	"\xb3l\xac\x03\xd4\xb3\xcc\xbfI\xfc\x87\xc4{\x826z" +
	"\x00\xf5<\xf3\xe7\x88_ \x1e\x0e\xd9\x08\x03\xea%\xe6" +
	"/\x12\x7f\x9dx\xef:\x1b\xbd\x80zUR\xf7\xbe@" +
	"|\x95x\xa4\xc7F\x04Po0\xff\x09\xf1\x8b\xc4\xa3" +
	"a\x1bQ@\xfd\x9c\xf9\xeb\xc4\xdf\"\x1e\xeb\xb5\xa9\\" +
	"\xd4\x9b\xccW\x89_\"\xde\x17\xb1\xd1\x07\xa8\xb7\x99_" +
	"$\xfe\x1eq\x15\xb5\xa1\x00\xf5\x0e\xf3\xb7\x88\xff\x9a\xb8" +
	"\x1d\xb3i%\xd5/\x99_\"\xfe[\xe2\xeb\xfbl\xac" +
	"\x07\xd4\xfb\xcc\xdf#\xfe{\xd9Yx\x9b\x0a\xc5\xbcW" +
	"i\xaf\xaa\xc2\xd2\xd2\xb2\x97\x9f*S\x0b\xad\xc9\x1e\xca" +
	"{\x8b\x0bK\x85r#.\xe5\x8eS\x8fn\xbf\xb1<" +
	"{\xd7r9\x95\xaf\xb4\xdc\xb8i\xe1x\xd1+\xb5\xcb" +
	"jc\x0d\xb5\xc8\xeal\xb8\x0b\x1b\xe9\xc2\xe2]\xd8h" +
	"\x17\xb6\xb3\x0b\xdb\xd5\xc2\xfe\xef\xdbe\xebN\xd2\xee\xd4" +
	"t\xc3\xa9~\xb2\xd2>Z\xb1\x9e\xba\xc3\xf8\x18\xc4\x8e" +
	"\xf1\x11\x8f\x12\xaf\x9fw\xc2\\\xa1=\xc4o\x92\xba\xdd" +
	"\x90Q\xd7\xb3<JxC\xdd\x90d\xd4\x8dr\x8f\x10" +
	"\xeeM\xc4\xb7\xb2!}\xda\xa8\xfd\xcc7\x10\xdf\xce\x86" +
	"\xf7k\xa3nc\xbe\x99\xf8\x0e6j@\x1bu\x80\xf9" +
	"V\xe2\x83lTS\x1b\xf5V\xe6\xdb\x89\xc7\xd9\xa8\x96" +
	"6\xea\x10\xf3\x1d\xc4\xc7\xd8\xa8Am\xd4Q\xe6\x83\xc4" +
	"\xc7\xd9\xa8!m\xd4\xdd\\\xb8q\xe2\x096\xea:m" +
	"\xd4\x09\xe6c\xc4\x93l\xd4\x1em\xd4)\xe6\xe3\xc4g" +
	"\xd8\xa8am\xd4i\xe6\x09\xe2i6j\xaf6j\x8a" +
	"y\x92x\x86\x8d\x1a\xd1F\xdd\xcb|\x86x\x96\x8d\x1a" +
	"\xd5Fu\x98\xa7\x89\xcf\xb2Qc\xda\xa8w3\xcf\x10" +
	"\xdf\xdf\xcd`\xc7\xe8\xc0\xd0\xa8\x83\x1b\xb3\xc8$\xdf\xd4" +
	"\xa8E\x1d\x0e\xb7\x87#\xeda\xbc=\x1cm\x0fw\xb6" +
	"\x87\xbb>\x0c\xf5\x9f\xa5\xa9\x10\xb5M\xbe\xa7Z\xf5\xd1" +
	"\x81``_s\x97\x0f\xe3J\xd5\xe6c\xc2\x10\xed\xfd" +
	"\x83\x06\x9cq:\xe1\xf1\xd9p\x81\xf7\xedh\xf3\x0b\x9a" +
	"wyT\xf9\xfd\xdc\xf2\x820J\xf4s\xe3\xb3\xb9\xf6" +
	"\xf3\xb5\x8f,\xe9B\xd1\xd4\xdf@\xd7??\xfc7\x00" +
	"\x00\xff\xff\xca\xc5<e"

func init() {
	schemas.Register(schema_b99093b7d2518300,
		0x91989c51606be6c8,
		0x958c34c871381d2c,
		0x97ffa3012c4f6a3e,
		0x981693349de63c8c,
		0x9843dfb8f1386b20,
		0xa031328fb2fcc743,
		0xa0835740abfe642a,
		0xa634f083d73d4594,
		0xae798ec69e3629e9,
		0xb105e7dd5c44b39c,
		0xbb0225ef96e5ba9f,
		0xd4eb3c212b8dbb26,
		0xf8c203f305398e1b,
		0xfb4425cca53d7224,
		0xff9ec84d90bcd521)
}

var x_b99093b7d2518300 = []byte{
	0, 0, 0, 0, 17, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 10, 0, 3, 0,
	65, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 12, 0, 0, 0,
	0, 0, 0, 0, 9, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 1, 0, 1, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 17, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 17, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 10, 0, 3, 0,
	65, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 10, 0, 3, 0,
	65, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 12, 0, 0, 0,
	0, 0, 0, 0, 9, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 12, 0, 0, 0,
	0, 0, 0, 0, 9, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 1, 0, 1, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 1, 0, 1, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 0, 0,
	1, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 2, 0, 0, 0,
	1, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
}
