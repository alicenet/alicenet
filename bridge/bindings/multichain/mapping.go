// Generated by custom bridge script. DO NOT EDIT.

package multichain

var FunctionMapping = map[[4]byte]string{
	{0, 0, 0, 0}:         "transfer()",
	{96, 128, 96, 64}:    "deploy()",
	{105, 115, 105, 76}:  "AliceNetFactory.addNewExternalContract(bytes32,address)",
	{18, 230, 191, 106}:  "AliceNetFactory.callAny(address,uint256,bytes)",
	{108, 15, 121, 182}:  "AliceNetFactory.contracts()",
	{39, 254, 24, 34}:    "AliceNetFactory.deployCreate(bytes)",
	{86, 242, 167, 97}:   "AliceNetFactory.deployCreate2(uint256,bytes32,bytes)",
	{197, 108, 169, 237}: "AliceNetFactory.deployCreateAndRegister(bytes,bytes32)",
	{57, 202, 180, 114}:  "AliceNetFactory.deployProxy(bytes32)",
	{184, 168, 115, 44}:  "AliceNetFactory.getALCAAddress()",
	{169, 198, 226, 204}: "AliceNetFactory.getALCACreationCodeHash()",
	{170, 241, 15, 66}:   "AliceNetFactory.getImplementation()",
	{134, 83, 164, 101}:  "AliceNetFactory.getMetamorphicContractAddress(bytes32,address)",
	{207, 225, 11, 48}:   "AliceNetFactory.getNumContracts()",
	{32, 78, 28, 122}:    "AliceNetFactory.getProxyImplementation(address)",
	{225, 215, 168, 228}: "AliceNetFactory.initializeContract(address,bytes)",
	{243, 158, 193, 247}: "AliceNetFactory.lookup(bytes32)",
	{36, 52, 2, 59}:      "AliceNetFactory.multiCall(tuple[])",
	{141, 165, 203, 91}:  "AliceNetFactory.owner()",
	{19, 175, 64, 53}:    "AliceNetFactory.setOwner(address)",
	{4, 60, 148, 20}:     "AliceNetFactory.upgradeProxy(bytes32,address,bytes)",
	{2, 4, 223, 253}:     "LightSnapshots.checkBClaimsSignature(bytes,bytes)",
	{255, 7, 252, 14}:    "LightSnapshots.getAliceNetHeightFromLatestSnapshot()",
	{197, 232, 253, 225}: "LightSnapshots.getAliceNetHeightFromSnapshot(uint256)",
	{194, 234, 102, 3}:   "LightSnapshots.getBlockClaimsFromLatestSnapshot()",
	{69, 223, 197, 153}:  "LightSnapshots.getBlockClaimsFromSnapshot(uint256)",
	{52, 8, 228, 112}:    "LightSnapshots.getChainId()",
	{217, 193, 22, 87}:   "LightSnapshots.getChainIdFromLatestSnapshot()",
	{25, 247, 70, 105}:   "LightSnapshots.getChainIdFromSnapshot(uint256)",
	{2, 108, 43, 126}:    "LightSnapshots.getCommittedHeightFromLatestSnapshot()",
	{225, 140, 105, 122}: "LightSnapshots.getCommittedHeightFromSnapshot(uint256)",
	{117, 121, 145, 168}: "LightSnapshots.getEpoch()",
	{46, 238, 48, 206}:   "LightSnapshots.getEpochFromHeight(uint256)",
	{207, 232, 167, 59}:  "LightSnapshots.getEpochLength()",
	{213, 24, 242, 67}:   "LightSnapshots.getLatestSnapshot()",
	{134, 83, 164, 101}:  "LightSnapshots.getMetamorphicContractAddress(bytes32,address)",
	{66, 67, 141, 123}:   "LightSnapshots.getMinimumIntervalBetweenSnapshots()",
	{118, 241, 10, 208}:  "LightSnapshots.getSnapshot(uint256)",
	{209, 127, 204, 86}:  "LightSnapshots.getSnapshotDesperationDelay()",
	{124, 196, 204, 230}: "LightSnapshots.getSnapshotDesperationFactor()",
	{62, 204, 15, 94}:    "LightSnapshots.initialize(uint32,uint32)",
	{40, 204, 170, 41}:   "LightSnapshots.isMock()",
	{192, 232, 62, 129}:  "LightSnapshots.isValidatorElectedToPerformSnapshot(address,uint256,bytes32)",
	{244, 95, 162, 70}:   "LightSnapshots.mayValidatorSnapshot(uint256,uint256,uint256,bytes32,uint256)",
	{174, 39, 40, 234}:   "LightSnapshots.migrateSnapshots(bytes[],bytes[])",
	{255, 145, 75, 30}:   "LightSnapshots.setCommittedHeightFromLatestSnapshot(uint256)",
	{222, 177, 229, 110}: "LightSnapshots.setEpochLength(uint32)",
	{235, 124, 122, 254}: "LightSnapshots.setMinimumIntervalBetweenSnapshots(uint32)",
	{194, 232, 254, 242}: "LightSnapshots.setSnapshotDesperationDelay(uint32)",
	{63, 167, 161, 173}:  "LightSnapshots.setSnapshotDesperationFactor(uint32)",
	{8, 202, 31, 37}:     "LightSnapshots.snapshot(bytes,bytes)",
	{32, 216, 161, 6}:    "LightSnapshots.snapshotWithValidData(bytes,bytes)"}
