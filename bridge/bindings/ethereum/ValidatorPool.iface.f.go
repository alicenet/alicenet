// Generated by ifacemaker. DO NOT EDIT.

package ethereum

import (
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// IValidatorPoolFilterer ...
type IValidatorPoolFilterer interface {
	// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
	//
	// Solidity: event Initialized(uint8 version)
	FilterInitialized(opts *bind.FilterOpts) (*ValidatorPoolInitializedIterator, error)
	// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
	//
	// Solidity: event Initialized(uint8 version)
	WatchInitialized(opts *bind.WatchOpts, sink chan<- *ValidatorPoolInitialized) (event.Subscription, error)
	// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
	//
	// Solidity: event Initialized(uint8 version)
	ParseInitialized(log types.Log) (*ValidatorPoolInitialized, error)
	// FilterMaintenanceScheduled is a free log retrieval operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
	//
	// Solidity: event MaintenanceScheduled()
	FilterMaintenanceScheduled(opts *bind.FilterOpts) (*ValidatorPoolMaintenanceScheduledIterator, error)
	// WatchMaintenanceScheduled is a free log subscription operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
	//
	// Solidity: event MaintenanceScheduled()
	WatchMaintenanceScheduled(opts *bind.WatchOpts, sink chan<- *ValidatorPoolMaintenanceScheduled) (event.Subscription, error)
	// ParseMaintenanceScheduled is a log parse operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
	//
	// Solidity: event MaintenanceScheduled()
	ParseMaintenanceScheduled(log types.Log) (*ValidatorPoolMaintenanceScheduled, error)
	// FilterValidatorJoined is a free log retrieval operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
	//
	// Solidity: event ValidatorJoined(address indexed account, uint256 validatorStakingTokenID)
	FilterValidatorJoined(opts *bind.FilterOpts, account []common.Address) (*ValidatorPoolValidatorJoinedIterator, error)
	// WatchValidatorJoined is a free log subscription operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
	//
	// Solidity: event ValidatorJoined(address indexed account, uint256 validatorStakingTokenID)
	WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ValidatorPoolValidatorJoined, account []common.Address) (event.Subscription, error)
	// ParseValidatorJoined is a log parse operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
	//
	// Solidity: event ValidatorJoined(address indexed account, uint256 validatorStakingTokenID)
	ParseValidatorJoined(log types.Log) (*ValidatorPoolValidatorJoined, error)
	// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
	//
	// Solidity: event ValidatorLeft(address indexed account, uint256 publicStakingTokenID)
	FilterValidatorLeft(opts *bind.FilterOpts, account []common.Address) (*ValidatorPoolValidatorLeftIterator, error)
	// WatchValidatorLeft is a free log subscription operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
	//
	// Solidity: event ValidatorLeft(address indexed account, uint256 publicStakingTokenID)
	WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ValidatorPoolValidatorLeft, account []common.Address) (event.Subscription, error)
	// ParseValidatorLeft is a log parse operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
	//
	// Solidity: event ValidatorLeft(address indexed account, uint256 publicStakingTokenID)
	ParseValidatorLeft(log types.Log) (*ValidatorPoolValidatorLeft, error)
	// FilterValidatorMajorSlashed is a free log retrieval operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
	//
	// Solidity: event ValidatorMajorSlashed(address indexed account)
	FilterValidatorMajorSlashed(opts *bind.FilterOpts, account []common.Address) (*ValidatorPoolValidatorMajorSlashedIterator, error)
	// WatchValidatorMajorSlashed is a free log subscription operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
	//
	// Solidity: event ValidatorMajorSlashed(address indexed account)
	WatchValidatorMajorSlashed(opts *bind.WatchOpts, sink chan<- *ValidatorPoolValidatorMajorSlashed, account []common.Address) (event.Subscription, error)
	// ParseValidatorMajorSlashed is a log parse operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
	//
	// Solidity: event ValidatorMajorSlashed(address indexed account)
	ParseValidatorMajorSlashed(log types.Log) (*ValidatorPoolValidatorMajorSlashed, error)
	// FilterValidatorMinorSlashed is a free log retrieval operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
	//
	// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 publicStakingTokenID)
	FilterValidatorMinorSlashed(opts *bind.FilterOpts, account []common.Address) (*ValidatorPoolValidatorMinorSlashedIterator, error)
	// WatchValidatorMinorSlashed is a free log subscription operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
	//
	// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 publicStakingTokenID)
	WatchValidatorMinorSlashed(opts *bind.WatchOpts, sink chan<- *ValidatorPoolValidatorMinorSlashed, account []common.Address) (event.Subscription, error)
	// ParseValidatorMinorSlashed is a log parse operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
	//
	// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 publicStakingTokenID)
	ParseValidatorMinorSlashed(log types.Log) (*ValidatorPoolValidatorMinorSlashed, error)
}
