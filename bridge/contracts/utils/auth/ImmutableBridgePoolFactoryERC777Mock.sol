// This file is auto-generated by hardhat generate-immutable-auth-contract task. DO NOT EDIT.
// SPDX-License-Identifier: MIT-open-group
pragma solidity ^0.8.16;

import "contracts/utils/DeterministicAddress.sol";
import "contracts/utils/auth/ImmutableFactory.sol";

abstract contract ImmutableBridgePoolFactoryERC777Mock is ImmutableFactory {
    address private immutable _bridgePoolFactoryERC777Mock;
    error OnlyBridgePoolFactoryERC777Mock(address sender, address expected);

    modifier onlyBridgePoolFactoryERC777Mock() {
        if (msg.sender != _bridgePoolFactoryERC777Mock) {
            revert OnlyBridgePoolFactoryERC777Mock(msg.sender, _bridgePoolFactoryERC777Mock);
        }
        _;
    }

    constructor() {
        _bridgePoolFactoryERC777Mock = getMetamorphicContractAddress(
            0x427269646765506f6f6c466163746f7279000000000000000000000000000000,
            _factoryAddress()
        );
    }

    function _bridgePoolFactoryERC777MockAddress() internal view returns (address) {
        return _bridgePoolFactoryERC777Mock;
    }

    function _saltForBridgePoolFactoryERC777Mock() internal pure returns (bytes32) {
        return 0x427269646765506f6f6c466163746f7279000000000000000000000000000000;
    }
}
