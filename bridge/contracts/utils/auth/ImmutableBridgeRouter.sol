// This file is auto-generated by hardhat generate-immutable-auth-contract task. DO NOT EDIT.
// SPDX-License-Identifier: MIT-open-group
pragma solidity ^0.8.16;

import "contracts/utils/DeterministicAddress.sol";
import "contracts/utils/auth/ImmutableFactory.sol";
abstract contract ImmutableBridgeRouter is ImmutableFactory {
    address private immutable _bridgeRouter;
    error OnlyBridgeRouter(address sender, address expected);

    modifier onlyBridgeRouter() {
        if (msg.sender != _bridgeRouter) {
            revert OnlyBridgeRouter(msg.sender, _bridgeRouter);
        }
        _;
    }

    constructor() {
        _bridgeRouter = getMetamorphicContractAddress(
            0x427269646765526f757465720000000000000000000000000000000000000000,
            _factoryAddress()
        );
    }

    function _bridgeRouterAddress() internal view returns (address) {
        return _bridgeRouter;
    }

    function _saltForBridgeRouter() internal pure returns (bytes32) {
        return 0x427269646765526f757465720000000000000000000000000000000000000000;
    }
}