// This file is auto-generated by hardhat generate-immutable-auth-contract task. DO NOT EDIT.
// SPDX-License-Identifier: MIT-open-group
pragma solidity ^0.8.11;

import "contracts/utils/DeterministicAddress.sol";

abstract contract ImmutableFactory is DeterministicAddress {
    address private immutable _factory;
    error OnlyFactory(address sender, address expected);

    modifier onlyFactory() {
      if (msg.sender != _factory) {
        revert OnlyFactory(msg.sender, _factory);
      }
      _;
  }

    constructor(address factory_) {
        _factory = factory_;
    }

    function _factoryAddress() internal view returns (address) {
        return _factory;
    }

}

abstract contract ImmutableGovernance is ImmutableFactory {

    address private immutable _governance;
    error OnlyGovernance(address sender, address expected);

    modifier onlyGovernance() {
        if (msg.sender != _governance) {
          revert OnlyGovernance(msg.sender, _governance);
        }
        _;
    }

    constructor() {
        _governance = getMetamorphicContractAddress(0x476f7665726e616e636500000000000000000000000000000000000000000000, _factoryAddress());
    }

    function _governanceAddress() internal view returns(address) {
        return _governance;
    }

    function _saltForGovernance() internal pure returns(bytes32) {
        return 0x476f7665726e616e636500000000000000000000000000000000000000000000;
    }
}
    
abstract contract ImmutableCallAny is ImmutableFactory {

    address private immutable _callAny;
    error OnlyCallAny(address sender, address expected);

    modifier onlyCallAny() {
        if (msg.sender != _callAny) {
          revert OnlyCallAny(msg.sender, _callAny);
        }
        _;
    }

    constructor() {
        _callAny = getMetamorphicContractAddress(0x43616c6c416e7900000000000000000000000000000000000000000000000000, _factoryAddress());
    }

    function _callAnyAddress() internal view returns(address) {
        return _callAny;
    }

    function _saltForCallAny() internal pure returns(bytes32) {
        return 0x43616c6c416e7900000000000000000000000000000000000000000000000000;
    }
}
    