// SPDX-License-Identifier: MIT-open-group
pragma solidity ^0.8.11;

library ETHDKGErrorCodes {
    // ETHDKG error codes
    bytes32 internal constant ETHDKG_ONLY_VALIDATORS_ALLOWED = "100"; //"ETHDKG: Only validators allowed!"
    bytes32 internal constant ETHDKG_VARIABLE_CANNOT_BE_SET_WHILE_RUNNING = "101"; //"ETHDKG: This variable cannot be set if an ETHDKG round is running!"
    bytes32 internal constant ETHDKG_MIN_VALIDATORS_NOT_MET = "102"; //"ETHDKG: Minimum number of validators staked not met!"
    bytes32 internal constant ETHDKG_NOT_IN_POST_REGISTRATION_PHASE = "103"; //"ETHDKG: should be in post-registration accusation phase!"
    bytes32 internal constant ETHDKG_ACCUSED_NOT_VALIDATOR = "104"; //"ETHDKG: Dispute Failed! Dishonest Address is not a validator at the moment!"
    bytes32 internal constant ETHDKG_ACCUSED_PARTICIPATING_IN_ROUND = "105"; //"ETHDKG: Dispute failed! dishonestParticipant is participating in this ETHDKG round!"
    bytes32 internal constant ETHDKG_NOT_IN_POST_SHARED_DISTRIBUTION_PHASE = "106"; // "ETHDKG: should be in post-ShareDistribution accusation phase!"
    bytes32 internal constant ETHDKG_ACCUSED_NOT_PARTICIPATING_IN_ROUND = "107"; //"ETHDKG: Dispute failed! Dishonest Participant is not participating in this ETHDKG round!"
    bytes32 internal constant ETHDKG_ACCUSED_DISTRIBUTED_SHARES_IN_ROUND = "108"; //"ETHDKG: Dispute failed! Supposed dishonest participant distributed its share in this ETHDKG round!"
    bytes32 internal constant ETHDKG_ACCUSED_HAS_COMMITMENTS = "109"; //"ETHDKG: Dispute failed! It looks like the supposed dishonest participant had commitments! "
    bytes32 internal constant ETHDKG_NOT_IN_DISPUTE_PHASE = "110"; // "ETHDKG: Dispute failed! Contract is not in dispute phase!"
    bytes32 internal constant ETHDKG_DISPUTER_NOT_PARTICIPATING_IN_ROUND = "111"; // "ETHDKG: Dispute failed! Disputer is not participating in this ETHDKG round!"
    bytes32 internal constant ETHDKG_ACCUSED_DID_NOT_DISTRIBUTE_SHARES_IN_ROUND = "112"; // "ETHDKG: Dispute failed! dishonestParticipant did not distribute shares!"
    bytes32 internal constant ETHDKG_DISPUTER_DID_NOT_DISTRIBUTE_SHARES_IN_ROUND = "113"; // "ETHDKG: Dispute failed! Disputer did not distribute shares!"
    bytes32 internal constant ETHDKG_SHARES_AND_COMMITMENTS_MISMATCH = "114"; //  "ETHDKG: Dispute failed! Submitted commitments and encrypted shares don't match!"
    bytes32 internal constant ETHDKG_INVALID_KEY_OR_PROOF = "115"; // "ETHDKG: Dispute failed! Invalid shared key or proof!"
    bytes32 internal constant ETHDKG_NOT_IN_POST_KEYSHARE_SUBMISSION_PHASE = "116"; // "ETHDKG: Dispute failed! Should be in post-KeyShareSubmission phase!"
    bytes32 internal constant ETHDKG_ACCUSED_SUBMITTED_SHARES_IN_ROUND = "117"; // "ETHDKG: Dispute failed! Dishonest participant submitted its key shares in this ETHDKG round!"
    bytes32 internal constant ETHDKG_NOT_IN_POST_GPKJ_SUBMISSION_PHASE = "118"; // "ETHDKG: Dispute Failed! Should be in post-GPKJSubmission phase!"
    bytes32 internal constant ETHDKG_ACCUSED_DID_NOT_PARTICIPATE_IN_GPKJ_SUBMISSION = "120"; // "ETHDKG: Dispute failed! Dishonest participant did participate in this GPKj submission!"
    bytes32 internal constant ETHDKG_ACCUSED_DISTRIBUTED_GPKJ = "121"; //  "ETHDKG: Dispute failed! It looks like the dishonestParticipant distributed its GPKJ!"
    bytes32 internal constant ETHDKG_ACCUSED_DID_NOT_SUBMIT_GPKJ_IN_ROUND = "122"; // "ETHDKG: Dispute Failed! Dishonest participant didn't submit his GPKJ for this round!"
    bytes32 internal constant ETHDKG_DISPUTER_DID_NOT_SUBMIT_GPKJ_IN_ROUND = "123"; // "ETHDKG: Dispute Failed! Disputer didn't submit his GPKJ for this round!"
    bytes32 internal constant ETHDKG_INVALID_ARGS = "124"; // "ETHDKG: Dispute Failed! Invalid submission of arguments!"
    bytes32 internal constant ETHDKG_INVALID_COMMITMENTS = "125"; // "ETHDKG: Dispute Failed! Invalid number of commitments provided!"
    bytes32 internal constant ETHDKG_INVALID_OR_DUPLICATED_PARTICIPANT = "126"; // "ETHDKG: Dispute Failed! Invalid or duplicated participant address!"
    bytes32 internal constant ETHDKG_INVALID_SHARES_OR_COMMITMENTS = "127"; // "ETHDKG: Dispute Failed! Invalid shares or commitments!"
    bytes32 internal constant ETHDKG_NOT_IN_REGISTRATION_PHASE = "128"; //  "ETHDKG: Cannot register at the moment"
    bytes32 internal constant ETHDKG_PUBLIC_KEY_ZERO = "130"; // "ETHDKG: Registration failed - pubKey should be different from 0!"
    bytes32 internal constant ETHDKG_PUBLIC_KEY_NOT_ON_CURVE = "131"; // "ETHDKG: Registration failed - public key not on elliptic curve!"
    bytes32 internal constant ETHDKG_PARTICIPANT_PARTICIPATING_IN_ROUND = "132"; // "ETHDKG: Participant is already participating in this ETHDKG round!"
    bytes32 internal constant ETHDKG_NOT_IN_SHARED_DISTRIBUTION_PHASE = "133"; // "ETHDKG: cannot participate on this phase"
    bytes32 internal constant ETHDKG_INVALID_NONCE = "134"; // "ETHDKG: Share distribution failed, participant with invalid nonce!"
    bytes32 internal constant ETHDKG_PARTICIPANT_DISTRIBUTED_SHARES_IN_ROUND = "135"; // "ETHDKG: Participant already distributed shares this ETHDKG round!"
    bytes32 internal constant ETHDKG_INVALID_NUM_ENCRYPTED_SHARES = "136"; // "ETHDKG: Share distribution failed - invalid number of encrypted shares provided!"
    bytes32 internal constant ETHDKG_INVALID_NUM_COMMITMENTS = "137"; // "ETHDKG: Key sharing failed - invalid number of commitments provided!"
    bytes32 internal constant ETHDKG_COMMITMENT_NOT_ON_CURVE = "138"; // "ETHDKG: Key sharing failed - commitment not on elliptic curve!"
    bytes32 internal constant ETHDKG_COMMITMENT_ZERO = "138"; // "ETHDKG: Commitments shouldn't be 0!"
    bytes32 internal constant ETHDKG_DISTRIBUTED_SHARE_HASH_ZERO = "139"; // "ETHDKG: The hash of encryptedShares and commitments should be different from 0!"
    bytes32 internal constant ETHDKG_NOT_IN_KEYSHARE_SUBMISSION_PHASE = "140"; // "ETHDKG: cannot participate on key share submission phase"
    bytes32 internal constant ETHDKG_PARTICIPANT_SUBMITTED_KEYSHARES_IN_ROUND = "141"; // "ETHDKG: Participant already submitted key shares this ETHDKG round!"
    bytes32 internal constant ETHDKG_INVALID_KEYSHARE_G1 = "141"; //"ETHDKG: Key share submission failed - invalid key share G1!"
    bytes32 internal constant ETHDKG_INVALID_KEYSHARE_G2 = "142"; //"ETHDKG: Key share submission failed - invalid key share G2!"
    bytes32 internal constant ETHDKG_NOT_IN_MASTER_PUBLIC_KEY_SUBMISSION_PHASE = "143"; // "ETHDKG: cannot participate on master public key submission phase"
    bytes32 internal constant ETHDKG_MASTER_PUBLIC_KEY_PAIRING_CHECK_FAILURE = "144"; // "ETHDKG: Master key submission pairing check failed!"
    bytes32 internal constant ETHDKG_NOT_IN_GPKJ_SUBMISSION_PHASE = "145"; // "ETHDKG: Not in GPKJ submission phase"
    bytes32 internal constant ETHDKG_PARTICIPANT_SUBMITTED_GPKJ_IN_ROUND = "146"; // "ETHDKG: Participant already submitted GPKj this ETHDKG round!"
    bytes32 internal constant ETHDKG_GPKJ_ZERO = "147"; // "ETHDKG: GPKj cannot be all zeros!"
    bytes32 internal constant ETHDKG_NOT_IN_POST_GPKJ_DISPUTE_PHASE = "148"; // "ETHDKG: should be in post-GPKJDispute phase!"
    bytes32 internal constant ETHDKG_REQUISITES_INCOMPLETE = "149"; //  "ETHDKG: Not all requisites to complete this ETHDKG round were completed!"
    bytes32 internal constant ETHDKG_KEYSHARE_PHASE_INVALID_NONCE = "150"; // "ETHDKG: Key share submission failed, participant with invalid nonce!"
    bytes32 internal constant ETHDKG_MIGRATION_INVALID_NONCE = "151"; // "ETHDKG: Only can execute this with nonce 0!"
    bytes32 internal constant ETHDKG_MIGRATION_INPUT_DATA_MISMATCH = "152"; // "ETHDKG: All input data length should match!"
}
